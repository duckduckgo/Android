/*
 * Copyright (c) 2023 DuckDuckGo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.duckduckgo.autofill.impl.ui.credential.passwordgeneration

import com.duckduckgo.autofill.api.domain.app.LoginCredentials
import com.duckduckgo.autofill.impl.ui.credential.passwordgeneration.Actions.DeleteAutoLogin
import com.duckduckgo.autofill.impl.ui.credential.passwordgeneration.Actions.DiscardAutoLoginId
import com.duckduckgo.autofill.impl.ui.credential.passwordgeneration.Actions.PromptToSave
import com.duckduckgo.autofill.impl.ui.credential.passwordgeneration.Actions.SilentlySave
import com.duckduckgo.autofill.impl.ui.credential.passwordgeneration.Actions.UpdateSavedAutoLogin
import com.duckduckgo.di.scopes.FragmentScope
import com.squareup.anvil.annotations.ContributesBinding
import javax.inject.Inject

interface AutogeneratedPasswordEventResolver {
    fun decide(
        autoSavedLogin: LoginCredentials?,
        autogenerated: Boolean,
    ): List<Actions>
}

sealed interface Actions {
    object PromptToSave : Actions
    object SilentlySave : Actions
    data class UpdateSavedAutoLogin(val autologinId: Long) : Actions
    data class DeleteAutoLogin(val autologinId: Long) : Actions
    object DiscardAutoLoginId : Actions
}

@ContributesBinding(FragmentScope::class)
class PasswordEventResolver @Inject constructor() : AutogeneratedPasswordEventResolver {

    override fun decide(
        autoSavedLogin: LoginCredentials?,
        autogenerated: Boolean,
    ): List<Actions> {
        val outcomes = mutableListOf<Actions>()
        val autoSavedLoginId = autoSavedLogin?.id

        if (autoSavedLoginId == null && !autogenerated) {
            outcomes.add(PromptToSave)
            outcomes.add(DiscardAutoLoginId)
        } else if (autoSavedLoginId == null) {
            outcomes.add(SilentlySave)
        } else if (!autogenerated) {
            outcomes.add(DeleteAutoLogin(autoSavedLoginId))
            outcomes.add(DiscardAutoLoginId)
            outcomes.add(PromptToSave)
        } else {
            outcomes.add(UpdateSavedAutoLogin(autoSavedLoginId))
        }

        return outcomes
    }
}
