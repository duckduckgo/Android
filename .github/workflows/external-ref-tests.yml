name: External Reference Tests

on:
  workflow_dispatch:
    inputs:
      branchName:
        description: 'Branch to pull reference tests from the reference tests repo'
        type: string
        required: true
        default: 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit_tests:
    name: External reference tests unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install copy-files-from-to
        run: npm install -g copy-files-from-to

      - name: Install package
        run: npm install "https://github.com/duckduckgo/privacy-reference-tests#${{ inputs.branchName }}" --save

      - name: Copy files
        run: copy-files-from-to

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: JVM tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jvm_tests

      - name: Bundle the JVM checks report
        if: always()
        run: find . -type d -name 'reports' | zip -@ -r unit-tests-report.zip

      - name: Upload the JVM checks report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-report
          path: unit-tests-report.zip

  android_tests:
    runs-on: ubuntu-latest
    name: External reference tests android tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup jq
        uses: dcarbone/install-jq-action@v1.0.1
        with:
          force: true

      - name: Install copy-files-from-to
        run: npm install -g copy-files-from-to

      - name: Install package
        run: npm install "https://github.com/duckduckgo/privacy-reference-tests#${{ inputs.branchName }}" --save

      - name: Copy files
        run: copy-files-from-to

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Decode secret
        env:
          FLANK: ${{ secrets.FLANK }}
        run: echo $FLANK > flank.json

      - name: Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: androidTestsBuild

      - name: Run Android Tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: runFlankAndroidTests

      - name: Bundle the Android CI tests report
        if: always()
        run: find . -type d -name 'fladleResults' | zip -@ -r android-tests-report.zip

      - name: Generate json file with failures
        if: ${{ failure() }}
        run: cat build/fladle/fladleResults/HtmlErrorReport.html | cut -d\`  -f2 >> results.json

      - name: Print failure report
        if: ${{ failure() }}
        run: |
          jq -r '.[] | .label as $id | .items[] | "Test:", $id, "Failure:", .label, "URL:", .url, "\n"' results.json  

      - name: Upload the Android CI tests report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-tests-report
          path: android-tests-report.zip

