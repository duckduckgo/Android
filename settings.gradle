plugins {
    id("de.fayard.refreshVersions") version "0.40.1"
}

include ':browser-api'
include ':vpn'
include ':vpn-store'
include ':vpn-api'
include ':vpn-internal'
include ':di'
include ':app'
include ':statistics'
include ':common'
include ':common-ui'
include ':app-store'
include ':appbuildconfig-api'
include ':common-test'

"feature-toggles".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
}

"privacy-config".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"remote-messaging".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"voice-search".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"downloads".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"traces".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
}

"anrs".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"macos".with {
    include ":$it-api"; project(":$it-api").projectDir = new File("modules/$it/$it-api")
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"bandwidth".with {
    include ":$it-impl"; project(":$it-impl").projectDir = new File("modules/$it/$it-impl")
    include ":$it-store"; project(":$it-store").projectDir = new File("modules/$it/$it-store")
}

"anvil".with {
    include ":$it-compiler"; project(":$it-compiler").projectDir = new File("modules/$it/$it-compiler")
    include ":$it-annotations"; project(":$it-annotations").projectDir = new File("modules/$it/$it-annotations")
}


rootProject.children.each { subproject ->

    if (subproject.name == "vpn") {
        subproject.buildFileName = "${subproject.name}-build.gradle"
    }
}


buildCache {

    def getFile = { dir, filename ->
        File file = new File("$dir$File.separator$filename")
        file?.exists() ? file : null
    }

    def getLocalProperties = { dir ->
        def file = getFile(dir, "local.properties")
        if (!file) {
            return null
        }

        Properties properties = new Properties()
        properties.load(file.newInputStream())
        return properties
    }

    local {
        def properties = getLocalProperties(rootDir)
        if (properties != null) {
            enabled = "true" == properties.getProperty("local.build.cache", "true")
        } else {
            enabled = true
        }
        // configure local build cache directory so that it is local to the project dir
        directory = new File(rootDir, 'build-cache')
        removeUnusedEntriesAfterDays = 7
    }
}
