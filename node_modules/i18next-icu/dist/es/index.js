function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import * as utils from './utils.js';
import IntlMessageFormat from 'intl-messageformat';

function getDefaults() {
  return {
    memoize: true,
    memoizeFallback: false,
    bindI18n: '',
    bindI18nStore: '',
    parseErrorHandler: function parseErrorHandler(err, key, res, options) {
      return res;
    }
  };
}

var ICU = /*#__PURE__*/function () {
  function ICU(options) {
    _classCallCheck(this, ICU);

    this.type = 'i18nFormat';
    this.mem = {};
    this.init(null, options);
  }

  _createClass(ICU, [{
    key: "init",
    value: function init(i18next, options) {
      var _this = this;

      var i18nextOptions = i18next && i18next.options && i18next.options.i18nFormat || {};
      this.options = utils.defaults(i18nextOptions, options, this.options || {}, getDefaults());
      this.formats = this.options.formats;

      if (i18next) {
        var _this$options = this.options,
            bindI18n = _this$options.bindI18n,
            bindI18nStore = _this$options.bindI18nStore,
            memoize = _this$options.memoize;
        i18next.IntlMessageFormat = IntlMessageFormat;
        i18next.ICU = this;

        if (memoize) {
          if (bindI18n) {
            i18next.on(bindI18n, function () {
              return _this.clearCache();
            });
          }

          if (bindI18nStore) {
            i18next.store.on(bindI18nStore, function () {
              return _this.clearCache();
            });
          }
        }
      }
    }
  }, {
    key: "addUserDefinedFormats",
    value: function addUserDefinedFormats(formats) {
      this.formats = this.formats ? _objectSpread(_objectSpread({}, this.formats), formats) : formats;
    }
  }, {
    key: "parse",
    value: function parse(res, options, lng, ns, key, info) {
      var hadSuccessfulLookup = info && info.resolved && info.resolved.res;
      var memKey = this.options.memoize && "".concat(lng, ".").concat(ns, ".").concat(key.replace(/\./g, '###'));
      var fc;

      if (this.options.memoize) {
        fc = utils.getPath(this.mem, memKey);
      }

      try {
        if (!fc) {
          // without ignoreTag, react-i18next <Trans> translations with <0></0> placeholders
          // will fail to parse, as IntlMessageFormat expects them to be defined in the
          // options passed to fc.format() as { 0: (children) => string }
          // but the replacement of placeholders is done in react-i18next
          fc = new IntlMessageFormat(res, lng, this.formats, {
            ignoreTag: true
          });
          if (this.options.memoize && (this.options.memoizeFallback || !info || hadSuccessfulLookup)) utils.setPath(this.mem, memKey, fc);
        }

        return fc.format(options);
      } catch (err) {
        return this.options.parseErrorHandler(err, key, res, options);
      }
    }
  }, {
    key: "addLookupKeys",
    value: function addLookupKeys(finalKeys, _key, _code, _ns, _options) {
      // no additional keys needed for select or plural
      // so there is no need to add keys to that finalKeys array
      return finalKeys;
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.mem = {};
    }
  }]);

  return ICU;
}();

ICU.type = 'i18nFormat';
export default ICU;