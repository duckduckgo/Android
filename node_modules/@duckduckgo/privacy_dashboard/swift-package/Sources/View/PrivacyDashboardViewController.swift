//
//  File.swift
//
//
//  Created by Micha≈Ç Smaga on 13/04/2022.
//

import UIKit
import Combine
import WebKit
import TrackerRadarKit

public class PrivacyDashboardViewController: UIViewController {

    var webView: WKWebView!

    private let privacyDashboardScript = PrivacyDashboardUserScript()

    weak var privacyInfo: PrivacyInfo?

    private var themeName: String?

    private var isLoaded: Bool = false

    private var cancellables = Set<AnyCancellable>()

    public init(privacyInfo: PrivacyInfo?, themeName: String?) {
        self.privacyInfo = privacyInfo
        self.themeName = themeName
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    public override func viewDidLoad() {
        super.viewDidLoad()

//        applyTheme(ThemeManager.shared.currentTheme)

//        extendedLayoutIncludesOpaqueBars = true
//        isModalInPresentation = true
        navigationController?.setNavigationBarHidden(true, animated: false)

        let configuration = WKWebViewConfiguration()

        let webView = WKWebView(frame: view.frame, configuration: configuration)
        webView.navigationDelegate = self
        webView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        webView.allowsBackForwardNavigationGestures = true

        view.addSubview(webView)
        self.webView = webView

        privacyDashboardScript.delegate = self

        loadUserScript()

        guard !isLoaded, let url = Bundle.privacyDashboardURL else { return }
        webView.loadFileURL(url, allowingReadAccessTo: url.deletingLastPathComponent().deletingLastPathComponent())
    }

    public override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        cancellables.removeAll()
    }

    private func loadUserScript() {
        webView.configuration.userContentController.addUserScript(privacyDashboardScript.makeWKUserScript())

        privacyDashboardScript.messageNames.forEach { messageName in
            webView?.configuration.userContentController.add(privacyDashboardScript, name: messageName)
        }
    }

}

extension PrivacyDashboardViewController: WKNavigationDelegate {

    public func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        sendTheme()
//        subscribeToPermissions() // not yet available
        subscribeToTrackerInfo()
        subscribeToConnectionUpgradedTo()
        subscribeToServerTrust()
        sendProtectionStatus()
//        sendPendingUpdates() // used while recompiling TDS on toggle
        sendParentEntity()
//        subscribeToConsentManaged() // not yet available

        isLoaded = true
    }

    private func subscribeToTrackerInfo() {
        privacyInfo?.$trackerInfo
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] trackerInfo in
                guard let self = self, let url = self.privacyInfo?.url else { return }
                self.privacyDashboardScript.setTrackerInfo(url, trackerInfo: trackerInfo, webView: self.webView)
            })
            .store(in: &cancellables)
    }

    private func subscribeToConnectionUpgradedTo() {
        privacyInfo?.$connectionUpgradedTo
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] connectionUpgradedTo in
                guard let self = self else { return }
                let upgradedHttps = connectionUpgradedTo != nil
                self.privacyDashboardScript.setUpgradedHttps(upgradedHttps, webView: self.webView)
            })
            .store(in: &cancellables)
    }

    private func subscribeToServerTrust() {
        privacyInfo?.$serverTrust
            .receive(on: DispatchQueue.global(qos: .userInitiated))
            .map { serverTrust in
                ServerTrustViewModel(serverTrust: serverTrust)
            }
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] serverTrustViewModel in
                guard let self = self, let serverTrustViewModel = serverTrustViewModel else { return }
                self.privacyDashboardScript.setServerTrust(serverTrustViewModel, webView: self.webView)
            })
            .store(in: &cancellables)
    }

    private func sendProtectionStatus() {
        privacyDashboardScript.setProtectionStatus(privacyInfo?.isProtected ?? false, webView: webView)
    }

    private func sendParentEntity() {
        privacyDashboardScript.setParentEntity(privacyInfo?.parentEntity, webView: webView)
    }

    private func sendTheme() {
        privacyDashboardScript.setTheme(self.themeName, webView: webView)
    }
}

extension PrivacyDashboardViewController: PrivacyDashboardUserScriptDelegate {

    func userScript(_ userScript: PrivacyDashboardUserScript, didChangeProtectionStateTo isProtected: Bool) {
//        guard let domain = tabViewModel?.tab.content.url?.host else {
//            assertionFailure("PrivacyDashboardViewController: no domain available")
//            return
//        }
//
//        let configuration = ContentBlocking.shared.privacyConfigurationManager.privacyConfig
//        if isProtected {
//            configuration.userEnabledProtection(forDomain: domain)
//        } else {
//            configuration.userDisabledProtection(forDomain: domain)
//        }
//
//        let completionToken = ContentBlocking.shared.contentBlockingManager.scheduleCompilation()
//        pendingUpdates[completionToken] = domain
//        sendPendingUpdates()
    }

//    func userScript(_ userScript: PrivacyDashboardUserScript, didSetPermission permission: PermissionType, to state: PermissionAuthorizationState) {
//        guard let domain = tabViewModel?.tab.content.url?.host else {
//            assertionFailure("PrivacyDashboardViewController: no domain available")
//            return
//        }
//
//        PermissionManager.shared.setPermission(state.persistedPermissionDecision, forDomain: domain, permissionType: permission)
//    }

//    func userScript(_ userScript: PrivacyDashboardUserScript, setPermission permission: PermissionType, paused: Bool) {
//        tabViewModel?.tab.permissions.set([permission], muted: paused)
//    }

    func userScript(_ userScript: PrivacyDashboardUserScript, setHeight height: Int) {
//        NSAnimationContext.runAnimationGroup { [weak self] context in
//            context.duration = 1/3
//            context.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
//            self?.contentHeightConstraint.animator().constant = CGFloat(height)
//        }
    }
}
