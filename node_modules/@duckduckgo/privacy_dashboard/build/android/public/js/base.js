(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],2:[function(require,module,exports){
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],3:[function(require,module,exports){
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],4:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],5:[function(require,module,exports){
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],6:[function(require,module,exports){
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],7:[function(require,module,exports){
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],8:[function(require,module,exports){
var setPrototypeOf = require("./setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./setPrototypeOf.js":12}],9:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],10:[function(require,module,exports){
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],11:[function(require,module,exports){
var _typeof = require("./typeof.js")["default"];

var assertThisInitialized = require("./assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./assertThisInitialized.js":3,"./typeof.js":14}],12:[function(require,module,exports){
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],13:[function(require,module,exports){
var arrayWithHoles = require("./arrayWithHoles.js");

var iterableToArray = require("./iterableToArray.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableRest = require("./nonIterableRest.js");

function _toArray(arr) {
  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();
}

module.exports = _toArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayWithHoles.js":2,"./iterableToArray.js":9,"./nonIterableRest.js":10,"./unsupportedIterableToArray.js":15}],14:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],15:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{"./arrayLikeToArray.js":1}],16:[function(require,module,exports){
"use strict";
//
// Main
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.strategies = void 0;
function memoize(fn, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn, {
        cache: cache,
        serializer: serializer,
    });
}
exports.default = memoize;
//
// Strategy
//
function isPrimitive(value) {
    return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === "string" 'unsafe' primitive for our needs
}
function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
//
// Serializer
//
var serializerDefault = function () {
    return JSON.stringify(arguments);
};
//
// Cache
//
function ObjectWithoutPrototypeCache() {
    this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function (key) {
    return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
    this.cache[key] = value;
};
var cacheDefault = {
    create: function create() {
        // @ts-ignore
        return new ObjectWithoutPrototypeCache();
    },
};
exports.strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic,
};

},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBestPattern = void 0;
var time_data_generated_1 = require("./time-data.generated");
/**
 * Returns the best matching date time pattern if a date time skeleton
 * pattern is provided with a locale. Follows the Unicode specification:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns
 * @param skeleton date time skeleton pattern that possibly includes j, J or C
 * @param locale
 */
function getBestPattern(skeleton, locale) {
    var skeletonCopy = '';
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
        var patternChar = skeleton.charAt(patternPos);
        if (patternChar === 'j') {
            var extraLength = 0;
            while (patternPos + 1 < skeleton.length &&
                skeleton.charAt(patternPos + 1) === patternChar) {
                extraLength++;
                patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = 'a';
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == 'H' || hourChar == 'k') {
                dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
                skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
                skeletonCopy = hourChar + skeletonCopy;
            }
        }
        else if (patternChar === 'J') {
            skeletonCopy += 'H';
        }
        else {
            skeletonCopy += patternChar;
        }
    }
    return skeletonCopy;
}
exports.getBestPattern = getBestPattern;
/**
 * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
 * of the given `locale` to the corresponding time pattern.
 * @param locale
 */
function getDefaultHourSymbolFromLocale(locale) {
    var hourCycle = locale.hourCycle;
    if (hourCycle === undefined &&
        // @ts-ignore hourCycle(s) is not identified yet
        locale.hourCycles &&
        // @ts-ignore
        locale.hourCycles.length) {
        // @ts-ignore
        hourCycle = locale.hourCycles[0];
    }
    if (hourCycle) {
        switch (hourCycle) {
            case 'h24':
                return 'k';
            case 'h23':
                return 'H';
            case 'h12':
                return 'h';
            case 'h11':
                return 'K';
            default:
                throw new Error('Invalid hourCycle');
        }
    }
    // TODO: Once hourCycle is fully supported remove the following with data generation
    var languageTag = locale.language;
    var regionTag;
    if (languageTag !== 'root') {
        regionTag = locale.maximize().region;
    }
    var hourCycles = time_data_generated_1.timeData[regionTag || ''] ||
        time_data_generated_1.timeData[languageTag || ''] ||
        time_data_generated_1.timeData["".concat(languageTag, "-001")] ||
        time_data_generated_1.timeData['001'];
    return hourCycles[0];
}

},{"./time-data.generated":22}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorKind = void 0;
var ErrorKind;
(function (ErrorKind) {
    /** Argument is unclosed (e.g. `{0`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    /** Argument is empty (e.g. `{}`). */
    ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    /** Argument is malformed (e.g. `{foo!}``) */
    ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    /** Expect an argument type (e.g. `{foo,}`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    /** Unsupported argument type (e.g. `{foo,foo}`) */
    ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    /** Expect an argument style (e.g. `{foo, number, }`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    /** The number skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    /** The date time skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
    ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
    ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
    ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    /** Missing select argument options (e.g. `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    /**
     * Expecting a message fragment after the `plural` or `selectordinal` selector
     * (e.g. `{foo, plural, one}`)
     */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    /**
     * Duplicate selectors in `plural` or `selectordinal` argument.
     * (e.g. {foo, plural, one {#} one {#}})
     */
    ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    /** Duplicate selectors in `select` argument.
     * (e.g. {foo, select, apple {apple} apple {apple}})
     */
    ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    /** Plural or select argument option must have `other` clause. */
    ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
    ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
    /** The tag name is invalid. (e.g. `<123>foo</123>`) */
    ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
    ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
    ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {}));

},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
var tslib_1 = require("tslib");
var error_1 = require("./error");
var parser_1 = require("./parser");
var types_1 = require("./types");
function pruneLocation(els) {
    els.forEach(function (el) {
        delete el.location;
        if ((0, types_1.isSelectElement)(el) || (0, types_1.isPluralElement)(el)) {
            for (var k in el.options) {
                delete el.options[k].location;
                pruneLocation(el.options[k].value);
            }
        }
        else if ((0, types_1.isNumberElement)(el) && (0, types_1.isNumberSkeleton)(el.style)) {
            delete el.style.location;
        }
        else if (((0, types_1.isDateElement)(el) || (0, types_1.isTimeElement)(el)) &&
            (0, types_1.isDateTimeSkeleton)(el.style)) {
            delete el.style.location;
        }
        else if ((0, types_1.isTagElement)(el)) {
            pruneLocation(el.children);
        }
    });
}
function parse(message, opts) {
    if (opts === void 0) { opts = {}; }
    opts = (0, tslib_1.__assign)({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new parser_1.Parser(message, opts).parse();
    if (result.err) {
        var error = SyntaxError(error_1.ErrorKind[result.err.kind]);
        // @ts-expect-error Assign to error object
        error.location = result.err.location;
        // @ts-expect-error Assign to error object
        error.originalMessage = result.err.message;
        throw error;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
        pruneLocation(result.val);
    }
    return result.val;
}
exports.parse = parse;
(0, tslib_1.__exportStar)(require("./types"), exports);

},{"./error":18,"./parser":20,"./types":23,"tslib":48}],20:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
var tslib_1 = require("tslib");
var error_1 = require("./error");
var types_1 = require("./types");
var regex_generated_1 = require("./regex.generated");
var icu_skeleton_parser_1 = require("@formatjs/icu-skeleton-parser");
var date_time_pattern_generator_1 = require("./date-time-pattern-generator");
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
    return { start: start, end: end };
}
// #region Ponyfills
// Consolidate these variables up top for easier toggling during debugging
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger
    ? Number.isSafeInteger
    : function (n) {
        return (typeof n === 'number' &&
            isFinite(n) &&
            Math.floor(n) === n &&
            Math.abs(n) <= 0x1fffffffffffff);
    };
// IE11 does not support y and u.
var REGEX_SUPPORTS_U_AND_Y = true;
try {
    var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    /**
     * legacy Edge or Xbox One browser
     * Unicode flag support: supported
     * Pattern_Syntax support: not supported
     * See https://github.com/formatjs/formatjs/issues/2822
     */
    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
}
catch (_) {
    REGEX_SUPPORTS_U_AND_Y = false;
}
var startsWith = hasNativeStartsWith
    ? // Native
        function startsWith(s, search, position) {
            return s.startsWith(search, position);
        }
    : // For IE11
        function startsWith(s, search, position) {
            return s.slice(position, position + search.length) === search;
        };
var fromCodePoint = hasNativeFromCodePoint
    ? String.fromCodePoint
    : // IE11
        function fromCodePoint() {
            var codePoints = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                codePoints[_i] = arguments[_i];
            }
            var elements = '';
            var length = codePoints.length;
            var i = 0;
            var code;
            while (length > i) {
                code = codePoints[i++];
                if (code > 0x10ffff)
                    throw RangeError(code + ' is not a valid code point');
                elements +=
                    code < 0x10000
                        ? String.fromCharCode(code)
                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);
            }
            return elements;
        };
var fromEntries = 
// native
hasNativeFromEntries
    ? Object.fromEntries
    : // Ponyfill
        function fromEntries(entries) {
            var obj = {};
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var _a = entries_1[_i], k = _a[0], v = _a[1];
                obj[k] = v;
            }
            return obj;
        };
var codePointAt = hasNativeCodePointAt
    ? // Native
        function codePointAt(s, index) {
            return s.codePointAt(index);
        }
    : // IE 11
        function codePointAt(s, index) {
            var size = s.length;
            if (index < 0 || index >= size) {
                return undefined;
            }
            var first = s.charCodeAt(index);
            var second;
            return first < 0xd800 ||
                first > 0xdbff ||
                index + 1 === size ||
                (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                second > 0xdfff
                ? first
                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
        };
var trimStart = hasTrimStart
    ? // Native
        function trimStart(s) {
            return s.trimStart();
        }
    : // Ponyfill
        function trimStart(s) {
            return s.replace(SPACE_SEPARATOR_START_REGEX, '');
        };
var trimEnd = hasTrimEnd
    ? // Native
        function trimEnd(s) {
            return s.trimEnd();
        }
    : // Ponyfill
        function trimEnd(s) {
            return s.replace(SPACE_SEPARATOR_END_REGEX, '');
        };
// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
function RE(s, flag) {
    return new RegExp(s, flag);
}
// #endregion
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
    // Native
    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var _a;
        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
    };
}
else {
    // IE11
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var match = [];
        while (true) {
            var c = codePointAt(s, index);
            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                break;
            }
            match.push(c);
            index += c >= 0x10000 ? 2 : 1;
        }
        return fromCodePoint.apply(void 0, match);
    };
}
var Parser = /** @class */ (function () {
    function Parser(message, options) {
        if (options === void 0) { options = {}; }
        this.message = message;
        this.position = { offset: 0, line: 1, column: 1 };
        this.ignoreTag = !!options.ignoreTag;
        this.locale = options.locale;
        this.requiresOtherClause = !!options.requiresOtherClause;
        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
    }
    Parser.prototype.parse = function () {
        if (this.offset() !== 0) {
            throw Error('parser can only be used once');
        }
        return this.parseMessage(0, '', false);
    };
    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
        var elements = [];
        while (!this.isEOF()) {
            var char = this.char();
            if (char === 123 /* `{` */) {
                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else if (char === 125 /* `}` */ && nestingLevel > 0) {
                break;
            }
            else if (char === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                    type: types_1.TYPE.pound,
                    location: createLocation(position, this.clonePosition()),
                });
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                this.peek() === 47 // char code for '/'
            ) {
                if (expectingCloseTag) {
                    break;
                }
                else {
                    return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                }
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                _isAlpha(this.peek() || 0)) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
        }
        return { val: elements, err: null };
    };
    /**
     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
     * are accepted:
     *
     * ```
     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
     * tagName ::= [a-z] (PENChar)*
     * PENChar ::=
     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
     * ```
     *
     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
     * since other tag-based engines like React allow it
     */
    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
        var startPosition = this.clonePosition();
        this.bump(); // `<`
        var tagName = this.parseTagName();
        this.bumpSpace();
        if (this.bumpIf('/>')) {
            // Self closing tag
            return {
                val: {
                    type: types_1.TYPE.literal,
                    value: "<".concat(tagName, "/>"),
                    location: createLocation(startPosition, this.clonePosition()),
                },
                err: null,
            };
        }
        else if (this.bumpIf('>')) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) {
                return childrenResult;
            }
            var children = childrenResult.val;
            // Expecting a close tag
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf('</')) {
                if (this.isEOF() || !_isAlpha(this.char())) {
                    return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) {
                    return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                }
                this.bumpSpace();
                if (!this.bumpIf('>')) {
                    return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                return {
                    val: {
                        type: types_1.TYPE.tag,
                        value: tagName,
                        children: children,
                        location: createLocation(startPosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            else {
                return this.error(error_1.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
            }
        }
        else {
            return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
        }
    };
    /**
     * This method assumes that the caller has peeked ahead for the first tag character.
     */
    Parser.prototype.parseTagName = function () {
        var startOffset = this.offset();
        this.bump(); // the first tag name character
        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
        }
        return this.message.slice(startOffset, this.offset());
    };
    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
        var start = this.clonePosition();
        var value = '';
        while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
            }
            break;
        }
        var location = createLocation(start, this.clonePosition());
        return {
            val: { type: types_1.TYPE.literal, value: value, location: location },
            err: null,
        };
    };
    Parser.prototype.tryParseLeftAngleBracket = function () {
        if (!this.isEOF() &&
            this.char() === 60 /* `<` */ &&
            (this.ignoreTag ||
                // If at the opening tag or closing tag position, bail.
                !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump(); // `<`
            return '<';
        }
        return null;
    };
    /**
     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
     * a character that requires quoting (that is, "only where needed"), and works the same in
     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
     */
    Parser.prototype.tryParseQuote = function (parentArgType) {
        if (this.isEOF() || this.char() !== 39 /* `'` */) {
            return null;
        }
        // Parse escaped char following the apostrophe, or early return if there is no escaped char.
        // Check if is valid escaped character
        switch (this.peek()) {
            case 39 /* `'` */:
                // double quote, should return as a single quote.
                this.bump();
                this.bump();
                return "'";
            // '{', '<', '>', '}'
            case 123:
            case 60:
            case 62:
            case 125:
                break;
            case 35: // '#'
                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                    break;
                }
                return null;
            default:
                return null;
        }
        this.bump(); // apostrophe
        var codePoints = [this.char()]; // escaped char
        this.bump();
        // read chars until the optional closing apostrophe is found
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39 /* `'` */) {
                if (this.peek() === 39 /* `'` */) {
                    codePoints.push(39);
                    // Bump one more time because we need to skip 2 characters.
                    this.bump();
                }
                else {
                    // Optional closing apostrophe.
                    this.bump();
                    break;
                }
            }
            else {
                codePoints.push(ch);
            }
            this.bump();
        }
        return fromCodePoint.apply(void 0, codePoints);
    };
    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
        if (this.isEOF()) {
            return null;
        }
        var ch = this.char();
        if (ch === 60 /* `<` */ ||
            ch === 123 /* `{` */ ||
            (ch === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
            (ch === 125 /* `}` */ && nestingLevel > 0)) {
            return null;
        }
        else {
            this.bump();
            return fromCodePoint(ch);
        }
    };
    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
        var openingBracePosition = this.clonePosition();
        this.bump(); // `{`
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        if (this.char() === 125 /* `}` */) {
            this.bump();
            return this.error(error_1.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        // argument name
        var value = this.parseIdentifierIfPossible().value;
        if (!value) {
            return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        switch (this.char()) {
            // Simple argument: `{name}`
            case 125 /* `}` */: {
                this.bump(); // `}`
                return {
                    val: {
                        type: types_1.TYPE.argument,
                        // value does not include the opening and closing braces.
                        value: value,
                        location: createLocation(openingBracePosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            // Argument with options: `{name, format, ...}`
            case 44 /* `,` */: {
                this.bump(); // `,`
                this.bumpSpace();
                if (this.isEOF()) {
                    return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                }
                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            }
            default:
                return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
    };
    /**
     * Advance the parser until the end of the identifier, if it is currently on
     * an identifier character. Return an empty string otherwise.
     */
    Parser.prototype.parseIdentifierIfPossible = function () {
        var startingPosition = this.clonePosition();
        var startOffset = this.offset();
        var value = matchIdentifierAtIndex(this.message, startOffset);
        var endOffset = startOffset + value.length;
        this.bumpTo(endOffset);
        var endPosition = this.clonePosition();
        var location = createLocation(startingPosition, endPosition);
        return { value: value, location: location };
    };
    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
        var _a;
        // Parse this range:
        // {name, type, style}
        //        ^---^
        var typeStartPosition = this.clonePosition();
        var argType = this.parseIdentifierIfPossible().value;
        var typeEndPosition = this.clonePosition();
        switch (argType) {
            case '':
                // Expecting a style string number, date, time, plural, selectordinal, or select.
                return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case 'number':
            case 'date':
            case 'time': {
                // Parse this range:
                // {name, number, style}
                //              ^-------^
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(',')) {
                    this.bumpSpace();
                    var styleStartPosition = this.clonePosition();
                    var result = this.parseSimpleArgStyleIfPossible();
                    if (result.err) {
                        return result;
                    }
                    var style = trimEnd(result.val);
                    if (style.length === 0) {
                        return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                    styleAndLocation = { style: style, styleLocation: styleLocation };
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                // Extract style or skeleton
                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                    // Skeleton starts with `::`.
                    var skeleton = trimStart(styleAndLocation.style.slice(2));
                    if (argType === 'number') {
                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                        if (result.err) {
                            return result;
                        }
                        return {
                            val: { type: types_1.TYPE.number, value: value, location: location_1, style: result.val },
                            err: null,
                        };
                    }
                    else {
                        if (skeleton.length === 0) {
                            return this.error(error_1.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                        }
                        var dateTimePattern = skeleton;
                        // Get "best match" pattern only if locale is passed, if not, let it
                        // pass as-is where `parseDateTimeSkeleton()` will throw an error
                        // for unsupported patterns.
                        if (this.locale) {
                            dateTimePattern = (0, date_time_pattern_generator_1.getBestPattern)(skeleton, this.locale);
                        }
                        var style = {
                            type: types_1.SKELETON_TYPE.dateTime,
                            pattern: dateTimePattern,
                            location: styleAndLocation.styleLocation,
                            parsedOptions: this.shouldParseSkeletons
                                ? (0, icu_skeleton_parser_1.parseDateTimeSkeleton)(dateTimePattern)
                                : {},
                        };
                        var type = argType === 'date' ? types_1.TYPE.date : types_1.TYPE.time;
                        return {
                            val: { type: type, value: value, location: location_1, style: style },
                            err: null,
                        };
                    }
                }
                // Regular style or no style.
                return {
                    val: {
                        type: argType === 'number'
                            ? types_1.TYPE.number
                            : argType === 'date'
                                ? types_1.TYPE.date
                                : types_1.TYPE.time,
                        value: value,
                        location: location_1,
                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,
                    },
                    err: null,
                };
            }
            case 'plural':
            case 'selectordinal':
            case 'select': {
                // Parse this range:
                // {name, plural, options}
                //              ^---------^
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(',')) {
                    return this.error(error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0, tslib_1.__assign)({}, typeEndPosition_1)));
                }
                this.bumpSpace();
                // Parse offset:
                // {name, plural, offset:1, options}
                //                ^-----^
                //
                // or the first option:
                //
                // {name, plural, one {...} other {...}}
                //                ^--^
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                    if (!this.bumpIf(':')) {
                        return this.error(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    this.bumpSpace();
                    var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                    if (result.err) {
                        return result;
                    }
                    // Parse another identifier for option parsing
                    this.bumpSpace();
                    identifierAndLocation = this.parseIdentifierIfPossible();
                    pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                if (optionsResult.err) {
                    return optionsResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                if (argType === 'select') {
                    return {
                        val: {
                            type: types_1.TYPE.select,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            location: location_2,
                        },
                        err: null,
                    };
                }
                else {
                    return {
                        val: {
                            type: types_1.TYPE.plural,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            offset: pluralOffset,
                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                            location: location_2,
                        },
                        err: null,
                    };
                }
            }
            default:
                return this.error(error_1.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        }
    };
    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
        // Parse: {value, number, ::currency/GBP }
        //
        if (this.isEOF() || this.char() !== 125 /* `}` */) {
            return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bump(); // `}`
        return { val: true, err: null };
    };
    /**
     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
     */
    Parser.prototype.parseSimpleArgStyleIfPossible = function () {
        var nestedBraces = 0;
        var startPosition = this.clonePosition();
        while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
                case 39 /* `'` */: {
                    // Treat apostrophe as quoting but include it in the style part.
                    // Find the end of the quoted literal text.
                    this.bump();
                    var apostrophePosition = this.clonePosition();
                    if (!this.bumpUntil("'")) {
                        return this.error(error_1.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                    }
                    this.bump();
                    break;
                }
                case 123 /* `{` */: {
                    nestedBraces += 1;
                    this.bump();
                    break;
                }
                case 125 /* `}` */: {
                    if (nestedBraces > 0) {
                        nestedBraces -= 1;
                    }
                    else {
                        return {
                            val: this.message.slice(startPosition.offset, this.offset()),
                            err: null,
                        };
                    }
                    break;
                }
                default:
                    this.bump();
                    break;
            }
        }
        return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null,
        };
    };
    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
        var tokens = [];
        try {
            tokens = (0, icu_skeleton_parser_1.parseNumberSkeletonFromString)(skeleton);
        }
        catch (e) {
            return this.error(error_1.ErrorKind.INVALID_NUMBER_SKELETON, location);
        }
        return {
            val: {
                type: types_1.SKELETON_TYPE.number,
                tokens: tokens,
                location: location,
                parsedOptions: this.shouldParseSkeletons
                    ? (0, icu_skeleton_parser_1.parseNumberSkeleton)(tokens)
                    : {},
            },
            err: null,
        };
    };
    /**
     * @param nesting_level The current nesting level of messages.
     *     This can be positive when parsing message fragment in select or plural argument options.
     * @param parent_arg_type The parent argument's type.
     * @param parsed_first_identifier If provided, this is the first identifier-like selector of
     *     the argument. It is a by-product of a previous parsing attempt.
     * @param expecting_close_tag If true, this message is directly or indirectly nested inside
     *     between a pair of opening and closing tags. The nested message will not parse beyond
     *     the closing tag boundary.
     */
    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
        var _a;
        var hasOtherClause = false;
        var options = [];
        var parsedSelectors = new Set();
        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
        // Parse:
        // one {one apple}
        // ^--^
        while (true) {
            if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== 'select' && this.bumpIf('=')) {
                    // Try parse `={number}` selector
                    var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                    if (result.err) {
                        return result;
                    }
                    selectorLocation = createLocation(startPosition, this.clonePosition());
                    selector = this.message.slice(startPosition.offset, this.offset());
                }
                else {
                    break;
                }
            }
            // Duplicate selector clauses
            if (parsedSelectors.has(selector)) {
                return this.error(parentArgType === 'select'
                    ? error_1.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                    : error_1.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            }
            if (selector === 'other') {
                hasOtherClause = true;
            }
            // Parse:
            // one {one apple}
            //     ^----------^
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf('{')) {
                return this.error(parentArgType === 'select'
                    ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                    : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) {
                return fragmentResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
                return argCloseResult;
            }
            options.push([
                selector,
                {
                    value: fragmentResult.val,
                    location: createLocation(openingBracePosition, this.clonePosition()),
                },
            ]);
            // Keep track of the existing selectors
            parsedSelectors.add(selector);
            // Prep next selector clause.
            this.bumpSpace();
            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);
        }
        if (options.length === 0) {
            return this.error(parentArgType === 'select'
                ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
        }
        if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(error_1.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
        }
        return { val: options, err: null };
    };
    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
        var sign = 1;
        var startingPosition = this.clonePosition();
        if (this.bumpIf('+')) {
        }
        else if (this.bumpIf('-')) {
            sign = -1;
        }
        var hasDigits = false;
        var decimal = 0;
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
            }
            else {
                break;
            }
        }
        var location = createLocation(startingPosition, this.clonePosition());
        if (!hasDigits) {
            return this.error(expectNumberError, location);
        }
        decimal *= sign;
        if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location);
        }
        return { val: decimal, err: null };
    };
    Parser.prototype.offset = function () {
        return this.position.offset;
    };
    Parser.prototype.isEOF = function () {
        return this.offset() === this.message.length;
    };
    Parser.prototype.clonePosition = function () {
        // This is much faster than `Object.assign` or spread.
        return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column,
        };
    };
    /**
     * Return the code point at the current position of the parser.
     * Throws if the index is out of bound.
     */
    Parser.prototype.char = function () {
        var offset = this.position.offset;
        if (offset >= this.message.length) {
            throw Error('out of bound');
        }
        var code = codePointAt(this.message, offset);
        if (code === undefined) {
            throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
        }
        return code;
    };
    Parser.prototype.error = function (kind, location) {
        return {
            val: null,
            err: {
                kind: kind,
                message: this.message,
                location: location,
            },
        };
    };
    /** Bump the parser to the next UTF-16 code unit. */
    Parser.prototype.bump = function () {
        if (this.isEOF()) {
            return;
        }
        var code = this.char();
        if (code === 10 /* '\n' */) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
        }
        else {
            this.position.column += 1;
            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
            this.position.offset += code < 0x10000 ? 1 : 2;
        }
    };
    /**
     * If the substring starting at the current position of the parser has
     * the given prefix, then bump the parser to the character immediately
     * following the prefix and return true. Otherwise, don't bump the parser
     * and return false.
     */
    Parser.prototype.bumpIf = function (prefix) {
        if (startsWith(this.message, prefix, this.offset())) {
            for (var i = 0; i < prefix.length; i++) {
                this.bump();
            }
            return true;
        }
        return false;
    };
    /**
     * Bump the parser until the pattern character is found and return `true`.
     * Otherwise bump to the end of the file and return `false`.
     */
    Parser.prototype.bumpUntil = function (pattern) {
        var currentOffset = this.offset();
        var index = this.message.indexOf(pattern, currentOffset);
        if (index >= 0) {
            this.bumpTo(index);
            return true;
        }
        else {
            this.bumpTo(this.message.length);
            return false;
        }
    };
    /**
     * Bump the parser to the target offset.
     * If target offset is beyond the end of the input, bump the parser to the end of the input.
     */
    Parser.prototype.bumpTo = function (targetOffset) {
        if (this.offset() > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
        }
        targetOffset = Math.min(targetOffset, this.message.length);
        while (true) {
            var offset = this.offset();
            if (offset === targetOffset) {
                break;
            }
            if (offset > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
            }
            this.bump();
            if (this.isEOF()) {
                break;
            }
        }
    };
    /** advance the parser through all whitespace to the next non-whitespace code unit. */
    Parser.prototype.bumpSpace = function () {
        while (!this.isEOF() && _isWhiteSpace(this.char())) {
            this.bump();
        }
    };
    /**
     * Peek at the *next* Unicode codepoint in the input without advancing the parser.
     * If the input has been exhausted, then this returns null.
     */
    Parser.prototype.peek = function () {
        if (this.isEOF()) {
            return null;
        }
        var code = this.char();
        var offset = this.offset();
        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser;
}());
exports.Parser = Parser;
/**
 * This check if codepoint is alphabet (lower & uppercase)
 * @param codepoint
 * @returns
 */
function _isAlpha(codepoint) {
    return ((codepoint >= 97 && codepoint <= 122) ||
        (codepoint >= 65 && codepoint <= 90));
}
function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47; /* '/' */
}
/** See `parseTag` function docs. */
function _isPotentialElementNameChar(c) {
    return (c === 45 /* '-' */ ||
        c === 46 /* '.' */ ||
        (c >= 48 && c <= 57) /* 0..9 */ ||
        c === 95 /* '_' */ ||
        (c >= 97 && c <= 122) /** a..z */ ||
        (c >= 65 && c <= 90) /* A..Z */ ||
        c == 0xb7 ||
        (c >= 0xc0 && c <= 0xd6) ||
        (c >= 0xd8 && c <= 0xf6) ||
        (c >= 0xf8 && c <= 0x37d) ||
        (c >= 0x37f && c <= 0x1fff) ||
        (c >= 0x200c && c <= 0x200d) ||
        (c >= 0x203f && c <= 0x2040) ||
        (c >= 0x2070 && c <= 0x218f) ||
        (c >= 0x2c00 && c <= 0x2fef) ||
        (c >= 0x3001 && c <= 0xd7ff) ||
        (c >= 0xf900 && c <= 0xfdcf) ||
        (c >= 0xfdf0 && c <= 0xfffd) ||
        (c >= 0x10000 && c <= 0xeffff));
}
/**
 * Code point equivalent of regex `\p{White_Space}`.
 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isWhiteSpace(c) {
    return ((c >= 0x0009 && c <= 0x000d) ||
        c === 0x0020 ||
        c === 0x0085 ||
        (c >= 0x200e && c <= 0x200f) ||
        c === 0x2028 ||
        c === 0x2029);
}
/**
 * Code point equivalent of regex `\p{Pattern_Syntax}`.
 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isPatternSyntax(c) {
    return ((c >= 0x0021 && c <= 0x0023) ||
        c === 0x0024 ||
        (c >= 0x0025 && c <= 0x0027) ||
        c === 0x0028 ||
        c === 0x0029 ||
        c === 0x002a ||
        c === 0x002b ||
        c === 0x002c ||
        c === 0x002d ||
        (c >= 0x002e && c <= 0x002f) ||
        (c >= 0x003a && c <= 0x003b) ||
        (c >= 0x003c && c <= 0x003e) ||
        (c >= 0x003f && c <= 0x0040) ||
        c === 0x005b ||
        c === 0x005c ||
        c === 0x005d ||
        c === 0x005e ||
        c === 0x0060 ||
        c === 0x007b ||
        c === 0x007c ||
        c === 0x007d ||
        c === 0x007e ||
        c === 0x00a1 ||
        (c >= 0x00a2 && c <= 0x00a5) ||
        c === 0x00a6 ||
        c === 0x00a7 ||
        c === 0x00a9 ||
        c === 0x00ab ||
        c === 0x00ac ||
        c === 0x00ae ||
        c === 0x00b0 ||
        c === 0x00b1 ||
        c === 0x00b6 ||
        c === 0x00bb ||
        c === 0x00bf ||
        c === 0x00d7 ||
        c === 0x00f7 ||
        (c >= 0x2010 && c <= 0x2015) ||
        (c >= 0x2016 && c <= 0x2017) ||
        c === 0x2018 ||
        c === 0x2019 ||
        c === 0x201a ||
        (c >= 0x201b && c <= 0x201c) ||
        c === 0x201d ||
        c === 0x201e ||
        c === 0x201f ||
        (c >= 0x2020 && c <= 0x2027) ||
        (c >= 0x2030 && c <= 0x2038) ||
        c === 0x2039 ||
        c === 0x203a ||
        (c >= 0x203b && c <= 0x203e) ||
        (c >= 0x2041 && c <= 0x2043) ||
        c === 0x2044 ||
        c === 0x2045 ||
        c === 0x2046 ||
        (c >= 0x2047 && c <= 0x2051) ||
        c === 0x2052 ||
        c === 0x2053 ||
        (c >= 0x2055 && c <= 0x205e) ||
        (c >= 0x2190 && c <= 0x2194) ||
        (c >= 0x2195 && c <= 0x2199) ||
        (c >= 0x219a && c <= 0x219b) ||
        (c >= 0x219c && c <= 0x219f) ||
        c === 0x21a0 ||
        (c >= 0x21a1 && c <= 0x21a2) ||
        c === 0x21a3 ||
        (c >= 0x21a4 && c <= 0x21a5) ||
        c === 0x21a6 ||
        (c >= 0x21a7 && c <= 0x21ad) ||
        c === 0x21ae ||
        (c >= 0x21af && c <= 0x21cd) ||
        (c >= 0x21ce && c <= 0x21cf) ||
        (c >= 0x21d0 && c <= 0x21d1) ||
        c === 0x21d2 ||
        c === 0x21d3 ||
        c === 0x21d4 ||
        (c >= 0x21d5 && c <= 0x21f3) ||
        (c >= 0x21f4 && c <= 0x22ff) ||
        (c >= 0x2300 && c <= 0x2307) ||
        c === 0x2308 ||
        c === 0x2309 ||
        c === 0x230a ||
        c === 0x230b ||
        (c >= 0x230c && c <= 0x231f) ||
        (c >= 0x2320 && c <= 0x2321) ||
        (c >= 0x2322 && c <= 0x2328) ||
        c === 0x2329 ||
        c === 0x232a ||
        (c >= 0x232b && c <= 0x237b) ||
        c === 0x237c ||
        (c >= 0x237d && c <= 0x239a) ||
        (c >= 0x239b && c <= 0x23b3) ||
        (c >= 0x23b4 && c <= 0x23db) ||
        (c >= 0x23dc && c <= 0x23e1) ||
        (c >= 0x23e2 && c <= 0x2426) ||
        (c >= 0x2427 && c <= 0x243f) ||
        (c >= 0x2440 && c <= 0x244a) ||
        (c >= 0x244b && c <= 0x245f) ||
        (c >= 0x2500 && c <= 0x25b6) ||
        c === 0x25b7 ||
        (c >= 0x25b8 && c <= 0x25c0) ||
        c === 0x25c1 ||
        (c >= 0x25c2 && c <= 0x25f7) ||
        (c >= 0x25f8 && c <= 0x25ff) ||
        (c >= 0x2600 && c <= 0x266e) ||
        c === 0x266f ||
        (c >= 0x2670 && c <= 0x2767) ||
        c === 0x2768 ||
        c === 0x2769 ||
        c === 0x276a ||
        c === 0x276b ||
        c === 0x276c ||
        c === 0x276d ||
        c === 0x276e ||
        c === 0x276f ||
        c === 0x2770 ||
        c === 0x2771 ||
        c === 0x2772 ||
        c === 0x2773 ||
        c === 0x2774 ||
        c === 0x2775 ||
        (c >= 0x2794 && c <= 0x27bf) ||
        (c >= 0x27c0 && c <= 0x27c4) ||
        c === 0x27c5 ||
        c === 0x27c6 ||
        (c >= 0x27c7 && c <= 0x27e5) ||
        c === 0x27e6 ||
        c === 0x27e7 ||
        c === 0x27e8 ||
        c === 0x27e9 ||
        c === 0x27ea ||
        c === 0x27eb ||
        c === 0x27ec ||
        c === 0x27ed ||
        c === 0x27ee ||
        c === 0x27ef ||
        (c >= 0x27f0 && c <= 0x27ff) ||
        (c >= 0x2800 && c <= 0x28ff) ||
        (c >= 0x2900 && c <= 0x2982) ||
        c === 0x2983 ||
        c === 0x2984 ||
        c === 0x2985 ||
        c === 0x2986 ||
        c === 0x2987 ||
        c === 0x2988 ||
        c === 0x2989 ||
        c === 0x298a ||
        c === 0x298b ||
        c === 0x298c ||
        c === 0x298d ||
        c === 0x298e ||
        c === 0x298f ||
        c === 0x2990 ||
        c === 0x2991 ||
        c === 0x2992 ||
        c === 0x2993 ||
        c === 0x2994 ||
        c === 0x2995 ||
        c === 0x2996 ||
        c === 0x2997 ||
        c === 0x2998 ||
        (c >= 0x2999 && c <= 0x29d7) ||
        c === 0x29d8 ||
        c === 0x29d9 ||
        c === 0x29da ||
        c === 0x29db ||
        (c >= 0x29dc && c <= 0x29fb) ||
        c === 0x29fc ||
        c === 0x29fd ||
        (c >= 0x29fe && c <= 0x2aff) ||
        (c >= 0x2b00 && c <= 0x2b2f) ||
        (c >= 0x2b30 && c <= 0x2b44) ||
        (c >= 0x2b45 && c <= 0x2b46) ||
        (c >= 0x2b47 && c <= 0x2b4c) ||
        (c >= 0x2b4d && c <= 0x2b73) ||
        (c >= 0x2b74 && c <= 0x2b75) ||
        (c >= 0x2b76 && c <= 0x2b95) ||
        c === 0x2b96 ||
        (c >= 0x2b97 && c <= 0x2bff) ||
        (c >= 0x2e00 && c <= 0x2e01) ||
        c === 0x2e02 ||
        c === 0x2e03 ||
        c === 0x2e04 ||
        c === 0x2e05 ||
        (c >= 0x2e06 && c <= 0x2e08) ||
        c === 0x2e09 ||
        c === 0x2e0a ||
        c === 0x2e0b ||
        c === 0x2e0c ||
        c === 0x2e0d ||
        (c >= 0x2e0e && c <= 0x2e16) ||
        c === 0x2e17 ||
        (c >= 0x2e18 && c <= 0x2e19) ||
        c === 0x2e1a ||
        c === 0x2e1b ||
        c === 0x2e1c ||
        c === 0x2e1d ||
        (c >= 0x2e1e && c <= 0x2e1f) ||
        c === 0x2e20 ||
        c === 0x2e21 ||
        c === 0x2e22 ||
        c === 0x2e23 ||
        c === 0x2e24 ||
        c === 0x2e25 ||
        c === 0x2e26 ||
        c === 0x2e27 ||
        c === 0x2e28 ||
        c === 0x2e29 ||
        (c >= 0x2e2a && c <= 0x2e2e) ||
        c === 0x2e2f ||
        (c >= 0x2e30 && c <= 0x2e39) ||
        (c >= 0x2e3a && c <= 0x2e3b) ||
        (c >= 0x2e3c && c <= 0x2e3f) ||
        c === 0x2e40 ||
        c === 0x2e41 ||
        c === 0x2e42 ||
        (c >= 0x2e43 && c <= 0x2e4f) ||
        (c >= 0x2e50 && c <= 0x2e51) ||
        c === 0x2e52 ||
        (c >= 0x2e53 && c <= 0x2e7f) ||
        (c >= 0x3001 && c <= 0x3003) ||
        c === 0x3008 ||
        c === 0x3009 ||
        c === 0x300a ||
        c === 0x300b ||
        c === 0x300c ||
        c === 0x300d ||
        c === 0x300e ||
        c === 0x300f ||
        c === 0x3010 ||
        c === 0x3011 ||
        (c >= 0x3012 && c <= 0x3013) ||
        c === 0x3014 ||
        c === 0x3015 ||
        c === 0x3016 ||
        c === 0x3017 ||
        c === 0x3018 ||
        c === 0x3019 ||
        c === 0x301a ||
        c === 0x301b ||
        c === 0x301c ||
        c === 0x301d ||
        (c >= 0x301e && c <= 0x301f) ||
        c === 0x3020 ||
        c === 0x3030 ||
        c === 0xfd3e ||
        c === 0xfd3f ||
        (c >= 0xfe45 && c <= 0xfe46));
}

},{"./date-time-pattern-generator":17,"./error":18,"./regex.generated":21,"./types":23,"@formatjs/icu-skeleton-parser":25,"tslib":48}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WHITE_SPACE_REGEX = exports.SPACE_SEPARATOR_REGEX = void 0;
// @generated from regex-gen.ts
exports.SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeData = void 0;
// @generated from time-data-gen.ts
// prettier-ignore  
exports.timeData = {
    "AX": [
        "H"
    ],
    "BQ": [
        "H"
    ],
    "CP": [
        "H"
    ],
    "CZ": [
        "H"
    ],
    "DK": [
        "H"
    ],
    "FI": [
        "H"
    ],
    "ID": [
        "H"
    ],
    "IS": [
        "H"
    ],
    "ML": [
        "H"
    ],
    "NE": [
        "H"
    ],
    "RU": [
        "H"
    ],
    "SE": [
        "H"
    ],
    "SJ": [
        "H"
    ],
    "SK": [
        "H"
    ],
    "AS": [
        "h",
        "H"
    ],
    "BT": [
        "h",
        "H"
    ],
    "DJ": [
        "h",
        "H"
    ],
    "ER": [
        "h",
        "H"
    ],
    "GH": [
        "h",
        "H"
    ],
    "IN": [
        "h",
        "H"
    ],
    "LS": [
        "h",
        "H"
    ],
    "PG": [
        "h",
        "H"
    ],
    "PW": [
        "h",
        "H"
    ],
    "SO": [
        "h",
        "H"
    ],
    "TO": [
        "h",
        "H"
    ],
    "VU": [
        "h",
        "H"
    ],
    "WS": [
        "h",
        "H"
    ],
    "001": [
        "H",
        "h"
    ],
    "AL": [
        "h",
        "H",
        "hB"
    ],
    "TD": [
        "h",
        "H",
        "hB"
    ],
    "ca-ES": [
        "H",
        "h",
        "hB"
    ],
    "CF": [
        "H",
        "h",
        "hB"
    ],
    "CM": [
        "H",
        "h",
        "hB"
    ],
    "fr-CA": [
        "H",
        "h",
        "hB"
    ],
    "gl-ES": [
        "H",
        "h",
        "hB"
    ],
    "it-CH": [
        "H",
        "h",
        "hB"
    ],
    "it-IT": [
        "H",
        "h",
        "hB"
    ],
    "LU": [
        "H",
        "h",
        "hB"
    ],
    "NP": [
        "H",
        "h",
        "hB"
    ],
    "PF": [
        "H",
        "h",
        "hB"
    ],
    "SC": [
        "H",
        "h",
        "hB"
    ],
    "SM": [
        "H",
        "h",
        "hB"
    ],
    "SN": [
        "H",
        "h",
        "hB"
    ],
    "TF": [
        "H",
        "h",
        "hB"
    ],
    "VA": [
        "H",
        "h",
        "hB"
    ],
    "CY": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "GR": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "CO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "DO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KP": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "NA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "VE": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "AC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "AI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BW": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BZ": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "DG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "FK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GB": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IM": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IO": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "JE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "LT": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MS": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NF": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NR": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NU": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "PN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SH": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "TA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "ZA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "af-ZA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "AR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CL": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "CU": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "EA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BO": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-BR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-EC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-ES": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-GQ": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-PE": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "GT": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "HN": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "IC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KG": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KM": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "LK": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MX": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "NI": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "PY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "SV": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "UY": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "JP": [
        "H",
        "h",
        "K"
    ],
    "AD": [
        "H",
        "hB"
    ],
    "AM": [
        "H",
        "hB"
    ],
    "AO": [
        "H",
        "hB"
    ],
    "AT": [
        "H",
        "hB"
    ],
    "AW": [
        "H",
        "hB"
    ],
    "BE": [
        "H",
        "hB"
    ],
    "BF": [
        "H",
        "hB"
    ],
    "BJ": [
        "H",
        "hB"
    ],
    "BL": [
        "H",
        "hB"
    ],
    "BR": [
        "H",
        "hB"
    ],
    "CG": [
        "H",
        "hB"
    ],
    "CI": [
        "H",
        "hB"
    ],
    "CV": [
        "H",
        "hB"
    ],
    "DE": [
        "H",
        "hB"
    ],
    "EE": [
        "H",
        "hB"
    ],
    "FR": [
        "H",
        "hB"
    ],
    "GA": [
        "H",
        "hB"
    ],
    "GF": [
        "H",
        "hB"
    ],
    "GN": [
        "H",
        "hB"
    ],
    "GP": [
        "H",
        "hB"
    ],
    "GW": [
        "H",
        "hB"
    ],
    "HR": [
        "H",
        "hB"
    ],
    "IL": [
        "H",
        "hB"
    ],
    "IT": [
        "H",
        "hB"
    ],
    "KZ": [
        "H",
        "hB"
    ],
    "MC": [
        "H",
        "hB"
    ],
    "MD": [
        "H",
        "hB"
    ],
    "MF": [
        "H",
        "hB"
    ],
    "MQ": [
        "H",
        "hB"
    ],
    "MZ": [
        "H",
        "hB"
    ],
    "NC": [
        "H",
        "hB"
    ],
    "NL": [
        "H",
        "hB"
    ],
    "PM": [
        "H",
        "hB"
    ],
    "PT": [
        "H",
        "hB"
    ],
    "RE": [
        "H",
        "hB"
    ],
    "RO": [
        "H",
        "hB"
    ],
    "SI": [
        "H",
        "hB"
    ],
    "SR": [
        "H",
        "hB"
    ],
    "ST": [
        "H",
        "hB"
    ],
    "TG": [
        "H",
        "hB"
    ],
    "TR": [
        "H",
        "hB"
    ],
    "WF": [
        "H",
        "hB"
    ],
    "YT": [
        "H",
        "hB"
    ],
    "BD": [
        "h",
        "hB",
        "H"
    ],
    "PK": [
        "h",
        "hB",
        "H"
    ],
    "AZ": [
        "H",
        "hB",
        "h"
    ],
    "BA": [
        "H",
        "hB",
        "h"
    ],
    "BG": [
        "H",
        "hB",
        "h"
    ],
    "CH": [
        "H",
        "hB",
        "h"
    ],
    "GE": [
        "H",
        "hB",
        "h"
    ],
    "LI": [
        "H",
        "hB",
        "h"
    ],
    "ME": [
        "H",
        "hB",
        "h"
    ],
    "RS": [
        "H",
        "hB",
        "h"
    ],
    "UA": [
        "H",
        "hB",
        "h"
    ],
    "UZ": [
        "H",
        "hB",
        "h"
    ],
    "XK": [
        "H",
        "hB",
        "h"
    ],
    "AG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "AU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "CA": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "DM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "en-001": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FJ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GD": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "JM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KN": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LR": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MH": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MP": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MW": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "NZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SL": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TT": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "UM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "US": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "ZM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BO": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "EC": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "ES": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "GQ": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "PE": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "AE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "ar-001": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "BH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "DZ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EG": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "HK": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "IQ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "JO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "KW": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LB": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MR": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "OM": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PS": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "QA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SD": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "TN": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "YE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "AF": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "LA": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "CN": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "LV": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "TL": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "zu-ZA": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "CD": [
        "hB",
        "H"
    ],
    "IR": [
        "hB",
        "H"
    ],
    "hi-IN": [
        "hB",
        "h",
        "H"
    ],
    "kn-IN": [
        "hB",
        "h",
        "H"
    ],
    "ml-IN": [
        "hB",
        "h",
        "H"
    ],
    "te-IN": [
        "hB",
        "h",
        "H"
    ],
    "KH": [
        "hB",
        "h",
        "H",
        "hb"
    ],
    "ta-IN": [
        "hB",
        "h",
        "hb",
        "H"
    ],
    "BN": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "MY": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "ET": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "gu-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "mr-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "pa-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "TW": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "KE": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "MM": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "TZ": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "UG": [
        "hB",
        "hb",
        "H",
        "h"
    ]
};

},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNumberElement = exports.createLiteralElement = exports.isDateTimeSkeleton = exports.isNumberSkeleton = exports.isTagElement = exports.isPoundElement = exports.isPluralElement = exports.isSelectElement = exports.isTimeElement = exports.isDateElement = exports.isNumberElement = exports.isArgumentElement = exports.isLiteralElement = exports.SKELETON_TYPE = exports.TYPE = void 0;
var TYPE;
(function (TYPE) {
    /**
     * Raw text
     */
    TYPE[TYPE["literal"] = 0] = "literal";
    /**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */
    TYPE[TYPE["argument"] = 1] = "argument";
    /**
     * Variable w/ number format
     */
    TYPE[TYPE["number"] = 2] = "number";
    /**
     * Variable w/ date format
     */
    TYPE[TYPE["date"] = 3] = "date";
    /**
     * Variable w/ time format
     */
    TYPE[TYPE["time"] = 4] = "time";
    /**
     * Variable w/ select format
     */
    TYPE[TYPE["select"] = 5] = "select";
    /**
     * Variable w/ plural format
     */
    TYPE[TYPE["plural"] = 6] = "plural";
    /**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */
    TYPE[TYPE["pound"] = 7] = "pound";
    /**
     * XML-like tag
     */
    TYPE[TYPE["tag"] = 8] = "tag";
})(TYPE = exports.TYPE || (exports.TYPE = {}));
var SKELETON_TYPE;
(function (SKELETON_TYPE) {
    SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
    SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE = exports.SKELETON_TYPE || (exports.SKELETON_TYPE = {}));
/**
 * Type Guards
 */
function isLiteralElement(el) {
    return el.type === TYPE.literal;
}
exports.isLiteralElement = isLiteralElement;
function isArgumentElement(el) {
    return el.type === TYPE.argument;
}
exports.isArgumentElement = isArgumentElement;
function isNumberElement(el) {
    return el.type === TYPE.number;
}
exports.isNumberElement = isNumberElement;
function isDateElement(el) {
    return el.type === TYPE.date;
}
exports.isDateElement = isDateElement;
function isTimeElement(el) {
    return el.type === TYPE.time;
}
exports.isTimeElement = isTimeElement;
function isSelectElement(el) {
    return el.type === TYPE.select;
}
exports.isSelectElement = isSelectElement;
function isPluralElement(el) {
    return el.type === TYPE.plural;
}
exports.isPluralElement = isPluralElement;
function isPoundElement(el) {
    return el.type === TYPE.pound;
}
exports.isPoundElement = isPoundElement;
function isTagElement(el) {
    return el.type === TYPE.tag;
}
exports.isTagElement = isTagElement;
function isNumberSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
}
exports.isNumberSkeleton = isNumberSkeleton;
function isDateTimeSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
}
exports.isDateTimeSkeleton = isDateTimeSkeleton;
function createLiteralElement(value) {
    return {
        type: TYPE.literal,
        value: value,
    };
}
exports.createLiteralElement = createLiteralElement;
function createNumberElement(value, style) {
    return {
        type: TYPE.number,
        value: value,
        style: style,
    };
}
exports.createNumberElement = createNumberElement;

},{}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDateTimeSkeleton = void 0;
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */
function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function (match) {
        var len = match.length;
        switch (match[0]) {
            // Era
            case 'G':
                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            // Year
            case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
            // Quarter
            case 'q':
            case 'Q':
                throw new RangeError('`q/Q` (quarter) patterns are not supported');
            // Month
            case 'M':
            case 'L':
                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                break;
            // Week
            case 'w':
            case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
                result.day = ['numeric', '2-digit'][len - 1];
                break;
            case 'D':
            case 'F':
            case 'g':
                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
            // Weekday
            case 'E':
                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                break;
            case 'e':
                if (len < 4) {
                    throw new RangeError('`e..eee` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            case 'c':
                if (len < 4) {
                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            // Period
            case 'a': // AM, PM
                result.hour12 = true;
                break;
            case 'b': // am, pm, noon, midnight
            case 'B': // flexible day periods
                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
            // Hour
            case 'h':
                result.hourCycle = 'h12';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'H':
                result.hourCycle = 'h23';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'K':
                result.hourCycle = 'h11';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'k':
                result.hourCycle = 'h24';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'j':
            case 'J':
            case 'C':
                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute
            case 'm':
                result.minute = ['numeric', '2-digit'][len - 1];
                break;
            // Second
            case 's':
                result.second = ['numeric', '2-digit'][len - 1];
                break;
            case 'S':
            case 'A':
                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
            // Zone
            case 'z': // 1..3, 4: specific non-location format
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
            case 'O': // 1, 4: miliseconds in day short, long
            case 'v': // 1, 4: generic non-location format
            case 'V': // 1, 2, 3, 4: time zone ID or city
            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
        }
        return '';
    });
    return result;
}
exports.parseDateTimeSkeleton = parseDateTimeSkeleton;

},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
(0, tslib_1.__exportStar)(require("./date-time"), exports);
(0, tslib_1.__exportStar)(require("./number"), exports);

},{"./date-time":24,"./number":26,"tslib":48}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;
var tslib_1 = require("tslib");
var regex_generated_1 = require("./regex.generated");
function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
        throw new Error('Number skeleton cannot be empty');
    }
    // Parse the skeleton
    var stringTokens = skeleton
        .split(regex_generated_1.WHITE_SPACE_REGEX)
        .filter(function (x) { return x.length > 0; });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
        var stringToken = stringTokens_1[_i];
        var stemAndOptions = stringToken.split('/');
        if (stemAndOptions.length === 0) {
            throw new Error('Invalid number skeleton');
        }
        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
                throw new Error('Invalid number skeleton');
            }
        }
        tokens.push({ stem: stem, options: options });
    }
    return tokens;
}
exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;
function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, '');
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
    var result = {};
    if (str[str.length - 1] === 'r') {
        result.roundingPriority = 'morePrecision';
    }
    else if (str[str.length - 1] === 's') {
        result.roundingPriority = 'lessPrecision';
    }
    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
        // @@@ case
        if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
        }
        // @@@+ case
        else if (g2 === '+') {
            result.minimumSignificantDigits = g1.length;
        }
        // .### case
        else if (g1[0] === '#') {
            result.maximumSignificantDigits = g1.length;
        }
        // .@@## or .@@@ case
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits =
                g1.length + (typeof g2 === 'string' ? g2.length : 0);
        }
        return '';
    });
    return result;
}
function parseSign(str) {
    switch (str) {
        case 'sign-auto':
            return {
                signDisplay: 'auto',
            };
        case 'sign-accounting':
        case '()':
            return {
                currencySign: 'accounting',
            };
        case 'sign-always':
        case '+!':
            return {
                signDisplay: 'always',
            };
        case 'sign-accounting-always':
        case '()!':
            return {
                signDisplay: 'always',
                currencySign: 'accounting',
            };
        case 'sign-except-zero':
        case '+?':
            return {
                signDisplay: 'exceptZero',
            };
        case 'sign-accounting-except-zero':
        case '()?':
            return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting',
            };
        case 'sign-never':
        case '+_':
            return {
                signDisplay: 'never',
            };
    }
}
function parseConciseScientificAndEngineeringStem(stem) {
    // Engineering
    var result;
    if (stem[0] === 'E' && stem[1] === 'E') {
        result = {
            notation: 'engineering',
        };
        stem = stem.slice(2);
    }
    else if (stem[0] === 'E') {
        result = {
            notation: 'scientific',
        };
        stem = stem.slice(1);
    }
    if (result) {
        var signDisplay = stem.slice(0, 2);
        if (signDisplay === '+!') {
            result.signDisplay = 'always';
            stem = stem.slice(2);
        }
        else if (signDisplay === '+?') {
            result.signDisplay = 'exceptZero';
            stem = stem.slice(2);
        }
        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error('Malformed concise eng/scientific notation');
        }
        result.minimumIntegerDigits = stem.length;
    }
    return result;
}
function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
        return signOpts;
    }
    return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */
function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        switch (token.stem) {
            case 'percent':
            case '%':
                result.style = 'percent';
                continue;
            case '%x100':
                result.style = 'percent';
                result.scale = 100;
                continue;
            case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
            case 'group-off':
            case ',_':
                result.useGrouping = false;
                continue;
            case 'precision-integer':
            case '.':
                result.maximumFractionDigits = 0;
                continue;
            case 'measure-unit':
            case 'unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
            case 'compact-short':
            case 'K':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
            case 'compact-long':
            case 'KK':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
            case 'scientific':
                result = (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'engineering':
                result = (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'notation-simple':
                result.notation = 'standard';
                continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
            case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
            case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
            case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
            case 'scale':
                result.scale = parseFloat(token.options[0]);
                continue;
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            case 'integer-width':
                if (token.options.length > 1) {
                    throw new RangeError('integer-width stems only accept a single optional option');
                }
                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                    if (g1) {
                        result.minimumIntegerDigits = g2.length;
                    }
                    else if (g3 && g4) {
                        throw new Error('We currently do not support maximum integer digits');
                    }
                    else if (g5) {
                        throw new Error('We currently do not support exact integer digits');
                    }
                    return '';
                });
                continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
        }
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            // Precision
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
            // precision-integer case
            if (token.options.length > 1) {
                throw new RangeError('Fraction-precision stems only accept a single optional option');
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                // .000* case (before ICU67 it was .000+)
                if (g2 === '*') {
                    result.minimumFractionDigits = g1.length;
                }
                // .### case
                else if (g3 && g3[0] === '#') {
                    result.maximumFractionDigits = g3.length;
                }
                // .00## case
                else if (g4 && g5) {
                    result.minimumFractionDigits = g4.length;
                    result.maximumFractionDigits = g4.length + g5.length;
                }
                else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits = g1.length;
                }
                return '';
            });
            var opt = token.options[0];
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
            if (opt === 'w') {
                result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), { trailingZeroDisplay: 'stripIfInteger' });
            }
            else if (opt) {
                result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), parseSignificantPrecision(opt));
            }
            continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), parseSignificantPrecision(token.stem));
            continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), signOpts);
        }
        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
        if (conciseScientificAndEngineeringOpts) {
            result = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, result), conciseScientificAndEngineeringOpts);
        }
    }
    return result;
}
exports.parseNumberSkeleton = parseNumberSkeleton;

},{"./regex.generated":27,"tslib":48}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WHITE_SPACE_REGEX = void 0;
// @generated from regex-gen.ts
exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

},{}],28:[function(require,module,exports){
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("@material/ripple", [], factory);
	else if(typeof exports === 'object')
		exports["ripple"] = factory();
	else
		root["mdc"] = root["mdc"] || {}, root["mdc"]["ripple"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./packages/mdc-ripple/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./packages/mdc-base/component.ts":
/*!****************************************!*\
  !*** ./packages/mdc-base/component.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCComponent = void 0;
var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-base/foundation.ts");
var MDCComponent = /** @class */function () {
    function MDCComponent(root, foundation) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this.root = root;
        this.initialize.apply(this, __spreadArray([], __read(args)));
        // Note that we initialize foundation here and not within the constructor's
        // default param so that this.root is defined and can be used within the
        // foundation class.
        this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;
        this.foundation.init();
        this.initialSyncWithDOM();
    }
    MDCComponent.attachTo = function (root) {
        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
        // returns an instantiated component with its root set to that element. Also note that in the cases of
        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
        // from getDefaultFoundation().
        return new MDCComponent(root, new foundation_1.MDCFoundation({}));
    };
    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
    MDCComponent.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        // Subclasses can override this to do any additional setup work that would be considered part of a
        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
        // initialized. Any additional arguments besides root and foundation will be passed in here.
    };
    MDCComponent.prototype.getDefaultFoundation = function () {
        // Subclasses must override this method to return a properly configured foundation class for the
        // component.
        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    };
    MDCComponent.prototype.initialSyncWithDOM = function () {
        // Subclasses should override this method if they need to perform work to synchronize with a host DOM
        // object. An example of this would be a form control wrapper that needs to synchronize its internal state
        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    };
    MDCComponent.prototype.destroy = function () {
        // Subclasses may implement this method to release any resources / deregister any listeners they have
        // attached. An example of this might be deregistering a resize event from the window object.
        this.foundation.destroy();
    };
    MDCComponent.prototype.listen = function (evtType, handler, options) {
        this.root.addEventListener(evtType, handler, options);
    };
    MDCComponent.prototype.unlisten = function (evtType, handler, options) {
        this.root.removeEventListener(evtType, handler, options);
    };
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
     */
    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
        if (shouldBubble === void 0) {
            shouldBubble = false;
        }
        var evt;
        if (typeof CustomEvent === 'function') {
            evt = new CustomEvent(evtType, {
                bubbles: shouldBubble,
                detail: evtData
            });
        } else {
            evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
        }
        this.root.dispatchEvent(evt);
    };
    return MDCComponent;
}();
exports.MDCComponent = MDCComponent;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCComponent;

/***/ }),

/***/ "./packages/mdc-base/foundation.ts":
/*!*****************************************!*\
  !*** ./packages/mdc-base/foundation.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCFoundation = void 0;
var MDCFoundation = /** @class */function () {
    function MDCFoundation(adapter) {
        if (adapter === void 0) {
            adapter = {};
        }
        this.adapter = adapter;
    }
    Object.defineProperty(MDCFoundation, "cssClasses", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports every
            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
        get: function get() {
            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
            // validation.
            return {};
        },
        enumerable: false,
        configurable: true
    });
    MDCFoundation.prototype.init = function () {
        // Subclasses should override this method to perform initialization routines (registering events, etc.)
    };
    MDCFoundation.prototype.destroy = function () {
        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };
    return MDCFoundation;
}();
exports.MDCFoundation = MDCFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCFoundation;

/***/ }),

/***/ "./packages/mdc-dom/events.ts":
/*!************************************!*\
  !*** ./packages/mdc-dom/events.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPassive = void 0;
/**
 * Determine whether the current browser supports passive event listeners, and
 * if so, use them.
 */
function applyPassive(globalObj) {
    if (globalObj === void 0) {
        globalObj = window;
    }
    return supportsPassiveOption(globalObj) ? { passive: true } : false;
}
exports.applyPassive = applyPassive;
function supportsPassiveOption(globalObj) {
    if (globalObj === void 0) {
        globalObj = window;
    }
    // See
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    var passiveSupported = false;
    try {
        var options = {
            // This function will be called when the browser
            // attempts to access the passive property.
            get passive() {
                passiveSupported = true;
                return false;
            }
        };
        var handler = function handler() {};
        globalObj.document.addEventListener('test', handler, options);
        globalObj.document.removeEventListener('test', handler, options);
    } catch (err) {
        passiveSupported = false;
    }
    return passiveSupported;
}

/***/ }),

/***/ "./packages/mdc-dom/ponyfill.ts":
/*!**************************************!*\
  !*** ./packages/mdc-dom/ponyfill.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateScrollWidth = exports.matches = exports.closest = void 0;
/**
 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
 */
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    var el = element;
    while (el) {
        if (matches(el, selector)) {
            return el;
        }
        el = el.parentElement;
    }
    return null;
}
exports.closest = closest;
function matches(element, selector) {
    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
}
exports.matches = matches;
/**
 * Used to compute the estimated scroll width of elements. When an element is
 * hidden due to display: none; being applied to a parent element, the width is
 * returned as 0. However, the element will have a true width once no longer
 * inside a display: none context. This method computes an estimated width when
 * the element is hidden or returns the true width when the element is visble.
 * @param {Element} element the element whose width to estimate
 */
function estimateScrollWidth(element) {
    // Check the offsetParent. If the element inherits display: none from any
    // parent, the offsetParent property will be null (see
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
    // This check ensures we only clone the node when necessary.
    var htmlEl = element;
    if (htmlEl.offsetParent !== null) {
        return htmlEl.scrollWidth;
    }
    var clone = htmlEl.cloneNode(true);
    clone.style.setProperty('position', 'absolute');
    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
    document.documentElement.appendChild(clone);
    var scrollWidth = clone.scrollWidth;
    document.documentElement.removeChild(clone);
    return scrollWidth;
}
exports.estimateScrollWidth = estimateScrollWidth;

/***/ }),

/***/ "./packages/mdc-ripple/adapter.ts":
/*!****************************************!*\
  !*** ./packages/mdc-ripple/adapter.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });

/***/ }),

/***/ "./packages/mdc-ripple/component.ts":
/*!******************************************!*\
  !*** ./packages/mdc-ripple/component.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function get() {
            return m[k];
        } });
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function (o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCRipple = void 0;
var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-ripple/foundation.ts");
var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts"));
var MDCRipple = /** @class */function (_super) {
    __extends(MDCRipple, _super);
    function MDCRipple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        return _this;
    }
    MDCRipple.attachTo = function (root, opts) {
        if (opts === void 0) {
            opts = {
                isUnbounded: undefined
            };
        }
        var ripple = new MDCRipple(root);
        // Only override unbounded behavior if option is explicitly specified
        if (opts.isUnbounded !== undefined) {
            ripple.unbounded = opts.isUnbounded;
        }
        return ripple;
    };
    MDCRipple.createAdapter = function (instance) {
        return {
            addClass: function addClass(className) {
                return instance.root.classList.add(className);
            },
            browserSupportsCssVars: function browserSupportsCssVars() {
                return util.supportsCssVariables(window);
            },
            computeBoundingRect: function computeBoundingRect() {
                return instance.root.getBoundingClientRect();
            },
            containsEventTarget: function containsEventTarget(target) {
                return instance.root.contains(target);
            },
            deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
                return document.documentElement.removeEventListener(evtType, handler, events_1.applyPassive());
            },
            deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                return instance.root.removeEventListener(evtType, handler, events_1.applyPassive());
            },
            deregisterResizeHandler: function deregisterResizeHandler(handler) {
                return window.removeEventListener('resize', handler);
            },
            getWindowPageOffset: function getWindowPageOffset() {
                return { x: window.pageXOffset, y: window.pageYOffset };
            },
            isSurfaceActive: function isSurfaceActive() {
                return ponyfill_1.matches(instance.root, ':active');
            },
            isSurfaceDisabled: function isSurfaceDisabled() {
                return Boolean(instance.disabled);
            },
            isUnbounded: function isUnbounded() {
                return Boolean(instance.unbounded);
            },
            registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
                return document.documentElement.addEventListener(evtType, handler, events_1.applyPassive());
            },
            registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                return instance.root.addEventListener(evtType, handler, events_1.applyPassive());
            },
            registerResizeHandler: function registerResizeHandler(handler) {
                return window.addEventListener('resize', handler);
            },
            removeClass: function removeClass(className) {
                return instance.root.classList.remove(className);
            },
            updateCssVariable: function updateCssVariable(varName, value) {
                return instance.root.style.setProperty(varName, value);
            }
        };
    };
    Object.defineProperty(MDCRipple.prototype, "unbounded", {
        get: function get() {
            return Boolean(this.isUnbounded);
        },
        set: function set(unbounded) {
            this.isUnbounded = Boolean(unbounded);
            this.setUnbounded();
        },
        enumerable: false,
        configurable: true
    });
    MDCRipple.prototype.activate = function () {
        this.foundation.activate();
    };
    MDCRipple.prototype.deactivate = function () {
        this.foundation.deactivate();
    };
    MDCRipple.prototype.layout = function () {
        this.foundation.layout();
    };
    MDCRipple.prototype.getDefaultFoundation = function () {
        return new foundation_1.MDCRippleFoundation(MDCRipple.createAdapter(this));
    };
    MDCRipple.prototype.initialSyncWithDOM = function () {
        var root = this.root;
        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;
    };
    /**
     * Closure Compiler throws an access control error when directly accessing a
     * protected or private property inside a getter/setter, like unbounded above.
     * By accessing the protected property inside a method, we solve that problem.
     * That's why this function exists.
     */
    MDCRipple.prototype.setUnbounded = function () {
        this.foundation.setUnbounded(Boolean(this.isUnbounded));
    };
    return MDCRipple;
}(component_1.MDCComponent);
exports.MDCRipple = MDCRipple;

/***/ }),

/***/ "./packages/mdc-ripple/constants.ts":
/*!******************************************!*\
  !*** ./packages/mdc-ripple/constants.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.numbers = exports.strings = exports.cssClasses = void 0;
exports.cssClasses = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'
};
exports.strings = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top'
};
exports.numbers = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300 };

/***/ }),

/***/ "./packages/mdc-ripple/foundation.ts":
/*!*******************************************!*\
  !*** ./packages/mdc-ripple/foundation.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = this && this.__values || function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCRippleFoundation = void 0;
var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-ripple/constants.ts");
var util_1 = __webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts");
// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];
// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];
// simultaneous nested activations
var activatedTargets = [];
var MDCRippleFoundation = /** @class */function (_super) {
    __extends(MDCRippleFoundation, _super);
    function MDCRippleFoundation(adapter) {
        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
        _this.activationAnimationHasEnded = false;
        _this.activationTimer = 0;
        _this.fgDeactivationRemovalTimer = 0;
        _this.fgScale = '0';
        _this.frame = { width: 0, height: 0 };
        _this.initialSize = 0;
        _this.layoutFrame = 0;
        _this.maxRadius = 0;
        _this.unboundedCoords = { left: 0, top: 0 };
        _this.activationState = _this.defaultActivationState();
        _this.activationTimerCallback = function () {
            _this.activationAnimationHasEnded = true;
            _this.runDeactivationUXLogicIfReady();
        };
        _this.activateHandler = function (e) {
            _this.activateImpl(e);
        };
        _this.deactivateHandler = function () {
            _this.deactivateImpl();
        };
        _this.focusHandler = function () {
            _this.handleFocus();
        };
        _this.blurHandler = function () {
            _this.handleBlur();
        };
        _this.resizeHandler = function () {
            _this.layout();
        };
        return _this;
    }
    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
        get: function get() {
            return constants_1.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
        get: function get() {
            return constants_1.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
        get: function get() {
            return constants_1.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
        get: function get() {
            return {
                addClass: function addClass() {
                    return undefined;
                },
                browserSupportsCssVars: function browserSupportsCssVars() {
                    return true;
                },
                computeBoundingRect: function computeBoundingRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                },
                containsEventTarget: function containsEventTarget() {
                    return true;
                },
                deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() {
                    return undefined;
                },
                deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                },
                deregisterResizeHandler: function deregisterResizeHandler() {
                    return undefined;
                },
                getWindowPageOffset: function getWindowPageOffset() {
                    return { x: 0, y: 0 };
                },
                isSurfaceActive: function isSurfaceActive() {
                    return true;
                },
                isSurfaceDisabled: function isSurfaceDisabled() {
                    return true;
                },
                isUnbounded: function isUnbounded() {
                    return true;
                },
                registerDocumentInteractionHandler: function registerDocumentInteractionHandler() {
                    return undefined;
                },
                registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                },
                registerResizeHandler: function registerResizeHandler() {
                    return undefined;
                },
                removeClass: function removeClass() {
                    return undefined;
                },
                updateCssVariable: function updateCssVariable() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCRippleFoundation.prototype.init = function () {
        var _this = this;
        var supportsPressRipple = this.supportsPressRipple();
        this.registerRootHandlers(supportsPressRipple);
        if (supportsPressRipple) {
            var _a = MDCRippleFoundation.cssClasses,
                ROOT_1 = _a.ROOT,
                UNBOUNDED_1 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.addClass(ROOT_1);
                if (_this.adapter.isUnbounded()) {
                    _this.adapter.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal();
                }
            });
        }
    };
    MDCRippleFoundation.prototype.destroy = function () {
        var _this = this;
        if (this.supportsPressRipple()) {
            if (this.activationTimer) {
                clearTimeout(this.activationTimer);
                this.activationTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer) {
                clearTimeout(this.fgDeactivationRemovalTimer);
                this.fgDeactivationRemovalTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
            }
            var _a = MDCRippleFoundation.cssClasses,
                ROOT_2 = _a.ROOT,
                UNBOUNDED_2 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.removeClass(ROOT_2);
                _this.adapter.removeClass(UNBOUNDED_2);
                _this.removeCssVars();
            });
        }
        this.deregisterRootHandlers();
        this.deregisterDeactivationHandlers();
    };
    /**
     * @param evt Optional event containing position information.
     */
    MDCRippleFoundation.prototype.activate = function (evt) {
        this.activateImpl(evt);
    };
    MDCRippleFoundation.prototype.deactivate = function () {
        this.deactivateImpl();
    };
    MDCRippleFoundation.prototype.layout = function () {
        var _this = this;
        if (this.layoutFrame) {
            cancelAnimationFrame(this.layoutFrame);
        }
        this.layoutFrame = requestAnimationFrame(function () {
            _this.layoutInternal();
            _this.layoutFrame = 0;
        });
    };
    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
        if (unbounded) {
            this.adapter.addClass(UNBOUNDED);
        } else {
            this.adapter.removeClass(UNBOUNDED);
        }
    };
    MDCRippleFoundation.prototype.handleFocus = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    MDCRippleFoundation.prototype.handleBlur = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */
    MDCRippleFoundation.prototype.supportsPressRipple = function () {
        return this.adapter.browserSupportsCssVars();
    };
    MDCRippleFoundation.prototype.defaultActivationState = function () {
        return {
            activationEvent: undefined,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false
        };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */
    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
        var e_1, _a;
        if (supportsPressRipple) {
            try {
                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            if (this.adapter.isUnbounded()) {
                this.adapter.registerResizeHandler(this.resizeHandler);
            }
        }
        this.adapter.registerInteractionHandler('focus', this.focusHandler);
        this.adapter.registerInteractionHandler('blur', this.blurHandler);
    };
    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
        var e_2, _a;
        if (evt.type === 'keydown') {
            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
        } else {
            try {
                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
                }
            } catch (e_2_1) {
                e_2 = { error: e_2_1 };
            } finally {
                try {
                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
                } finally {
                    if (e_2) throw e_2.error;
                }
            }
        }
    };
    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
        var e_3, _a;
        try {
            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
            }
        } catch (e_3_1) {
            e_3 = { error: e_3_1 };
        } finally {
            try {
                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
            } finally {
                if (e_3) throw e_3.error;
            }
        }
        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
        if (this.adapter.isUnbounded()) {
            this.adapter.deregisterResizeHandler(this.resizeHandler);
        }
    };
    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
        var e_4, _a;
        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
        try {
            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
        } catch (e_4_1) {
            e_4 = { error: e_4_1 };
        } finally {
            try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
            } finally {
                if (e_4) throw e_4.error;
            }
        }
    };
    MDCRippleFoundation.prototype.removeCssVars = function () {
        var _this = this;
        var rippleStrings = MDCRippleFoundation.strings;
        var keys = Object.keys(rippleStrings);
        keys.forEach(function (key) {
            if (key.indexOf('VAR_') === 0) {
                _this.adapter.updateCssVariable(rippleStrings[key], null);
            }
        });
    };
    MDCRippleFoundation.prototype.activateImpl = function (evt) {
        var _this = this;
        if (this.adapter.isSurfaceDisabled()) {
            return;
        }
        var activationState = this.activationState;
        if (activationState.isActivated) {
            return;
        }
        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
        var previousActivationEvent = this.previousActivationEvent;
        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
        if (isSameInteraction) {
            return;
        }
        activationState.isActivated = true;
        activationState.isProgrammatic = evt === undefined;
        activationState.activationEvent = evt;
        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
        var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {
            return _this.adapter.containsEventTarget(target);
        });
        if (hasActivatedChild) {
            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
            this.resetActivationState();
            return;
        }
        if (evt !== undefined) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers(evt);
        }
        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
        if (activationState.wasElementMadeActive) {
            this.animateActivation();
        }
        requestAnimationFrame(function () {
            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
            activatedTargets = [];
            if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {
                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                // active states inconsistently when they're called within event handling code:
                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                // variable is set within a rAF callback for a submit button interaction (#2241).
                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                if (activationState.wasElementMadeActive) {
                    _this.animateActivation();
                }
            }
            if (!activationState.wasElementMadeActive) {
                // Reset activation state immediately if element was not made active.
                _this.activationState = _this.defaultActivationState();
            }
        });
    };
    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
        return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;
    };
    MDCRippleFoundation.prototype.animateActivation = function () {
        var _this = this;
        var _a = MDCRippleFoundation.strings,
            VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,
            VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
        var _b = MDCRippleFoundation.cssClasses,
            FG_DEACTIVATION = _b.FG_DEACTIVATION,
            FG_ACTIVATION = _b.FG_ACTIVATION;
        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
        this.layoutInternal();
        var translateStart = '';
        var translateEnd = '';
        if (!this.adapter.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates(),
                startPoint = _c.startPoint,
                endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
        }
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
        // Cancel any ongoing activation/deactivation animations
        clearTimeout(this.activationTimer);
        clearTimeout(this.fgDeactivationRemovalTimer);
        this.rmBoundedActivationClasses();
        this.adapter.removeClass(FG_DEACTIVATION);
        // Force layout in order to re-trigger the animation.
        this.adapter.computeBoundingRect();
        this.adapter.addClass(FG_ACTIVATION);
        this.activationTimer = setTimeout(function () {
            _this.activationTimerCallback();
        }, DEACTIVATION_TIMEOUT_MS);
    };
    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
        var _a = this.activationState,
            activationEvent = _a.activationEvent,
            wasActivatedByPointer = _a.wasActivatedByPointer;
        var startPoint;
        if (wasActivatedByPointer) {
            startPoint = util_1.getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
        } else {
            startPoint = {
                x: this.frame.width / 2,
                y: this.frame.height / 2
            };
        }
        // Center the element around the start point.
        startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2
        };
        var endPoint = {
            x: this.frame.width / 2 - this.initialSize / 2,
            y: this.frame.height / 2 - this.initialSize / 2
        };
        return { startPoint: startPoint, endPoint: endPoint };
    };
    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
        var _this = this;
        // This method is called both when a pointing device is released, and when the activation animation ends.
        // The deactivation animation should only run after both of those occur.
        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
        var _a = this.activationState,
            hasDeactivationUXRun = _a.hasDeactivationUXRun,
            isActivated = _a.isActivated;
        var activationHasEnded = hasDeactivationUXRun || !isActivated;
        if (activationHasEnded && this.activationAnimationHasEnded) {
            this.rmBoundedActivationClasses();
            this.adapter.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer = setTimeout(function () {
                _this.adapter.removeClass(FG_DEACTIVATION);
            }, constants_1.numbers.FG_DEACTIVATION_MS);
        }
    };
    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
        this.adapter.removeClass(FG_ACTIVATION);
        this.activationAnimationHasEnded = false;
        this.adapter.computeBoundingRect();
    };
    MDCRippleFoundation.prototype.resetActivationState = function () {
        var _this = this;
        this.previousActivationEvent = this.activationState.activationEvent;
        this.activationState = this.defaultActivationState();
        // Touch devices may fire additional events for the same interaction within a short time.
        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
        setTimeout(function () {
            return _this.previousActivationEvent = undefined;
        }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };
    MDCRippleFoundation.prototype.deactivateImpl = function () {
        var _this = this;
        var activationState = this.activationState;
        // This can happen in scenarios such as when you have a keyup event that blurs the element.
        if (!activationState.isActivated) {
            return;
        }
        var state = __assign({}, activationState);
        if (activationState.isProgrammatic) {
            requestAnimationFrame(function () {
                _this.animateDeactivation(state);
            });
            this.resetActivationState();
        } else {
            this.deregisterDeactivationHandlers();
            requestAnimationFrame(function () {
                _this.activationState.hasDeactivationUXRun = true;
                _this.animateDeactivation(state);
                _this.resetActivationState();
            });
        }
    };
    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
        var wasActivatedByPointer = _a.wasActivatedByPointer,
            wasElementMadeActive = _a.wasElementMadeActive;
        if (wasActivatedByPointer || wasElementMadeActive) {
            this.runDeactivationUXLogicIfReady();
        }
    };
    MDCRippleFoundation.prototype.layoutInternal = function () {
        var _this = this;
        this.frame = this.adapter.computeBoundingRect();
        var maxDim = Math.max(this.frame.height, this.frame.width);
        // Surface diameter is treated differently for unbounded vs. bounded ripples.
        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
        // `overflow: hidden`.
        var getBoundedRadius = function getBoundedRadius() {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
        };
        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
        // Unbounded ripple size should always be even number to equally center align.
        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
            this.initialSize = initialSize - 1;
        } else {
            this.initialSize = initialSize;
        }
        this.fgScale = "" + this.maxRadius / this.initialSize;
        this.updateLayoutCssVars();
    };
    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
        var _a = MDCRippleFoundation.strings,
            VAR_FG_SIZE = _a.VAR_FG_SIZE,
            VAR_LEFT = _a.VAR_LEFT,
            VAR_TOP = _a.VAR_TOP,
            VAR_FG_SCALE = _a.VAR_FG_SCALE;
        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
        if (this.adapter.isUnbounded()) {
            this.unboundedCoords = {
                left: Math.round(this.frame.width / 2 - this.initialSize / 2),
                top: Math.round(this.frame.height / 2 - this.initialSize / 2)
            };
            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
        }
    };
    return MDCRippleFoundation;
}(foundation_1.MDCFoundation);
exports.MDCRippleFoundation = MDCRippleFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCRippleFoundation;

/***/ }),

/***/ "./packages/mdc-ripple/index.ts":
/*!**************************************!*\
  !*** ./packages/mdc-ripple/index.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function get() {
            return m[k];
        } });
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function (o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }__setModuleDefault(result, mod);
    return result;
};
var __exportStar = this && this.__exportStar || function (m, exports) {
    for (var p in m) {
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.util = void 0;
var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts"));
exports.util = util;
__exportStar(__webpack_require__(/*! ./adapter */ "./packages/mdc-ripple/adapter.ts"), exports);
__exportStar(__webpack_require__(/*! ./component */ "./packages/mdc-ripple/component.ts"), exports);
__exportStar(__webpack_require__(/*! ./constants */ "./packages/mdc-ripple/constants.ts"), exports);
__exportStar(__webpack_require__(/*! ./foundation */ "./packages/mdc-ripple/foundation.ts"), exports);
__exportStar(__webpack_require__(/*! ./types */ "./packages/mdc-ripple/types.ts"), exports);

/***/ }),

/***/ "./packages/mdc-ripple/types.ts":
/*!**************************************!*\
  !*** ./packages/mdc-ripple/types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });

/***/ }),

/***/ "./packages/mdc-ripple/util.ts":
/*!*************************************!*\
  !*** ./packages/mdc-ripple/util.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getNormalizedEventCoords = exports.supportsCssVariables = void 0;
/**
 * Stores result from supportsCssVariables to avoid redundant processing to
 * detect CSS custom variable support.
 */
var supportsCssVariables_;
function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) {
        forceRefresh = false;
    }
    var CSS = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;
    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
        return supportsCssVariables_;
    }
    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
    if (!supportsFunctionPresent) {
        return false;
    }
    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
    // See: README section on Safari
    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');
    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
    if (!forceRefresh) {
        supportsCssVariables_ = supportsCssVars;
    }
    return supportsCssVars;
}
exports.supportsCssVariables = supportsCssVariables;
function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
        return { x: 0, y: 0 };
    }
    var x = pageOffset.x,
        y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY;
    // Determine touch point relative to the ripple container.
    if (evt.type === 'touchstart') {
        var touchEvent = evt;
        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    } else {
        var mouseEvent = evt;
        normalizedX = mouseEvent.pageX - documentX;
        normalizedY = mouseEvent.pageY - documentY;
    }
    return { x: normalizedX, y: normalizedY };
}
exports.getNormalizedEventCoords = getNormalizedEventCoords;

/***/ })

/******/ });
});

},{}],29:[function(require,module,exports){
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("@material/switch", [], factory);
	else if(typeof exports === 'object')
		exports["switch"] = factory();
	else
		root["mdc"] = root["mdc"] || {}, root["mdc"]["switch"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./packages/mdc-switch/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./packages/mdc-base/component.ts":
/*!****************************************!*\
  !*** ./packages/mdc-base/component.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCComponent = void 0;
var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-base/foundation.ts");
var MDCComponent = /** @class */function () {
    function MDCComponent(root, foundation) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this.root = root;
        this.initialize.apply(this, __spreadArray([], __read(args)));
        // Note that we initialize foundation here and not within the constructor's
        // default param so that this.root is defined and can be used within the
        // foundation class.
        this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;
        this.foundation.init();
        this.initialSyncWithDOM();
    }
    MDCComponent.attachTo = function (root) {
        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
        // returns an instantiated component with its root set to that element. Also note that in the cases of
        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
        // from getDefaultFoundation().
        return new MDCComponent(root, new foundation_1.MDCFoundation({}));
    };
    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
    MDCComponent.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        // Subclasses can override this to do any additional setup work that would be considered part of a
        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
        // initialized. Any additional arguments besides root and foundation will be passed in here.
    };
    MDCComponent.prototype.getDefaultFoundation = function () {
        // Subclasses must override this method to return a properly configured foundation class for the
        // component.
        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    };
    MDCComponent.prototype.initialSyncWithDOM = function () {
        // Subclasses should override this method if they need to perform work to synchronize with a host DOM
        // object. An example of this would be a form control wrapper that needs to synchronize its internal state
        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    };
    MDCComponent.prototype.destroy = function () {
        // Subclasses may implement this method to release any resources / deregister any listeners they have
        // attached. An example of this might be deregistering a resize event from the window object.
        this.foundation.destroy();
    };
    MDCComponent.prototype.listen = function (evtType, handler, options) {
        this.root.addEventListener(evtType, handler, options);
    };
    MDCComponent.prototype.unlisten = function (evtType, handler, options) {
        this.root.removeEventListener(evtType, handler, options);
    };
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
     */
    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
        if (shouldBubble === void 0) {
            shouldBubble = false;
        }
        var evt;
        if (typeof CustomEvent === 'function') {
            evt = new CustomEvent(evtType, {
                bubbles: shouldBubble,
                detail: evtData
            });
        } else {
            evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
        }
        this.root.dispatchEvent(evt);
    };
    return MDCComponent;
}();
exports.MDCComponent = MDCComponent;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCComponent;

/***/ }),

/***/ "./packages/mdc-base/foundation.ts":
/*!*****************************************!*\
  !*** ./packages/mdc-base/foundation.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCFoundation = void 0;
var MDCFoundation = /** @class */function () {
    function MDCFoundation(adapter) {
        if (adapter === void 0) {
            adapter = {};
        }
        this.adapter = adapter;
    }
    Object.defineProperty(MDCFoundation, "cssClasses", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports every
            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
        get: function get() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
            return {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
        get: function get() {
            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
            // validation.
            return {};
        },
        enumerable: false,
        configurable: true
    });
    MDCFoundation.prototype.init = function () {
        // Subclasses should override this method to perform initialization routines (registering events, etc.)
    };
    MDCFoundation.prototype.destroy = function () {
        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };
    return MDCFoundation;
}();
exports.MDCFoundation = MDCFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCFoundation;

/***/ }),

/***/ "./packages/mdc-base/observer-foundation.ts":
/*!**************************************************!*\
  !*** ./packages/mdc-base/observer-foundation.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __values = this && this.__values || function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCObserverFoundation = void 0;
var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-base/foundation.ts");
var observer_1 = __webpack_require__(/*! ./observer */ "./packages/mdc-base/observer.ts");
var MDCObserverFoundation = /** @class */function (_super) {
    __extends(MDCObserverFoundation, _super);
    function MDCObserverFoundation(adapter) {
        var _this = _super.call(this, adapter) || this;
        /** A set of cleanup functions to unobserve changes. */
        _this.unobserves = new Set();
        return _this;
    }
    MDCObserverFoundation.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.unobserve();
    };
    /**
     * Observe a target's properties for changes using the provided map of
     * property names and observer functions.
     *
     * @template T The target type.
     * @param target - The target to observe.
     * @param observers - An object whose keys are target properties and values
     *     are observer functions that are called when the associated property
     *     changes.
     * @return A cleanup function that can be called to unobserve the
     *     target.
     */
    MDCObserverFoundation.prototype.observe = function (target, observers) {
        var e_1, _a;
        var _this = this;
        var cleanup = [];
        try {
            for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                var observer = observers[property].bind(this);
                cleanup.push(this.observeProperty(target, property, observer));
            }
        } catch (e_1_1) {
            e_1 = { error: e_1_1 };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        var unobserve = function unobserve() {
            var e_2, _a;
            try {
                for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
                    var cleanupFn = cleanup_1_1.value;
                    cleanupFn();
                }
            } catch (e_2_1) {
                e_2 = { error: e_2_1 };
            } finally {
                try {
                    if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);
                } finally {
                    if (e_2) throw e_2.error;
                }
            }
            _this.unobserves.delete(unobserve);
        };
        this.unobserves.add(unobserve);
        return unobserve;
    };
    /**
     * Observe a target's property for changes. When a property changes, the
     * provided `Observer` function will be invoked with the properties current
     * and previous values.
     *
     * The returned cleanup function will stop listening to changes for the
     * provided `Observer`.
     *
     * @template T The observed target type.
     * @template K The observed property.
     * @param target - The target to observe.
     * @param property - The property of the target to observe.
     * @param observer - An observer function to invoke each time the property
     *     changes.
     * @return A cleanup function that will stop observing changes for the
     *     provided `Observer`.
     */
    MDCObserverFoundation.prototype.observeProperty = function (target, property, observer) {
        return observer_1.observeProperty(target, property, observer);
    };
    /**
     * Enables or disables all observers for the provided target. Disabling
     * observers will prevent them from being called until they are re-enabled.
     *
     * @param target - The target to enable or disable observers for.
     * @param enabled - Whether or not observers should be called.
     */
    MDCObserverFoundation.prototype.setObserversEnabled = function (target, enabled) {
        observer_1.setObserversEnabled(target, enabled);
    };
    /**
     * Clean up all observers and stop listening for property changes.
     */
    MDCObserverFoundation.prototype.unobserve = function () {
        var e_3, _a;
        try {
            // Iterate over a copy since unobserve() will remove themselves from the set
            for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var unobserve = _c.value;
                unobserve();
            }
        } catch (e_3_1) {
            e_3 = { error: e_3_1 };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_3) throw e_3.error;
            }
        }
    };
    return MDCObserverFoundation;
}(foundation_1.MDCFoundation);
exports.MDCObserverFoundation = MDCObserverFoundation;

/***/ }),

/***/ "./packages/mdc-base/observer.ts":
/*!***************************************!*\
  !*** ./packages/mdc-base/observer.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = this && this.__values || function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setObserversEnabled = exports.getDescriptor = exports.observeProperty = exports.mdcObserver = void 0;
/**
 * Mixin to add `MDCObserver` functionality to an optional base class.
 *
 * @deprecated Prefer MDCObserverFoundation for stricter closure compliance.
 * @template C Optional base class constructor type.
 * @param baseClass - Optional base class.
 * @return A class that extends the optional base class with `MDCObserver`
 *     functionality.
 */
function mdcObserver(baseClass) {
    if (baseClass === void 0) {
        baseClass = /** @class */function () {
            function class_1() {}
            return class_1;
        }();
    }
    // Mixin classes cannot use private members and Symbol() cannot be used in 3P
    // for IE11.
    var unobserveMap = new WeakMap();
    return (/** @class */function (_super) {
            __extends(MDCObserver, _super);
            function MDCObserver() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MDCObserver.prototype.observe = function (target, observers) {
                var e_1, _a;
                var _this = this;
                var cleanup = [];
                try {
                    for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var property = _c.value;
                        var observer = observers[property].bind(this);
                        cleanup.push(observeProperty(target, property, observer));
                    }
                } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                var unobserve = function unobserve() {
                    var e_2, _a;
                    try {
                        for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
                            var cleanupFn = cleanup_1_1.value;
                            cleanupFn();
                        }
                    } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    } finally {
                        try {
                            if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);
                        } finally {
                            if (e_2) throw e_2.error;
                        }
                    }
                    var unobserves = unobserveMap.get(_this) || [];
                    var index = unobserves.indexOf(unobserve);
                    if (index > -1) {
                        unobserves.splice(index, 1);
                    }
                };
                var unobserves = unobserveMap.get(this);
                if (!unobserves) {
                    unobserves = [];
                    unobserveMap.set(this, unobserves);
                }
                unobserves.push(unobserve);
                return unobserve;
            };
            MDCObserver.prototype.setObserversEnabled = function (target, enabled) {
                setObserversEnabled(target, enabled);
            };
            MDCObserver.prototype.unobserve = function () {
                var e_3, _a;
                // Iterate over a copy since unobserve() will remove themselves from the
                // array
                var unobserves = unobserveMap.get(this) || [];
                try {
                    for (var _b = __values(__spreadArray([], __read(unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var unobserve = _c.value;
                        unobserve();
                    }
                } catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
            };
            return MDCObserver;
        }(baseClass)
    );
}
exports.mdcObserver = mdcObserver;
/**
 * Observe a target's property for changes. When a property changes, the
 * provided `Observer` function will be invoked with the properties current and
 * previous values.
 *
 * The returned cleanup function will stop listening to changes for the
 * provided `Observer`.
 *
 * @template T The observed target type.
 * @template K The observed property.
 * @param target - The target to observe.
 * @param property - The property of the target to observe.
 * @param observer - An observer function to invoke each time the property
 *     changes.
 * @return A cleanup function that will stop observing changes for the provided
 *     `Observer`.
 */
function observeProperty(target, property, observer) {
    var targetObservers = installObserver(target, property);
    var observers = targetObservers.getObservers(property);
    observers.push(observer);
    return function () {
        observers.splice(observers.indexOf(observer), 1);
    };
}
exports.observeProperty = observeProperty;
/**
 * A Map of all `TargetObservers` that have been installed.
 */
var allTargetObservers = new WeakMap();
/**
 * Installs a `TargetObservers` for the provided target (if not already
 * installed), and replaces the given property with a getter and setter that
 * will respond to changes and call `TargetObservers`.
 *
 * Subsequent calls to `installObserver()` with the same target and property
 * will not override the property's previously installed getter/setter.
 *
 * @template T The observed target type.
 * @template K The observed property to create a getter/setter for.
 * @param target - The target to observe.
 * @param property - The property to create a getter/setter for, if needed.
 * @return The installed `TargetObservers` for the provided target.
 */
function installObserver(target, property) {
    var observersMap = new Map();
    if (!allTargetObservers.has(target)) {
        allTargetObservers.set(target, {
            isEnabled: true,
            getObservers: function getObservers(key) {
                var observers = observersMap.get(key) || [];
                if (!observersMap.has(key)) {
                    observersMap.set(key, observers);
                }
                return observers;
            },
            installedProperties: new Set()
        });
    }
    var targetObservers = allTargetObservers.get(target);
    if (targetObservers.installedProperties.has(property)) {
        // The getter/setter has already been replaced for this property
        return targetObservers;
    }
    // Retrieve (or create if it's a plain property) the original descriptor from
    // the target...
    var descriptor = getDescriptor(target, property) || {
        configurable: true,
        enumerable: true,
        value: target[property],
        writable: true
    };
    // ...and create a copy that will be used for the observer.
    var observedDescriptor = __assign({}, descriptor);
    var descGet = descriptor.get,
        descSet = descriptor.set;
    if ('value' in descriptor) {
        // The descriptor is a simple value (not a getter/setter).
        // For our observer descriptor that we copied, delete the value/writable
        // properties, since they are incompatible with the get/set properties
        // for descriptors.
        delete observedDescriptor.value;
        delete observedDescriptor.writable;
        // Set up a simple getter...
        var value_1 = descriptor.value;
        descGet = function descGet() {
            return value_1;
        };
        // ...and setter (if the original property was writable).
        if (descriptor.writable) {
            descSet = function descSet(newValue) {
                value_1 = newValue;
            };
        }
    }
    if (descGet) {
        observedDescriptor.get = function () {
            // `this as T` needed for closure conformance
            return descGet.call(this);
        };
    }
    if (descSet) {
        observedDescriptor.set = function (newValue) {
            var e_4, _a;
            // `thus as T` needed for closure conformance
            var previous = descGet ? descGet.call(this) : newValue;
            descSet.call(this, newValue);
            if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
                try {
                    for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer(newValue, previous);
                    }
                } catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_4) throw e_4.error;
                    }
                }
            }
        };
    }
    targetObservers.installedProperties.add(property);
    Object.defineProperty(target, property, observedDescriptor);
    return targetObservers;
}
/**
 * Retrieves the descriptor for a property from the provided target. This
 * function will walk up the target's prototype chain to search for the
 * descriptor.
 *
 * @template T The target type.
 * @template K The property type.
 * @param target - The target to retrieve a descriptor from.
 * @param property - The name of the property to retrieve a descriptor for.
 * @return the descriptor, or undefined if it does not exist. Keep in mind that
 *     plain properties may not have a descriptor defined.
 */
function getDescriptor(target, property) {
    var descriptorTarget = target;
    var descriptor;
    while (descriptorTarget) {
        descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
        if (descriptor) {
            break;
        }
        // Walk up the instance's prototype chain in case the property is declared
        // on a superclass.
        descriptorTarget = Object.getPrototypeOf(descriptorTarget);
    }
    return descriptor;
}
exports.getDescriptor = getDescriptor;
/**
 * Enables or disables all observers for a provided target. Changes to observed
 * properties will not call any observers when disabled.
 *
 * @template T The observed target type.
 * @param target - The target to enable or disable observers for.
 * @param enabled - True to enable or false to disable observers.
 */
function setObserversEnabled(target, enabled) {
    var targetObservers = allTargetObservers.get(target);
    if (targetObservers) {
        targetObservers.isEnabled = enabled;
    }
}
exports.setObserversEnabled = setObserversEnabled;

/***/ }),

/***/ "./packages/mdc-dom/events.ts":
/*!************************************!*\
  !*** ./packages/mdc-dom/events.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPassive = void 0;
/**
 * Determine whether the current browser supports passive event listeners, and
 * if so, use them.
 */
function applyPassive(globalObj) {
    if (globalObj === void 0) {
        globalObj = window;
    }
    return supportsPassiveOption(globalObj) ? { passive: true } : false;
}
exports.applyPassive = applyPassive;
function supportsPassiveOption(globalObj) {
    if (globalObj === void 0) {
        globalObj = window;
    }
    // See
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    var passiveSupported = false;
    try {
        var options = {
            // This function will be called when the browser
            // attempts to access the passive property.
            get passive() {
                passiveSupported = true;
                return false;
            }
        };
        var handler = function handler() {};
        globalObj.document.addEventListener('test', handler, options);
        globalObj.document.removeEventListener('test', handler, options);
    } catch (err) {
        passiveSupported = false;
    }
    return passiveSupported;
}

/***/ }),

/***/ "./packages/mdc-dom/ponyfill.ts":
/*!**************************************!*\
  !*** ./packages/mdc-dom/ponyfill.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateScrollWidth = exports.matches = exports.closest = void 0;
/**
 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
 */
function closest(element, selector) {
    if (element.closest) {
        return element.closest(selector);
    }
    var el = element;
    while (el) {
        if (matches(el, selector)) {
            return el;
        }
        el = el.parentElement;
    }
    return null;
}
exports.closest = closest;
function matches(element, selector) {
    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
}
exports.matches = matches;
/**
 * Used to compute the estimated scroll width of elements. When an element is
 * hidden due to display: none; being applied to a parent element, the width is
 * returned as 0. However, the element will have a true width once no longer
 * inside a display: none context. This method computes an estimated width when
 * the element is hidden or returns the true width when the element is visble.
 * @param {Element} element the element whose width to estimate
 */
function estimateScrollWidth(element) {
    // Check the offsetParent. If the element inherits display: none from any
    // parent, the offsetParent property will be null (see
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
    // This check ensures we only clone the node when necessary.
    var htmlEl = element;
    if (htmlEl.offsetParent !== null) {
        return htmlEl.scrollWidth;
    }
    var clone = htmlEl.cloneNode(true);
    clone.style.setProperty('position', 'absolute');
    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
    document.documentElement.appendChild(clone);
    var scrollWidth = clone.scrollWidth;
    document.documentElement.removeChild(clone);
    return scrollWidth;
}
exports.estimateScrollWidth = estimateScrollWidth;

/***/ }),

/***/ "./packages/mdc-ripple/component.ts":
/*!******************************************!*\
  !*** ./packages/mdc-ripple/component.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function get() {
            return m[k];
        } });
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function (o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCRipple = void 0;
var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
var foundation_1 = __webpack_require__(/*! ./foundation */ "./packages/mdc-ripple/foundation.ts");
var util = __importStar(__webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts"));
var MDCRipple = /** @class */function (_super) {
    __extends(MDCRipple, _super);
    function MDCRipple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        return _this;
    }
    MDCRipple.attachTo = function (root, opts) {
        if (opts === void 0) {
            opts = {
                isUnbounded: undefined
            };
        }
        var ripple = new MDCRipple(root);
        // Only override unbounded behavior if option is explicitly specified
        if (opts.isUnbounded !== undefined) {
            ripple.unbounded = opts.isUnbounded;
        }
        return ripple;
    };
    MDCRipple.createAdapter = function (instance) {
        return {
            addClass: function addClass(className) {
                return instance.root.classList.add(className);
            },
            browserSupportsCssVars: function browserSupportsCssVars() {
                return util.supportsCssVariables(window);
            },
            computeBoundingRect: function computeBoundingRect() {
                return instance.root.getBoundingClientRect();
            },
            containsEventTarget: function containsEventTarget(target) {
                return instance.root.contains(target);
            },
            deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
                return document.documentElement.removeEventListener(evtType, handler, events_1.applyPassive());
            },
            deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                return instance.root.removeEventListener(evtType, handler, events_1.applyPassive());
            },
            deregisterResizeHandler: function deregisterResizeHandler(handler) {
                return window.removeEventListener('resize', handler);
            },
            getWindowPageOffset: function getWindowPageOffset() {
                return { x: window.pageXOffset, y: window.pageYOffset };
            },
            isSurfaceActive: function isSurfaceActive() {
                return ponyfill_1.matches(instance.root, ':active');
            },
            isSurfaceDisabled: function isSurfaceDisabled() {
                return Boolean(instance.disabled);
            },
            isUnbounded: function isUnbounded() {
                return Boolean(instance.unbounded);
            },
            registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
                return document.documentElement.addEventListener(evtType, handler, events_1.applyPassive());
            },
            registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                return instance.root.addEventListener(evtType, handler, events_1.applyPassive());
            },
            registerResizeHandler: function registerResizeHandler(handler) {
                return window.addEventListener('resize', handler);
            },
            removeClass: function removeClass(className) {
                return instance.root.classList.remove(className);
            },
            updateCssVariable: function updateCssVariable(varName, value) {
                return instance.root.style.setProperty(varName, value);
            }
        };
    };
    Object.defineProperty(MDCRipple.prototype, "unbounded", {
        get: function get() {
            return Boolean(this.isUnbounded);
        },
        set: function set(unbounded) {
            this.isUnbounded = Boolean(unbounded);
            this.setUnbounded();
        },
        enumerable: false,
        configurable: true
    });
    MDCRipple.prototype.activate = function () {
        this.foundation.activate();
    };
    MDCRipple.prototype.deactivate = function () {
        this.foundation.deactivate();
    };
    MDCRipple.prototype.layout = function () {
        this.foundation.layout();
    };
    MDCRipple.prototype.getDefaultFoundation = function () {
        return new foundation_1.MDCRippleFoundation(MDCRipple.createAdapter(this));
    };
    MDCRipple.prototype.initialSyncWithDOM = function () {
        var root = this.root;
        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;
    };
    /**
     * Closure Compiler throws an access control error when directly accessing a
     * protected or private property inside a getter/setter, like unbounded above.
     * By accessing the protected property inside a method, we solve that problem.
     * That's why this function exists.
     */
    MDCRipple.prototype.setUnbounded = function () {
        this.foundation.setUnbounded(Boolean(this.isUnbounded));
    };
    return MDCRipple;
}(component_1.MDCComponent);
exports.MDCRipple = MDCRipple;

/***/ }),

/***/ "./packages/mdc-ripple/constants.ts":
/*!******************************************!*\
  !*** ./packages/mdc-ripple/constants.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.numbers = exports.strings = exports.cssClasses = void 0;
exports.cssClasses = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'
};
exports.strings = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top'
};
exports.numbers = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300 };

/***/ }),

/***/ "./packages/mdc-ripple/foundation.ts":
/*!*******************************************!*\
  !*** ./packages/mdc-ripple/foundation.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = this && this.__values || function (o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCRippleFoundation = void 0;
var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-ripple/constants.ts");
var util_1 = __webpack_require__(/*! ./util */ "./packages/mdc-ripple/util.ts");
// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];
// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];
// simultaneous nested activations
var activatedTargets = [];
var MDCRippleFoundation = /** @class */function (_super) {
    __extends(MDCRippleFoundation, _super);
    function MDCRippleFoundation(adapter) {
        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
        _this.activationAnimationHasEnded = false;
        _this.activationTimer = 0;
        _this.fgDeactivationRemovalTimer = 0;
        _this.fgScale = '0';
        _this.frame = { width: 0, height: 0 };
        _this.initialSize = 0;
        _this.layoutFrame = 0;
        _this.maxRadius = 0;
        _this.unboundedCoords = { left: 0, top: 0 };
        _this.activationState = _this.defaultActivationState();
        _this.activationTimerCallback = function () {
            _this.activationAnimationHasEnded = true;
            _this.runDeactivationUXLogicIfReady();
        };
        _this.activateHandler = function (e) {
            _this.activateImpl(e);
        };
        _this.deactivateHandler = function () {
            _this.deactivateImpl();
        };
        _this.focusHandler = function () {
            _this.handleFocus();
        };
        _this.blurHandler = function () {
            _this.handleBlur();
        };
        _this.resizeHandler = function () {
            _this.layout();
        };
        return _this;
    }
    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
        get: function get() {
            return constants_1.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
        get: function get() {
            return constants_1.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
        get: function get() {
            return constants_1.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
        get: function get() {
            return {
                addClass: function addClass() {
                    return undefined;
                },
                browserSupportsCssVars: function browserSupportsCssVars() {
                    return true;
                },
                computeBoundingRect: function computeBoundingRect() {
                    return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                },
                containsEventTarget: function containsEventTarget() {
                    return true;
                },
                deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() {
                    return undefined;
                },
                deregisterInteractionHandler: function deregisterInteractionHandler() {
                    return undefined;
                },
                deregisterResizeHandler: function deregisterResizeHandler() {
                    return undefined;
                },
                getWindowPageOffset: function getWindowPageOffset() {
                    return { x: 0, y: 0 };
                },
                isSurfaceActive: function isSurfaceActive() {
                    return true;
                },
                isSurfaceDisabled: function isSurfaceDisabled() {
                    return true;
                },
                isUnbounded: function isUnbounded() {
                    return true;
                },
                registerDocumentInteractionHandler: function registerDocumentInteractionHandler() {
                    return undefined;
                },
                registerInteractionHandler: function registerInteractionHandler() {
                    return undefined;
                },
                registerResizeHandler: function registerResizeHandler() {
                    return undefined;
                },
                removeClass: function removeClass() {
                    return undefined;
                },
                updateCssVariable: function updateCssVariable() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCRippleFoundation.prototype.init = function () {
        var _this = this;
        var supportsPressRipple = this.supportsPressRipple();
        this.registerRootHandlers(supportsPressRipple);
        if (supportsPressRipple) {
            var _a = MDCRippleFoundation.cssClasses,
                ROOT_1 = _a.ROOT,
                UNBOUNDED_1 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.addClass(ROOT_1);
                if (_this.adapter.isUnbounded()) {
                    _this.adapter.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal();
                }
            });
        }
    };
    MDCRippleFoundation.prototype.destroy = function () {
        var _this = this;
        if (this.supportsPressRipple()) {
            if (this.activationTimer) {
                clearTimeout(this.activationTimer);
                this.activationTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer) {
                clearTimeout(this.fgDeactivationRemovalTimer);
                this.fgDeactivationRemovalTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
            }
            var _a = MDCRippleFoundation.cssClasses,
                ROOT_2 = _a.ROOT,
                UNBOUNDED_2 = _a.UNBOUNDED;
            requestAnimationFrame(function () {
                _this.adapter.removeClass(ROOT_2);
                _this.adapter.removeClass(UNBOUNDED_2);
                _this.removeCssVars();
            });
        }
        this.deregisterRootHandlers();
        this.deregisterDeactivationHandlers();
    };
    /**
     * @param evt Optional event containing position information.
     */
    MDCRippleFoundation.prototype.activate = function (evt) {
        this.activateImpl(evt);
    };
    MDCRippleFoundation.prototype.deactivate = function () {
        this.deactivateImpl();
    };
    MDCRippleFoundation.prototype.layout = function () {
        var _this = this;
        if (this.layoutFrame) {
            cancelAnimationFrame(this.layoutFrame);
        }
        this.layoutFrame = requestAnimationFrame(function () {
            _this.layoutInternal();
            _this.layoutFrame = 0;
        });
    };
    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
        if (unbounded) {
            this.adapter.addClass(UNBOUNDED);
        } else {
            this.adapter.removeClass(UNBOUNDED);
        }
    };
    MDCRippleFoundation.prototype.handleFocus = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    MDCRippleFoundation.prototype.handleBlur = function () {
        var _this = this;
        requestAnimationFrame(function () {
            return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */
    MDCRippleFoundation.prototype.supportsPressRipple = function () {
        return this.adapter.browserSupportsCssVars();
    };
    MDCRippleFoundation.prototype.defaultActivationState = function () {
        return {
            activationEvent: undefined,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false
        };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */
    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
        var e_1, _a;
        if (supportsPressRipple) {
            try {
                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                }
            } catch (e_1_1) {
                e_1 = { error: e_1_1 };
            } finally {
                try {
                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
            if (this.adapter.isUnbounded()) {
                this.adapter.registerResizeHandler(this.resizeHandler);
            }
        }
        this.adapter.registerInteractionHandler('focus', this.focusHandler);
        this.adapter.registerInteractionHandler('blur', this.blurHandler);
    };
    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
        var e_2, _a;
        if (evt.type === 'keydown') {
            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
        } else {
            try {
                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
                }
            } catch (e_2_1) {
                e_2 = { error: e_2_1 };
            } finally {
                try {
                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
                } finally {
                    if (e_2) throw e_2.error;
                }
            }
        }
    };
    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
        var e_3, _a;
        try {
            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
            }
        } catch (e_3_1) {
            e_3 = { error: e_3_1 };
        } finally {
            try {
                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
            } finally {
                if (e_3) throw e_3.error;
            }
        }
        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
        if (this.adapter.isUnbounded()) {
            this.adapter.deregisterResizeHandler(this.resizeHandler);
        }
    };
    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
        var e_4, _a;
        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
        try {
            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
        } catch (e_4_1) {
            e_4 = { error: e_4_1 };
        } finally {
            try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
            } finally {
                if (e_4) throw e_4.error;
            }
        }
    };
    MDCRippleFoundation.prototype.removeCssVars = function () {
        var _this = this;
        var rippleStrings = MDCRippleFoundation.strings;
        var keys = Object.keys(rippleStrings);
        keys.forEach(function (key) {
            if (key.indexOf('VAR_') === 0) {
                _this.adapter.updateCssVariable(rippleStrings[key], null);
            }
        });
    };
    MDCRippleFoundation.prototype.activateImpl = function (evt) {
        var _this = this;
        if (this.adapter.isSurfaceDisabled()) {
            return;
        }
        var activationState = this.activationState;
        if (activationState.isActivated) {
            return;
        }
        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
        var previousActivationEvent = this.previousActivationEvent;
        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
        if (isSameInteraction) {
            return;
        }
        activationState.isActivated = true;
        activationState.isProgrammatic = evt === undefined;
        activationState.activationEvent = evt;
        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
        var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {
            return _this.adapter.containsEventTarget(target);
        });
        if (hasActivatedChild) {
            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
            this.resetActivationState();
            return;
        }
        if (evt !== undefined) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers(evt);
        }
        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
        if (activationState.wasElementMadeActive) {
            this.animateActivation();
        }
        requestAnimationFrame(function () {
            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
            activatedTargets = [];
            if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {
                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                // active states inconsistently when they're called within event handling code:
                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                // variable is set within a rAF callback for a submit button interaction (#2241).
                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                if (activationState.wasElementMadeActive) {
                    _this.animateActivation();
                }
            }
            if (!activationState.wasElementMadeActive) {
                // Reset activation state immediately if element was not made active.
                _this.activationState = _this.defaultActivationState();
            }
        });
    };
    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
        return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;
    };
    MDCRippleFoundation.prototype.animateActivation = function () {
        var _this = this;
        var _a = MDCRippleFoundation.strings,
            VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,
            VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
        var _b = MDCRippleFoundation.cssClasses,
            FG_DEACTIVATION = _b.FG_DEACTIVATION,
            FG_ACTIVATION = _b.FG_ACTIVATION;
        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
        this.layoutInternal();
        var translateStart = '';
        var translateEnd = '';
        if (!this.adapter.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates(),
                startPoint = _c.startPoint,
                endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
        }
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
        // Cancel any ongoing activation/deactivation animations
        clearTimeout(this.activationTimer);
        clearTimeout(this.fgDeactivationRemovalTimer);
        this.rmBoundedActivationClasses();
        this.adapter.removeClass(FG_DEACTIVATION);
        // Force layout in order to re-trigger the animation.
        this.adapter.computeBoundingRect();
        this.adapter.addClass(FG_ACTIVATION);
        this.activationTimer = setTimeout(function () {
            _this.activationTimerCallback();
        }, DEACTIVATION_TIMEOUT_MS);
    };
    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
        var _a = this.activationState,
            activationEvent = _a.activationEvent,
            wasActivatedByPointer = _a.wasActivatedByPointer;
        var startPoint;
        if (wasActivatedByPointer) {
            startPoint = util_1.getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
        } else {
            startPoint = {
                x: this.frame.width / 2,
                y: this.frame.height / 2
            };
        }
        // Center the element around the start point.
        startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2
        };
        var endPoint = {
            x: this.frame.width / 2 - this.initialSize / 2,
            y: this.frame.height / 2 - this.initialSize / 2
        };
        return { startPoint: startPoint, endPoint: endPoint };
    };
    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
        var _this = this;
        // This method is called both when a pointing device is released, and when the activation animation ends.
        // The deactivation animation should only run after both of those occur.
        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
        var _a = this.activationState,
            hasDeactivationUXRun = _a.hasDeactivationUXRun,
            isActivated = _a.isActivated;
        var activationHasEnded = hasDeactivationUXRun || !isActivated;
        if (activationHasEnded && this.activationAnimationHasEnded) {
            this.rmBoundedActivationClasses();
            this.adapter.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer = setTimeout(function () {
                _this.adapter.removeClass(FG_DEACTIVATION);
            }, constants_1.numbers.FG_DEACTIVATION_MS);
        }
    };
    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
        this.adapter.removeClass(FG_ACTIVATION);
        this.activationAnimationHasEnded = false;
        this.adapter.computeBoundingRect();
    };
    MDCRippleFoundation.prototype.resetActivationState = function () {
        var _this = this;
        this.previousActivationEvent = this.activationState.activationEvent;
        this.activationState = this.defaultActivationState();
        // Touch devices may fire additional events for the same interaction within a short time.
        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
        setTimeout(function () {
            return _this.previousActivationEvent = undefined;
        }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };
    MDCRippleFoundation.prototype.deactivateImpl = function () {
        var _this = this;
        var activationState = this.activationState;
        // This can happen in scenarios such as when you have a keyup event that blurs the element.
        if (!activationState.isActivated) {
            return;
        }
        var state = __assign({}, activationState);
        if (activationState.isProgrammatic) {
            requestAnimationFrame(function () {
                _this.animateDeactivation(state);
            });
            this.resetActivationState();
        } else {
            this.deregisterDeactivationHandlers();
            requestAnimationFrame(function () {
                _this.activationState.hasDeactivationUXRun = true;
                _this.animateDeactivation(state);
                _this.resetActivationState();
            });
        }
    };
    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
        var wasActivatedByPointer = _a.wasActivatedByPointer,
            wasElementMadeActive = _a.wasElementMadeActive;
        if (wasActivatedByPointer || wasElementMadeActive) {
            this.runDeactivationUXLogicIfReady();
        }
    };
    MDCRippleFoundation.prototype.layoutInternal = function () {
        var _this = this;
        this.frame = this.adapter.computeBoundingRect();
        var maxDim = Math.max(this.frame.height, this.frame.width);
        // Surface diameter is treated differently for unbounded vs. bounded ripples.
        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
        // `overflow: hidden`.
        var getBoundedRadius = function getBoundedRadius() {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
        };
        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
        // Unbounded ripple size should always be even number to equally center align.
        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
            this.initialSize = initialSize - 1;
        } else {
            this.initialSize = initialSize;
        }
        this.fgScale = "" + this.maxRadius / this.initialSize;
        this.updateLayoutCssVars();
    };
    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
        var _a = MDCRippleFoundation.strings,
            VAR_FG_SIZE = _a.VAR_FG_SIZE,
            VAR_LEFT = _a.VAR_LEFT,
            VAR_TOP = _a.VAR_TOP,
            VAR_FG_SCALE = _a.VAR_FG_SCALE;
        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
        if (this.adapter.isUnbounded()) {
            this.unboundedCoords = {
                left: Math.round(this.frame.width / 2 - this.initialSize / 2),
                top: Math.round(this.frame.height / 2 - this.initialSize / 2)
            };
            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
        }
    };
    return MDCRippleFoundation;
}(foundation_1.MDCFoundation);
exports.MDCRippleFoundation = MDCRippleFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCRippleFoundation;

/***/ }),

/***/ "./packages/mdc-ripple/util.ts":
/*!*************************************!*\
  !*** ./packages/mdc-ripple/util.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getNormalizedEventCoords = exports.supportsCssVariables = void 0;
/**
 * Stores result from supportsCssVariables to avoid redundant processing to
 * detect CSS custom variable support.
 */
var supportsCssVariables_;
function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) {
        forceRefresh = false;
    }
    var CSS = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;
    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
        return supportsCssVariables_;
    }
    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
    if (!supportsFunctionPresent) {
        return false;
    }
    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
    // See: README section on Safari
    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');
    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
    if (!forceRefresh) {
        supportsCssVariables_ = supportsCssVars;
    }
    return supportsCssVars;
}
exports.supportsCssVariables = supportsCssVariables;
function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
        return { x: 0, y: 0 };
    }
    var x = pageOffset.x,
        y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY;
    // Determine touch point relative to the ripple container.
    if (evt.type === 'touchstart') {
        var touchEvent = evt;
        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    } else {
        var mouseEvent = evt;
        normalizedX = mouseEvent.pageX - documentX;
        normalizedY = mouseEvent.pageY - documentY;
    }
    return { x: normalizedX, y: normalizedY };
}
exports.getNormalizedEventCoords = getNormalizedEventCoords;

/***/ }),

/***/ "./packages/mdc-switch/adapter.ts":
/*!****************************************!*\
  !*** ./packages/mdc-switch/adapter.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });

/***/ }),

/***/ "./packages/mdc-switch/component.ts":
/*!******************************************!*\
  !*** ./packages/mdc-switch/component.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCSwitch = void 0;
var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-switch/constants.ts");
var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-switch/foundation.ts");
/**
 * `MDCSwitch` provides a component implementation of a Material Design switch.
 */
var MDCSwitch = /** @class */function (_super) {
    __extends(MDCSwitch, _super);
    function MDCSwitch(root, foundation) {
        var _this = _super.call(this, root, foundation) || this;
        _this.root = root;
        return _this;
    }
    /**
     * Creates a new `MDCSwitch` and attaches it to the given root element.
     * @param root The root to attach to.
     * @return the new component instance.
     */
    MDCSwitch.attachTo = function (root) {
        return new MDCSwitch(root);
    };
    MDCSwitch.prototype.initialize = function () {
        this.ripple = new component_2.MDCRipple(this.root, this.createRippleFoundation());
    };
    MDCSwitch.prototype.initialSyncWithDOM = function () {
        var rippleElement = this.root.querySelector(constants_1.Selectors.RIPPLE);
        if (!rippleElement) {
            throw new Error("Switch " + constants_1.Selectors.RIPPLE + " element is required.");
        }
        this.rippleElement = rippleElement;
        this.root.addEventListener('click', this.foundation.handleClick);
        this.foundation.initFromDOM();
    };
    MDCSwitch.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.ripple.destroy();
        this.root.removeEventListener('click', this.foundation.handleClick);
    };
    MDCSwitch.prototype.getDefaultFoundation = function () {
        return new foundation_2.MDCSwitchRenderFoundation(this.createAdapter());
    };
    MDCSwitch.prototype.createAdapter = function () {
        var _this = this;
        return {
            addClass: function addClass(className) {
                _this.root.classList.add(className);
            },
            hasClass: function hasClass(className) {
                return _this.root.classList.contains(className);
            },
            isDisabled: function isDisabled() {
                return _this.root.disabled;
            },
            removeClass: function removeClass(className) {
                _this.root.classList.remove(className);
            },
            setAriaChecked: function setAriaChecked(ariaChecked) {
                return _this.root.setAttribute('aria-checked', ariaChecked);
            },
            setDisabled: function setDisabled(disabled) {
                _this.root.disabled = disabled;
            },
            state: this
        };
    };
    MDCSwitch.prototype.createRippleFoundation = function () {
        return new foundation_1.MDCRippleFoundation(this.createRippleAdapter());
    };
    MDCSwitch.prototype.createRippleAdapter = function () {
        var _this = this;
        return __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                return _this.rippleElement.getBoundingClientRect();
            }, isUnbounded: function isUnbounded() {
                return true;
            } });
    };
    return MDCSwitch;
}(component_1.MDCComponent);
exports.MDCSwitch = MDCSwitch;

/***/ }),

/***/ "./packages/mdc-switch/constants.ts":
/*!******************************************!*\
  !*** ./packages/mdc-switch/constants.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.Selectors = exports.CssClasses = void 0;
/**
 * CSS classes used for switch.
 */
var CssClasses;
(function (CssClasses) {
  CssClasses["PROCESSING"] = "mdc-switch--processing";
  CssClasses["SELECTED"] = "mdc-switch--selected";
  CssClasses["UNSELECTED"] = "mdc-switch--unselected";
})(CssClasses = exports.CssClasses || (exports.CssClasses = {}));
/**
 * Query selectors used for switch.
 */
var Selectors;
(function (Selectors) {
  Selectors["RIPPLE"] = ".mdc-switch__ripple";
})(Selectors = exports.Selectors || (exports.Selectors = {}));

/***/ }),

/***/ "./packages/mdc-switch/deprecated/adapter.ts":
/*!***************************************************!*\
  !*** ./packages/mdc-switch/deprecated/adapter.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });

/***/ }),

/***/ "./packages/mdc-switch/deprecated/component.ts":
/*!*****************************************************!*\
  !*** ./packages/mdc-switch/deprecated/component.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
            ar.push(r.value);
        }
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
        to[j] = from[i];
    }return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCSwitch = void 0;
var component_1 = __webpack_require__(/*! @material/base/component */ "./packages/mdc-base/component.ts");
var events_1 = __webpack_require__(/*! @material/dom/events */ "./packages/mdc-dom/events.ts");
var ponyfill_1 = __webpack_require__(/*! @material/dom/ponyfill */ "./packages/mdc-dom/ponyfill.ts");
var component_2 = __webpack_require__(/*! @material/ripple/component */ "./packages/mdc-ripple/component.ts");
var foundation_1 = __webpack_require__(/*! @material/ripple/foundation */ "./packages/mdc-ripple/foundation.ts");
var foundation_2 = __webpack_require__(/*! ./foundation */ "./packages/mdc-switch/deprecated/foundation.ts");
var MDCSwitch = /** @class */function (_super) {
    __extends(MDCSwitch, _super);
    function MDCSwitch() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rippleSurface = _this.createRipple();
        return _this;
    }
    MDCSwitch.attachTo = function (root) {
        return new MDCSwitch(root);
    };
    MDCSwitch.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.rippleSurface.destroy();
        this.nativeControl.removeEventListener('change', this.changeHandler);
    };
    MDCSwitch.prototype.initialSyncWithDOM = function () {
        var _this = this;
        this.changeHandler = function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            (_a = _this.foundation).handleChange.apply(_a, __spreadArray([], __read(args)));
        };
        this.nativeControl.addEventListener('change', this.changeHandler);
        // Sometimes the checked state of the input element is saved in the history.
        // The switch styling should match the checked state of the input element.
        // Do an initial sync between the native control and the foundation.
        this.checked = this.checked;
    };
    MDCSwitch.prototype.getDefaultFoundation = function () {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClass: function addClass(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function removeClass(className) {
                return _this.root.classList.remove(className);
            },
            setNativeControlChecked: function setNativeControlChecked(checked) {
                return _this.nativeControl.checked = checked;
            },
            setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                return _this.nativeControl.disabled = disabled;
            },
            setNativeControlAttr: function setNativeControlAttr(attr, value) {
                _this.nativeControl.setAttribute(attr, value);
            }
        };
        return new foundation_2.MDCSwitchFoundation(adapter);
    };
    Object.defineProperty(MDCSwitch.prototype, "ripple", {
        get: function get() {
            return this.rippleSurface;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSwitch.prototype, "checked", {
        get: function get() {
            return this.nativeControl.checked;
        },
        set: function set(checked) {
            this.foundation.setChecked(checked);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSwitch.prototype, "disabled", {
        get: function get() {
            return this.nativeControl.disabled;
        },
        set: function set(disabled) {
            this.foundation.setDisabled(disabled);
        },
        enumerable: false,
        configurable: true
    });
    MDCSwitch.prototype.createRipple = function () {
        var _this = this;
        var RIPPLE_SURFACE_SELECTOR = foundation_2.MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;
        var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { addClass: function addClass(className) {
                return rippleSurface.classList.add(className);
            }, computeBoundingRect: function computeBoundingRect() {
                return rippleSurface.getBoundingClientRect();
            }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                _this.nativeControl.removeEventListener(evtType, handler, events_1.applyPassive());
            }, isSurfaceActive: function isSurfaceActive() {
                return ponyfill_1.matches(_this.nativeControl, ':active');
            }, isUnbounded: function isUnbounded() {
                return true;
            }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                _this.nativeControl.addEventListener(evtType, handler, events_1.applyPassive());
            }, removeClass: function removeClass(className) {
                rippleSurface.classList.remove(className);
            }, updateCssVariable: function updateCssVariable(varName, value) {
                rippleSurface.style.setProperty(varName, value);
            } });
        return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
    };
    Object.defineProperty(MDCSwitch.prototype, "nativeControl", {
        get: function get() {
            var NATIVE_CONTROL_SELECTOR = foundation_2.MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;
            return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
        },
        enumerable: false,
        configurable: true
    });
    return MDCSwitch;
}(component_1.MDCComponent);
exports.MDCSwitch = MDCSwitch;

/***/ }),

/***/ "./packages/mdc-switch/deprecated/constants.ts":
/*!*****************************************************!*\
  !*** ./packages/mdc-switch/deprecated/constants.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.strings = exports.cssClasses = void 0;
/** CSS classes used by the switch. */
var cssClasses = {
    /** Class used for a switch that is in the "checked" (on) position. */
    CHECKED: 'mdc-switch--checked',
    /** Class used for a switch that is disabled. */
    DISABLED: 'mdc-switch--disabled'
};
exports.cssClasses = cssClasses;
/** String constants used by the switch. */
var strings = {
    /** Aria attribute for checked or unchecked state of switch */
    ARIA_CHECKED_ATTR: 'aria-checked',
    /** A CSS selector used to locate the native HTML control for the switch.  */
    NATIVE_CONTROL_SELECTOR: '.mdc-switch__native-control',
    /** A CSS selector used to locate the ripple surface element for the switch. */
    RIPPLE_SURFACE_SELECTOR: '.mdc-switch__thumb-underlay'
};
exports.strings = strings;

/***/ }),

/***/ "./packages/mdc-switch/deprecated/foundation.ts":
/*!******************************************************!*\
  !*** ./packages/mdc-switch/deprecated/foundation.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCSwitchFoundation = void 0;
var foundation_1 = __webpack_require__(/*! @material/base/foundation */ "./packages/mdc-base/foundation.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-switch/deprecated/constants.ts");
var MDCSwitchFoundation = /** @class */function (_super) {
    __extends(MDCSwitchFoundation, _super);
    function MDCSwitchFoundation(adapter) {
        return _super.call(this, __assign(__assign({}, MDCSwitchFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSwitchFoundation, "strings", {
        /** The string constants used by the switch. */
        get: function get() {
            return constants_1.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "cssClasses", {
        /** The CSS classes used by the switch. */
        get: function get() {
            return constants_1.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "defaultAdapter", {
        /** The default Adapter for the switch. */
        get: function get() {
            return {
                addClass: function addClass() {
                    return undefined;
                },
                removeClass: function removeClass() {
                    return undefined;
                },
                setNativeControlChecked: function setNativeControlChecked() {
                    return undefined;
                },
                setNativeControlDisabled: function setNativeControlDisabled() {
                    return undefined;
                },
                setNativeControlAttr: function setNativeControlAttr() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    /** Sets the checked state of the switch. */
    MDCSwitchFoundation.prototype.setChecked = function (checked) {
        this.adapter.setNativeControlChecked(checked);
        this.updateAriaChecked(checked);
        this.updateCheckedStyling(checked);
    };
    /** Sets the disabled state of the switch. */
    MDCSwitchFoundation.prototype.setDisabled = function (disabled) {
        this.adapter.setNativeControlDisabled(disabled);
        if (disabled) {
            this.adapter.addClass(constants_1.cssClasses.DISABLED);
        } else {
            this.adapter.removeClass(constants_1.cssClasses.DISABLED);
        }
    };
    /** Handles the change event for the switch native control. */
    MDCSwitchFoundation.prototype.handleChange = function (evt) {
        var nativeControl = evt.target;
        this.updateAriaChecked(nativeControl.checked);
        this.updateCheckedStyling(nativeControl.checked);
    };
    /** Updates the styling of the switch based on its checked state. */
    MDCSwitchFoundation.prototype.updateCheckedStyling = function (checked) {
        if (checked) {
            this.adapter.addClass(constants_1.cssClasses.CHECKED);
        } else {
            this.adapter.removeClass(constants_1.cssClasses.CHECKED);
        }
    };
    MDCSwitchFoundation.prototype.updateAriaChecked = function (checked) {
        this.adapter.setNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR, "" + !!checked);
    };
    return MDCSwitchFoundation;
}(foundation_1.MDCFoundation);
exports.MDCSwitchFoundation = MDCSwitchFoundation;
// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
exports.default = MDCSwitchFoundation;

/***/ }),

/***/ "./packages/mdc-switch/deprecated/index.ts":
/*!*************************************************!*\
  !*** ./packages/mdc-switch/deprecated/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function get() {
            return m[k];
        } });
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function (m, exports) {
    for (var p in m) {
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(/*! ./adapter */ "./packages/mdc-switch/deprecated/adapter.ts"), exports);
__exportStar(__webpack_require__(/*! ./component */ "./packages/mdc-switch/deprecated/component.ts"), exports);
__exportStar(__webpack_require__(/*! ./constants */ "./packages/mdc-switch/deprecated/constants.ts"), exports);
__exportStar(__webpack_require__(/*! ./foundation */ "./packages/mdc-switch/deprecated/foundation.ts"), exports);

/***/ }),

/***/ "./packages/mdc-switch/foundation.ts":
/*!*******************************************!*\
  !*** ./packages/mdc-switch/foundation.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __extends = this && this.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) {
                if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            }
        };
        return _extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDCSwitchRenderFoundation = exports.MDCSwitchFoundation = void 0;
var observer_foundation_1 = __webpack_require__(/*! @material/base/observer-foundation */ "./packages/mdc-base/observer-foundation.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./packages/mdc-switch/constants.ts");
/**
 * `MDCSwitchFoundation` provides a state-only foundation for a switch
 * component.
 *
 * State observers and event handler entrypoints update a component's adapter's
 * state with the logic needed for switch to function.
 */
var MDCSwitchFoundation = /** @class */function (_super) {
    __extends(MDCSwitchFoundation, _super);
    function MDCSwitchFoundation(adapter) {
        var _this = _super.call(this, adapter) || this;
        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }
    /**
     * Initializes the foundation and starts observing state changes.
     */
    MDCSwitchFoundation.prototype.init = function () {
        this.observe(this.adapter.state, {
            disabled: this.stopProcessingIfDisabled,
            processing: this.stopProcessingIfDisabled
        });
    };
    /**
     * Event handler for switch click events. Clicking on a switch will toggle its
     * selected state.
     */
    MDCSwitchFoundation.prototype.handleClick = function () {
        if (this.adapter.state.disabled) {
            return;
        }
        this.adapter.state.selected = !this.adapter.state.selected;
    };
    MDCSwitchFoundation.prototype.stopProcessingIfDisabled = function () {
        if (this.adapter.state.disabled) {
            this.adapter.state.processing = false;
        }
    };
    return MDCSwitchFoundation;
}(observer_foundation_1.MDCObserverFoundation);
exports.MDCSwitchFoundation = MDCSwitchFoundation;
/**
 * `MDCSwitchRenderFoundation` provides a state and rendering foundation for a
 * switch component.
 *
 * State observers and event handler entrypoints update a component's
 * adapter's state with the logic needed for switch to function.
 *
 * In response to state changes, the rendering foundation uses the component's
 * render adapter to keep the component's DOM updated with the state.
 */
var MDCSwitchRenderFoundation = /** @class */function (_super) {
    __extends(MDCSwitchRenderFoundation, _super);
    function MDCSwitchRenderFoundation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initializes the foundation and starts observing state changes.
     */
    MDCSwitchRenderFoundation.prototype.init = function () {
        _super.prototype.init.call(this);
        this.observe(this.adapter.state, {
            disabled: this.onDisabledChange,
            processing: this.onProcessingChange,
            selected: this.onSelectedChange
        });
    };
    /**
     * Initializes the foundation from a server side rendered (SSR) component.
     * This will sync the adapter's state with the current state of the DOM.
     *
     * This method should be called after `init()`.
     */
    MDCSwitchRenderFoundation.prototype.initFromDOM = function () {
        // Turn off observers while setting state
        this.setObserversEnabled(this.adapter.state, false);
        this.adapter.state.selected = this.adapter.hasClass(constants_1.CssClasses.SELECTED);
        // Ensure aria-checked is set if attribute is not present
        this.onSelectedChange();
        this.adapter.state.disabled = this.adapter.isDisabled();
        this.adapter.state.processing = this.adapter.hasClass(constants_1.CssClasses.PROCESSING);
        // Re-observe state
        this.setObserversEnabled(this.adapter.state, true);
        this.stopProcessingIfDisabled();
    };
    MDCSwitchRenderFoundation.prototype.onDisabledChange = function () {
        this.adapter.setDisabled(this.adapter.state.disabled);
    };
    MDCSwitchRenderFoundation.prototype.onProcessingChange = function () {
        this.toggleClass(this.adapter.state.processing, constants_1.CssClasses.PROCESSING);
    };
    MDCSwitchRenderFoundation.prototype.onSelectedChange = function () {
        this.adapter.setAriaChecked(String(this.adapter.state.selected));
        this.toggleClass(this.adapter.state.selected, constants_1.CssClasses.SELECTED);
        this.toggleClass(!this.adapter.state.selected, constants_1.CssClasses.UNSELECTED);
    };
    MDCSwitchRenderFoundation.prototype.toggleClass = function (addClass, className) {
        if (addClass) {
            this.adapter.addClass(className);
        } else {
            this.adapter.removeClass(className);
        }
    };
    return MDCSwitchRenderFoundation;
}(MDCSwitchFoundation);
exports.MDCSwitchRenderFoundation = MDCSwitchRenderFoundation;

/***/ }),

/***/ "./packages/mdc-switch/index.ts":
/*!**************************************!*\
  !*** ./packages/mdc-switch/index.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @license
 * Copyright 2021 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function get() {
            return m[k];
        } });
} : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function (o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }__setModuleDefault(result, mod);
    return result;
};
var __exportStar = this && this.__exportStar || function (m, exports) {
    for (var p in m) {
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deprecated = void 0;
// TODO(b/185410690): remove deprecated export
var deprecated = __importStar(__webpack_require__(/*! ./deprecated */ "./packages/mdc-switch/deprecated/index.ts"));
exports.deprecated = deprecated;
__exportStar(__webpack_require__(/*! ./adapter */ "./packages/mdc-switch/adapter.ts"), exports);
__exportStar(__webpack_require__(/*! ./component */ "./packages/mdc-switch/component.ts"), exports);
__exportStar(__webpack_require__(/*! ./constants */ "./packages/mdc-switch/constants.ts"), exports);
__exportStar(__webpack_require__(/*! ./foundation */ "./packages/mdc-switch/foundation.ts"), exports);

/***/ })

/******/ });
});

},{}],30:[function(require,module,exports){
var trailingNewlineRegex = /\n[\s]+$/
var leadingNewlineRegex = /^\n[\s]+/
var trailingSpaceRegex = /[\s]+$/
var leadingSpaceRegex = /^[\s]+/
var multiSpaceRegex = /[\n\s]+/g

var TEXT_TAGS = [
  'a', 'abbr', 'b', 'bdi', 'bdo', 'br', 'cite', 'data', 'dfn', 'em', 'i',
  'kbd', 'mark', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'amp', 'small', 'span',
  'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr'
]

var VERBATIM_TAGS = [
  'code', 'pre', 'textarea'
]

module.exports = function appendChild (el, childs) {
  if (!Array.isArray(childs)) return

  var nodeName = el.nodeName.toLowerCase()

  var hadText = false
  var value, leader

  for (var i = 0, len = childs.length; i < len; i++) {
    var node = childs[i]
    if (Array.isArray(node)) {
      appendChild(el, node)
      continue
    }

    if (typeof node === 'number' ||
      typeof node === 'boolean' ||
      typeof node === 'function' ||
      node instanceof Date ||
      node instanceof RegExp) {
      node = node.toString()
    }

    var lastChild = el.childNodes[el.childNodes.length - 1]

    // Iterate over text nodes
    if (typeof node === 'string') {
      hadText = true

      // If we already had text, append to the existing text
      if (lastChild && lastChild.nodeName === '#text') {
        lastChild.nodeValue += node

      // We didn't have a text node yet, create one
      } else {
        node = document.createTextNode(node)
        el.appendChild(node)
        lastChild = node
      }

      // If this is the last of the child nodes, make sure we close it out
      // right
      if (i === len - 1) {
        hadText = false
        // Trim the child text nodes if the current node isn't a
        // node where whitespace matters.
        if (TEXT_TAGS.indexOf(nodeName) === -1 &&
          VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, '')
            .replace(trailingSpaceRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')
          if (value === '') {
            el.removeChild(lastChild)
          } else {
            lastChild.nodeValue = value
          }
        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
          // The very first node in the list should not have leading
          // whitespace. Sibling text nodes should have whitespace if there
          // was any.
          leader = i === 0 ? '' : ' '
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, leader)
            .replace(leadingSpaceRegex, ' ')
            .replace(trailingSpaceRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')
          lastChild.nodeValue = value
        }
      }

    // Iterate over DOM nodes
    } else if (node && node.nodeType) {
      // If the last node was a text node, make sure it is properly closed out
      if (hadText) {
        hadText = false

        // Trim the child text nodes if the current node isn't a
        // text node or a code node
        if (TEXT_TAGS.indexOf(nodeName) === -1 &&
          VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingNewlineRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')

          // Remove empty text nodes, append otherwise
          if (value === '') {
            el.removeChild(lastChild)
          } else {
            lastChild.nodeValue = value
          }
        // Trim the child nodes if the current node is not a node
        // where all whitespace must be preserved
        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
          value = lastChild.nodeValue
            .replace(leadingSpaceRegex, ' ')
            .replace(leadingNewlineRegex, '')
            .replace(trailingNewlineRegex, '')
            .replace(multiSpaceRegex, ' ')
          lastChild.nodeValue = value
        }
      }

      // Store the last nodename
      var _nodeName = node.nodeName
      if (_nodeName) nodeName = _nodeName.toLowerCase()

      // Append the node to the DOM
      el.appendChild(node)
    }
  }
}

},{}],31:[function(require,module,exports){
var hyperx = require('hyperx')
var appendChild = require('./appendChild')

var SVGNS = 'http://www.w3.org/2000/svg'
var XLINKNS = 'http://www.w3.org/1999/xlink'

var BOOL_PROPS = [
  'autofocus', 'checked', 'defaultchecked', 'disabled', 'formnovalidate',
  'indeterminate', 'readonly', 'required', 'selected', 'willvalidate'
]

var COMMENT_TAG = '!--'

var SVG_TAGS = [
  'svg', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',
  'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile',
  'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
  'feComponentTransfer', 'feComposite', 'feConvolveMatrix',
  'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood',
  'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage',
  'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight',
  'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter',
  'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src',
  'font-face-uri', 'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image',
  'line', 'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph',
  'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect',
  'set', 'stop', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref',
  'tspan', 'use', 'view', 'vkern'
]

function belCreateElement (tag, props, children) {
  var el

  // If an svg tag, it needs a namespace
  if (SVG_TAGS.indexOf(tag) !== -1) {
    props.namespace = SVGNS
  }

  // If we are using a namespace
  var ns = false
  if (props.namespace) {
    ns = props.namespace
    delete props.namespace
  }

  // Create the element
  if (ns) {
    el = document.createElementNS(ns, tag)
  } else if (tag === COMMENT_TAG) {
    return document.createComment(props.comment)
  } else {
    el = document.createElement(tag)
  }

  // Create the properties
  for (var p in props) {
    if (props.hasOwnProperty(p)) {
      var key = p.toLowerCase()
      var val = props[p]
      // Normalize className
      if (key === 'classname') {
        key = 'class'
        p = 'class'
      }
      // The for attribute gets transformed to htmlFor, but we just set as for
      if (p === 'htmlFor') {
        p = 'for'
      }
      // If a property is boolean, set itself to the key
      if (BOOL_PROPS.indexOf(key) !== -1) {
        if (val === 'true') val = key
        else if (val === 'false') continue
      }
      // If a property prefers being set directly vs setAttribute
      if (key.slice(0, 2) === 'on') {
        el[p] = val
      } else {
        if (ns) {
          if (p === 'xlink:href') {
            el.setAttributeNS(XLINKNS, p, val)
          } else if (/^xmlns($|:)/i.test(p)) {
            // skip xmlns definitions
          } else {
            el.setAttributeNS(null, p, val)
          }
        } else {
          el.setAttribute(p, val)
        }
      }
    }
  }

  appendChild(el, children)
  return el
}

module.exports = hyperx(belCreateElement, {comments: true})
module.exports.default = module.exports
module.exports.createElement = belCreateElement

},{"./appendChild":30,"hyperx":36}],32:[function(require,module,exports){
function rawCreateElement (tag) {
  if (typeof window !== 'undefined') {
    return browser()
  } else {
    return server()
  }

  function browser () {
    var el = document.createElement('div')
    el.innerHTML = tag
    return toArray(el.childNodes)
  }

  function server () {
    var wrapper = new String(tag) // eslint-disable-line no-new-wrappers
    wrapper.__encoded = true
    return wrapper
  }
}

function toArray (arr) {
  return Array.isArray(arr) ? arr : [].slice.call(arr)
}

module.exports = rawCreateElement

},{}],33:[function(require,module,exports){
module.exports = function deepFreeze (o) {
  Object.freeze(o);

  Object.getOwnPropertyNames(o).forEach(function (prop) {
    if (o.hasOwnProperty(prop)
    && o[prop] !== null
    && (typeof o[prop] === "object" || typeof o[prop] === "function")
    && !Object.isFrozen(o[prop])) {
      deepFreeze(o[prop]);
    }
  });
  
  return o;
};

},{}],34:[function(require,module,exports){
(function (process){(function (){
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
;!function(undefined) {

  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };
  var defaultMaxListeners = 10;

  function init() {
    this._events = {};
    if (this._conf) {
      configure.call(this, this._conf);
    }
  }

  function configure(conf) {
    if (conf) {
      this._conf = conf;

      conf.delimiter && (this.delimiter = conf.delimiter);
      this._maxListeners = conf.maxListeners !== undefined ? conf.maxListeners : defaultMaxListeners;

      conf.wildcard && (this.wildcard = conf.wildcard);
      conf.newListener && (this.newListener = conf.newListener);
      conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);

      if (this.wildcard) {
        this.listenerTree = {};
      }
    } else {
      this._maxListeners = defaultMaxListeners;
    }
  }

  function logPossibleMemoryLeak(count, eventName) {
    var errorMsg = '(node) warning: possible EventEmitter memory ' +
        'leak detected. ' + count + ' listeners added. ' +
        'Use emitter.setMaxListeners() to increase limit.';

    if(this.verboseMemoryLeak){
      errorMsg += ' Event name: ' + eventName + '.';
    }

    if(typeof process !== 'undefined' && process.emitWarning){
      var e = new Error(errorMsg);
      e.name = 'MaxListenersExceededWarning';
      e.emitter = this;
      e.count = count;
      process.emitWarning(e);
    } else {
      console.error(errorMsg);

      if (console.trace){
        console.trace();
      }
    }
  }

  function EventEmitter(conf) {
    this._events = {};
    this.newListener = false;
    this.verboseMemoryLeak = false;
    configure.call(this, conf);
  }
  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property

  //
  // Attention, function return type now is array, always !
  // It has zero elements if no any matches found and one or more
  // elements (leafs) if there are matches
  //
  function searchListenerTree(handlers, type, tree, i) {
    if (!tree) {
      return [];
    }
    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,
        typeLength = type.length, currentType = type[i], nextType = type[i+1];
    if (i === typeLength && tree._listeners) {
      //
      // If at the end of the event(s) list and the tree has listeners
      // invoke those listeners.
      //
      if (typeof tree._listeners === 'function') {
        handlers && handlers.push(tree._listeners);
        return [tree];
      } else {
        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {
          handlers && handlers.push(tree._listeners[leaf]);
        }
        return [tree];
      }
    }

    if ((currentType === '*' || currentType === '**') || tree[currentType]) {
      //
      // If the event emitted is '*' at this part
      // or there is a concrete match at this patch
      //
      if (currentType === '*') {
        for (branch in tree) {
          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));
          }
        }
        return listeners;
      } else if(currentType === '**') {
        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));
        if(endReached && tree._listeners) {
          // The next element has a _listeners, add it to the handlers.
          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));
        }

        for (branch in tree) {
          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
            if(branch === '*' || branch === '**') {
              if(tree[branch]._listeners && !endReached) {
                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));
              }
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
            } else if(branch === nextType) {
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));
            } else {
              // No match on this one, shift into the tree but not in the type array.
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
            }
          }
        }
        return listeners;
      }

      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));
    }

    xTree = tree['*'];
    if (xTree) {
      //
      // If the listener tree will allow any match for this part,
      // then recursively explore all branches of the tree
      //
      searchListenerTree(handlers, type, xTree, i+1);
    }

    xxTree = tree['**'];
    if(xxTree) {
      if(i < typeLength) {
        if(xxTree._listeners) {
          // If we have a listener on a '**', it will catch all, so add its handler.
          searchListenerTree(handlers, type, xxTree, typeLength);
        }

        // Build arrays of matching next branches and others.
        for(branch in xxTree) {
          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {
            if(branch === nextType) {
              // We know the next element will match, so jump twice.
              searchListenerTree(handlers, type, xxTree[branch], i+2);
            } else if(branch === currentType) {
              // Current node matches, move into the tree.
              searchListenerTree(handlers, type, xxTree[branch], i+1);
            } else {
              isolatedBranch = {};
              isolatedBranch[branch] = xxTree[branch];
              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);
            }
          }
        }
      } else if(xxTree._listeners) {
        // We have reached the end and still on a '**'
        searchListenerTree(handlers, type, xxTree, typeLength);
      } else if(xxTree['*'] && xxTree['*']._listeners) {
        searchListenerTree(handlers, type, xxTree['*'], typeLength);
      }
    }

    return listeners;
  }

  function growListenerTree(type, listener) {

    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();

    //
    // Looks for two consecutive '**', if so, don't add the event at all.
    //
    for(var i = 0, len = type.length; i+1 < len; i++) {
      if(type[i] === '**' && type[i+1] === '**') {
        return;
      }
    }

    var tree = this.listenerTree;
    var name = type.shift();

    while (name !== undefined) {

      if (!tree[name]) {
        tree[name] = {};
      }

      tree = tree[name];

      if (type.length === 0) {

        if (!tree._listeners) {
          tree._listeners = listener;
        }
        else {
          if (typeof tree._listeners === 'function') {
            tree._listeners = [tree._listeners];
          }

          tree._listeners.push(listener);

          if (
            !tree._listeners.warned &&
            this._maxListeners > 0 &&
            tree._listeners.length > this._maxListeners
          ) {
            tree._listeners.warned = true;
            logPossibleMemoryLeak.call(this, tree._listeners.length, name);
          }
        }
        return true;
      }
      name = type.shift();
    }
    return true;
  }

  // By default EventEmitters will print a warning if more than
  // 10 listeners are added to it. This is a useful default which
  // helps finding memory leaks.
  //
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.

  EventEmitter.prototype.delimiter = '.';

  EventEmitter.prototype.setMaxListeners = function(n) {
    if (n !== undefined) {
      this._maxListeners = n;
      if (!this._conf) this._conf = {};
      this._conf.maxListeners = n;
    }
  };

  EventEmitter.prototype.event = '';


  EventEmitter.prototype.once = function(event, fn) {
    return this._once(event, fn, false);
  };

  EventEmitter.prototype.prependOnceListener = function(event, fn) {
    return this._once(event, fn, true);
  };

  EventEmitter.prototype._once = function(event, fn, prepend) {
    this._many(event, 1, fn, prepend);
    return this;
  };

  EventEmitter.prototype.many = function(event, ttl, fn) {
    return this._many(event, ttl, fn, false);
  }

  EventEmitter.prototype.prependMany = function(event, ttl, fn) {
    return this._many(event, ttl, fn, true);
  }

  EventEmitter.prototype._many = function(event, ttl, fn, prepend) {
    var self = this;

    if (typeof fn !== 'function') {
      throw new Error('many only accepts instances of Function');
    }

    function listener() {
      if (--ttl === 0) {
        self.off(event, listener);
      }
      return fn.apply(this, arguments);
    }

    listener._origin = fn;

    this._on(event, listener, prepend);

    return self;
  };

  EventEmitter.prototype.emit = function() {

    this._events || init.call(this);

    var type = arguments[0];

    if (type === 'newListener' && !this.newListener) {
      if (!this._events.newListener) {
        return false;
      }
    }

    var al = arguments.length;
    var args,l,i,j;
    var handler;

    if (this._all && this._all.length) {
      handler = this._all.slice();
      if (al > 3) {
        args = new Array(al);
        for (j = 0; j < al; j++) args[j] = arguments[j];
      }

      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this, type);
          break;
        case 2:
          handler[i].call(this, type, arguments[1]);
          break;
        case 3:
          handler[i].call(this, type, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, args);
        }
      }
    }

    if (this.wildcard) {
      handler = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
    } else {
      handler = this._events[type];
      if (typeof handler === 'function') {
        this.event = type;
        switch (al) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
          handler.apply(this, args);
        }
        return true;
      } else if (handler) {
        // need to make copy of handlers because list can change in the middle
        // of emit call
        handler = handler.slice();
      }
    }

    if (handler && handler.length) {
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this);
          break;
        case 2:
          handler[i].call(this, arguments[1]);
          break;
        case 3:
          handler[i].call(this, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, args);
        }
      }
      return true;
    } else if (!this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }

    return !!this._all;
  };

  EventEmitter.prototype.emitAsync = function() {

    this._events || init.call(this);

    var type = arguments[0];

    if (type === 'newListener' && !this.newListener) {
        if (!this._events.newListener) { return Promise.resolve([false]); }
    }

    var promises= [];

    var al = arguments.length;
    var args,l,i,j;
    var handler;

    if (this._all) {
      if (al > 3) {
        args = new Array(al);
        for (j = 1; j < al; j++) args[j] = arguments[j];
      }
      for (i = 0, l = this._all.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(this._all[i].call(this, type));
          break;
        case 2:
          promises.push(this._all[i].call(this, type, arguments[1]));
          break;
        case 3:
          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));
          break;
        default:
          promises.push(this._all[i].apply(this, args));
        }
      }
    }

    if (this.wildcard) {
      handler = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
    } else {
      handler = this._events[type];
    }

    if (typeof handler === 'function') {
      this.event = type;
      switch (al) {
      case 1:
        promises.push(handler.call(this));
        break;
      case 2:
        promises.push(handler.call(this, arguments[1]));
        break;
      case 3:
        promises.push(handler.call(this, arguments[1], arguments[2]));
        break;
      default:
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
        promises.push(handler.apply(this, args));
      }
    } else if (handler && handler.length) {
      handler = handler.slice();
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(handler[i].call(this));
          break;
        case 2:
          promises.push(handler[i].call(this, arguments[1]));
          break;
        case 3:
          promises.push(handler[i].call(this, arguments[1], arguments[2]));
          break;
        default:
          promises.push(handler[i].apply(this, args));
        }
      }
    } else if (!this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        return Promise.reject(arguments[1]); // Unhandled 'error' event
      } else {
        return Promise.reject("Uncaught, unspecified 'error' event.");
      }
    }

    return Promise.all(promises);
  };

  EventEmitter.prototype.on = function(type, listener) {
    return this._on(type, listener, false);
  };

  EventEmitter.prototype.prependListener = function(type, listener) {
    return this._on(type, listener, true);
  };

  EventEmitter.prototype.onAny = function(fn) {
    return this._onAny(fn, false);
  };

  EventEmitter.prototype.prependAny = function(fn) {
    return this._onAny(fn, true);
  };

  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  EventEmitter.prototype._onAny = function(fn, prepend){
    if (typeof fn !== 'function') {
      throw new Error('onAny only accepts instances of Function');
    }

    if (!this._all) {
      this._all = [];
    }

    // Add the function to the event listener collection.
    if(prepend){
      this._all.unshift(fn);
    }else{
      this._all.push(fn);
    }

    return this;
  }

  EventEmitter.prototype._on = function(type, listener, prepend) {
    if (typeof type === 'function') {
      this._onAny(type, listener);
      return this;
    }

    if (typeof listener !== 'function') {
      throw new Error('on only accepts instances of Function');
    }
    this._events || init.call(this);

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    this.emit('newListener', type, listener);

    if (this.wildcard) {
      growListenerTree.call(this, type, listener);
      return this;
    }

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    }
    else {
      if (typeof this._events[type] === 'function') {
        // Change to array.
        this._events[type] = [this._events[type]];
      }

      // If we've already got an array, just add
      if(prepend){
        this._events[type].unshift(listener);
      }else{
        this._events[type].push(listener);
      }

      // Check for listener leak
      if (
        !this._events[type].warned &&
        this._maxListeners > 0 &&
        this._events[type].length > this._maxListeners
      ) {
        this._events[type].warned = true;
        logPossibleMemoryLeak.call(this, this._events[type].length, type);
      }
    }

    return this;
  }

  EventEmitter.prototype.off = function(type, listener) {
    if (typeof listener !== 'function') {
      throw new Error('removeListener only takes instances of Function');
    }

    var handlers,leafs=[];

    if(this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
    }
    else {
      // does not use listeners(), so no side effect of creating _events[type]
      if (!this._events[type]) return this;
      handlers = this._events[type];
      leafs.push({_listeners:handlers});
    }

    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
      var leaf = leafs[iLeaf];
      handlers = leaf._listeners;
      if (isArray(handlers)) {

        var position = -1;

        for (var i = 0, length = handlers.length; i < length; i++) {
          if (handlers[i] === listener ||
            (handlers[i].listener && handlers[i].listener === listener) ||
            (handlers[i]._origin && handlers[i]._origin === listener)) {
            position = i;
            break;
          }
        }

        if (position < 0) {
          continue;
        }

        if(this.wildcard) {
          leaf._listeners.splice(position, 1);
        }
        else {
          this._events[type].splice(position, 1);
        }

        if (handlers.length === 0) {
          if(this.wildcard) {
            delete leaf._listeners;
          }
          else {
            delete this._events[type];
          }
        }

        this.emit("removeListener", type, listener);

        return this;
      }
      else if (handlers === listener ||
        (handlers.listener && handlers.listener === listener) ||
        (handlers._origin && handlers._origin === listener)) {
        if(this.wildcard) {
          delete leaf._listeners;
        }
        else {
          delete this._events[type];
        }

        this.emit("removeListener", type, listener);
      }
    }

    function recursivelyGarbageCollect(root) {
      if (root === undefined) {
        return;
      }
      var keys = Object.keys(root);
      for (var i in keys) {
        var key = keys[i];
        var obj = root[key];
        if ((obj instanceof Function) || (typeof obj !== "object") || (obj === null))
          continue;
        if (Object.keys(obj).length > 0) {
          recursivelyGarbageCollect(root[key]);
        }
        if (Object.keys(obj).length === 0) {
          delete root[key];
        }
      }
    }
    recursivelyGarbageCollect(this.listenerTree);

    return this;
  };

  EventEmitter.prototype.offAny = function(fn) {
    var i = 0, l = 0, fns;
    if (fn && this._all && this._all.length > 0) {
      fns = this._all;
      for(i = 0, l = fns.length; i < l; i++) {
        if(fn === fns[i]) {
          fns.splice(i, 1);
          this.emit("removeListenerAny", fn);
          return this;
        }
      }
    } else {
      fns = this._all;
      for(i = 0, l = fns.length; i < l; i++)
        this.emit("removeListenerAny", fns[i]);
      this._all = [];
    }
    return this;
  };

  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

  EventEmitter.prototype.removeAllListeners = function(type) {
    if (arguments.length === 0) {
      !this._events || init.call(this);
      return this;
    }

    if (this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);

      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
        var leaf = leafs[iLeaf];
        leaf._listeners = null;
      }
    }
    else if (this._events) {
      this._events[type] = null;
    }
    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    if (this.wildcard) {
      var handlers = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
      return handlers;
    }

    this._events || init.call(this);

    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };

  EventEmitter.prototype.eventNames = function(){
    return Object.keys(this._events);
  }

  EventEmitter.prototype.listenerCount = function(type) {
    return this.listeners(type).length;
  };

  EventEmitter.prototype.listenersAny = function() {

    if(this._all) {
      return this._all;
    }
    else {
      return [];
    }

  };

  if (typeof define === 'function' && define.amd) {
     // AMD. Register as an anonymous module.
    define(function() {
      return EventEmitter;
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = EventEmitter;
  }
  else {
    // Browser global.
    window.EventEmitter2 = EventEmitter;
  }
}();

}).call(this)}).call(this,require('_process'))
},{"_process":47}],35:[function(require,module,exports){
module.exports = attributeToProperty

var transform = {
  'class': 'className',
  'for': 'htmlFor',
  'http-equiv': 'httpEquiv'
}

function attributeToProperty (h) {
  return function (tagName, attrs, children) {
    for (var attr in attrs) {
      if (attr in transform) {
        attrs[transform[attr]] = attrs[attr]
        delete attrs[attr]
      }
    }
    return h(tagName, attrs, children)
  }
}

},{}],36:[function(require,module,exports){
var attrToProp = require('hyperscript-attribute-to-property')

var VAR = 0, TEXT = 1, OPEN = 2, CLOSE = 3, ATTR = 4
var ATTR_KEY = 5, ATTR_KEY_W = 6
var ATTR_VALUE_W = 7, ATTR_VALUE = 8
var ATTR_VALUE_SQ = 9, ATTR_VALUE_DQ = 10
var ATTR_EQ = 11, ATTR_BREAK = 12
var COMMENT = 13

module.exports = function (h, opts) {
  if (!opts) opts = {}
  var concat = opts.concat || function (a, b) {
    return String(a) + String(b)
  }
  if (opts.attrToProp !== false) {
    h = attrToProp(h)
  }

  return function (strings) {
    var state = TEXT, reg = ''
    var arglen = arguments.length
    var parts = []

    for (var i = 0; i < strings.length; i++) {
      if (i < arglen - 1) {
        var arg = arguments[i+1]
        var p = parse(strings[i])
        var xstate = state
        if (xstate === ATTR_VALUE_DQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_SQ) xstate = ATTR_VALUE
        if (xstate === ATTR_VALUE_W) xstate = ATTR_VALUE
        if (xstate === ATTR) xstate = ATTR_KEY
        if (xstate === OPEN) {
          if (reg === '/') {
            p.push([ OPEN, '/', arg ])
            reg = ''
          } else {
            p.push([ OPEN, arg ])
          }
        } else if (xstate === COMMENT && opts.comments) {
          reg += String(arg)
        } else if (xstate !== COMMENT) {
          p.push([ VAR, xstate, arg ])
        }
        parts.push.apply(parts, p)
      } else parts.push.apply(parts, parse(strings[i]))
    }

    var tree = [null,{},[]]
    var stack = [[tree,-1]]
    for (var i = 0; i < parts.length; i++) {
      var cur = stack[stack.length-1][0]
      var p = parts[i], s = p[0]
      if (s === OPEN && /^\//.test(p[1])) {
        var ix = stack[stack.length-1][1]
        if (stack.length > 1) {
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === OPEN) {
        var c = [p[1],{},[]]
        cur[2].push(c)
        stack.push([c,cur[2].length-1])
      } else if (s === ATTR_KEY || (s === VAR && p[1] === ATTR_KEY)) {
        var key = ''
        var copyKey
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_KEY) {
            key = concat(key, parts[i][1])
          } else if (parts[i][0] === VAR && parts[i][1] === ATTR_KEY) {
            if (typeof parts[i][2] === 'object' && !key) {
              for (copyKey in parts[i][2]) {
                if (parts[i][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {
                  cur[1][copyKey] = parts[i][2][copyKey]
                }
              }
            } else {
              key = concat(key, parts[i][2])
            }
          } else break
        }
        if (parts[i][0] === ATTR_EQ) i++
        var j = i
        for (; i < parts.length; i++) {
          if (parts[i][0] === ATTR_VALUE || parts[i][0] === ATTR_KEY) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][1])
            else parts[i][1]==="" || (cur[1][key] = concat(cur[1][key], parts[i][1]));
          } else if (parts[i][0] === VAR
          && (parts[i][1] === ATTR_VALUE || parts[i][1] === ATTR_KEY)) {
            if (!cur[1][key]) cur[1][key] = strfn(parts[i][2])
            else parts[i][2]==="" || (cur[1][key] = concat(cur[1][key], parts[i][2]));
          } else {
            if (key.length && !cur[1][key] && i === j
            && (parts[i][0] === CLOSE || parts[i][0] === ATTR_BREAK)) {
              // https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attributes
              // empty string is falsy, not well behaved value in browser
              cur[1][key] = key.toLowerCase()
            }
            if (parts[i][0] === CLOSE) {
              i--
            }
            break
          }
        }
      } else if (s === ATTR_KEY) {
        cur[1][p[1]] = true
      } else if (s === VAR && p[1] === ATTR_KEY) {
        cur[1][p[2]] = true
      } else if (s === CLOSE) {
        if (selfClosing(cur[0]) && stack.length) {
          var ix = stack[stack.length-1][1]
          stack.pop()
          stack[stack.length-1][0][2][ix] = h(
            cur[0], cur[1], cur[2].length ? cur[2] : undefined
          )
        }
      } else if (s === VAR && p[1] === TEXT) {
        if (p[2] === undefined || p[2] === null) p[2] = ''
        else if (!p[2]) p[2] = concat('', p[2])
        if (Array.isArray(p[2][0])) {
          cur[2].push.apply(cur[2], p[2])
        } else {
          cur[2].push(p[2])
        }
      } else if (s === TEXT) {
        cur[2].push(p[1])
      } else if (s === ATTR_EQ || s === ATTR_BREAK) {
        // no-op
      } else {
        throw new Error('unhandled: ' + s)
      }
    }

    if (tree[2].length > 1 && /^\s*$/.test(tree[2][0])) {
      tree[2].shift()
    }

    if (tree[2].length > 2
    || (tree[2].length === 2 && /\S/.test(tree[2][1]))) {
      if (opts.createFragment) return opts.createFragment(tree[2])
      throw new Error(
        'multiple root elements must be wrapped in an enclosing tag'
      )
    }
    if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === 'string'
    && Array.isArray(tree[2][0][2])) {
      tree[2][0] = h(tree[2][0][0], tree[2][0][1], tree[2][0][2])
    }
    return tree[2][0]

    function parse (str) {
      var res = []
      if (state === ATTR_VALUE_W) state = ATTR
      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i)
        if (state === TEXT && c === '<') {
          if (reg.length) res.push([TEXT, reg])
          reg = ''
          state = OPEN
        } else if (c === '>' && !quot(state) && state !== COMMENT) {
          if (state === OPEN && reg.length) {
            res.push([OPEN,reg])
          } else if (state === ATTR_KEY) {
            res.push([ATTR_KEY,reg])
          } else if (state === ATTR_VALUE && reg.length) {
            res.push([ATTR_VALUE,reg])
          }
          res.push([CLOSE])
          reg = ''
          state = TEXT
        } else if (state === COMMENT && /-$/.test(reg) && c === '-') {
          if (opts.comments) {
            res.push([ATTR_VALUE,reg.substr(0, reg.length - 1)])
          }
          reg = ''
          state = TEXT
        } else if (state === OPEN && /^!--$/.test(reg)) {
          if (opts.comments) {
            res.push([OPEN, reg],[ATTR_KEY,'comment'],[ATTR_EQ])
          }
          reg = c
          state = COMMENT
        } else if (state === TEXT || state === COMMENT) {
          reg += c
        } else if (state === OPEN && c === '/' && reg.length) {
          // no-op, self closing tag without a space <br/>
        } else if (state === OPEN && /\s/.test(c)) {
          if (reg.length) {
            res.push([OPEN, reg])
          }
          reg = ''
          state = ATTR
        } else if (state === OPEN) {
          reg += c
        } else if (state === ATTR && /[^\s"'=/]/.test(c)) {
          state = ATTR_KEY
          reg = c
        } else if (state === ATTR && /\s/.test(c)) {
          if (reg.length) res.push([ATTR_KEY,reg])
          res.push([ATTR_BREAK])
        } else if (state === ATTR_KEY && /\s/.test(c)) {
          res.push([ATTR_KEY,reg])
          reg = ''
          state = ATTR_KEY_W
        } else if (state === ATTR_KEY && c === '=') {
          res.push([ATTR_KEY,reg],[ATTR_EQ])
          reg = ''
          state = ATTR_VALUE_W
        } else if (state === ATTR_KEY) {
          reg += c
        } else if ((state === ATTR_KEY_W || state === ATTR) && c === '=') {
          res.push([ATTR_EQ])
          state = ATTR_VALUE_W
        } else if ((state === ATTR_KEY_W || state === ATTR) && !/\s/.test(c)) {
          res.push([ATTR_BREAK])
          if (/[\w-]/.test(c)) {
            reg += c
            state = ATTR_KEY
          } else state = ATTR
        } else if (state === ATTR_VALUE_W && c === '"') {
          state = ATTR_VALUE_DQ
        } else if (state === ATTR_VALUE_W && c === "'") {
          state = ATTR_VALUE_SQ
        } else if (state === ATTR_VALUE_DQ && c === '"') {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_SQ && c === "'") {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE_W && !/\s/.test(c)) {
          state = ATTR_VALUE
          i--
        } else if (state === ATTR_VALUE && /\s/.test(c)) {
          res.push([ATTR_VALUE,reg],[ATTR_BREAK])
          reg = ''
          state = ATTR
        } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ
        || state === ATTR_VALUE_DQ) {
          reg += c
        }
      }
      if (state === TEXT && reg.length) {
        res.push([TEXT,reg])
        reg = ''
      } else if (state === ATTR_VALUE && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_DQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_VALUE_SQ && reg.length) {
        res.push([ATTR_VALUE,reg])
        reg = ''
      } else if (state === ATTR_KEY) {
        res.push([ATTR_KEY,reg])
        reg = ''
      }
      return res
    }
  }

  function strfn (x) {
    if (typeof x === 'function') return x
    else if (typeof x === 'string') return x
    else if (x && typeof x === 'object') return x
    else if (x === null || x === undefined) return x
    else return concat('', x)
  }
}

function quot (state) {
  return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ
}

var closeRE = RegExp('^(' + [
  'area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed',
  'frame', 'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
  'source', 'track', 'wbr', '!--',
  // SVG TAGS
  'animate', 'animateTransform', 'circle', 'cursor', 'desc', 'ellipse',
  'feBlend', 'feColorMatrix', 'feComposite',
  'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap',
  'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR',
  'feGaussianBlur', 'feImage', 'feMergeNode', 'feMorphology',
  'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile',
  'feTurbulence', 'font-face-format', 'font-face-name', 'font-face-uri',
  'glyph', 'glyphRef', 'hkern', 'image', 'line', 'missing-glyph', 'mpath',
  'path', 'polygon', 'polyline', 'rect', 'set', 'stop', 'tref', 'use', 'view',
  'vkern'
].join('|') + ')(?:[\.#][a-zA-Z0-9\u007F-\uFFFF_:-]+)*$')
function selfClosing (tag) { return closeRE.test(tag) }

},{"hyperscript-attribute-to-property":35}],37:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var utils = _interopRequireWildcard(require("./utils.js"));

var _intlMessageformat = _interopRequireDefault(require("intl-messageformat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getDefaults() {
  return {
    memoize: true,
    memoizeFallback: false,
    bindI18n: '',
    bindI18nStore: '',
    parseErrorHandler: function parseErrorHandler(err, key, res, options) {
      return res;
    }
  };
}

var ICU = /*#__PURE__*/function () {
  function ICU(options) {
    _classCallCheck(this, ICU);

    this.type = 'i18nFormat';
    this.mem = {};
    this.init(null, options);
  }

  _createClass(ICU, [{
    key: "init",
    value: function init(i18next, options) {
      var _this = this;

      var i18nextOptions = i18next && i18next.options && i18next.options.i18nFormat || {};
      this.options = utils.defaults(i18nextOptions, options, this.options || {}, getDefaults());
      this.formats = this.options.formats;

      if (i18next) {
        var _this$options = this.options,
            bindI18n = _this$options.bindI18n,
            bindI18nStore = _this$options.bindI18nStore,
            memoize = _this$options.memoize;
        i18next.IntlMessageFormat = _intlMessageformat["default"];
        i18next.ICU = this;

        if (memoize) {
          if (bindI18n) {
            i18next.on(bindI18n, function () {
              return _this.clearCache();
            });
          }

          if (bindI18nStore) {
            i18next.store.on(bindI18nStore, function () {
              return _this.clearCache();
            });
          }
        }
      }
    }
  }, {
    key: "addUserDefinedFormats",
    value: function addUserDefinedFormats(formats) {
      this.formats = this.formats ? _objectSpread(_objectSpread({}, this.formats), formats) : formats;
    }
  }, {
    key: "parse",
    value: function parse(res, options, lng, ns, key, info) {
      var hadSuccessfulLookup = info && info.resolved && info.resolved.res;
      var memKey = this.options.memoize && "".concat(lng, ".").concat(ns, ".").concat(key.replace(/\./g, '###'));
      var fc;

      if (this.options.memoize) {
        fc = utils.getPath(this.mem, memKey);
      }

      try {
        if (!fc) {
          // without ignoreTag, react-i18next <Trans> translations with <0></0> placeholders
          // will fail to parse, as IntlMessageFormat expects them to be defined in the
          // options passed to fc.format() as { 0: (children) => string }
          // but the replacement of placeholders is done in react-i18next
          fc = new _intlMessageformat["default"](res, lng, this.formats, {
            ignoreTag: true
          });
          if (this.options.memoize && (this.options.memoizeFallback || !info || hadSuccessfulLookup)) utils.setPath(this.mem, memKey, fc);
        }

        return fc.format(options);
      } catch (err) {
        return this.options.parseErrorHandler(err, key, res, options);
      }
    }
  }, {
    key: "addLookupKeys",
    value: function addLookupKeys(finalKeys, _key, _code, _ns, _options) {
      // no additional keys needed for select or plural
      // so there is no need to add keys to that finalKeys array
      return finalKeys;
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.mem = {};
    }
  }]);

  return ICU;
}();

ICU.type = 'i18nFormat';
var _default = ICU;
exports["default"] = _default;
},{"./utils.js":38,"intl-messageformat":41}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPath = setPath;
exports.pushPath = pushPath;
exports.getPath = getPath;
exports.defaults = defaults;
exports.extend = extend;

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    object = object[key];
  }

  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}

function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}

function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}

var arr = [];
var each = arr.forEach;
var slice = arr.slice;

function defaults(obj) {
  each.call(slice.call(arguments, 1), function (source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === undefined) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}

function extend(obj) {
  each.call(slice.call(arguments, 1), function (source) {
    if (source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
},{}],39:[function(require,module,exports){
module.exports = require('./dist/commonjs/index.js').default;

},{"./dist/commonjs/index.js":37}],40:[function(require,module,exports){
'use strict';

var _typeof = require('@babel/runtime/helpers/typeof');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toArray = require('@babel/runtime/helpers/toArray');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toArray__default = /*#__PURE__*/_interopDefaultLegacy(_toArray);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var consoleLogger = {
  type: 'logger',
  log: function log(args) {
    this.output('log', args);
  },
  warn: function warn(args) {
    this.output('warn', args);
  },
  error: function error(args) {
    this.output('error', args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};

var Logger = function () {
  function Logger(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Logger);

    this.init(concreteLogger, options);
  }

  _createClass__default['default'](Logger, [{
    key: "init",
    value: function init(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.prefix = options.prefix || 'i18next:';
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.forward(args, 'log', '', true);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.forward(args, 'warn', '', true);
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.forward(args, 'error', '');
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger(this.logger, _objectSpread(_objectSpread({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }), this.options));
    }
  }]);

  return Logger;
}();

var baseLogger = new Logger();

var EventEmitter = function () {
  function EventEmitter() {
    _classCallCheck__default['default'](this, EventEmitter);

    this.observers = {};
  }

  _createClass__default['default'](EventEmitter, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;

      events.split(' ').forEach(function (event) {
        _this.observers[event] = _this.observers[event] || [];

        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;

      if (!listener) {
        delete this.observers[event];
        return;
      }

      this.observers[event] = this.observers[event].filter(function (l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function (observer) {
          observer.apply(void 0, args);
        });
      }

      if (this.observers['*']) {
        var _cloned = [].concat(this.observers['*']);

        _cloned.forEach(function (observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);

  return EventEmitter;
}();

function defer() {
  var res;
  var rej;
  var promise = new Promise(function (resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}
function copy(a, s, t) {
  a.forEach(function (m) {
    if (s[m]) t[m] = s[m];
  });
}

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();

    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }

  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);

  if (value !== undefined) {
    return value;
  }

  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }

  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, function (s) {
      return _entityMap[s];
    });
  }

  return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && typeof window.navigator.userAgentData === 'undefined' && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
var chars = [' ', ',', '?', '!', ';'];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  var possibleChars = chars.filter(function (c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0) return true;
  var r = new RegExp("(".concat(possibleChars.map(function (c) {
    return c === '?' ? '\\?' : c;
  }).join('|'), ")"));
  var matched = !r.test(key);

  if (!matched) {
    var ki = key.indexOf(keySeparator);

    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }

  return matched;
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function deepFind(obj, path) {
  var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
  if (!obj) return undefined;
  if (obj[path]) return obj[path];
  var paths = path.split(keySeparator);
  var current = obj;

  for (var i = 0; i < paths.length; ++i) {
    if (!current) return undefined;

    if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
      return undefined;
    }

    if (current[paths[i]] === undefined) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];

      while (mix === undefined && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }

      if (mix === undefined) return undefined;
      if (mix === null) return null;

      if (path.endsWith(p)) {
        if (typeof mix === 'string') return mix;
        if (p && typeof mix[p] === 'string') return mix[p];
      }

      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return undefined;
    }

    current = current[paths[i]];
  }

  return current;
}

var ResourceStore = function (_EventEmitter) {
  _inherits__default['default'](ResourceStore, _EventEmitter);

  var _super = _createSuper(ResourceStore);

  function ResourceStore(data) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };

    _classCallCheck__default['default'](this, ResourceStore);

    _this = _super.call(this);

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.data = data || {};
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    if (_this.options.ignoreJSONStructure === undefined) {
      _this.options.ignoreJSONStructure = true;
    }

    return _this;
  }

  _createClass__default['default'](ResourceStore, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);

      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path = [lng, ns];
      if (key && typeof key !== 'string') path = path.concat(key);
      if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
      }

      var result = getPath(this.data, path);
      if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === undefined) keySeparator = '.';
      var path = [lng, ns];
      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        value = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent) this.emit('added', lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        silent: false
      };

      for (var m in resources) {
        if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }

      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
        silent: false
      };
      var path = [lng, ns];

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        deep = resources;
        resources = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      var pack = getPath(this.data, path) || {};

      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
      }

      setPath(this.data, path, pack);
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }

      this.removeNamespaces(ns);
      this.emit('removed', lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== undefined;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === 'v1') return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function (v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);

  return ResourceStore;
}(EventEmitter);

var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;

    processors.forEach(function (processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var checkedLoadedFor = {};

var Translator = function (_EventEmitter) {
  _inherits__default['default'](Translator, _EventEmitter);

  var _super = _createSuper$1(Translator);

  function Translator(services) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Translator);

    _this = _super.call(this);

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized__default['default'](_this));
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    _this.logger = baseLogger.create('translator');
    return _this;
  }

  _createClass__default['default'](Translator, [{
    key: "changeLanguage",
    value: function changeLanguage(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };

      if (key === undefined || key === null) {
        return false;
      }

      var resolved = this.resolve(key, options);
      return resolved && resolved.res !== undefined;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === undefined) nsSeparator = ':';
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS || [];
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);

      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m = key.match(this.interpolator.nestingRegexp);

        if (m && m.length > 0) {
          return {
            key: key,
            namespaces: namespaces
          };
        }

        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }

      if (typeof namespaces === 'string') namespaces = [namespaces];
      return {
        key: key,
        namespaces: namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;

      if (_typeof__default['default'](options) !== 'object' && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }

      if (!options) options = {};
      if (keys === undefined || keys === null) return '';
      if (!Array.isArray(keys)) keys = [String(keys)];
      var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
          key = _this$extractFromKey.key,
          namespaces = _this$extractFromKey.namespaces;

      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

      if (lng && lng.toLowerCase() === 'cimode') {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;

          if (returnDetails) {
            resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
            return resolved;
          }

          return "".concat(namespace).concat(nsSeparator).concat(key);
        }

        if (returnDetails) {
          resolved.res = key;
          return resolved;
        }

        return key;
      }

      var resolved = this.resolve(keys, options);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
        if (!options.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn('accessing an object - but returnObjects options is not enabled!');
          }

          var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");

          if (returnDetails) {
            resolved.res = r;
            return resolved;
          }

          return r;
        }

        if (keySeparator) {
          var resTypeIsArray = resType === '[object Array]';
          var copy = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy[m] === deepKey) copy[m] = res[m];
            }
          }

          res = copy;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
        var hasDefaultValue = Translator.hasDefaultValue(options);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;

        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }

        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }

        var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;

        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);

          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
          }

          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === 'all') {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }

          var send = function send(l, k, specificDefaultValue) {
            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;

            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
            }

            _this2.emit('missingKey', l, namespace, k, res);
          };

          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function (language) {
                _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                  send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }

        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);

        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== 'v1') {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : undefined);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }

      if (returnDetails) {
        resolved.res = res;
        return resolved;
      }

      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved, lastKey) {
      var _this3 = this;

      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved: resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation) this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
          interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
        }));
        var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        var nestBef;

        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }

        var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
        if (this.options.interpolation.defaultVariables) data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options.nest = false;
        }

        if (options.nest !== false) res = this.interpolator.nest(res, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

            return null;
          }

          return _this3.translate.apply(_this3, args.concat([key]));
        }, options);
        if (options.interpolation) this.interpolator.reset();
      }

      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
          i18nResolved: resolved
        }, options) : options, this);
      }

      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === 'string') keys = [keys];
      keys.forEach(function (k) {
        if (_this4.isValidLookup(found)) return;

        var extracted = _this4.extractFromKey(k, options);

        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

        var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();

        var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function (ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;

          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          }

          codes.forEach(function (code) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code;
            var finalKeys = [key];

            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
              var zeroSuffix = '_zero';

              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);

                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }

              if (needsContextHandling) {
                var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                finalKeys.push(contextKey);

                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);

                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }

            var possibleKey;

            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey: usedKey,
        exactUsedKey: exactUsedKey,
        usedLng: usedLng,
        usedNS: usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options) {
      var prefix = 'defaultValue';

      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
          return true;
        }
      }

      return false;
    }
  }]);

  return Translator;
}(EventEmitter);

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var LanguageUtil = function () {
  function LanguageUtil(options) {
    _classCallCheck__default['default'](this, LanguageUtil);

    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }

  _createClass__default['default'](LanguageUtil, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return null;
      var p = code.split('-');
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === 'x') return null;
      return this.formatLanguageCode(p.join('-'));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return code;
      var p = code.split('-');
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === 'string' && code.indexOf('-') > -1) {
        var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
        var p = code.split('-');

        if (this.options.lowerCaseLng) {
          p = p.map(function (part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }

        return p.join('-');
      }

      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }

      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;

      if (!codes) return null;
      var found;
      codes.forEach(function (code) {
        if (found) return;

        var cleanedLng = _this.formatLanguageCode(code);

        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });

      if (!found && this.options.supportedLngs) {
        codes.forEach(function (code) {
          if (found) return;

          var lngOnly = _this.getLanguagePartFromCode(code);

          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function (supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }

      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks) return [];
      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
      if (!code) return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found) found = fallbacks[this.formatLanguageCode(code)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;

      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];

      var addCode = function addCode(c) {
        if (!c) return;

        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };

      if (typeof code === 'string' && code.indexOf('-') > -1) {
        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === 'string') {
        addCode(this.formatLanguageCode(code));
      }

      fallbackCodes.forEach(function (fc) {
        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);

  return LanguageUtil;
}();

var sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _(n) {
    return Number(n != 1);
  },
  3: function _(n) {
    return 0;
  },
  4: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _(n) {
    return Number(n >= 2);
  },
  10: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _(n) {
    return Number(n !== 0);
  },
  14: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};

function createRules() {
  var rules = {};
  sets.forEach(function (set) {
    set.lngs.forEach(function (l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}

var PluralResolver = function () {
  function PluralResolver(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, PluralResolver);

    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');

    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
      this.options.compatibilityJSON = 'v3';
      this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
    }

    this.rules = createRules();
  }

  _createClass__default['default'](PluralResolver, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code, {
            type: options.ordinal ? 'ordinal' : 'cardinal'
          });
        } catch (_unused) {
          return;
        }
      }

      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var rule = this.getRule(code, options);

      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }

      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.getSuffixes(code, options).map(function (suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var rule = this.getRule(code, options);

      if (!rule) {
        return [];
      }

      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function (pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }

      return rule.numbers.map(function (number) {
        return _this.getSuffix(code, number, options);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var rule = this.getRule(code, options);

      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }

        return this.getSuffixRetroCompatible(rule, count);
      }

      this.logger.warn("no plural rule found for: ".concat(code));
      return '';
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;

      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];

      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = 'plural';
        } else if (suffix === 1) {
          suffix = '';
        }
      }

      var returnSuffix = function returnSuffix() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };

      if (this.options.compatibilityJSON === 'v1') {
        if (suffix === 1) return '';
        if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === 'v2') {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }

      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);

  return PluralResolver;
}();

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Interpolator = function () {
  function Interpolator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck__default['default'](this, Interpolator);

    this.logger = baseLogger.create('interpolator');
    this.options = options;

    this.format = options.interpolation && options.interpolation.format || function (value) {
      return value;
    };

    this.init(options);
  }

  _createClass__default['default'](Interpolator, [{
    key: "init",
    value: function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!options.interpolation) options.interpolation = {
        escapeValue: true
      };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
      this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
      this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, 'g');
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;

      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

      function regexSafe(val) {
        return val.replace(/\$/g, '$$$$');
      }

      var handleFormat = function handleFormat(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
            interpolationkey: key
          })) : path;
        }

        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
          interpolationkey: k
        }));
      };

      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function (todo) {
        replaces = 0;

        while (match = todo.regex.exec(str)) {
          var matchedVar = match[1].trim();
          value = handleFormat(matchedVar);

          if (value === undefined) {
            if (typeof missingInterpolationHandler === 'function') {
              var temp = missingInterpolationHandler(str, match, options);
              value = typeof temp === 'string' ? temp : '';
            } else if (options && options.hasOwnProperty(matchedVar)) {
              value = '';
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));

              value = '';
            }
          } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
            value = makeString(value);
          }

          var safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);

          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }

          replaces++;

          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var match;
      var value;

      var clonedOptions = _objectSpread$3({}, options);

      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;

      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        optionsString = optionsString.replace(/'/g, '"');

        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }

        delete clonedOptions.defaultValue;
        return key;
      }

      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;

        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function (elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }

        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== 'string') return value;
        if (typeof value !== 'string') value = makeString(value);

        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = '';
        }

        if (doReduce) {
          value = formatters.reduce(function (v, f) {
            return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
              interpolationkey: match[1].trim()
            }));
          }, value.trim());
        }

        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }

      return str;
    }
  }]);

  return Interpolator;
}();

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parseFormatStr(formatStr) {
  var formatName = formatStr.toLowerCase().trim();
  var formatOptions = {};

  if (formatStr.indexOf('(') > -1) {
    var p = formatStr.split('(');
    formatName = p[0].toLowerCase().trim();
    var optStr = p[1].substring(0, p[1].length - 1);

    if (formatName === 'currency' && optStr.indexOf(':') < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      var opts = optStr.split(';');
      opts.forEach(function (opt) {
        if (!opt) return;

        var _opt$split = opt.split(':'),
            _opt$split2 = _toArray__default['default'](_opt$split),
            key = _opt$split2[0],
            rest = _opt$split2.slice(1);

        var val = rest.join(':').trim().replace(/^'+|'+$/g, '');
        if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
        if (val === 'false') formatOptions[key.trim()] = false;
        if (val === 'true') formatOptions[key.trim()] = true;
        if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }

  return {
    formatName: formatName,
    formatOptions: formatOptions
  };
}

var Formatter = function () {
  function Formatter() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck__default['default'](this, Formatter);

    this.logger = baseLogger.create('formatter');
    this.options = options;
    this.formats = {
      number: function number(val, lng, options) {
        return new Intl.NumberFormat(lng, options).format(val);
      },
      currency: function currency(val, lng, options) {
        return new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options), {}, {
          style: 'currency'
        })).format(val);
      },
      datetime: function datetime(val, lng, options) {
        return new Intl.DateTimeFormat(lng, _objectSpread$4({}, options)).format(val);
      },
      relativetime: function relativetime(val, lng, options) {
        return new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options)).format(val, options.range || 'day');
      },
      list: function list(val, lng, options) {
        return new Intl.ListFormat(lng, _objectSpread$4({}, options)).format(val);
      }
    };
    this.init(options);
  }

  _createClass__default['default'](Formatter, [{
    key: "init",
    value: function init(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };
      var iOpts = options.interpolation;
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
    }
  }, {
    key: "add",
    value: function add(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
  }, {
    key: "format",
    value: function format(value, _format, lng, options) {
      var _this = this;

      var formats = _format.split(this.formatSeparator);

      var result = formats.reduce(function (mem, f) {
        var _parseFormatStr = parseFormatStr(f),
            formatName = _parseFormatStr.formatName,
            formatOptions = _parseFormatStr.formatOptions;

        if (_this.formats[formatName]) {
          var formatted = mem;

          try {
            var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
            var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
            formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
          } catch (error) {
            _this.logger.warn(error);
          }

          return formatted;
        } else {
          _this.logger.warn("there was no format function for ".concat(formatName));
        }

        return mem;
      }, value);
      return result;
    }
  }]);

  return Formatter;
}();

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function removePending(q, name) {
  if (q.pending[name] !== undefined) {
    delete q.pending[name];
    q.pendingCount--;
  }
}

var Connector = function (_EventEmitter) {
  _inherits__default['default'](Connector, _EventEmitter);

  var _super = _createSuper$2(Connector);

  function Connector(backend, store, services) {
    var _this;

    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck__default['default'](this, Connector);

    _this = _super.call(this);

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create('backendConnector');
    _this.waitingReads = [];
    _this.maxParallelReads = options.maxParallelReads || 10;
    _this.readingCalls = 0;
    _this.state = {};
    _this.queue = [];

    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }

    return _this;
  }

  _createClass__default['default'](Connector, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;

      var toLoad = {};
      var pending = {};
      var toLoadLanguages = {};
      var toLoadNamespaces = {};
      languages.forEach(function (lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function (ns) {
          var name = "".concat(lng, "|").concat(ns);

          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
            if (pending[name] === undefined) pending[name] = true;
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === undefined) pending[name] = true;
            if (toLoad[name] === undefined) toLoad[name] = true;
            if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces) toLoadLanguages[lng] = true;
      });

      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending: pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback: callback
        });
      }

      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit('failedLoading', lng, ns, err);

      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }

      this.state[name] = err ? -1 : 2;
      var loaded = {};
      this.queue.forEach(function (q) {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err) q.errors.push(err);

        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function (l) {
            if (!loaded[l]) loaded[l] = {};
            var loadedKeys = q.loaded[l];

            if (loadedKeys.length) {
              loadedKeys.forEach(function (ns) {
                if (loaded[l][ns] === undefined) loaded[l][ns] = true;
              });
            }
          });
          q.done = true;

          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit('loaded', loaded);
      this.queue = this.queue.filter(function (q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read(lng, ns, fcName) {
      var _this3 = this;

      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
      var callback = arguments.length > 5 ? arguments[5] : undefined;
      if (!lng.length) return callback(null, {});

      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng: lng,
          ns: ns,
          fcName: fcName,
          tried: tried,
          wait: wait,
          callback: callback
        });
        return;
      }

      this.readingCalls++;
      return this.backend[fcName](lng, ns, function (err, data) {
        if (err && data && tried < 5) {
          setTimeout(function () {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }

        _this3.readingCalls--;

        if (_this3.waitingReads.length > 0) {
          var next = _this3.waitingReads.shift();

          _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
        }

        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;

      if (!this.backend) {
        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
        return callback && callback();
      }

      if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === 'string') namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);

      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }

      toLoad.toLoad.forEach(function (name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;

      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        return;
      }

      if (key === undefined || key === null || key === '') return;

      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
          isUpdate: isUpdate
        }));
      }

      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);

  return Connector;
}(EventEmitter);

function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      var ret = {};
      if (_typeof__default['default'](args[1]) === 'object') ret = args[1];
      if (typeof args[1] === 'string') ret.defaultValue = args[1];
      if (typeof args[2] === 'string') ret.tDescription = args[2];

      if (_typeof__default['default'](args[2]) === 'object' || _typeof__default['default'](args[3]) === 'object') {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function (key) {
          ret[key] = options[key];
        });
      }

      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: true
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }

  return options;
}

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function noop() {}

function bindMemberFunctions(inst) {
  var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(function (mem) {
    if (typeof inst[mem] === 'function') {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}

var I18n = function (_EventEmitter) {
  _inherits__default['default'](I18n, _EventEmitter);

  var _super = _createSuper$3(I18n);

  function I18n() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck__default['default'](this, I18n);

    _this = _super.call(this);

    if (isIE10) {
      EventEmitter.call(_assertThisInitialized__default['default'](_this));
    }

    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };
    bindMemberFunctions(_assertThisInitialized__default['default'](_this));

    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);

        return _possibleConstructorReturn__default['default'](_this, _assertThisInitialized__default['default'](_this));
      }

      setTimeout(function () {
        _this.init(options, callback);
      }, 0);
    }

    return _this;
  }

  _createClass__default['default'](I18n, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!options.defaultNS && options.ns) {
        if (typeof options.ns === 'string') {
          options.defaultNS = options.ns;
        } else if (options.ns.indexOf('translation') < 0) {
          options.defaultNS = options.ns[0];
        }
      }

      var defOpts = get();
      this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));

      if (this.options.compatibilityAPI !== 'v1') {
        this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
      }

      if (options.keySeparator !== undefined) {
        this.options.userDefinedKeySeparator = options.keySeparator;
      }

      if (options.nsSeparator !== undefined) {
        this.options.userDefinedNsSeparator = options.nsSeparator;
      }

      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === 'function') return new ClassOrObject();
        return ClassOrObject;
      }

      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }

        var formatter;

        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== 'undefined') {
          formatter = Formatter;
        }

        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });

        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }

        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on('*', function (event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });

        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }

        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }

        this.translator = new Translator(this.services, this.options);
        this.translator.on('*', function (event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function (m) {
          if (m.init) m.init(_this2);
        });
      }

      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;

      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
      }

      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn('init: no languageDetector is used and no lng is defined');
      }

      var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
      storeApi.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store;

          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
      storeApiChained.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store2;

          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

          return _this2;
        };
      });
      var deferred = defer();

      var load = function load() {
        var finish = function finish(err, t) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

          _this2.emit('initialized', _this2.options);

          deferred.resolve(t);
          callback(err, t);
        };

        if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));

        _this2.changeLanguage(_this2.options.lng, finish);
      };

      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }

      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources(language) {
      var _this3 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === 'string' ? language : this.language;
      if (typeof language === 'function') usedCallback = language;

      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
        var toLoad = [];

        var append = function append(lng) {
          if (!lng) return;

          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };

        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function (l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }

        if (this.options.preload) {
          this.options.preload.forEach(function (l) {
            return append(l);
          });
        }

        this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
          if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, function (err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use(module) {
      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

      if (module.type === 'backend') {
        this.modules.backend = module;
      }

      if (module.type === 'logger' || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }

      if (module.type === 'languageDetector') {
        this.modules.languageDetector = module;
      }

      if (module.type === 'i18nFormat') {
        this.modules.i18nFormat = module;
      }

      if (module.type === 'postProcessor') {
        postProcessor.addPostProcessor(module);
      }

      if (module.type === 'formatter') {
        this.modules.formatter = module;
      }

      if (module.type === '3rdParty') {
        this.modules.external.push(module);
      }

      return this;
    }
  }, {
    key: "setResolvedLanguage",
    value: function setResolvedLanguage(l) {
      if (!l || !this.languages) return;
      if (['cimode', 'dev'].indexOf(l) > -1) return;

      for (var li = 0; li < this.languages.length; li++) {
        var lngInLngs = this.languages[li];
        if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;

        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(lng, callback) {
      var _this4 = this;

      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit('languageChanging', lng);

      var setLngProps = function setLngProps(l) {
        _this4.language = l;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
        _this4.resolvedLanguage = undefined;

        _this4.setResolvedLanguage(l);
      };

      var done = function done(err, l) {
        if (l) {
          setLngProps(l);

          _this4.translator.changeLanguage(l);

          _this4.isLanguageChangingTo = undefined;

          _this4.emit('languageChanged', l);

          _this4.logger.log('languageChanged', l);
        } else {
          _this4.isLanguageChangingTo = undefined;
        }

        deferred.resolve(function () {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function () {
          return _this4.t.apply(_this4, arguments);
        });
      };

      var setLng = function setLng(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
        var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

        if (l) {
          if (!_this4.language) {
            setLngProps(l);
          }

          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }

        _this4.loadResources(l, function (err) {
          done(err, l);
        });
      };

      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }

      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT(lng, ns, keyPrefix) {
      var _this5 = this;

      var fixedT = function fixedT(key, opts) {
        var options;

        if (_typeof__default['default'](opts) !== 'object') {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }

          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = _objectSpread$6({}, opts);
        }

        options.lng = options.lng || fixedT.lng;
        options.lngs = options.lngs || fixedT.lngs;
        options.ns = options.ns || fixedT.ns;
        var keySeparator = _this5.options.keySeparator || '.';
        var resultKey = keyPrefix ? "".concat(keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options);
      };

      if (typeof lng === 'string') {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }

      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t() {
      var _this$translator;

      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists() {
      var _this$translator2;

      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace(ns) {
      var _this6 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.isInitialized) {
        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
        return false;
      }

      if (!this.languages || !this.languages.length) {
        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
        return false;
      }

      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === 'cimode') return true;

      var loadNotPending = function loadNotPending(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

        return loadState === -1 || loadState === 2;
      };

      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== undefined) return preResult;
      }

      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces(ns, callback) {
      var _this7 = this;

      var deferred = defer();

      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }

      if (typeof ns === 'string') ns = [ns];
      ns.forEach(function (n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === 'string') lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function (lng) {
        return preloaded.indexOf(lng) < 0;
      });

      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }

      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng) return 'rtl';
      var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

      var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
        isClone: true
      });

      var clone = new I18n(mergedOptions);
      var membersToCopy = ['store', 'services', 'language'];
      membersToCopy.forEach(function (m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread$6({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on('*', function (event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);

  return I18n;
}(EventEmitter);

_defineProperty__default['default'](I18n, "createInstance", function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  return new I18n(options, callback);
});

var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;

module.exports = instance;

},{"@babel/runtime/helpers/assertThisInitialized":3,"@babel/runtime/helpers/classCallCheck":4,"@babel/runtime/helpers/createClass":5,"@babel/runtime/helpers/defineProperty":6,"@babel/runtime/helpers/getPrototypeOf":7,"@babel/runtime/helpers/inherits":8,"@babel/runtime/helpers/possibleConstructorReturn":11,"@babel/runtime/helpers/toArray":13,"@babel/runtime/helpers/typeof":14}],41:[function(require,module,exports){
"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("./src/core");
(0, tslib_1.__exportStar)(require("./src/formatters"), exports);
(0, tslib_1.__exportStar)(require("./src/core"), exports);
(0, tslib_1.__exportStar)(require("./src/error"), exports);
exports.default = core_1.IntlMessageFormat;

},{"./src/core":42,"./src/error":43,"./src/formatters":44,"tslib":48}],42:[function(require,module,exports){
"use strict";
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntlMessageFormat = void 0;
var tslib_1 = require("tslib");
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var fast_memoize_1 = (0, tslib_1.__importStar)(require("@formatjs/fast-memoize"));
var formatters_1 = require("./formatters");
// -- MessageFormat --------------------------------------------------------
function mergeConfig(c1, c2) {
    if (!c2) {
        return c1;
    }
    return (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
        all[k] = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, c1[k]), (c2[k] || {}));
        return all;
    }, {}));
}
function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
        return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function (all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
    }, (0, tslib_1.__assign)({}, defaultConfig));
}
function createFastMemoizeCache(store) {
    return {
        create: function () {
            return {
                get: function (key) {
                    return store[key];
                },
                set: function (key, value) {
                    store[key] = value;
                },
            };
        },
    };
}
function createDefaultFormatters(cache) {
    if (cache === void 0) { cache = {
        number: {},
        dateTime: {},
        pluralRules: {},
    }; }
    return {
        getNumberFormat: (0, fast_memoize_1.default)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: fast_memoize_1.strategies.variadic,
        }),
        getDateTimeFormat: (0, fast_memoize_1.default)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: fast_memoize_1.strategies.variadic,
        }),
        getPluralRules: (0, fast_memoize_1.default)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.PluralRules).bind.apply(_a, (0, tslib_1.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: fast_memoize_1.strategies.variadic,
        }),
    };
}
var IntlMessageFormat = /** @class */ (function () {
    function IntlMessageFormat(message, locales, overrideFormats, opts) {
        var _this = this;
        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
        this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        };
        this.format = function (values) {
            var parts = _this.formatToParts(values);
            // Hot path for straight simple msg translations
            if (parts.length === 1) {
                return parts[0].value;
            }
            var result = parts.reduce(function (all, part) {
                if (!all.length ||
                    part.type !== formatters_1.PART_TYPE.literal ||
                    typeof all[all.length - 1] !== 'string') {
                    all.push(part.value);
                }
                else {
                    all[all.length - 1] += part.value;
                }
                return all;
            }, []);
            if (result.length <= 1) {
                return result[0] || '';
            }
            return result;
        };
        this.formatToParts = function (values) {
            return (0, formatters_1.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
        };
        this.resolvedOptions = function () { return ({
            locale: _this.resolvedLocale.toString(),
        }); };
        this.getAst = function () { return _this.ast; };
        // Defined first because it's used to build the format pattern.
        this.locales = locales;
        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
        if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat.__parse) {
                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
            }
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat.__parse(message, {
                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                locale: this.resolvedLocale,
            });
        }
        else {
            this.ast = message;
        }
        if (!Array.isArray(this.ast)) {
            throw new TypeError('A message must be provided as a String or AST.');
        }
        // Creates a new object with the specified `formats` merged with the default
        // formats.
        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
        this.formatters =
            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat, "defaultLocale", {
        get: function () {
            if (!IntlMessageFormat.memoizedDefaultLocale) {
                IntlMessageFormat.memoizedDefaultLocale =
                    new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat.memoizedDefaultLocale;
        },
        enumerable: false,
        configurable: true
    });
    IntlMessageFormat.memoizedDefaultLocale = null;
    IntlMessageFormat.resolveLocale = function (locales) {
        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
        if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
        }
        return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);
    };
    IntlMessageFormat.__parse = icu_messageformat_parser_1.parse;
    // Default format options used as the prototype of the `formats` provided to the
    // constructor. These are used when constructing the internal Intl.NumberFormat
    // and Intl.DateTimeFormat instances.
    IntlMessageFormat.formats = {
        number: {
            integer: {
                maximumFractionDigits: 0,
            },
            currency: {
                style: 'currency',
            },
            percent: {
                style: 'percent',
            },
        },
        date: {
            short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit',
            },
            medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            },
            long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
            full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
        },
        time: {
            short: {
                hour: 'numeric',
                minute: 'numeric',
            },
            medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
            },
            long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
            full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
        },
    };
    return IntlMessageFormat;
}());
exports.IntlMessageFormat = IntlMessageFormat;

},{"./formatters":44,"@formatjs/fast-memoize":16,"@formatjs/icu-messageformat-parser":19,"tslib":48}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
var tslib_1 = require("tslib");
var ErrorCode;
(function (ErrorCode) {
    // When we have a placeholder but no value to format
    ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
    // When value supplied is invalid
    ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
    // When we need specific Intl API but it's not available
    ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
var FormatError = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(FormatError, _super);
    function FormatError(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
    }
    FormatError.prototype.toString = function () {
        return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError;
}(Error));
exports.FormatError = FormatError;
var InvalidValueError = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(InvalidValueError, _super);
    function InvalidValueError(variableId, value, options, originalMessage) {
        return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError;
}(FormatError));
exports.InvalidValueError = InvalidValueError;
var InvalidValueTypeError = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(InvalidValueTypeError, _super);
    function InvalidValueTypeError(value, type, originalMessage) {
        return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError;
}(FormatError));
exports.InvalidValueTypeError = InvalidValueTypeError;
var MissingValueError = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(MissingValueError, _super);
    function MissingValueError(variableId, originalMessage) {
        return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError;
}(FormatError));
exports.MissingValueError = MissingValueError;

},{"tslib":48}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatToParts = exports.isFormatXMLElementFn = exports.PART_TYPE = void 0;
var icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
var error_1 = require("./error");
var PART_TYPE;
(function (PART_TYPE) {
    PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
    PART_TYPE[PART_TYPE["object"] = 1] = "object";
})(PART_TYPE = exports.PART_TYPE || (exports.PART_TYPE = {}));
function mergeLiteral(parts) {
    if (parts.length < 2) {
        return parts;
    }
    return parts.reduce(function (all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart ||
            lastPart.type !== PART_TYPE.literal ||
            part.type !== PART_TYPE.literal) {
            all.push(part);
        }
        else {
            lastPart.value += part.value;
        }
        return all;
    }, []);
}
function isFormatXMLElementFn(el) {
    return typeof el === 'function';
}
exports.isFormatXMLElementFn = isFormatXMLElementFn;
// TODO(skeleton): add skeleton support
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
// For debugging
originalMessage) {
    // Hot path for straight simple msg translations
    if (els.length === 1 && (0, icu_messageformat_parser_1.isLiteralElement)(els[0])) {
        return [
            {
                type: PART_TYPE.literal,
                value: els[0].value,
            },
        ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
        var el = els_1[_i];
        // Exit early for string parts.
        if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {
            result.push({
                type: PART_TYPE.literal,
                value: el.value,
            });
            continue;
        }
        // TODO: should this part be literal type?
        // Replace `#` in plural rules with the actual numeric value.
        if ((0, icu_messageformat_parser_1.isPoundElement)(el)) {
            if (typeof currentPluralValue === 'number') {
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters.getNumberFormat(locales).format(currentPluralValue),
                });
            }
            continue;
        }
        var varName = el.value;
        // Enforce that all required values are provided by the caller.
        if (!(values && varName in values)) {
            throw new error_1.MissingValueError(varName, originalMessage);
        }
        var value = values[varName];
        if ((0, icu_messageformat_parser_1.isArgumentElement)(el)) {
            if (!value || typeof value === 'string' || typeof value === 'number') {
                value =
                    typeof value === 'string' || typeof value === 'number'
                        ? String(value)
                        : '';
            }
            result.push({
                type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                value: value,
            });
            continue;
        }
        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if ((0, icu_messageformat_parser_1.isDateElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.date[el.style]
                : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0, icu_messageformat_parser_1.isTimeElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.time[el.style]
                : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : formats.time.medium;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0, icu_messageformat_parser_1.isNumberElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.number[el.style]
                : (0, icu_messageformat_parser_1.isNumberSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            if (style && style.scale) {
                value =
                    value *
                        (style.scale || 1);
            }
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getNumberFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0, icu_messageformat_parser_1.isTagElement)(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) {
                throw new error_1.InvalidValueTypeError(value_1, 'function', originalMessage);
            }
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function (p) { return p.value; }));
            if (!Array.isArray(chunks)) {
                chunks = [chunks];
            }
            result.push.apply(result, chunks.map(function (c) {
                return {
                    type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: c,
                };
            }));
        }
        if ((0, icu_messageformat_parser_1.isSelectElement)(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
                throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
        }
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            var opt = el.options["=".concat(value)];
            if (!opt) {
                if (!Intl.PluralRules) {
                    throw new error_1.FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", error_1.ErrorCode.MISSING_INTL_API, originalMessage);
                }
                var rule = formatters
                    .getPluralRules(locales, { type: el.pluralType })
                    .select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
                throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
        }
    }
    return mergeLiteral(result);
}
exports.formatToParts = formatToParts;

},{"./error":43,"@formatjs/icu-messageformat-parser":19}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}

exports.isPlainObject = isPlainObject;

},{}],46:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],47:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],48:[function(require,module,exports){
(function (global){(function (){
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __classPrivateFieldIn;
var __createBinding;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
const parseUtil_1 = require("./helpers/parseUtil");
const util_1 = require("./helpers/util");
exports.ZodIssueCode = util_1.util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
exports.quotelessJson = quotelessJson;
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, parseUtil_1.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
exports.ZodError = ZodError;
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};
const defaultErrorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case exports.ZodIssueCode.invalid_type:
            if (issue.received === util_1.ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case exports.ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, parseUtil_1.jsonStringifyReplacer)}`;
            break;
        case exports.ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
            break;
        case exports.ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case exports.ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
            break;
        case exports.ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case exports.ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case exports.ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case exports.ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case exports.ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util_1.util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case exports.ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;
            else
                message = "Invalid input";
            break;
        case exports.ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;
            else
                message = "Invalid input";
            break;
        case exports.ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case exports.ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case exports.ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        default:
            message = _ctx.defaultError;
            util_1.util.assertNever(issue);
    }
    return { message };
};
exports.defaultErrorMap = defaultErrorMap;
let overrideErrorMap = exports.defaultErrorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
exports.setErrorMap = setErrorMap;
function getErrorMap() {
    return overrideErrorMap;
}
exports.getErrorMap = getErrorMap;

},{"./helpers/parseUtil":52,"./helpers/util":54}],50:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodParsedType = exports.getParsedType = void 0;
__exportStar(require("./helpers/parseUtil"), exports);
__exportStar(require("./helpers/typeAliases"), exports);
var util_1 = require("./helpers/util");
Object.defineProperty(exports, "getParsedType", { enumerable: true, get: function () { return util_1.getParsedType; } });
Object.defineProperty(exports, "ZodParsedType", { enumerable: true, get: function () { return util_1.ZodParsedType; } });
__exportStar(require("./types"), exports);
__exportStar(require("./ZodError"), exports);

},{"./ZodError":49,"./helpers/parseUtil":52,"./helpers/typeAliases":53,"./helpers/util":54,"./types":56}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorUtil = void 0;
var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil = exports.errorUtil || (exports.errorUtil = {}));

},{}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonStringifyReplacer = exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
const ZodError_1 = require("../ZodError");
const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
exports.makeIssue = makeIssue;
exports.EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = exports.makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            ZodError_1.getErrorMap(),
            ZodError_1.defaultErrorMap,
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
exports.addIssueToContext = addIssueToContext;
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return exports.INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return exports.INVALID;
            if (value.status === "aborted")
                return exports.INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
exports.ParseStatus = ParseStatus;
exports.INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
exports.DIRTY = DIRTY;
const OK = (value) => ({ status: "valid", value });
exports.OK = OK;
const isAborted = (x) => x.status === "aborted";
exports.isAborted = isAborted;
const isDirty = (x) => x.status === "dirty";
exports.isDirty = isDirty;
const isValid = (x) => x.status === "valid";
exports.isValid = isValid;
const isAsync = (x) => typeof Promise !== undefined && x instanceof Promise;
exports.isAsync = isAsync;
const jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
        return value.toString();
    }
    return value;
};
exports.jsonStringifyReplacer = jsonStringifyReplacer;

},{"../ZodError":49}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParsedType = exports.ZodParsedType = exports.util = void 0;
var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
})(util = exports.util || (exports.util = {}));
exports.ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return exports.ZodParsedType.undefined;
        case "string":
            return exports.ZodParsedType.string;
        case "number":
            return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
            return exports.ZodParsedType.boolean;
        case "function":
            return exports.ZodParsedType.function;
        case "bigint":
            return exports.ZodParsedType.bigint;
        case "object":
            if (Array.isArray(data)) {
                return exports.ZodParsedType.array;
            }
            if (data === null) {
                return exports.ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return exports.ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return exports.ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return exports.ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return exports.ZodParsedType.date;
            }
            return exports.ZodParsedType.object;
        default:
            return exports.ZodParsedType.unknown;
    }
};
exports.getParsedType = getParsedType;

},{}],55:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.z = void 0;
const mod = __importStar(require("./external"));
exports.z = mod;
__exportStar(require("./external"), exports);
exports.default = mod;

},{"./external":50}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.objectUtil = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = void 0;
const errorUtil_1 = require("./helpers/errorUtil");
const parseUtil_1 = require("./helpers/parseUtil");
const util_1 = require("./helpers/util");
const ZodError_1 = require("./ZodError");
class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        return this._path.concat(this._key);
    }
}
const handleResult = (ctx, result) => {
    if (parseUtil_1.isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        const error = new ZodError_1.ZodError(ctx.common.issues);
        return { success: false, error };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
        this.describe = this.describe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return util_1.getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: util_1.getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new parseUtil_1.ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: util_1.getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (parseUtil_1.isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: util_1.getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: util_1.getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
        const result = await (parseUtil_1.isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodError_1.ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    optional() {
        return ZodOptional.create(this);
    }
    nullable() {
        return ZodNullable.create(this);
    }
    nullish() {
        return this.optional().nullable();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this);
    }
    or(option) {
        return ZodUnion.create([this, option]);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming);
    }
    transform(transform) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(undefined),
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
exports.ZodType = ZodType;
exports.Schema = ZodType;
exports.ZodSchema = ZodType;
const cuidRegex = /^c[^\s-]{8,}$/i;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
// eslint-disable-next-line
const emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
class ZodString extends ZodType {
    constructor() {
        super(...arguments);
        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodError_1.ZodIssueCode.invalid_string,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        this.nonempty = (message) => this.min(1, errorUtil_1.errorUtil.errToObj(message));
        this.trim = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util_1.util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil_1.errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
exports.ZodString = ZodString;
ZodString.create = (params) => {
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.number,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        let ctx = undefined;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util_1.util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util_1.util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil_1.errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int");
    }
}
exports.ZodNumber = ZodNumber;
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodBigInt = ZodBigInt;
ZodBigInt.create = (params) => {
    return new ZodBigInt({
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodBoolean = ZodBoolean;
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.date,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_date,
            });
            return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util_1.util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
exports.ZodDate = ZodDate;
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodUndefined = ZodUndefined;
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.null,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodNull = ZodNull;
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodAny = ZodAny;
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodUnknown = ZodUnknown;
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        parseUtil_1.addIssueToContext(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.never,
            received: ctx.parsedType,
        });
        return parseUtil_1.INVALID;
    }
}
exports.ZodNever = ZodNever;
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.void,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
}
exports.ZodVoid = ZodVoid;
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.array,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                parseUtil_1.addIssueToContext(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                parseUtil_1.addIssueToContext(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return parseUtil_1.ParseStatus.mergeArray(status, result);
            });
        }
        const result = ctx.data.map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return parseUtil_1.ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
exports.ZodArray = ZodArray;
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////
/////////////////////////////////////////
//////////                     //////////
//////////      ZodObject      //////////
//////////                     //////////
/////////////////////////////////////////
/////////////////////////////////////////
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second,
        };
    };
})(objectUtil = exports.objectUtil || (exports.objectUtil = {}));
const AugmentFactory = (def) => (augmentation) => {
    return new ZodObject({
        ...def,
        shape: () => ({
            ...def.shape(),
            ...augmentation,
        }),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return ZodArray.create(deepPartialify(schema.element));
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        this.augment = AugmentFactory(this._def);
        this.extend = AugmentFactory(this._def);
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util_1.util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.object,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    parseUtil_1.addIssueToContext(ctx, {
                        code: ZodError_1.ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") {
            }
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil_1.errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        // const mergedShape = objectUtil.mergeShapes(
        //   this._def.shape(),
        //   merging._def.shape()
        // );
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util_1.util.objectKeys(mask).map((key) => {
            // only add to shape if key corresponds to an element of the current shape
            if (this.shape[key])
                shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util_1.util.objectKeys(this.shape).map((key) => {
            if (util_1.util.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        if (mask) {
            util_1.util.objectKeys(this.shape).map((key) => {
                if (util_1.util.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = this.shape[key];
                }
                else {
                    newShape[key] = this.shape[key].optional();
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => newShape,
            });
        }
        else {
            for (const key in this.shape) {
                const fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required() {
        const newShape = {};
        for (const key in this.shape) {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util_1.util.objectKeys(this.shape));
    }
}
exports.ZodObject = ZodObject;
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_union,
                unionErrors,
            });
            return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError_1.ZodError(issues));
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_union,
                unionErrors,
            });
            return parseUtil_1.INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
exports.ZodUnion = ZodUnion;
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.object,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.options.get(discriminatorValue);
        if (!option) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
                options: this.validDiscriminatorValues,
                path: [discriminator],
            });
            return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get validDiscriminatorValues() {
        return Array.from(this.options.keys());
    }
    get options() {
        return this._def.options;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, types, params) {
        // Get all the valid discriminator values
        const options = new Map();
        try {
            types.forEach((type) => {
                const discriminatorValue = type.shape[discriminator].value;
                options.set(discriminatorValue, type);
            });
        }
        catch (e) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        // Assert that all the discriminator values are unique
        if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams(params),
        });
    }
}
exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
function mergeValues(a, b) {
    const aType = util_1.getParsedType(a);
    const bType = util_1.getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        const bKeys = util_1.util.objectKeys(b);
        const sharedKeys = util_1.util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === util_1.ZodParsedType.date &&
        bType === util_1.ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (parseUtil_1.isAborted(parsedLeft) || parseUtil_1.isAborted(parsedRight)) {
                return parseUtil_1.INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                parseUtil_1.addIssueToContext(ctx, {
                    code: ZodError_1.ZodIssueCode.invalid_intersection_types,
                });
                return parseUtil_1.INVALID;
            }
            if (parseUtil_1.isDirty(parsedLeft) || parseUtil_1.isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
exports.ZodIntersection = ZodIntersection;
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.array,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array",
            });
            return parseUtil_1.INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array",
            });
            status.dirty();
        }
        const items = ctx.data
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return parseUtil_1.ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return parseUtil_1.ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
exports.ZodTuple = ZodTuple;
ZodTuple.create = (schemas, params) => {
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.object,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
exports.ZodRecord = ZodRecord;
class ZodMap extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.map,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return parseUtil_1.INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return parseUtil_1.INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
exports.ZodMap = ZodMap;
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.set,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                parseUtil_1.addIssueToContext(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                parseUtil_1.addIssueToContext(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return parseUtil_1.INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
exports.ZodSet = ZodSet;
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.function,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
            return parseUtil_1.makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    ZodError_1.getErrorMap(),
                    ZodError_1.defaultErrorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return parseUtil_1.makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    ZodError_1.getErrorMap(),
                    ZodError_1.defaultErrorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            return parseUtil_1.OK(async (...args) => {
                const error = new ZodError_1.ZodError([]);
                const parsedArgs = await this._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            return parseUtil_1.OK((...args) => {
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
}
exports.ZodFunction = ZodFunction;
ZodFunction.create = (args, returns, params) => {
    return new ZodFunction({
        args: (args
            ? args.rest(ZodUnknown.create())
            : ZodTuple.create([]).rest(ZodUnknown.create())),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params),
    });
};
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
exports.ZodLazy = ZodLazy;
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
exports.ZodLiteral = ZodLiteral;
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            parseUtil_1.addIssueToContext(ctx, {
                expected: util_1.util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodError_1.ZodIssueCode.invalid_type,
            });
            return parseUtil_1.INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            parseUtil_1.addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodError_1.ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
}
exports.ZodEnum = ZodEnum;
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string &&
            ctx.parsedType !== util_1.ZodParsedType.number) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            parseUtil_1.addIssueToContext(ctx, {
                expected: util_1.util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodError_1.ZodIssueCode.invalid_type,
            });
            return parseUtil_1.INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            parseUtil_1.addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodError_1.ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return parseUtil_1.INVALID;
        }
        return parseUtil_1.OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
exports.ZodNativeEnum = ZodNativeEnum;
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise &&
            ctx.common.async === false) {
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        const promisified = ctx.parsedType === util_1.ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return parseUtil_1.OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
exports.ZodPromise = ZodPromise;
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        const checkCtx = {
            addIssue: (arg) => {
                parseUtil_1.addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return parseUtil_1.INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return parseUtil_1.INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                // if (base.status === "aborted") return INVALID;
                // if (base.status === "dirty") {
                //   return { status: "dirty", value: base.value };
                // }
                if (!parseUtil_1.isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!parseUtil_1.isValid(base))
                        return base;
                    // if (base.status === "aborted") return INVALID;
                    // if (base.status === "dirty") {
                    //   return { status: "dirty", value: base.value };
                    // }
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util_1.util.assertNever(effect);
    }
}
exports.ZodEffects = ZodEffects;
exports.ZodTransformer = ZodEffects;
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.undefined) {
            return parseUtil_1.OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
exports.ZodOptional = ZodOptional;
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.null) {
            return parseUtil_1.OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
exports.ZodNullable = ZodNullable;
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
exports.ZodDefault = ZodDefault;
ZodDefault.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            parseUtil_1.addIssueToContext(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
exports.ZodNaN = ZodNaN;
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
exports.BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
exports.ZodBranded = ZodBranded;
const custom = (check, params = {}, fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            if (!check(data)) {
                const p = typeof params === "function" ? params(data) : params;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal });
            }
        });
    return ZodAny.create();
};
exports.custom = custom;
exports.late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
})(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => exports.custom((data) => data instanceof cls, params, true);
exports.instanceof = instanceOfType;
const stringType = ZodString.create;
exports.string = stringType;
const numberType = ZodNumber.create;
exports.number = numberType;
const nanType = ZodNaN.create;
exports.nan = nanType;
const bigIntType = ZodBigInt.create;
exports.bigint = bigIntType;
const booleanType = ZodBoolean.create;
exports.boolean = booleanType;
const dateType = ZodDate.create;
exports.date = dateType;
const undefinedType = ZodUndefined.create;
exports.undefined = undefinedType;
const nullType = ZodNull.create;
exports.null = nullType;
const anyType = ZodAny.create;
exports.any = anyType;
const unknownType = ZodUnknown.create;
exports.unknown = unknownType;
const neverType = ZodNever.create;
exports.never = neverType;
const voidType = ZodVoid.create;
exports.void = voidType;
const arrayType = ZodArray.create;
exports.array = arrayType;
const objectType = ZodObject.create;
exports.object = objectType;
const strictObjectType = ZodObject.strictCreate;
exports.strictObject = strictObjectType;
const unionType = ZodUnion.create;
exports.union = unionType;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
exports.discriminatedUnion = discriminatedUnionType;
const intersectionType = ZodIntersection.create;
exports.intersection = intersectionType;
const tupleType = ZodTuple.create;
exports.tuple = tupleType;
const recordType = ZodRecord.create;
exports.record = recordType;
const mapType = ZodMap.create;
exports.map = mapType;
const setType = ZodSet.create;
exports.set = setType;
const functionType = ZodFunction.create;
exports.function = functionType;
const lazyType = ZodLazy.create;
exports.lazy = lazyType;
const literalType = ZodLiteral.create;
exports.literal = literalType;
const enumType = ZodEnum.create;
exports.enum = enumType;
const nativeEnumType = ZodNativeEnum.create;
exports.nativeEnum = nativeEnumType;
const promiseType = ZodPromise.create;
exports.promise = promiseType;
const effectsType = ZodEffects.create;
exports.effect = effectsType;
exports.transformer = effectsType;
const optionalType = ZodOptional.create;
exports.optional = optionalType;
const nullableType = ZodNullable.create;
exports.nullable = nullableType;
const preprocessType = ZodEffects.createWithPreprocess;
exports.preprocess = preprocessType;
const ostring = () => stringType().optional();
exports.ostring = ostring;
const onumber = () => numberType().optional();
exports.onumber = onumber;
const oboolean = () => booleanType().optional();
exports.oboolean = oboolean;

},{"./ZodError":49,"./helpers/errorUtil":51,"./helpers/parseUtil":52,"./helpers/util":54}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabSchema = exports.stateBlockedSchema = exports.stateAllowedSchema = exports.ruleExceptionReasonSchema = exports.requestDataSchema = exports.protectionsStatusSchema = exports.protectionsDisabledReasonSchema = exports.parentEntitySchema = exports.ownedByFirstPartyReasonSchema = exports.otherThirdPartyRequestReasonSchema = exports.extensionGetPrivacyDashboardDataSchema = exports.emailProtectionUserDataSchema = exports.detectedRequestSchema = exports.breakageReportSchema = exports.breakageReportRequestSchema = exports.apiSchema = exports.adClickAttributionReasonSchema = void 0;

var _zod = require("zod");

// Generated by ts-to-zod
var protectionsDisabledReasonSchema = _zod.z.literal("protectionDisabled");

exports.protectionsDisabledReasonSchema = protectionsDisabledReasonSchema;

var ownedByFirstPartyReasonSchema = _zod.z.literal("ownedByFirstParty");

exports.ownedByFirstPartyReasonSchema = ownedByFirstPartyReasonSchema;

var ruleExceptionReasonSchema = _zod.z.literal("ruleException");

exports.ruleExceptionReasonSchema = ruleExceptionReasonSchema;

var adClickAttributionReasonSchema = _zod.z.literal("adClickAttribution");

exports.adClickAttributionReasonSchema = adClickAttributionReasonSchema;

var otherThirdPartyRequestReasonSchema = _zod.z.literal("otherThirdPartyRequest");

exports.otherThirdPartyRequestReasonSchema = otherThirdPartyRequestReasonSchema;

var stateBlockedSchema = _zod.z.object({
  blocked: _zod.z.record(_zod.z.unknown())
});

exports.stateBlockedSchema = stateBlockedSchema;

var stateAllowedSchema = _zod.z.object({
  allowed: _zod.z.object({
    reason: _zod.z.union([protectionsDisabledReasonSchema, ownedByFirstPartyReasonSchema, ruleExceptionReasonSchema, adClickAttributionReasonSchema, otherThirdPartyRequestReasonSchema])
  })
});

exports.stateAllowedSchema = stateAllowedSchema;

var emailProtectionUserDataSchema = _zod.z.object({
  cohort: _zod.z.string(),
  nextAlias: _zod.z.string(),
  token: _zod.z.string(),
  userName: _zod.z.string()
});

exports.emailProtectionUserDataSchema = emailProtectionUserDataSchema;

var protectionsStatusSchema = _zod.z.object({
  unprotectedTemporary: _zod.z["boolean"](),
  enabledFeatures: _zod.z.array(_zod.z.string()),
  allowlisted: _zod.z["boolean"](),
  denylisted: _zod.z["boolean"]()
});

exports.protectionsStatusSchema = protectionsStatusSchema;

var parentEntitySchema = _zod.z.object({
  displayName: _zod.z.string(),
  prevalence: _zod.z.number()
});

exports.parentEntitySchema = parentEntitySchema;

var breakageReportRequestSchema = _zod.z.object({
  category: _zod.z.string().optional(),
  description: _zod.z.string().optional()
});

exports.breakageReportRequestSchema = breakageReportRequestSchema;

var detectedRequestSchema = _zod.z.object({
  url: _zod.z.string(),
  eTLDplus1: _zod.z.string().optional(),
  pageUrl: _zod.z.string(),
  state: _zod.z.union([stateBlockedSchema, stateAllowedSchema]),
  entityName: _zod.z.string().optional(),
  category: _zod.z.string().optional(),
  prevalence: _zod.z.number().optional(),
  ownerName: _zod.z.string().optional()
});

exports.detectedRequestSchema = detectedRequestSchema;

var tabSchema = _zod.z.object({
  id: _zod.z.number().optional(),
  url: _zod.z.string(),
  upgradedHttps: _zod.z["boolean"](),
  protections: protectionsStatusSchema,
  parentEntity: parentEntitySchema.optional(),
  specialDomainName: _zod.z.string().optional()
});

exports.tabSchema = tabSchema;

var breakageReportSchema = _zod.z.object({
  request: breakageReportRequestSchema.optional(),
  response: _zod.z.record(_zod.z.unknown()).optional()
});

exports.breakageReportSchema = breakageReportSchema;

var requestDataSchema = _zod.z.object({
  requests: _zod.z.array(detectedRequestSchema),
  installedSurrogates: _zod.z.array(_zod.z.string()).optional()
});

exports.requestDataSchema = requestDataSchema;

var extensionGetPrivacyDashboardDataSchema = _zod.z.object({
  requestData: requestDataSchema,
  emailProtectionUserData: emailProtectionUserDataSchema.optional(),
  tab: tabSchema
});

exports.extensionGetPrivacyDashboardDataSchema = extensionGetPrivacyDashboardDataSchema;

var apiSchema = _zod.z.object({
  "request-data": requestDataSchema,
  "extension-message-get-privacy-dashboard-data": extensionGetPrivacyDashboardDataSchema,
  breakageReport: breakageReportSchema
});

exports.apiSchema = apiSchema;

},{"zod":55}],58:[function(require,module,exports){
"use strict";

module.exports = {
  "displayCategories": {
    "Analytics": "site:analyticsCategory.title",
    "Advertising": "site:advertisingCategory.title",
    "Social Network": "site:socialCategory.title"
  },
  "httpsMessages": {
    "secure": "site:connectionSecure.title",
    "upgraded": "site:connectionSecure.title",
    "none": "site:connectionNotSecure.title"
  }
};

},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrivacyDashboardJavascriptInterface = void 0;
exports.onChangeProtectionStatus = onChangeProtectionStatus;
exports.onChangeRequestData = onChangeRequestData;

var _common = require("./common.es6");

var _schema = require("../../../schema/__generated__/schema.parsers");

var _requestDetails = require("./utils/request-details");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var channel = null;

var backgroundMessage = function backgroundMessage(backgroundModel) {
  channel = backgroundModel;
};

var setColorScheme = (0, _common.setupColorScheme)();
var getBackgroundTabDataPromises = [];
var trackerBlockingData;
var permissionsData;
var certificateData;
var upgradedHttps;
/** @type {import("./utils/request-details").Protections | undefined} */

var protections;
var isPendingUpdates;
var parentEntity;
var consentManaged;

var combineSources = function combineSources() {
  return {
    tab: Object.assign({
      isPendingUpdates: isPendingUpdates,
      parentEntity: parentEntity,
      consentManaged: consentManaged
    }, trackerBlockingData || {}, permissionsData ? {
      permissions: permissionsData
    } : {}, certificateData ? {
      certificate: certificateData
    } : {})
  };
};

var resolveInitialRender = function resolveInitialRender() {
  var _channel;

  var isUpgradedHttpsSet = typeof upgradedHttps === 'boolean';
  var isIsProtectedSet = typeof protections !== 'undefined';
  var isTrackerBlockingDataSet = _typeof(trackerBlockingData) === 'object';

  if (!isUpgradedHttpsSet || !isIsProtectedSet || !isTrackerBlockingDataSet) {
    return;
  }

  getBackgroundTabDataPromises.forEach(function (resolve) {
    return resolve(combineSources());
  });
  (_channel = channel) === null || _channel === void 0 ? void 0 : _channel.send('updateTabData');
}; // Integration APIs
// -----------------------------------------------------------------------------


window.onChangeTheme = function (themeName) {
  setColorScheme(themeName);
};
/**
 * Call this method when there is updated request information.
 *
 * Note: this expects each call to provide the full data set each time, **not** any kind of delta.
 *
 * @group Android -> JavaScript Interface
 * @example
 * In Kotlin, it might look something like this...
 * ```kotlin
 * // kotlin
 * webView.evaluateJavascript("javascript:onChangeRequestData(\"${url}\", $requestDataAsJsonString);", null)
 * ```
 *
 * ... which is the equivalent of calling the following inside the Privacy Dashboard
 * ```javascript
 * // JavaScript
 * window.onChangeTrackerBlockingData("https://example.com", rawRequestData)
 * ```
 *
 * Please see [cnn.json](media://tracker-data-cnn.json) or [google.json](media://tracker-data-google.json) for examples of the RequestData type
 * @param {string} tabUrl
 * @param {import('../../../schema/__generated__/schema.types').RequestData} rawRequestData
 */


function onChangeRequestData(tabUrl, rawRequestData) {
  // note: this will fail currently, but is added here to enable the wiring of the documentation/schema
  // eslint-disable-next-line no-unused-vars
  var requestData = _schema.requestDataSchema.safeParse(rawRequestData);

  if (!protections) throw new Error('protections status not set');

  if (!requestData.success) {
    console.error('could not parse incoming request data from `onChangeRequestData`');
    console.log(requestData.error);
    return;
  }

  trackerBlockingData = (0, _requestDetails.createTabData)(tabUrl, upgradedHttps, protections, requestData.data);
  trackerBlockingData.consentManaged = consentManaged;
  trackerBlockingData.parentEntity = parentEntity;
  trackerBlockingData.isPendingUpdates = isPendingUpdates;
  resolveInitialRender();
}

window.onChangeRequestData = onChangeRequestData;

window.onChangeAllowedPermissions = function (data) {
  var _channel2;

  permissionsData = data;
  (_channel2 = channel) === null || _channel2 === void 0 ? void 0 : _channel2.send('updateTabData');
};

window.onChangeUpgradedHttps = function (data) {
  upgradedHttps = data;
  if (trackerBlockingData) trackerBlockingData.upgradedHttps = upgradedHttps;
  resolveInitialRender();
};
/**
 * Call this method with Protection status updates
 *
 * @group Android -> JavaScript Interface
 * @example
 * In Kotlin, it might look something like this...
 * ```kotlin
 * // kotlin
 * webView.evaluateJavascript("javascript:onChangeProtectionStatus(${protectionStatusAsJsonString});", null)
 * ```
 * ... which is the equivalent of calling the following inside the Privacy Dashboard
 * ```javascript
 * // JavaScript
 * window.evaluateJavascript(protectionStatus)
 * ```
 *
 * Some JSON samples:
 *
 * **Default**
 * ```json
 * {
 *   "allowlisted": false,
 *   "denylisted": false,
 *   "enabledFeatures": ["contentBlocking"],
 *   "unprotectedTemporary": false
 * }
 * ```
 *
 * **User manually toggled protections (or added an exception via setting)**
 * ```json
 * {
 *   "allowlisted": true,
 *   "denylisted": false,
 *   "enabledFeatures": ["contentBlocking"],
 *   "unprotectedTemporary": false
 * }
 * ```
 *
 * **Content Blocking Exception**
 * ```json
 * {
 *   "allowlisted": true,
 *   "denylisted": false,
 *   "enabledFeatures": [],
 *   "unprotectedTemporary": false
 * }
 *
 * ```
 *
 * @param {import('../../../schema/__generated__/schema.types').ProtectionsStatus} protectionsStatus
 */


function onChangeProtectionStatus(protectionsStatus) {
  var parsed = _schema.protectionsStatusSchema.safeParse(protectionsStatus);

  if (!parsed.success) {
    console.error('could not parse incoming protection status from onChangeProtectionStatus');
    console.error(parsed.error);
    return;
  }

  protections = parsed.data;
  resolveInitialRender();
}

window.onChangeProtectionStatus = onChangeProtectionStatus;

window.onChangeCertificateData = function (data) {
  var _channel3;

  certificateData = data.secCertificateViewModels;
  (_channel3 = channel) === null || _channel3 === void 0 ? void 0 : _channel3.send('updateTabData');
};

window.onIsPendingUpdates = function (data) {
  var _channel4;

  isPendingUpdates = data;
  (_channel4 = channel) === null || _channel4 === void 0 ? void 0 : _channel4.send('updateTabData');
};

window.onChangeParentEntity = function (data) {
  var _channel5;

  parentEntity = data;
  (_channel5 = channel) === null || _channel5 === void 0 ? void 0 : _channel5.send('updateTabData');
};

window.onChangeConsentManaged = function (data) {
  var _channel6;

  consentManaged = data;
  (_channel6 = channel) === null || _channel6 === void 0 ? void 0 : _channel6.send('updateTabData');
};
/**
 * This describes the JavaScript Interface, `PrivacyDashboard`, that gets added to the `window` object by Android.
 *
 * The Privacy Dashboard communicates with Android by calling methods on that global object.
 *
 * ---
 *
 * For example, to show the breakage form, we'd call:
 *
 * ```
 * window.PrivacyDashboard.showBreakageForm()
 * ```
 *
 * Each `method` documented below is intended
 *
 *
 * @group Javascript -> Android Interface
 */


var PrivacyDashboardJavascriptInterface = /*#__PURE__*/function () {
  function PrivacyDashboardJavascriptInterface() {
    _classCallCheck(this, PrivacyDashboardJavascriptInterface);
  }

  _createClass(PrivacyDashboardJavascriptInterface, [{
    key: "toggleAllowlist",
    value:
    /**
     * @param {boolean} isProtected - note: this will be sent as valid JSON, eg: `"true"` or `"false"`
     *
     * Add the current domain to the 'allowlist'
     *
     * ```js
     * window.PrivacyDashboard.toggleAllowlist("true")
     * ```
     *
     * Remove the current domain from the 'allowlist'
     *
     * ```js
     * window.PrivacyDashboard.toggleAllowlist("false")
     * ```
     */
    function toggleAllowlist(isProtected) {
      window.PrivacyDashboard.toggleAllowlist(isProtected);
    }
    /**
     * Shows the native breakage form, instead of using the one
     * embedded in the Privacy Dashboard
     * @example
     * ```
     * window.PrivacyDashboard.showBreakageForm()
     * ```
     */

  }, {
    key: "showBreakageForm",
    value: function showBreakageForm() {
      window.PrivacyDashboard.showBreakageForm();
    }
    /**
     * @example
     * ```
     * window.PrivacyDashboard.close()
     * ```
     */

  }, {
    key: "close",
    value: function close() {
      window.PrivacyDashboard.close();
    }
    /**
     * Calling this method should close the dashboard and open the given URL in a new tab.
     * @param {{url: string}} payload - Note: this will be sent as a JSON string, eg:
     *
     * ```js
     * const payload = JSON.stringify({
     *     "url": "https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/"
     * });
     * window.PrivacyDashboard.openInNewTab(payload)
     * ```
     */

  }, {
    key: "openInNewTab",
    value: function openInNewTab(payload) {
      window.PrivacyDashboard.openInNewTab(JSON.stringify(payload));
    }
  }]);

  return PrivacyDashboardJavascriptInterface;
}();

exports.PrivacyDashboardJavascriptInterface = PrivacyDashboardJavascriptInterface;
var privacyDashboardApi = new PrivacyDashboardJavascriptInterface(); // -----------------------------------------------------------------------------

var fetch = function fetch(message) {
  if (!window.PrivacyDashboard) {
    console.error('window.PrivacyDashboard not available');
    return;
  }

  if (message.setList) {
    var _message$setList = message.setList,
        list = _message$setList.list,
        value = _message$setList.value;

    if (list !== 'allowlisted') {
      console.warn('only `allowlisted` is currently supported on android');
      return;
    } // `allowlisted: true` means the user disabled protections.
    // so `isProtected` is the opposite of `allowlisted`.


    var isProtected = value === false;
    privacyDashboardApi.toggleAllowlist(isProtected);
  }

  if (message.closePrivacyDashboard) {
    privacyDashboardApi.close();
  }

  if (message.checkBrokenSiteReportHandled) {
    privacyDashboardApi.showBreakageForm();
    return true; // Return true to prevent HTML form from showing
  }

  if (message.openInNewTab) {
    if (typeof message.openInNewTab.url === 'string') {
      privacyDashboardApi.openInNewTab({
        url: message.openInNewTab.url
      });
    }
  }
};

var getBackgroundTabData = function getBackgroundTabData() {
  return new Promise(function (resolve) {
    if (trackerBlockingData) {
      resolve(combineSources());
      return;
    }

    getBackgroundTabDataPromises.push(resolve);
  });
};
/**
 * on macOS, respond to all clicks on links with target="_blank"
 * by forwarding to the native side.
 */


document.addEventListener('click', function (e) {
  var targetElem = e.target;

  if (targetElem instanceof HTMLAnchorElement) {
    if (targetElem.target === '_blank' && targetElem.origin) {
      e.preventDefault();
      fetch({
        openInNewTab: {
          url: targetElem.href
        }
      });
    }
  }
});
module.exports = {
  fetch: fetch,
  backgroundMessage: backgroundMessage,
  getBackgroundTabData: getBackgroundTabData
};

},{"../../../schema/__generated__/schema.parsers":57,"./common.es6":60,"./utils/request-details":62}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatParams = concatParams;
exports.getContentHeight = exports.convertTrackerDataPayload = void 0;
exports.setupColorScheme = setupColorScheme;
exports.setupMutationObserver = setupMutationObserver;

var _oppositeTheme;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var getHostname = function getHostname(url) {
  if (url.indexOf('//') === 0) {
    url = "http:".concat(url);
  }

  try {
    return new URL(url).hostname;
  } catch (e) {
    return null;
  }
};

var convertTrackers = function convertTrackers(trackerList) {
  return trackerList.reduce(function (mapping, tracker) {
    if (!tracker.knownTracker) return mapping;
    var key = tracker.knownTracker.owner.name;

    if (!mapping[key]) {
      mapping[key] = {
        displayName: tracker.entity.displayName,
        prevalence: tracker.entity.prevalence,
        urls: {}
      };
    }

    var urlKey = getHostname(tracker.url);
    if (!urlKey) return mapping;
    mapping[key].urls[urlKey] = {
      isBlocked: tracker.blocked,
      categories: tracker.knownTracker.categories
    };
    mapping[key].count = Object.keys(mapping[key].urls).length;
    return mapping;
  }, {});
};

var convertTrackerDataPayload = function convertTrackerDataPayload(tabUrl, upgradedHttps, allowlisted, data) {
  var allTrackers = data.trackersDetected.concat(data.trackersBlocked);
  var trackers = convertTrackers(allTrackers);
  var trackersBlocked = convertTrackers(data.trackersBlocked);
  var tabDomain = new URL(tabUrl).host.replace(/^www\./, '');
  return {
    url: tabUrl,
    status: 'complete',
    upgradedHttps: upgradedHttps,
    site: {
      url: tabUrl,
      domain: tabDomain,
      allowlisted: allowlisted,
      enabledFeatures: ['contentBlocking']
    },
    trackers: trackers,
    trackersBlocked: trackersBlocked
  };
};

exports.convertTrackerDataPayload = convertTrackerDataPayload;

function concatParams(args) {
  args = args || [];
  var paramString = '';
  var objParamString = '';
  var resultString = '';
  var randomNum = Math.ceil(Math.random() * 1e7);
  args.forEach(function (arg) {
    // append keys if object
    if (_typeof(arg) === 'object') {
      objParamString += Object.keys(arg).reduce(function (params, key) {
        var val = arg[key];
        if (val || val === 0) return "".concat(params, "&").concat(key, "=").concat(val);
        return params;
      }, '');
    } else if (arg) {
      // otherwise just add args separated by _
      paramString += "_".concat(arg);
    }
  });
  resultString = "".concat(paramString, "?").concat(randomNum).concat(objParamString);
  return resultString;
}

var getContentHeight = function getContentHeight() {
  var _ref;

  var $openSubview = window.document.querySelector('#popup-container.sliding-subview--open > section:last-child > div');
  var $rootSubview = window.document.querySelector('#popup-container.sliding-subview--root > section:first-child > div');
  return (_ref = $openSubview || $rootSubview) === null || _ref === void 0 ? void 0 : _ref.scrollHeight;
};

exports.getContentHeight = getContentHeight;

function setupMutationObserver(callback) {
  var bufferHeight = 200;
  var lastHeight;
  var mutationObserver = new MutationObserver(function () {
    var contentHeight = getContentHeight();
    if (!contentHeight) return;
    var height = Math.min(window.screen.height - bufferHeight, contentHeight); // Only update if the height has changed since last run

    if (lastHeight === height) return;
    lastHeight = height;
    callback(height);
  });
  var config = {
    childList: true,
    attributes: true,
    subtree: true
  };
  mutationObserver.observe(window.document, config);
}

var DARK_THEME = 'dark';
var LIGHT_THEME = 'light';
var explicitlySetTheme = '';
var detectedTheme = LIGHT_THEME;
var oppositeTheme = (_oppositeTheme = {}, _defineProperty(_oppositeTheme, LIGHT_THEME, DARK_THEME), _defineProperty(_oppositeTheme, DARK_THEME, LIGHT_THEME), _oppositeTheme);

function swapThemeTo(theme) {
  document.body.classList.remove("body--theme-".concat(oppositeTheme[theme]));
  document.body.classList.add("body--theme-".concat(theme));
}

function updateTheme() {
  if (explicitlySetTheme) {
    swapThemeTo(explicitlySetTheme);
  } else {
    swapThemeTo(detectedTheme);
  }
}

function setupColorScheme() {
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    detectedTheme = DARK_THEME;
  }

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function (event) {
    detectedTheme = event.matches ? DARK_THEME : LIGHT_THEME;
    updateTheme();
  });
  updateTheme();
  return function () {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    theme = theme.trim().toLowerCase();

    if (theme === LIGHT_THEME || theme === DARK_THEME) {
      explicitlySetTheme = theme;
    } else {
      explicitlySetTheme = '';
    }

    updateTheme();
  };
}

},{}],61:[function(require,module,exports){
"use strict";

// @ts-ignore
module.exports = require('./android-communication.es6.js');
/**
 * @typedef Communication
 * @property {any} fetch
 * @property {() => Promise<{tab: import('./utils/request-details').TabData} & Record<string, any>>} getBackgroundTabData
 */

},{"./android-communication.es6.js":59}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TrackerUrl = exports.TabData = exports.RequestDetails = exports.Protections = exports.AggregatedCompanyResponseData = exports.AggregateCompanyData = void 0;
exports.createRequestDetails = createRequestDetails;
exports.createTabData = void 0;
exports.fromJson = fromJson;
exports.fromMultiJson = fromMultiJson;
exports.states = void 0;

var _normalizeCompanyNameEs = require("../../ui/models/mixins/normalize-company-name.es6.js");

var _schema = require("../../../../schema/__generated__/schema.parsers");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Protections = /*#__PURE__*/function () {
  /**
   * @param {boolean} unprotectedTemporary
   * @param {string[]} enabledFeatures
   * @param {boolean} allowlisted
   * @param {boolean} denylisted
   */
  function Protections(unprotectedTemporary, enabledFeatures) {
    var allowlisted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var denylisted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, Protections);

    this.unprotectedTemporary = unprotectedTemporary;
    this.enabledFeatures = enabledFeatures;
    this.allowlisted = allowlisted;
    this.denylisted = denylisted;
  }

  _createClass(Protections, null, [{
    key: "default",
    value: function _default() {
      return new Protections(false, ['contentBlocking'], false, false);
    }
  }]);

  return Protections;
}();

exports.Protections = Protections;

var TabData = /*#__PURE__*/_createClass(
/** @type {string | null | undefined} */

/** @type {boolean | null | undefined} */

/** @type {any[] | null | undefined} */

/** @type {boolean | null | undefined} */

/**
 * @param {number | null | undefined} id
 * @param {string} url
 * @param {string} domain
 * @param {string | null | undefined} specialDomainName
 * @param {string} status
 * @param {boolean} upgradedHttps
 * @param {Protections} protections
 * @param {any[] | null | undefined} permissions
 * @param {RequestDetails} requestDetails
 * @param {{consentManaged, optoutFailed, selftestFailed} | null | undefined} consentManaged
 * @param {Record<string, any> | null | undefined} ctaScreens
 * @param {Record<string, any> | null | undefined} search
 * @param {Record<string, any> | null | undefined} emailProtection
 * @param {{prevalence: number, displayName: string} | null | undefined} parentEntity
 */
function TabData(id, url, domain, specialDomainName, status, upgradedHttps, protections, permissions, requestDetails, consentManaged, ctaScreens, search, emailProtection, parentEntity) {
  _classCallCheck(this, TabData);

  _defineProperty(this, "locale", void 0);

  _defineProperty(this, "isPendingUpdates", void 0);

  _defineProperty(this, "certificate", void 0);

  _defineProperty(this, "platformLimitations", void 0);

  this.url = url;
  this.id = id;
  this.domain = domain;
  this.specialDomainName = specialDomainName;
  this.status = status;
  this.upgradedHttps = upgradedHttps;
  this.protections = protections;
  this.permissions = permissions;
  this.requestDetails = requestDetails;
  this.consentManaged = consentManaged;
  this.ctaScreens = ctaScreens;
  this.search = search;
  this.emailProtection = emailProtection;
  this.parentEntity = parentEntity;
});
/**
 * @param {string} tabUrl
 * @param {boolean} upgradedHttps
 * @param {Protections} protections
 * @param {import('../../../../schema/__generated__/schema.types.js').RequestData} rawRequestData
 * @returns {TabData}
 */


exports.TabData = TabData;

var createTabData = function createTabData(tabUrl, upgradedHttps, protections, rawRequestData) {
  return {
    id: undefined,
    url: tabUrl,
    status: 'complete',
    upgradedHttps: upgradedHttps,
    specialDomainName: undefined,
    domain: new URL(tabUrl).host.replace(/^www\./, ''),
    protections: protections,
    locale: null,
    requestDetails: createRequestDetails(rawRequestData.requests, rawRequestData.installedSurrogates || []),
    parentEntity: undefined,
    permissions: undefined,
    consentManaged: undefined,
    ctaScreens: undefined,
    search: undefined,
    emailProtection: undefined,
    isPendingUpdates: undefined,
    certificate: undefined,
    platformLimitations: undefined
  };
};
/**
 * From a list of requests, form the grouped RequestData object
 * @param {import('../../../../schema/__generated__/schema.types.js').DetectedRequest[]} requests
 * @param {string[]} installedSurrogates
 * @returns {RequestDetails}
 */


exports.createTabData = createTabData;

function createRequestDetails(requests, installedSurrogates) {
  var output = new RequestDetails(installedSurrogates);

  var _iterator = _createForOfIteratorHelper(requests),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var request = _step.value;
      // an overall list
      output.all.addRequest(request); // the blocked list

      if ('blocked' in request.state) {
        output.blocked.addRequest(request);
      } // all other requests


      if ('allowed' in request.state) {
        var reason = request.state.allowed.reason;

        if (reason in output.allowed) {
          output.allowed[request.state.allowed.reason].addRequest(request);
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return output;
}
/**
 * @param {any} json
 * @returns {RequestDetails}
 * @throws {ZodError}
 */


function fromJson(json) {
  var requestData = _schema.requestDataSchema.parse(json);

  return createRequestDetails(requestData.requests, requestData.installedSurrogates || []);
}
/**
 * @param {any} inputs
 * @throws {ZodError}
 */


function fromMultiJson() {
  var requests = [];
  var installedSurrogates = [];

  for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {
    inputs[_key] = arguments[_key];
  }

  for (var _i = 0, _inputs = inputs; _i < _inputs.length; _i++) {
    var input = _inputs[_i];

    var requestData = _schema.requestDataSchema.parse(input);

    requests.push.apply(requests, _toConsumableArray(requestData.requests));
    installedSurrogates.push.apply(installedSurrogates, _toConsumableArray(requestData.installedSurrogates || []));
  }

  return createRequestDetails(requests, installedSurrogates);
}

var AggregatedCompanyResponseData = /*#__PURE__*/function () {
  function AggregatedCompanyResponseData() {
    _classCallCheck(this, AggregatedCompanyResponseData);

    _defineProperty(this, "entitiesCount", 0);

    _defineProperty(this, "requestCount", 0);

    _defineProperty(this, "entities", {});
  }

  _createClass(AggregatedCompanyResponseData, [{
    key: "addRequest",
    value:
    /**
     * @param {import('../../../../schema/__generated__/schema.types.js').DetectedRequest} request
     */
    function addRequest(request) {
      var hostname;

      try {
        hostname = new URL(request.url).hostname;
      } catch (e) {
        hostname = request.url;
      }

      var companyKey = request.entityName || request.eTLDplus1 || request.url;

      if (!this.entities[companyKey]) {
        var _request$prevalence;

        this.entities[companyKey] = new AggregateCompanyData(companyKey, (_request$prevalence = request.prevalence) !== null && _request$prevalence !== void 0 ? _request$prevalence : 0);
      }

      this.entities[companyKey].addUrl(hostname, request.category);
      this.entitiesCount = Object.keys(this.entities).length;
      this.requestCount += 1;
    }
    /**
     * Returns a list of AggregateCompanyData sorted by the entity prevalence
     * @returns {AggregateCompanyData[]}
     */

  }, {
    key: "sortedByPrevalence",
    value: function sortedByPrevalence() {
      return _toConsumableArray(Object.values(this.entities)).sort(function (a, b) {
        return b.prevalence - a.prevalence;
      });
    }
  }]);

  return AggregatedCompanyResponseData;
}();
/**
 * This list represents every possible state that the 'request data' can be in.
 * Use this list to determine which text/icons to display in certain situations.
 */


exports.AggregatedCompanyResponseData = AggregatedCompanyResponseData;
var states =
/** @type {const} */
{
  /* 01 */
  protectionsOn: 'protectionsOn',

  /* 02 */
  protectionsOn_blocked: 'protectionsOn_blocked',

  /* 03 */
  protectionsOn_blocked_allowedTrackers: 'protectionsOn_blocked_allowedTrackers',

  /* 04 */
  protectionsOn_blocked_allowedNonTrackers: 'protectionsOn_blocked_allowedNonTrackers',

  /* 05 */
  protectionsOn_blocked_allowedTrackers_allowedNonTrackers: 'protectionsOn_blocked_allowedTrackers_allowedNonTrackers',

  /* 06 */
  protectionsOn_allowedTrackers: 'protectionsOn_allowedTrackers',

  /* 07 */
  protectionsOn_allowedNonTrackers: 'protectionsOn_allowedNonTrackers',

  /* 08 */
  protectionsOn_allowedTrackers_allowedNonTrackers: 'protectionsOn_allowedTrackers_allowedNonTrackers',

  /* 09 */
  protectionsOff: 'protectionsOff',

  /* 010 */
  protectionsOff_allowedTrackers: 'protectionsOff_allowedTrackers',

  /* 011 */
  protectionsOff_allowedNonTrackers: 'protectionsOff_allowedNonTrackers',

  /* 012 */
  protectionsOff_allowedTrackers_allowedNonTrackers: 'protectionsOff_allowedTrackers_allowedNonTrackers'
};
/**
 * This is the data format that the UI can use to render sections
 */

exports.states = states;

var RequestDetails = /*#__PURE__*/function () {
  /**
   * @param {string[]} surrogates - any installed surrogates, just the domains
   */
  function RequestDetails(surrogates) {
    _classCallCheck(this, RequestDetails);

    _defineProperty(this, "surrogates", void 0);

    _defineProperty(this, "all", new AggregatedCompanyResponseData());

    _defineProperty(this, "blocked", new AggregatedCompanyResponseData());

    _defineProperty(this, "allowed", {
      adClickAttribution: new AggregatedCompanyResponseData(),
      ownedByFirstParty: new AggregatedCompanyResponseData(),
      ruleException: new AggregatedCompanyResponseData(),
      protectionDisabled: new AggregatedCompanyResponseData(),
      otherThirdPartyRequest: new AggregatedCompanyResponseData()
    });

    this.surrogates = surrogates;
  }
  /**
   * Loop over every seen entity
   * @param {(entity: AggregateCompanyData) => void} fn
   */


  _createClass(RequestDetails, [{
    key: "forEachEntity",
    value: function forEachEntity(fn) {
      for (var _i2 = 0, _Object$values = Object.values(this.all.entities); _i2 < _Object$values.length; _i2++) {
        var entity = _Object$values[_i2];
        fn(entity);
      }
    }
    /**
     * @returns {number}
     */

  }, {
    key: "blockedCount",
    value: function blockedCount() {
      return this.blocked.entitiesCount;
    }
    /**
     * The number of entities observed that had 'special' requests.
     *
     * 'special' means that a request was classified as a tracker, but we didn't block it
     * for any given reason. Note: This list excludes 'non-special' requests such as 3rd party
     * requests not classified as trackers
     *
     * @returns {number}
     */

  }, {
    key: "allowedSpecialCount",
    value: function allowedSpecialCount() {
      return this.allowed.adClickAttribution.entitiesCount + this.allowed.ownedByFirstParty.entitiesCount + this.allowed.ruleException.entitiesCount + this.allowed.protectionDisabled.entitiesCount;
    }
    /**
     * The number of entities observed that had 'non-special' requests.
     *
     * 'non-special' means a request that was observed, but it was *not* classified as a tracker
     *
     * @returns {number}
     */

  }, {
    key: "allowedNonSpecialCount",
    value: function allowedNonSpecialCount() {
      return this.allowed.otherThirdPartyRequest.entitiesCount;
    }
    /**
     * Create a list of company names, excluding any 'unknown' ones.
     * @returns {string[]}
     */

  }, {
    key: "blockedCompanyNames",
    value: function blockedCompanyNames() {
      var output =
      /** @type {{name: string, prevalence: number}[]} */
      [];

      for (var _i3 = 0, _Object$values2 = Object.values(this.blocked.entities); _i3 < _Object$values2.length; _i3++) {
        var entity = _Object$values2[_i3];
        if (entity.name === 'unknown') continue;
        output.push({
          name: entity.name,
          prevalence: entity.prevalence
        });
      }

      return output.sort(function (a, b) {
        return b.prevalence - a.prevalence;
      }).map(function (entity) {
        return entity.name;
      });
    }
    /**
     * @param {boolean} protectionsEnabled
     * @param {(keyof states & string)[]} states
     */

  }, {
    key: "matches",
    value: function matches(protectionsEnabled, states) {
      var curr = this.state(protectionsEnabled);
      return states.includes(curr);
    }
    /**
     * From the available request data, determine the global 'state' of the Request Data
     * @param {boolean} protectionsEnabled
     * @return {keyof states & string}
     */

  }, {
    key: "state",
    value: function state(protectionsEnabled) {
      if (!protectionsEnabled) {
        if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
          return states.protectionsOff_allowedTrackers_allowedNonTrackers;
        }

        if (this.allowedNonSpecialCount() > 0) {
          return states.protectionsOff_allowedNonTrackers;
        }

        if (this.allowedSpecialCount() > 0) {
          return states.protectionsOff_allowedTrackers;
        }

        return states.protectionsOff;
      } else {
        if (this.blockedCount() > 0) {
          // with blocked trackers
          if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
            return states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers;
          }

          if (this.allowedSpecialCount() > 0) {
            return states.protectionsOn_blocked_allowedTrackers;
          }

          if (this.allowedNonSpecialCount() > 0) {
            return states.protectionsOn_blocked_allowedNonTrackers;
          }

          return states.protectionsOn_blocked;
        } else {
          // no trackers
          if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
            return states.protectionsOn_allowedTrackers_allowedNonTrackers;
          }

          if (this.allowedSpecialCount() > 0) {
            return states.protectionsOn_allowedTrackers;
          }

          if (this.allowedNonSpecialCount() > 0) {
            return states.protectionsOn_allowedNonTrackers;
          }
        }

        return states.protectionsOn;
      }
    }
  }]);

  return RequestDetails;
}();

exports.RequestDetails = RequestDetails;

var AggregateCompanyData = /*#__PURE__*/function () {
  /**
   * @param {string} companyName
   * @param {number} prevalence
   */
  function AggregateCompanyData(companyName, prevalence) {
    _classCallCheck(this, AggregateCompanyData);

    this.name = companyName;
    this.displayName = companyName;
    this.prevalence = prevalence;
    this.normalizedName = (0, _normalizeCompanyNameEs.normalizeCompanyName)(companyName);
    /** @type {Record<string, TrackerUrl>} */

    this.urls = {};
  }
  /**
   * @param {string} url
   * @param {string} [category]
   */


  _createClass(AggregateCompanyData, [{
    key: "addUrl",
    value: function addUrl(url, category) {
      this.urls[url] = new TrackerUrl(url, category);
    }
  }]);

  return AggregateCompanyData;
}();

exports.AggregateCompanyData = AggregateCompanyData;

var TrackerUrl = /*#__PURE__*/_createClass(
/**
 * @param {string} url
 * @param {string} [category]
 */
function TrackerUrl(url, category) {
  _classCallCheck(this, TrackerUrl);

  this.url = url;
  this.category = category;
});

exports.TrackerUrl = TrackerUrl;

},{"../../../../schema/__generated__/schema.parsers":57,"../../ui/models/mixins/normalize-company-name.es6.js":77}],63:[function(require,module,exports){
"use strict";

// @ts-nocheck
// create global $
window.$ = window.jQuery = require('jquery'); // base dependencies

var _require = require('./localize.es6.js'),
    i18n = _require.i18n;

var mixins = require('./mixins/index.es6.js');

var BaseModel = require('./model.es6.js');

var BasePage = require('./page.es6.js');

var BaseView = require('./view.es6.js'); // init base


window.DDG = window.DDG || {};
window.DDG.base = {
  mixins: mixins,
  Model: BaseModel,
  Page: BasePage,
  utils: {},
  View: BaseView,
  i18n: i18n
};

require('../pages/popup.es6.js');

require('./loadcss.js');

},{"../pages/popup.es6.js":81,"./loadcss.js":64,"./localize.es6.js":65,"./mixins/index.es6.js":67,"./model.es6.js":68,"./page.es6.js":70,"./view.es6.js":72,"jquery":46}],64:[function(require,module,exports){
"use strict";

function loadCss(file) {
  var head = document.getElementsByTagName('head')[0];
  var link = document.createElement('link');
  link.rel = 'stylesheet';
  link.type = 'text/css';
  link.href = '../public/css/' + file + '.css';
  head.appendChild(link);
}

setTimeout(function () {
  loadCss('base');
  loadCss('popup');
}, 5);

},{}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ns = exports.i18n = void 0;

var _i18next = _interopRequireDefault(require("i18next"));

var _i18nextIcu = _interopRequireDefault(require("i18next-icu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// @ts-ignore
var localeResources = [{name:'bg/connection',module:require('../../../locales/bg/connection.json')},{name:'bg/permissions',module:require('../../../locales/bg/permissions.json')},{name:'bg/report',module:require('../../../locales/bg/report.json')},{name:'bg/shared',module:require('../../../locales/bg/shared.json')},{name:'bg/site',module:require('../../../locales/bg/site.json')},{name:'cs/connection',module:require('../../../locales/cs/connection.json')},{name:'cs/permissions',module:require('../../../locales/cs/permissions.json')},{name:'cs/report',module:require('../../../locales/cs/report.json')},{name:'cs/shared',module:require('../../../locales/cs/shared.json')},{name:'cs/site',module:require('../../../locales/cs/site.json')},{name:'da/connection',module:require('../../../locales/da/connection.json')},{name:'da/permissions',module:require('../../../locales/da/permissions.json')},{name:'da/report',module:require('../../../locales/da/report.json')},{name:'da/shared',module:require('../../../locales/da/shared.json')},{name:'da/site',module:require('../../../locales/da/site.json')},{name:'de/connection',module:require('../../../locales/de/connection.json')},{name:'de/permissions',module:require('../../../locales/de/permissions.json')},{name:'de/report',module:require('../../../locales/de/report.json')},{name:'de/shared',module:require('../../../locales/de/shared.json')},{name:'de/site',module:require('../../../locales/de/site.json')},{name:'el/connection',module:require('../../../locales/el/connection.json')},{name:'el/permissions',module:require('../../../locales/el/permissions.json')},{name:'el/report',module:require('../../../locales/el/report.json')},{name:'el/shared',module:require('../../../locales/el/shared.json')},{name:'el/site',module:require('../../../locales/el/site.json')},{name:'en/connection',module:require('../../../locales/en/connection.json')},{name:'en/ctascreens',module:require('../../../locales/en/ctascreens.json')},{name:'en/permissions',module:require('../../../locales/en/permissions.json')},{name:'en/report',module:require('../../../locales/en/report.json')},{name:'en/shared',module:require('../../../locales/en/shared.json')},{name:'en/site',module:require('../../../locales/en/site.json')},{name:'es/connection',module:require('../../../locales/es/connection.json')},{name:'es/permissions',module:require('../../../locales/es/permissions.json')},{name:'es/report',module:require('../../../locales/es/report.json')},{name:'es/shared',module:require('../../../locales/es/shared.json')},{name:'es/site',module:require('../../../locales/es/site.json')},{name:'et/connection',module:require('../../../locales/et/connection.json')},{name:'et/permissions',module:require('../../../locales/et/permissions.json')},{name:'et/report',module:require('../../../locales/et/report.json')},{name:'et/shared',module:require('../../../locales/et/shared.json')},{name:'et/site',module:require('../../../locales/et/site.json')},{name:'fi/connection',module:require('../../../locales/fi/connection.json')},{name:'fi/permissions',module:require('../../../locales/fi/permissions.json')},{name:'fi/report',module:require('../../../locales/fi/report.json')},{name:'fi/shared',module:require('../../../locales/fi/shared.json')},{name:'fi/site',module:require('../../../locales/fi/site.json')},{name:'fr/connection',module:require('../../../locales/fr/connection.json')},{name:'fr/permissions',module:require('../../../locales/fr/permissions.json')},{name:'fr/report',module:require('../../../locales/fr/report.json')},{name:'fr/shared',module:require('../../../locales/fr/shared.json')},{name:'fr/site',module:require('../../../locales/fr/site.json')},{name:'hr/connection',module:require('../../../locales/hr/connection.json')},{name:'hr/permissions',module:require('../../../locales/hr/permissions.json')},{name:'hr/report',module:require('../../../locales/hr/report.json')},{name:'hr/shared',module:require('../../../locales/hr/shared.json')},{name:'hr/site',module:require('../../../locales/hr/site.json')},{name:'hu/connection',module:require('../../../locales/hu/connection.json')},{name:'hu/permissions',module:require('../../../locales/hu/permissions.json')},{name:'hu/report',module:require('../../../locales/hu/report.json')},{name:'hu/shared',module:require('../../../locales/hu/shared.json')},{name:'hu/site',module:require('../../../locales/hu/site.json')},{name:'it/connection',module:require('../../../locales/it/connection.json')},{name:'it/permissions',module:require('../../../locales/it/permissions.json')},{name:'it/report',module:require('../../../locales/it/report.json')},{name:'it/shared',module:require('../../../locales/it/shared.json')},{name:'it/site',module:require('../../../locales/it/site.json')},{name:'lt/connection',module:require('../../../locales/lt/connection.json')},{name:'lt/permissions',module:require('../../../locales/lt/permissions.json')},{name:'lt/report',module:require('../../../locales/lt/report.json')},{name:'lt/shared',module:require('../../../locales/lt/shared.json')},{name:'lt/site',module:require('../../../locales/lt/site.json')},{name:'lv/connection',module:require('../../../locales/lv/connection.json')},{name:'lv/permissions',module:require('../../../locales/lv/permissions.json')},{name:'lv/report',module:require('../../../locales/lv/report.json')},{name:'lv/shared',module:require('../../../locales/lv/shared.json')},{name:'lv/site',module:require('../../../locales/lv/site.json')},{name:'nb/connection',module:require('../../../locales/nb/connection.json')},{name:'nb/permissions',module:require('../../../locales/nb/permissions.json')},{name:'nb/report',module:require('../../../locales/nb/report.json')},{name:'nb/shared',module:require('../../../locales/nb/shared.json')},{name:'nb/site',module:require('../../../locales/nb/site.json')},{name:'nl/connection',module:require('../../../locales/nl/connection.json')},{name:'nl/permissions',module:require('../../../locales/nl/permissions.json')},{name:'nl/report',module:require('../../../locales/nl/report.json')},{name:'nl/shared',module:require('../../../locales/nl/shared.json')},{name:'nl/site',module:require('../../../locales/nl/site.json')},{name:'pl/connection',module:require('../../../locales/pl/connection.json')},{name:'pl/permissions',module:require('../../../locales/pl/permissions.json')},{name:'pl/report',module:require('../../../locales/pl/report.json')},{name:'pl/shared',module:require('../../../locales/pl/shared.json')},{name:'pl/site',module:require('../../../locales/pl/site.json')},{name:'pt/connection',module:require('../../../locales/pt/connection.json')},{name:'pt/permissions',module:require('../../../locales/pt/permissions.json')},{name:'pt/report',module:require('../../../locales/pt/report.json')},{name:'pt/shared',module:require('../../../locales/pt/shared.json')},{name:'pt/site',module:require('../../../locales/pt/site.json')},{name:'ro/connection',module:require('../../../locales/ro/connection.json')},{name:'ro/permissions',module:require('../../../locales/ro/permissions.json')},{name:'ro/report',module:require('../../../locales/ro/report.json')},{name:'ro/shared',module:require('../../../locales/ro/shared.json')},{name:'ro/site',module:require('../../../locales/ro/site.json')},{name:'ru/connection',module:require('../../../locales/ru/connection.json')},{name:'ru/permissions',module:require('../../../locales/ru/permissions.json')},{name:'ru/report',module:require('../../../locales/ru/report.json')},{name:'ru/shared',module:require('../../../locales/ru/shared.json')},{name:'ru/site',module:require('../../../locales/ru/site.json')},{name:'sk/connection',module:require('../../../locales/sk/connection.json')},{name:'sk/permissions',module:require('../../../locales/sk/permissions.json')},{name:'sk/report',module:require('../../../locales/sk/report.json')},{name:'sk/shared',module:require('../../../locales/sk/shared.json')},{name:'sk/site',module:require('../../../locales/sk/site.json')},{name:'sl/connection',module:require('../../../locales/sl/connection.json')},{name:'sl/permissions',module:require('../../../locales/sl/permissions.json')},{name:'sl/report',module:require('../../../locales/sl/report.json')},{name:'sl/shared',module:require('../../../locales/sl/shared.json')},{name:'sl/site',module:require('../../../locales/sl/site.json')},{name:'sv/connection',module:require('../../../locales/sv/connection.json')},{name:'sv/permissions',module:require('../../../locales/sv/permissions.json')},{name:'sv/report',module:require('../../../locales/sv/report.json')},{name:'sv/shared',module:require('../../../locales/sv/shared.json')},{name:'sv/site',module:require('../../../locales/sv/site.json')},{name:'tr/connection',module:require('../../../locales/tr/connection.json')},{name:'tr/permissions',module:require('../../../locales/tr/permissions.json')},{name:'tr/report',module:require('../../../locales/tr/report.json')},{name:'tr/shared',module:require('../../../locales/tr/shared.json')},{name:'tr/site',module:require('../../../locales/tr/site.json')}]; // eslint-disable-next-line no-unused-vars


var siteTranslations = require('../../../locales/en/site.json');

var resources = localeResources.reduce(function (mapping, _ref) {
  var name = _ref.name,
      module = _ref.module;

  var _name$split = name.split('/'),
      _name$split2 = _slicedToArray(_name$split, 2),
      locale = _name$split2[0],
      namespace = _name$split2[1];

  mapping[locale] = mapping[locale] || {};
  mapping[locale][namespace] = module;
  return mapping;
}, {});

_i18next["default"].use(_i18nextIcu["default"]).init({
  // debug: true,
  initImmediate: false,
  fallbackLng: 'en',
  lng: 'en',
  ns: ['shared', 'site', 'connection', 'report'],
  defaultNS: 'shared',
  resources: resources
});

var i18n = _i18next["default"];
/**
 * A helper for accessing the 'site' namespace with a bit of help from Typescript
 * @template {keyof siteTranslations} K
 * @template {`${K}.${string}`} F
 * @param {F} key
 * @param {Record<string, any>} [options]
 */

exports.i18n = i18n;

function site(key, options) {
  return _i18next["default"].t("site:".concat(key), options);
}

var ns = {
  site: site
};
exports.ns = ns;

},{"../../../locales/bg/connection.json":106,"../../../locales/bg/permissions.json":107,"../../../locales/bg/report.json":108,"../../../locales/bg/shared.json":109,"../../../locales/bg/site.json":110,"../../../locales/cs/connection.json":111,"../../../locales/cs/permissions.json":112,"../../../locales/cs/report.json":113,"../../../locales/cs/shared.json":114,"../../../locales/cs/site.json":115,"../../../locales/da/connection.json":116,"../../../locales/da/permissions.json":117,"../../../locales/da/report.json":118,"../../../locales/da/shared.json":119,"../../../locales/da/site.json":120,"../../../locales/de/connection.json":121,"../../../locales/de/permissions.json":122,"../../../locales/de/report.json":123,"../../../locales/de/shared.json":124,"../../../locales/de/site.json":125,"../../../locales/el/connection.json":126,"../../../locales/el/permissions.json":127,"../../../locales/el/report.json":128,"../../../locales/el/shared.json":129,"../../../locales/el/site.json":130,"../../../locales/en/connection.json":131,"../../../locales/en/ctascreens.json":132,"../../../locales/en/permissions.json":133,"../../../locales/en/report.json":134,"../../../locales/en/shared.json":135,"../../../locales/en/site.json":136,"../../../locales/es/connection.json":137,"../../../locales/es/permissions.json":138,"../../../locales/es/report.json":139,"../../../locales/es/shared.json":140,"../../../locales/es/site.json":141,"../../../locales/et/connection.json":142,"../../../locales/et/permissions.json":143,"../../../locales/et/report.json":144,"../../../locales/et/shared.json":145,"../../../locales/et/site.json":146,"../../../locales/fi/connection.json":147,"../../../locales/fi/permissions.json":148,"../../../locales/fi/report.json":149,"../../../locales/fi/shared.json":150,"../../../locales/fi/site.json":151,"../../../locales/fr/connection.json":152,"../../../locales/fr/permissions.json":153,"../../../locales/fr/report.json":154,"../../../locales/fr/shared.json":155,"../../../locales/fr/site.json":156,"../../../locales/hr/connection.json":157,"../../../locales/hr/permissions.json":158,"../../../locales/hr/report.json":159,"../../../locales/hr/shared.json":160,"../../../locales/hr/site.json":161,"../../../locales/hu/connection.json":162,"../../../locales/hu/permissions.json":163,"../../../locales/hu/report.json":164,"../../../locales/hu/shared.json":165,"../../../locales/hu/site.json":166,"../../../locales/it/connection.json":167,"../../../locales/it/permissions.json":168,"../../../locales/it/report.json":169,"../../../locales/it/shared.json":170,"../../../locales/it/site.json":171,"../../../locales/lt/connection.json":172,"../../../locales/lt/permissions.json":173,"../../../locales/lt/report.json":174,"../../../locales/lt/shared.json":175,"../../../locales/lt/site.json":176,"../../../locales/lv/connection.json":177,"../../../locales/lv/permissions.json":178,"../../../locales/lv/report.json":179,"../../../locales/lv/shared.json":180,"../../../locales/lv/site.json":181,"../../../locales/nb/connection.json":182,"../../../locales/nb/permissions.json":183,"../../../locales/nb/report.json":184,"../../../locales/nb/shared.json":185,"../../../locales/nb/site.json":186,"../../../locales/nl/connection.json":187,"../../../locales/nl/permissions.json":188,"../../../locales/nl/report.json":189,"../../../locales/nl/shared.json":190,"../../../locales/nl/site.json":191,"../../../locales/pl/connection.json":192,"../../../locales/pl/permissions.json":193,"../../../locales/pl/report.json":194,"../../../locales/pl/shared.json":195,"../../../locales/pl/site.json":196,"../../../locales/pt/connection.json":197,"../../../locales/pt/permissions.json":198,"../../../locales/pt/report.json":199,"../../../locales/pt/shared.json":200,"../../../locales/pt/site.json":201,"../../../locales/ro/connection.json":202,"../../../locales/ro/permissions.json":203,"../../../locales/ro/report.json":204,"../../../locales/ro/shared.json":205,"../../../locales/ro/site.json":206,"../../../locales/ru/connection.json":207,"../../../locales/ru/permissions.json":208,"../../../locales/ru/report.json":209,"../../../locales/ru/shared.json":210,"../../../locales/ru/site.json":211,"../../../locales/sk/connection.json":212,"../../../locales/sk/permissions.json":213,"../../../locales/sk/report.json":214,"../../../locales/sk/shared.json":215,"../../../locales/sk/site.json":216,"../../../locales/sl/connection.json":217,"../../../locales/sl/permissions.json":218,"../../../locales/sl/report.json":219,"../../../locales/sl/shared.json":220,"../../../locales/sl/site.json":221,"../../../locales/sv/connection.json":222,"../../../locales/sv/permissions.json":223,"../../../locales/sv/report.json":224,"../../../locales/sv/shared.json":225,"../../../locales/sv/site.json":226,"../../../locales/tr/connection.json":227,"../../../locales/tr/permissions.json":228,"../../../locales/tr/report.json":229,"../../../locales/tr/shared.json":230,"../../../locales/tr/site.json":231,"i18next":40,"i18next-icu":39}],66:[function(require,module,exports){
"use strict";

// @ts-nocheck
module.exports = {
  /** @type {any} */
  bindEvents: function bindEvents(events) {
    if (!this._bEvents) {
      this._bEvents = [];
    }

    for (var i = 0, evt; evt = events[i]; i++) {
      // eslint-disable-line
      if (evt.length < 2 || !evt[0] || !evt[1] || !evt[2]) {
        continue;
      }

      var eventObject = {
        bound: evt[2].bind(this),
        evt: evt
      };

      if (typeof evt[0] === 'string') {
        this.$ && this.$(evt[0]).on(evt[1], eventObject.bound);
      } else {
        evt[0].on(evt[1], eventObject.bound);
      }

      this._bEvents.push(eventObject);
    }
  },

  /** @type {any} */
  unbindEvents: function unbindEvents() {
    while (this._bEvents && this._bEvents.length) {
      var eventObject = this._bEvents[this._bEvents.length - 1];
      var evt = eventObject.evt;

      if (evt) {
        if (typeof evt[0] === 'string') {
          this.$ && this.$(evt[0]).off(evt[1], eventObject.bound);
        } else {
          evt[0].off(evt[1], eventObject.bound);
        }
      }

      this._bEvents.pop();
    }

    this._bEvents = null;
  }
};

},{}],67:[function(require,module,exports){
"use strict";

// @ts-nocheck
module.exports = {
  /** @type {any} */
  events: require('./events.es6.js') // ...add more here!

};

},{"./events.es6.js":66}],68:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

// @ts-nocheck
var $ = require('jquery');

var mixins = require('./mixins/index.es6.js');

var store = require('./store.es6.js');

var browserUIWrapper = require('../../browser/communication.es6.js');

function BaseModel(attrs) {
  // attributes are applied directly
  // onto the instance:
  $.extend(this, attrs); // register model with `store` of
  // global notifications
  // (after checking `modelName` property)

  if (!this.modelName || typeof this.modelName !== 'string') {
    throw new Error('cannot init model without `modelName` property');
  } else {
    this.store = store;
    this.store.register(this.modelName);
  }
}

BaseModel.prototype = $.extend({}, mixins.events, {
  /**
   * Setter method for modifying attributes
   * on the model. Since the attributes
   * are directly accessible + mutable on the object
   * itself, you don't *have* to use the set method.
   *
   * However, the benefit of using the set method
   * is that changes are broadcast out via store
   * to any UI components that might want to observe
   * changes and update their state.
   *
   * @param {string or object} attr
   * @param {*} val
   * @api public
   */
  set: function set(attr, val) {
    /*
     * support passing a hash of values to set instead of
     * single attribute/value pair, i.e.:
     *
     * this.set({
     *   title: 'something',
     *   description: 'something described'
     * })
     */
    if (_typeof(attr) === 'object') {
      for (var key in attr) {
        this.set(key, attr[key], val);
      }

      return;
    }

    var lastValue = this[attr] || null;
    this[attr] = val; // deep clone val in case it's something passed by reference

    if (val) {
      val = JSON.parse(JSON.stringify(val));
    }

    this.store.publish({
      notifierName: this.modelName,
      change: {
        attribute: attr,
        value: val,
        lastValue: lastValue
      },
      attributes: this._toJSON()
    });
  },

  /**
   * Convenience method for code clarity
   * so we can explicitly call clear()
   * instead of doing null sets.
   * Using .clear() broadcasts the change
   * out to the rest of the app via this.set()
   * which calls this.store.publish()
   */
  clear: function clear(attr) {
    this.set(attr, null);
  },

  /**
   * Destroy any of this model's bound events
   * and remove its reducer from store so
   * there is no memeory footprint left.
   * Mostly used when view.destroy() is called.
   */
  destroy: function destroy() {
    this.unbindEvents();
    this.store.remove(this.modelName);
  },

  /**
   * Fetch data from background
   * this.model.fetch({'messageName': messageValue}).then((response) ..
   **/
  fetch: function fetch(message) {
    return browserUIWrapper.fetch(message);
  },

  /**
   * Send a user action
   * Broadcasts an action to other UI components
   * via notification store
   * @param action {string}
   * @param data {could be a jquery event or other data is optional}
   */
  send: function send(action, data) {
    if (!action) throw new Error('model.send() requires an action argument');
    data = data || null; // deep clone data in case it's something passed by reference

    if (data) {
      data = JSON.parse(JSON.stringify(data));
    }

    this.store.publish({
      notifierName: this.modelName,
      action: action,
      data: data,
      attributes: this._toJSON()
    });
  },

  /**
    * Private method for turning `this` into a
    * JSON object before sending to application store.
    * Basically just weeds out properties that
    * are functions.
    */
  _toJSON: function _toJSON() {
    var attributes = Object.assign({}, Object.getPrototypeOf(this), this);
    if (attributes.store) delete attributes.store;
    return JSON.parse(JSON.stringify(attributes));
  }
});
module.exports = BaseModel;

},{"../../browser/communication.es6.js":61,"./mixins/index.es6.js":67,"./store.es6.js":71,"jquery":46}],69:[function(require,module,exports){
"use strict";

/**
 * Check out notes in store.es6.js to understand what's happening here.
 */

/**
 * `registered` is the object that contains each auto-
 * generated notification dispatch handler (handlers
 * are similar to Redux reducers).
 */
var registered = {};
/**
 * .add() auto-generates the store's notification dispatch
 * handlers by adding each to the `registered` object that
 * gets combine()'d below. This is very similar to a Redux
 * reducer (aka "action handler"), only we aren't using
 * actual reducers (overkill for us).
 * Notifications are just objects that contain current
 * state data about each notifier, sent via events emitted
 * from the store (see store.es6.js file).
 */

function add(notifierName) {
  registered[notifierName] = function (state, notification) {
    if (state === undefined) state = {};

    if (notification.notifierName === notifierName) {
      /**
       * Define global notification types here
       */

      /**
       * Model changes
       * Sent here for broadcast by model.set()
       */
      if (notification.change) {
        return {
          change: notification.change,
          attributes: notification.attributes
        };
      }
      /**
       * Model actions
       * Sent here for broadcast via model.send()
       */


      if (notification.action) {
        return {
          action: notification.action,
          data: notification.data,
          attributes: notification.attributes
        };
      }
    } else {
      return state;
    }
  };
}

function combine() {
  /*
   * This is based on Redux/Minidux's combineReducers() method
   * ... only we aren't using full reducers (overkill for us).
   * We just send single notifications about state changes to
   * store event subscribers. This function is a slimmer version of:
   * https://www.npmjs.com/package/minidux#combinereducersreducers
   */
  var keys = Object.keys(registered);
  return function combination(state, notification) {
    var nextState = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (typeof registered[key] !== 'function') {
        throw new Error('notifier ' + key + 'must be a function');
      }

      nextState[key] = registered[key](state[key], notification);
    }

    return nextState;
  };
}

function remove(notifier) {
  if (registered[notifier]) {
    delete registered[notifier];
    return true;
  }
} // Public api


module.exports = {
  registered: registered,
  // object containing each of our notifier funcs auto-generated by .add()
  add: add,
  // adds a new notifier to `registered`
  combine: combine,
  // similar to Redux combineReducers() function
  remove: remove // remove a notifier from `registered` object

};

},{}],70:[function(require,module,exports){
"use strict";

// @ts-nocheck
var mixins = require('./mixins/index.es6.js');

var store = require('./store.es6.js');

function BasePage(ops) {
  this.views = {};
  this.store = store;
  this.ready();
}

BasePage.prototype = window.$.extend({}, mixins.events, {
  // pageName: '' - should be unique, defined by each page subclass
  ready: function ready() {}
});
module.exports = BasePage;

},{"./mixins/index.es6.js":67,"./store.es6.js":71}],71:[function(require,module,exports){
"use strict";

// @ts-nocheck

/**
 * Base application `store`.
 *
 * This is how models communicate with other models, views and pages.
 * It is based on Redux pattern but slimmed down for our purposes.
 * It emits event notifications that can be subscribed to.
 *
 * Its purpose is to be the single source of truth for app-wide event
 * notifications (to avoid race conditions and spaghetti event tangles
 * that can result in the infinite loops and zombie states that early
 * Backbone and Angular 1.0 apps are famous for when components tried
 * to talk to one other without a single source of truth like this store).
 *
 * --> What you need to know as a feature developer: <--
 *
 *   - To PUBLISH a notification from a model:
 *
 *     `model.set('bar', 1234)`
 *    or
 *     `model.send('somethingClicked')`
 *
 *   - To SUBSCRIBE to notifications about a model's published state change:
 *
 *      `this.bindEvents([
 *        [this.store.subscribe, 'change:search', this._handler],
 *        [this.store.subscribe, 'action:search', this._clickHandler]
 *      ])`
 *
 *    The first argument passed to `this._handler()` will be an
 *    object containing details about the search model's state change.
 *    The first argument passed to `this._clickHandler()` will be
 *    be the action name, second argument will be optional jQuery event.
 *
 */
// Dependencies
var _require = require('is-plain-object'),
    isPlainObject = _require.isPlainObject;

var deepFreeze = require('deep-freeze');

var EventEmitter2 = require('eventemitter2');

var notifiers = require('./notifiers.es6.js');
/**
 * .register() creates a notifier function for each caller.
 * (models should be the callers in most cases).
 * @param {string} notifierName - unique name of registrant (i.e. model name)
 * @api public
 */


function register(notifierName) {
  if (typeof notifierName !== 'string') {
    throw new Error('notifierName argument must be a string');
  }

  if (notifiers.registered[notifierName]) {
    throw new Error("notifierName argument must be unique to store ".concat(notifierName, " already exists"));
  }

  notifiers.add(notifierName);
  var combinedNotifiers = notifiers.combine();

  if (!_store) {
    _store = _createStore(combinedNotifiers);

    _store.subscribe(function (notification) {
      notification = deepFreeze(notification); // make immutable before publishing

      _publish(notification); // publish notif. about state changes to subscribers

    });
  } else {
    // update reducers to include the newest registered here
    _store.replaceNotifier(combinedNotifiers);
  }
}
/**
 * .publish() dispatches a notification to the store which can be subscribed to.
 * Although this api method is public, most of what you need to do can be
 * done with model.set(), model.clear(), model.send() instead of directly here.
 * @api public
 */


function publish(notification) {
  _store.dispatch(notification);
}
/**
 * Broadcasts state change events out to subscribers
 * @api private, but exposed as `store.subscribe()` for clarity
 */


var _publisher = new EventEmitter2();

_publisher.setMaxListeners(100); // EventEmitter2 default of 10 is too low

/**
 * Emits notifications via _publisher
 * @api private
 */


function _publish(notification) {
  if (notification && notification.change) {
    _publisher.emit("change:".concat(notification.notifierName), notification);
  }

  if (notification && notification.action) {
    _publisher.emit("action:".concat(notification.notifierName), notification);
  }
}
/**
 * Remove notifier from store.
 * @param {string} notifierName
 * @api public
 */


function remove(notifierName) {
  if (notifiers.remove(notifierName)) {
    var combinedNotifiers = notifiers.combine();

    _store.replaceNotifier(combinedNotifiers);
  }
}
/**
 * `_store` is where notifiers live after they are registered.
 * Its api is not publicly exposed. Developers must use public api.
 * @api private
 */


var _store = null;
/**
 * Create the store of notifiers and their notification dispatch functions.
 * This basically mimics a Redux store init pattern
 * and is liberally borrowed from Minidux
 * but slimmed down for our needs:
 * https://www.npmjs.com/package/minidux#var-store--createstorereducer-initialstate-enhancer
 * @api private
 */

function _createStore(notifier) {
  if (!notifier || typeof notifier !== 'function') throw new Error('notifier must be a function');
  var state = {};
  var listener = null;
  var isEmitting = false;

  function dispatch(notification) {
    if (!notification || !isPlainObject(notification)) throw new Error('notification parameter is required and must be a plain object');
    if (!notification.notifierName || typeof notification.notifierName !== 'string') throw new Error('notifierName property of notification parameter is required and must be a string');
    if (isEmitting) throw new Error('subscribers may not generate notifications');
    isEmitting = true;
    state = notifier(state, notification);
    if (listener) listener(notification);
    isEmitting = false;
    return notification;
  }

  function subscribe(cb) {
    if (!cb || typeof cb !== 'function') throw new Error('listener must be a function');
    listener = cb;
  }

  function replaceNotifier(next) {
    if (typeof next !== 'function') throw new Error('new notifier must be a function');
    notifier = next;
  }

  dispatch({
    notifierName: '@@createStore/INIT'
  });
  return {
    dispatch: dispatch,
    subscribe: subscribe,
    replaceNotifier: replaceNotifier
  };
} // Public api


module.exports = {
  register: register,
  // registers a new notifier to the store (likely a model)
  publish: publish,
  // publish a notification from notifier to subscribers
  subscribe: _publisher,
  // subscribe to notifiers' notifications
  remove: remove // remove a notifier from the store

};

},{"./notifiers.es6.js":69,"deep-freeze":33,"eventemitter2":34,"is-plain-object":45}],72:[function(require,module,exports){
"use strict";

// @ts-nocheck
var $ = require('jquery');

var mixins = require('./mixins/index.es6.js');

var store = require('./store.es6.js');
/**
 * Abstract Base class for any type of view.
 *
 * Contains the basic functionality
 * for rendering a template, caching a $ ref, inserting
 * into the DOM and a locally scoped find at this.$
 *
 * @constructor
 * @param {object} ops
 */


function BaseView(ops) {
  this.model = ops.model;
  this.views = this.views || {};
  this.store = store; // A jquery object should be passed in as either 'appendTo', 'before' or 'after'
  // indicating where on the DOM the view should be added. If none is passed
  // the view will render itself to an in-memory jquery object, but won't be added to the DOM.

  this.$parent = typeof ops.appendTo === 'string' ? $(ops.appendTo) : ops.appendTo;
  this.$before = typeof ops.before === 'string' ? $(ops.before) : ops.before;
  this.$after = typeof ops.after === 'string' ? $(ops.after) : ops.after;

  if (ops.events) {
    for (var id in ops.events) {
      this.on(id, ops.events[id]);
    }
  }

  this._render(ops);
}

BaseView.prototype = $.extend({}, mixins.events, {
  /***
   * Each view should define a template
   * if it wants to be rendered and added to the DOM.
   *
   * template: '',
   */

  /**
   * Removes the view element (and all child view elements)
   * from the DOM.
   *
   * Should be extended to do any cleanup of child views or
   * unbinding of events.
   */
  destroy: function destroy() {
    this.unbindEvents();
    this.destroyChildViews();
    this.$el.remove();
    if (this.model) this.model.destroy();
  },

  /**
   * Go through the this.views object
   * and recurse down destroying any child
   * views and their child views so that
   * when a view is destroyed it removes all memory
   * footprint, all events are cleanly unbound and
   * all related DOM elements are removed.
   *
   */
  destroyChildViews: function destroyChildViews() {
    !function destroyViews(views) {
      // eslint-disable-line
      if (!views) {
        return;
      }

      var v;

      if ($.isArray(views)) {
        for (var i = 0; i < views.length; i++) {
          v = views[i];

          if (v && $.isArray(v)) {
            destroyViews(v);
          } else {
            v && v.destroy && v.destroy();
          }
        }

        views = null;
      } else {
        for (var c in views) {
          v = views[c];

          if (v && $.isArray(v)) {
            destroyViews(v);
          } else {
            v && v.destroy && v.destroy();
          }

          delete views[c];
        }
      }
    }(this.views); // eslint-disable-line

    delete this.views;
  },

  /**
   * Take the template defined on the view class and
   * use it to create a DOM element + append it to the DOM.
   *
   * Can be extended with any custom rendering logic
   * a view may need to do.
   *
   * @param {object} ops - the same ops hash passed into the view constructor
   */
  _render: function _render(ops) {
    if (!this.$el) {
      if (ops && ops.$el) {
        this.$el = ops.$el;
      } else {
        var el = this.template();
        this.$el = $(el);
      }
    }

    if (!this.$el) throw new Error('Template Not Found: ' + this.template);

    this._addToDOM();

    this.$ = this.$el.find.bind(this.$el);
  },
  _rerender: function _rerender() {
    var $prev = this.$el.prev();

    if ($prev.length) {
      delete this.$parent;
      this.$after = $prev;
    } else {
      var $next = this.$el.next();

      if ($next.length) {
        delete this.$parent;
        this.$before = $next;
      }
    }

    this.$el.remove();
    delete this.$el;

    this._render();
  },

  /**
   * Add the rendered element to the DOM.
   */
  _addToDOM: function _addToDOM() {
    if (this.$parent) {
      this.$parent.append(this.$el);
    } else if (this.$before) {
      this.$before.before(this.$el);
    } else if (this.$after) {
      this.$after.after(this.$el);
    }
  },

  /**
   * Takes a prefix string and an array
   * of elements and caches dom references.
   *
   * It should be used like this:
   *
   * this._cacheElems('.js-detail',['next','prev'])
   * --> this.$next (is cached ref to '.js-detail-next'
   *   this.$prev (is cached ref to '.js-detail-prev'
   *
   * @param {String} prefix
   * @param {Array} elems
   */
  _cacheElems: function _cacheElems(prefix, elems) {
    for (var i = 0; i < elems.length; i++) {
      var selector = prefix + '-' + elems[i]; // the replace removes '-' from class names, so:
      // 'class-name' becomes this.$classname:

      var id = '$' + elems[i].replace(/-/g, '');
      this[id] = this.$(selector);
    }
  }
});
module.exports = BaseView;

},{"./mixins/index.es6.js":67,"./store.es6.js":71,"jquery":46}],73:[function(require,module,exports){
"use strict";

var isEnvironment = function isEnvironment(environment) {
  return environment === 'android' || environment === window.environmentOverride;
};

var isIOS = function isIOS() {
  return isEnvironment('ios');
};

var isAndroid = function isAndroid() {
  return isEnvironment('android');
};

var isBrowser = function isBrowser() {
  return isEnvironment('browser');
};

module.exports = {
  isIOS: isIOS,
  isAndroid: isAndroid,
  isBrowser: isBrowser
};

},{}],74:[function(require,module,exports){
"use strict";

// @ts-nocheck
var Parent = window.DDG.base.Model;

var browserUIWrapper = require('../../browser/communication.es6.js');
/**
 * Background messaging is done via two methods:
 *
 * 1. Passive messages from background -> backgroundMessage model -> subscribing model
 *
 *  The background sends these messages using chrome.runtime.sendMessage({'name': 'value'})
 *  The backgroundMessage model (here) receives the message and forwards the
 *  it to the global event store via model.send(msg)
 *  Other modules that are subscribed to state changes in backgroundMessage are notified
 *
 * 2. Two-way messaging using this.model.fetch() as a passthrough
 *
 *  Each model can use a fetch method to send and receive a response from the background.
 *  Ex: this.model.fetch({'name': 'value'}).then((response) => console.log(response))
 *  Listeners must be registered in the background to respond to messages with this 'name'.
 *
 *  The common fetch method is defined in base/model.es6.js
 */


function BackgroundMessage(attrs) {
  Parent.call(this, attrs);
  var thisModel = this;
  browserUIWrapper.backgroundMessage(thisModel);
}

BackgroundMessage.prototype = window.$.extend({}, Parent.prototype, {
  modelName: 'backgroundMessage'
});
module.exports = BackgroundMessage;

},{"../../browser/communication.es6.js":61}],75:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.Model;

var _require = require('../templates/cta-rotation.es6'),
    ctas = _require.ctas;

var constants = {
  MODEL_NAME: 'ctaRotation',
  CTA_SCREENS: Object.keys(ctas)
};
/** @this {any} */

function CtaRotationModel(attrs) {
  attrs = attrs || {};
  Parent.call(this, attrs);

  this._setup();
}

CtaRotationModel.prototype = window.$.extend({}, Parent.prototype, {
  modelName: constants.MODEL_NAME,

  /**
   * Which CTA screen is going to be shown next.
   * @type {string}
   */
  currentCta: constants.CTA_SCREENS[0],

  /**
   * We need to do this to prevent showing the
   * email CTA to existing signed-in users
   * @this {any}
   */
  _setup: function _setup() {
    var _this$emailProtection;

    if ((_this$emailProtection = this.emailProtectionUserData) !== null && _this$emailProtection !== void 0 && _this$emailProtection.nextAlias) {
      this.currentCta = 'spread';
    } else {
      this.setRandomCta();
    }
  },

  /**
   * If we decide all CTAs can be displayed, just choose a random one
   */
  setRandomCta: function setRandomCta() {
    var names = constants.CTA_SCREENS;
    var random = Math.floor(Math.random() * names.length);
    this.currentCta = names[random];
  }
});
module.exports.CtaRotationModel = CtaRotationModel;
module.exports.constants = constants;

},{"../templates/cta-rotation.es6":83}],76:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.Model;
/** @this {any} */

function EmailProtectionModel(attrs) {
  attrs = attrs || {};

  if (!('emailProtectionUserData' in attrs)) {
    throw new Error('`emailProtectionUserData` is required for EmailProtectionModel');
  }

  Parent.call(this, attrs);

  this._setup();
}

EmailProtectionModel.prototype = window.$.extend({}, Parent.prototype, {
  modelName: 'emailProtection',

  /**
   * @typedef {object} UserData
   * @property {string} cohort
   * @property {string} nextAlias
   * @property {string} token
   * @property {string} userName
   *
   * @type {UserData | null}
   */
  emailProtectionUserData: null,

  /**
   * A state enum the UI can use to decide what to render.
   *
   * 'unknown' - this means we don't have sufficient data to determine the current state
   * 'idle' - this means we are able to provide an alias, but nothing is currently happening
   * 'added' - this is a temporary state that is entered into following use of the alias.
   *
   * @type {"unknown" | "idle" | "added"}
   */
  state: 'unknown',

  /**
   * From the initial data, decide what the first state should be
   * @private
   */
  _setup: function _setup() {
    var _this$emailProtection;

    if ((_this$emailProtection = this.emailProtectionUserData) !== null && _this$emailProtection !== void 0 && _this$emailProtection.nextAlias) {
      this.state = 'idle';
    }
  },
  refreshAlias: function refreshAlias() {
    var _this = this;

    return this.fetch({
      messageType: 'refreshAlias',
      options: {}
    }).then(function (resp) {
      // not using 'this.set()' here as there's no expected UI response to this.
      if (typeof resp.privateAddress === 'string') {
        _this.emailProtectionUserData.nextAlias = resp.privateAddress;
      } else {
        console.warn('response did not contain a private address', resp);
        _this.emailProtectionUserData.nextAlias = null;
      }
    });
  }
});
module.exports = EmailProtectionModel;

},{}],77:[function(require,module,exports){
"use strict";

module.exports = {
  normalizeCompanyName: function normalizeCompanyName(companyName) {
    return (companyName || '').toLowerCase() // Remove TLD suffixes
    // e.g. Fixes cases like "amazon.com" -> "amazon"
    .replace(/\.[a-z]+$/, '') // Remove non-alphanumeric characters
    // e.g. Fixes cases like "new relic" -> "newrelic"
    .replace(/[^a-z0-9]/g, '');
  }
};

},{}],78:[function(require,module,exports){
"use strict";

var browserUIWrapper = require('../../browser/communication.es6.js');

var Parent = window.DDG.base.Model;
/** @this {any} */

function Search(attrs) {
  Parent.call(this, attrs);
}

Search.prototype = window.$.extend({}, Parent.prototype, {
  modelName: 'search',
  doSearch: function doSearch(searchTerm) {
    this.searchText = searchTerm;
    searchTerm = encodeURIComponent(searchTerm);
    browserUIWrapper.search(searchTerm);
  },
  openOptionsPage: function openOptionsPage() {
    this.fetch({
      messageType: 'getBrowser'
    }).then(function (browserName) {
      browserUIWrapper.openOptionsPage(browserName);
    })["catch"](function (e) {
      console.error('openOptionsPage', e);
    });
  }
});
module.exports = Search;

},{"../../browser/communication.es6.js":61}],79:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.Model;

var normalizeCompanyName = require('./mixins/normalize-company-name.es6');

var browserUIWrapper = require('../../browser/communication.es6.js');
/** @this {any} */


function SiteCompanyList(attrs) {
  attrs = attrs || {};
  attrs.tab = null;
  attrs.companyList = [];
  Parent.call(this, attrs);
}

SiteCompanyList.prototype = window.$.extend({}, Parent.prototype, normalizeCompanyName, {
  modelName: 'siteCompanyList',

  /** @this {any} */
  fetchAsyncData: function fetchAsyncData() {
    var _this = this;

    return new Promise(function (resolve, reject) {
      browserUIWrapper.getBackgroundTabData().then(function (_ref) {
        var tab = _ref.tab;

        if (tab) {
          _this.tab = tab;
        }

        resolve(null);
      });
    });
  }
});
module.exports = SiteCompanyList;

},{"../../browser/communication.es6.js":61,"./mixins/normalize-company-name.es6":77}],80:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.Model;

var constants = require('../../../data/constants');

var httpsMessages = constants.httpsMessages;
/** @type {import('../../browser/communication.es6.js').Communication} */

var browserUIWrapper = require('../../browser/communication.es6.js');

var i18n = window.DDG.base.i18n; // We consider major tracker networks as those found on this percentage of sites
// that we crawl

var MAJOR_TRACKER_THRESHOLD_PCT = 25;
/** @this {any} */

function Site(attrs) {
  attrs = attrs || {};
  attrs.disabled = true; // disabled by default

  attrs.tab = null;
  attrs.permissions = null;
  attrs.domain = '-';
  attrs.protectionsEnabled = false;
  attrs.isBroken = false;
  attrs.displayBrokenUI = false;
  attrs.isAllowlisted = false;
  attrs.isDenylisted = false;
  attrs.httpsState = 'none';
  attrs.httpsStatusText = '';
  attrs.trackersCount = 0; // unique trackers count

  attrs.majorTrackerNetworksCount = 0;
  attrs.totalTrackerNetworksCount = 0;
  attrs.trackerNetworks = [];
  attrs.isaMajorTrackingNetwork = false;
  attrs.emailProtectionUserData = null;
  attrs.acceptingUpdates = true;
  Parent.call(this, attrs);
  this.bindEvents([[this.store.subscribe, 'action:backgroundMessage', this.handleBackgroundMsg]]);
}
/**
 * @typedef PublicSiteModel
 * @property {boolean} protectionsEnabled
 * @property {string} httpsState
 * @property {string} httpsStatusText
 * @property {boolean} isBroken
 * @property {boolean} isAllowlisted
 * @property {boolean} isDenylisted
 * @property {boolean} displayBrokenUI
 * @property {boolean} isaMajorTrackingNetwork
 * @property {boolean} disabled
 * @property {any[] | null} permissions
 * @property {import('../../browser/utils/request-details').TabData} tab
 */


Site.prototype = window.$.extend({}, Parent.prototype, {
  modelName: 'site',

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  getBackgroundTabData: function getBackgroundTabData() {
    var _this = this;

    return new Promise(function (resolve) {
      browserUIWrapper.getBackgroundTabData().then(function (_ref) {
        var tab = _ref.tab,
            emailProtectionUserData = _ref.emailProtectionUserData;

        if (tab) {
          var _tab$parentEntity;

          if (tab.locale) {
            if (Object.keys(i18n.options.resources).includes(tab.locale)) {
              i18n.changeLanguage(tab.locale);
            } else {
              console.warn("Unsupported locale ".concat(tab.locale));
            }
          }

          _this.set('tab', tab);

          _this.domain = tab.domain;

          _this.set('isaMajorTrackingNetwork', (((_tab$parentEntity = tab.parentEntity) === null || _tab$parentEntity === void 0 ? void 0 : _tab$parentEntity.prevalence) || 0) >= MAJOR_TRACKER_THRESHOLD_PCT);
        } else {
          _this.domain = 'new tab';
          console.debug('Site model: no tab');
        }

        _this.emailProtectionUserData = emailProtectionUserData;

        _this.update();

        resolve(null);
      })["catch"](function (e) {
        console.log('❌ [models/site.es6.js] --> ', e);
      });
    });
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  setSiteProperties: function setSiteProperties() {
    if (!this.tab) {
      this.domain = 'new tab'; // tab can be null for firefox new tabs
    } else {
      this.initAllowlisted(this.tab.protections.allowlisted, this.tab.protections.denylisted);

      if (this.tab.specialDomainName) {
        this.domain = this.tab.specialDomainName; // eg "extensions", "options", "new tab"
      } else {
        this.set({
          disabled: false
        });
      }
    }

    if (this.domain && this.domain === '-') this.set('disabled', true);
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  setHttpsMessage: function setHttpsMessage() {
    if (!this.tab) return;

    if (this.tab.upgradedHttps) {
      this.httpsState = 'upgraded';
    } else if (/^https/.exec(this.tab.url)) {
      this.httpsState = 'secure';
    } else {
      this.httpsState = 'none';
    }

    this.httpsStatusText = i18n.t(httpsMessages[this.httpsState]);
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  handleBackgroundMsg: function handleBackgroundMsg(message) {
    var _this2 = this;

    if (!this.tab) return;

    if (message.action && message.action === 'updateTabData') {
      browserUIWrapper.getBackgroundTabData().then(function (_ref2) {
        var tab = _ref2.tab,
            emailProtectionUserData = _ref2.emailProtectionUserData;
        _this2.tab = tab;
        _this2.emailProtectionUserData = emailProtectionUserData;

        _this2.update();
      })["catch"](function (e) {
        console.log('❌ [models/site.es6.js:handleBackgroundMsg()] --> ', e);
      });
    }
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  updatePermission: function updatePermission(id, value) {
    if (!this.permissions) return;
    var permissionIndex = this.permissions.findIndex(function (_ref3) {
      var key = _ref3.key;
      return key === id;
    });
    if (permissionIndex === -1) return; // Deep copy permissions before mutating

    var updatedPermissions = JSON.parse(JSON.stringify(this.permissions));
    updatedPermissions[permissionIndex].permission = value;
    this.set('permissions', updatedPermissions);
    this.fetch({
      updatePermission: {
        id: id,
        value: value
      }
    });
  },
  // calls `this.set()` to trigger view re-rendering

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  update: function update(ops) {
    if (!this.acceptingUpdates) return;
    this.setSiteProperties();
    this.setHttpsMessage();

    if (this.tab) {
      this.set('permissions', this.tab.permissions);
      var newTrackersCount = this.getUniqueTrackersCount();

      if (newTrackersCount !== this.trackersCount) {
        this.set('trackersCount', newTrackersCount);
      }

      var newTrackersBlockedCount = this.getUniqueTrackersBlockedCount();

      if (newTrackersBlockedCount !== this.trackersBlockedCount) {
        this.set('trackersBlockedCount', newTrackersBlockedCount);
      }

      var newTrackerNetworks = this.getTrackerNetworksOnPage();

      if (this.trackerNetworks.length === 0 || newTrackerNetworks.length !== this.trackerNetworks.length) {
        this.set('trackerNetworks', newTrackerNetworks);
      }

      var newUnknownTrackersCount = this.getUnknownTrackersCount();
      var newTotalTrackerNetworksCount = newUnknownTrackersCount + newTrackerNetworks.length;

      if (newTotalTrackerNetworksCount !== this.totalTrackerNetworksCount) {
        this.set('totalTrackerNetworksCount', newTotalTrackerNetworksCount);
      }

      var newMajorTrackerNetworksCount = this.getMajorTrackerNetworksCount();

      if (newMajorTrackerNetworksCount !== this.majorTrackerNetworksCount) {
        this.set('majorTrackerNetworksCount', newMajorTrackerNetworksCount);
      }
    }
  },

  /**
   * @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>}
   * @returns {number}
   */
  getUniqueTrackersCount: function getUniqueTrackersCount() {
    return 0;
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  getUniqueTrackersBlockedCount: function getUniqueTrackersBlockedCount() {
    return 0;
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  getUnknownTrackersCount: function getUnknownTrackersCount() {
    var count = 0;
    var entities = this.tab.requestDetails.all.entities;

    for (var _i = 0, _Object$values = Object.values(entities); _i < _Object$values.length; _i++) {
      var entity = _Object$values[_i];
      if (entity.name === 'unknown') count += Object.keys(entity.urls).length;
    }

    return count;
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  getMajorTrackerNetworksCount: function getMajorTrackerNetworksCount() {
    // Show only blocked major trackers count, unless site is allowlisted
    var total = 0;
    this.tab.requestDetails.forEachEntity(function (entity) {
      var isMajor = entity.prevalence > MAJOR_TRACKER_THRESHOLD_PCT;
      total += isMajor ? 1 : 0;
    });
    return total;
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  getTrackerNetworksOnPage: function getTrackerNetworksOnPage() {
    var requests = this.tab.requestDetails;
    var names = [];
    requests.forEachEntity(function (en) {
      if (en.name !== 'unknown') {
        names.push(en.name);
      }
    });
    return names;
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  initAllowlisted: function initAllowlisted(allowListValue, denyListValue) {
    var _this$tab$protections;

    this.isAllowlisted = allowListValue;
    this.isDenylisted = denyListValue;
    this.isBroken = Boolean(this.tab.protections.unprotectedTemporary || !((_this$tab$protections = this.tab.protections.enabledFeatures) !== null && _this$tab$protections !== void 0 && _this$tab$protections.includes('contentBlocking')));
    this.displayBrokenUI = this.isBroken;

    if (denyListValue) {
      this.displayBrokenUI = false;
      this.protectionsEnabled = true;
    } else {
      this.displayBrokenUI = this.isBroken;
      this.protectionsEnabled = !(this.isAllowlisted || this.isBroken);
    }

    this.set('protectionsEnabled', this.protectionsEnabled);
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  toggleAllowlist: function toggleAllowlist() {
    var _this3 = this;

    var fetches = [];

    if (this.tab && this.tab.domain) {
      if (this.isBroken) {
        // this.initAllowlisted(this.isAllowlisted, !this.isDenylisted)
        fetches.push(this.setList('denylisted', this.tab.domain, !this.isDenylisted));
      } else {
        // Explicitly remove all denylisting if the site is isn't broken. This covers the case when the site has been removed from the list.
        fetches.push(this.setList('denylisted', this.tab.domain, false)); // this.initAllowlisted(!this.isAllowlisted)

        fetches.push(this.setList('allowlisted', this.tab.domain, !this.isAllowlisted));
      }
    }

    if (fetches.length > 0) {
      this.tab.isPendingUpdates = true; // force a re-render without fetching new data

      this.set('disabled', false);
    }

    Promise.all(fetches).then(function () {
      if (_this3.tab.id) {
        return _this3.fetch({
          postToggleAllowlist: {
            id: _this3.tab.id
          }
        });
      }
    })["catch"](function (e) {
      return console.error(e);
    });
  },
  setList: function setList(list, domain, value) {
    return this.fetch({
      setList: {
        list: list,
        domain: domain,
        value: value
      }
    });
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  companyNames: function companyNames() {
    return [];
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  checkBrokenSiteReportHandled: function checkBrokenSiteReportHandled() {
    try {
      return this.fetch({
        checkBrokenSiteReportHandled: true
      });
    } catch (e) {
      return false;
    }
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  submitBreakageForm: function submitBreakageForm(category, description) {
    if (!this.tab) return;
    this.fetch({
      submitBrokenSiteReport: {
        category: category,
        description: description
      }
    });
  },

  /** @this {{tab: import('../../browser/utils/request-details').TabData} & Record<string, any>} */
  close: function close() {
    this.fetch({
      closePrivacyDashboard: true
    });
  }
});
module.exports = Site;

},{"../../../data/constants":58,"../../browser/communication.es6.js":61}],81:[function(require,module,exports){
"use strict";

// @ts-nocheck
var Parent = window.DDG.base.Page;

var SiteView = require('./../views/site.es6.js');

var SiteModel = require('./../models/site.es6.js');

var BackgroundMessageModel = require('./../models/background-message.es6.js');

var siteTemplate = require('./../templates/site.es6.js');

function Trackers(ops) {
  this.$parent = window.$('#popup-container');
  Parent.call(this, ops);
}

Trackers.prototype = window.$.extend({}, Parent.prototype, {
  pageName: 'popup',
  ready: function ready() {
    Parent.prototype.ready.call(this);
    this.message = new BackgroundMessageModel();
    this.views.site = new SiteView({
      pageView: this,
      model: new SiteModel(),
      appendTo: window.$('#site-info-container'),
      template: siteTemplate
    });
  }
}); // kickoff!

window.DDG = window.DDG || {};
window.DDG.page = new Trackers();

},{"./../models/background-message.es6.js":74,"./../models/site.es6.js":80,"./../templates/site.es6.js":96,"./../views/site.es6.js":102}],82:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var hero = require('./shared/hero.es6.js');

var i18n = window.DDG.base.i18n;

function categories() {
  return [{
    category: i18n.t('report:videos.title'),
    value: 'videos'
  }, {
    category: i18n.t('report:images.title'),
    value: 'images'
  }, {
    category: i18n.t('report:comments.title'),
    value: 'comments'
  }, {
    category: i18n.t('report:content.title'),
    value: 'content'
  }, {
    category: i18n.t('report:links.title'),
    value: 'links'
  }, {
    category: i18n.t('report:login.title'),
    value: 'login'
  }, {
    category: i18n.t('report:paywall.title'),
    value: 'paywall'
  }];
}

function shuffle(arr) {
  var len = arr.length;
  var temp;
  var index;

  while (len > 0) {
    index = Math.floor(Math.random() * len);
    len--;
    temp = arr[len];
    arr[len] = arr[index];
    arr[index] = temp;
  }

  return arr;
}

function renderHero() {
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), hero({
    status: 'breakage-form',
    className: 'js-breakage-form-close'
  }));
}

module.exports = function () {
  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<section class=\"sliding-subview\">\n        <div class=\"breakage-form js-breakage-form card\">\n        ", "\n        <div class=\"breakage-form__content padded\">\n            <div class=\"breakage-form__element js-breakage-form-element\">\n                <div class=\"breakage-form__explanation token-extension-title-3\">\n                    ", "\n                </div>\n                <div class=\"form__group\">\n                    <div class=\"form__select breakage-form__input--dropdown\">\n                        <select class=\"js-breakage-form-dropdown\">\n                            <option value=''>", "</option>\n                            ", "\n                            <option value='Other'>", "</option>\n                        </select>\n                    </div>\n                    <textarea class=\"form__textarea js-breakage-form-description\" placeholder=\"", "\"></textarea>\n                    <button class=\"form__submit token-mac-label-em js-breakage-form-submit\" role=\"button\">", "</button>\n                </div>\n                <div class=\"breakage-form__footer token-mac-body\">\n                    ", "\n                </div>\n            </div>\n            <div class=\"breakage-form__message js-breakage-form-message is-transparent\">\n                <h2 class=\"breakage-form__success--title\">", "</h2>\n                <div class=\"breakage-form__success--message\">", "</div>\n            </div>\n        </div>\n    </div>\n    </section>"])), renderHero(), i18n.t('report:selectTheOptionDesc.title'), i18n.t('report:pickYourIssueFromTheList.title'), shuffle(categories()).map(function (item) {
    return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["<option value=", ">", "</option>"])), item.value, item.category);
  }), i18n.t('report:other.title'), i18n.t('report:tellUsMoreDesc.title'), i18n.t('report:sendReport.title'), i18n.t('report:reportsAreAnonymousDesc.title'), i18n.t('report:thankYou.title'), i18n.t('report:yourReportWillHelpDesc.title'));
};

},{"./shared/hero.es6.js":89,"bel":31}],83:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var raw = require('bel/raw');

var i18n = window.DDG.base.i18n;
var ctas = {
  spread: {
    title: i18n.t('ctascreens:spreadTitle.title'),
    text: i18n.t('ctascreens:spreadText.title'),
    icon: heartArrowSvg,
    action: function action() {
      return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["<a href=\"https://duckduckgo.com/spread\" target=\"_blank\" class=\"cta__button\">", "</a>"])), i18n.t('ctascreens:spreadButton.title'));
    }
  },
  email: {
    title: i18n.t('ctascreens:emailTitle.title'),
    text: i18n.t('ctascreens:emailText.title'),
    icon: emailSvg,
    action: function action() {
      return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<a href=\"https://duckduckgo.com/email\" target=\"_blank\" class=\"cta__button\">", "</a>"])), i18n.t('ctascreens:spreadButton.title'));
    }
  }
};
/** @this {any} */

function ctaRotationView() {
  var cta = ctas[this.model.currentCta];

  if (!cta) {
    console.warn('unreachable - selected CTA not available ' + this.model.currentCta);
    return '';
  }

  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    <div class=\"cta-screen\" data-test-id=\"cta-screens\">\n        <p class=\"note token-extension-title-3 text--center\">", "</p>\n        <div class=\"cta text--center\">\n            <div class=\"cta__icon\">", "</div>\n            <h1 class=\"cta__title\">", "</h1>\n            <h2 class=\"cta__text\">", "</h2>\n            <div class=\"cta__action\">", "</div>\n        </div>  \n    </div>\n    "])), i18n.t('ctascreens:protectionsUnavailableNote.title'), cta.icon(), cta.title, cta.text, cta.action());
}

function heartArrowSvg() {
  return raw(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M78.5138 21L71.5098 28.003V34.003L78.5138 27V21Z\" fill=\"#C0C0C0\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M78.505 27.0034L71.51 33.9614H77.51L84.505 27.0034H78.505Z\" fill=\"#C0C0C0\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M66.339 42.0032L63.51 39.1742L76.684 26.0012L79.512 28.8302L66.339 42.0032Z\" fill=\"#C0C0C0\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M64.755 32.1171C58.769 31.3911 53.4 34.2001 50.505 38.6781C47.61 34.2001 42.241 31.3911 36.255 32.1171C29.715 32.9091 24.444 38.0531 23.619 44.4181C23.577 44.7471 23.546 45.0751 23.526 45.4001C23.293 49.2851 24.979 53.0491 27.799 55.8071L50.505 78.0031L73.211 55.8071C76.031 53.0491 77.717 49.2851 77.484 45.4001C77.464 45.0751 77.433 44.7471 77.391 44.4181C76.566 38.0531 71.295 32.9091 64.755 32.1171Z\" fill=\"#DE5833\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M77.3909 44.4179C76.5659 38.0529 71.2949 32.9099 64.7549 32.1169C62.5109 31.8449 60.3539 32.0699 58.3809 32.6929C63.6639 34.3599 67.6819 38.9309 68.3929 44.4179C68.4359 44.7479 68.4669 45.0749 68.4869 45.3999C68.7189 49.2849 67.0349 53.0489 64.2129 55.8069L46.0059 73.6049L50.5049 78.0029L73.2109 55.8069C76.0319 53.0489 77.7169 49.2849 77.4839 45.3999C77.4639 45.0749 77.4329 44.7479 77.3909 44.4179Z\" fill=\"#BC4726\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M31.51 66.0034L27.51 78.0034L39.51 74.0034L31.51 66.0034Z\" fill=\"#C0C0C0\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M33.51 74.0034C32.998 74.0034 32.487 73.8084 32.096 73.4174C31.315 72.6364 31.315 71.3704 32.096 70.5894L44.096 58.5894C44.876 57.8084 46.144 57.8084 46.924 58.5894C47.705 59.3704 47.705 60.6364 46.924 61.4174L34.924 73.4174C34.534 73.8084 34.022 74.0034 33.51 74.0034Z\" fill=\"#C0C0C0\"/>\n<path d=\"M86.4922 44L90.5052 41\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path d=\"M88.5049 52.5H94.5099\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path d=\"M14.5176 44L10.5046 41\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path d=\"M12.505 52.5H6.5\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path d=\"M86.4922 61.5L90.5052 64.5\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path d=\"M14.5176 61.5L10.5046 64.5\" stroke=\"#AAAAAA\" stroke-opacity=\"0.6\" stroke-width=\"3\" stroke-linecap=\"round\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M27.9544 15.0818C26.3303 14.4357 24.6178 14.8261 23.4753 15.8672C22.995 14.398 21.6978 13.2137 19.9664 12.9746C18.0748 12.7131 16.2171 13.7652 15.5153 15.4882C15.4792 15.5773 15.4462 15.6669 15.4166 15.7565C15.0641 16.8282 15.2583 18.0079 15.8448 18.9894L20.5677 26.8894L28.5729 22.3469C29.5672 21.7824 30.318 20.8521 30.54 19.7459C30.5584 19.6534 30.574 19.5591 30.5865 19.4638C30.8259 17.6188 29.7289 15.7873 27.9544 15.0818Z\" fill=\"#E2E2E2\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M77.945 75.9298C76.9297 76.1112 76.1926 76.8398 75.9437 77.7173C75.2457 77.1301 74.2269 76.94 73.2844 77.3588C72.2546 77.8163 71.6506 78.9218 71.8348 80.004C71.8444 80.0599 71.8558 80.1151 71.8688 80.1693C72.0255 80.8163 72.49 81.3473 73.0894 81.6569L77.9155 84.1482L80.5157 79.3799C80.8385 78.7875 80.9255 78.0875 80.6926 77.4638C80.673 77.4117 80.6515 77.3596 80.6282 77.3079C80.1741 76.3084 79.0542 75.7314 77.945 75.9298Z\" fill=\"#E2E2E2\"/>\n</svg>\n\n"])));
}

function emailSvg() {
  return raw(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["<svg width=\"76\" height=\"78\" viewBox=\"0 0 76 78\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0_273_32068)\">\n<path d=\"M55.0125 26.7115C55.3701 26.3897 55.6204 25.9249 55.6204 25.3886V0.71875L41.4263 16.2L55.0125 26.7115Z\" fill=\"#F9BE1A\"/>\n<path d=\"M14.147 0.71875V25.3886C14.147 25.9249 14.3972 26.3897 14.7548 26.7115L28.3411 16.2L14.147 0.71875Z\" fill=\"#F9BE1A\"/>\n<path d=\"M40.9621 16.7361C40.2828 17.487 39.3175 17.8803 38.3164 17.8803H31.4517C30.4506 17.8803 29.4853 17.4512 28.806 16.7361L28.3412 16.2356L14.7549 26.7471C15.0767 27.0331 15.47 27.2119 15.9347 27.2119H53.8333C54.2981 27.2119 54.6914 27.0331 55.0132 26.7471L41.4269 16.2356L40.9621 16.7361Z\" fill=\"#F9BE1A\"/>\n<path d=\"M55.6209 0.71875L41.4268 16.2L40.962 16.7363C40.2827 17.4871 39.3174 17.8804 38.3163 17.8804H31.4516C30.4505 17.8804 29.4852 17.4513 28.8059 16.7363L28.3411 16.2357L14.147 0.71875H55.6209Z\" fill=\"#F9BE1A\"/>\n</g>\n<g clip-path=\"url(#clip1_273_32068)\">\n<path d=\"M60.3304 38.5762C60.7824 38.1695 61.0987 37.5819 61.0987 36.9039V5.71753L43.1553 25.2881L60.3304 38.5762Z\" fill=\"#FFCC33\"/>\n<path d=\"M8.66943 5.71753V36.9039C8.66943 37.5819 8.98582 38.1695 9.43779 38.5762L26.6129 25.2881L8.66943 5.71753Z\" fill=\"#FFCC33\"/>\n<path d=\"M42.5679 25.966C41.7091 26.9152 40.4888 27.4123 39.2233 27.4123H30.5453C29.2798 27.4123 28.0594 26.87 27.2007 25.966L26.6131 25.3333L9.43799 38.6214C9.84477 38.983 10.3419 39.2089 10.9295 39.2089H58.839C59.4266 39.2089 59.9238 38.983 60.3306 38.6214L43.1555 25.3333L42.5679 25.966Z\" fill=\"#FFCC33\"/>\n<path d=\"M61.0987 5.71753L43.1553 25.2881L42.5677 25.9661C41.7089 26.9152 40.4886 27.4124 39.2231 27.4124H30.5451C29.2796 27.4124 28.0592 26.87 27.2005 25.9661L26.6129 25.3333L8.66943 5.71753H61.0987Z\" fill=\"#FFCC33\"/>\n</g>\n<g clip-path=\"url(#clip2_273_32068)\">\n<path d=\"M63.5124 47.6839C64.0209 47.2263 64.3769 46.5652 64.3769 45.8025V10.7161L44.1895 32.7341L63.5124 47.6839Z\" fill=\"#FDD20A\"/>\n<path d=\"M5.39062 10.7161V45.8025C5.39062 46.5652 5.74657 47.2263 6.25507 47.6839L25.578 32.7341L5.39062 10.7161Z\" fill=\"#FDD20A\"/>\n<path d=\"M43.5283 33.4968C42.5622 34.5647 41.1892 35.124 39.7654 35.124H30.0023C28.5785 35.124 27.2055 34.5138 26.2394 33.4968L25.5783 32.7849L6.25537 47.7348C6.71302 48.1416 7.27237 48.3958 7.93342 48.3958H61.8343C62.4954 48.3958 63.0547 48.1416 63.5124 47.7348L44.1894 32.7849L43.5283 33.4968Z\" fill=\"#F5B608\"/>\n<path d=\"M64.3765 10.7161L44.1891 32.7341L43.528 33.4968C42.5619 34.5647 41.189 35.124 39.7652 35.124H30.002C28.5782 35.124 27.2052 34.5138 26.2391 33.4968L25.578 32.7849L5.39062 10.7161H64.3765Z\" fill=\"#FFDE7A\"/>\n</g>\n<rect x=\"13.0835\" y=\"47.7449\" width=\"43.9126\" height=\"4.87918\" fill=\"#8CABFF\"/>\n<path d=\"M59.4354 37.9863L52.1166 52.6239H17.9624L10.6436 37.9863H0.885254V64.8218C0.885254 67.5165 3.06974 69.701 5.76443 69.701H64.3145C67.0092 69.701 69.1937 67.5165 69.1937 64.8218V37.9863H59.4354Z\" fill=\"#668BFF\"/>\n<path d=\"M10.6436 37.9864H5.76443V23.3489H3.32484C1.97749 23.3489 0.885254 24.4411 0.885254 25.7885V40.426C0.885254 41.7733 1.97749 42.8656 3.32484 42.8656H13.0832L10.6436 37.9864Z\" fill=\"#8CABFF\"/>\n<path d=\"M59.4357 37.9864H64.3149V23.3489H66.7544C68.1018 23.3489 69.194 24.4411 69.194 25.7885V40.426C69.194 41.7733 68.1018 42.8656 66.7544 42.8656H56.9961L59.4357 37.9864Z\" fill=\"#8CABFF\"/>\n<path d=\"M59.1032 54.5231C60.7374 51.5626 64.9926 51.5626 66.6268 54.5231L74.8089 69.3457C76.3897 72.2095 74.3182 75.7191 71.047 75.7191H54.6829C51.4118 75.7191 49.3403 72.2095 50.9211 69.3457L59.1032 54.5231Z\" fill=\"#FDD20A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M62.1235 58.5312C61.6767 58.5312 61.3209 58.9053 61.3433 59.3515L61.6558 65.6015C61.6765 66.0173 62.0197 66.3438 62.436 66.3438H63.2935C63.7098 66.3438 64.0529 66.0173 64.0737 65.6015L64.3862 59.3515C64.4085 58.9053 64.0528 58.5312 63.606 58.5312H62.1235ZM62.8647 71.0312C63.7277 71.0312 64.4272 70.3317 64.4272 69.4688C64.4272 68.6058 63.7277 67.9062 62.8647 67.9062C62.0018 67.9062 61.3022 68.6058 61.3022 69.4688C61.3022 70.3317 62.0018 71.0312 62.8647 71.0312Z\" fill=\"black\" fill-opacity=\"0.8\"/>\n<defs>\n<clipPath id=\"clip0_273_32068\">\n<rect x=\"14.147\" y=\"0.71875\" width=\"41.4739\" height=\"26.4932\" rx=\"2.99924\" fill=\"white\"/>\n</clipPath>\n<clipPath id=\"clip1_273_32068\">\n<rect x=\"8.66943\" y=\"5.71753\" width=\"52.4293\" height=\"33.4915\" rx=\"2.99924\" fill=\"white\"/>\n</clipPath>\n<clipPath id=\"clip2_273_32068\">\n<rect x=\"5.39062\" y=\"10.7161\" width=\"58.9859\" height=\"37.6798\" rx=\"2.99924\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>\n"])));
}

module.exports = ctaRotationView;
module.exports.ctas = ctas;

},{"bel":31,"bel/raw":32}],84:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var i18n = window.DDG.base.i18n;
/**
 * @this {any}
 * @returns {null}
 */

function emailProtectionTemplate() {
  var _this = this;

  var state = this.model.state;

  if (state === 'unknown') {
    return null;
  }

  var text = state === 'idle' ? i18n.t('site:createNewDuckAddress.title') : i18n.t('site:createNewDuckAddressCopied.title');
  var icon = state === 'idle' ? wandIcon() : checkMarkIcon();
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        <div class=\"js-email-alias email-alias token-extension-body-em\">\n            <button class=\"email-alias__button\"\n                    type=\"button\"\n                    data-state=", "\n                    data-test-id=\"email-alias-button\"\n                    disabled=", "\n                    onclick=", ">\n                ", "\n                <span class=\"email-alias__text\">", "</span>\n            </button>\n        </div>"])), state, state === 'added', function (e) {
    return _this.copyAlias(e);
  }, icon, text);
}

module.exports = emailProtectionTemplate;

function wandIcon() {
  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n        <path d=\"M10.4998 0.75C10.4998 0.335786 10.164 0 9.74976 0C9.33554 0 8.99976 0.335786 8.99976 0.75V3.25C8.99976 3.66421 9.33554 4 9.74976 4C10.164 4 10.4998 3.66421 10.4998 3.25V0.75Z\"/>\n        <path d=\"M10.4998 9.75C10.4998 9.33579 10.164 9 9.74976 9C9.33554 9 8.99976 9.33579 8.99976 9.75V12.25C8.99976 12.6642 9.33554 13 9.74976 13C10.164 13 10.4998 12.6642 10.4998 12.25V9.75Z\"/>\n        <path d=\"M15.9998 6.25C15.9998 6.66421 15.664 7 15.2498 7H12.7498C12.3355 7 11.9998 6.66421 11.9998 6.25C11.9998 5.83579 12.3355 5.5 12.7498 5.5H15.2498C15.664 5.5 15.9998 5.83579 15.9998 6.25Z\"/>\n        <path d=\"M6.24976 7C6.66397 7 6.99976 6.66421 6.99976 6.25C6.99976 5.83579 6.66397 5.5 6.24976 5.5H3.74976C3.33554 5.5 2.99976 5.83579 2.99976 6.25C2.99976 6.66421 3.33554 7 3.74976 7H6.24976Z\"/>\n        <path d=\"M14.2801 10.7803C13.9872 11.0732 13.5123 11.0732 13.2194 10.7803L11.4694 9.03033C11.1765 8.73744 11.1765 8.26256 11.4694 7.96967C11.7623 7.67678 12.2372 7.67678 12.5301 7.96967L14.2801 9.71967C14.573 10.0126 14.573 10.4874 14.2801 10.7803Z\"/>\n        <path d=\"M6.71942 4.28033C7.01231 4.57322 7.48719 4.57322 7.78008 4.28033C8.07297 3.98744 8.07297 3.51256 7.78008 3.21967L6.03008 1.46967C5.73719 1.17678 5.26231 1.17678 4.96942 1.46967C4.67653 1.76256 4.67653 2.23744 4.96942 2.53033L6.71942 4.28033Z\"/>\n        <path d=\"M11.4694 4.53032C11.1765 4.23743 11.1765 3.76256 11.4694 3.46966L13.2194 1.71966C13.5123 1.42677 13.9872 1.42677 14.2801 1.71966C14.573 2.01256 14.573 2.48743 14.2801 2.78032L12.5301 4.53032C12.2372 4.82322 11.7623 4.82322 11.4694 4.53032Z\"/>\n        <path d=\"M2.28296 12.658L9.24784 5.69307C9.54074 5.40018 10.0156 5.40018 10.3085 5.69307V5.69307C10.6014 5.98597 10.6014 6.46084 10.3085 6.75373L3.34362 13.7186L2.28296 12.658Z\"/>\n        <path d=\"M0.243221 15.7588C-0.0496725 15.466 -0.0496726 14.9911 0.243221 14.6982L1.75195 13.1895L2.81261 14.2501L1.30388 15.7588C1.01099 16.0517 0.536114 16.0517 0.243221 15.7588V15.7588Z\"/>\n    </svg>"])));
}

function checkMarkIcon() {
  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n        <path d=\"M11.809 6.2501C12.0851 5.94141 12.0588 5.46727 11.7501 5.19108C11.4414 4.91488 10.9673 4.94122 10.6911 5.24991L7.0255 9.34675L5.33049 7.27508C5.06819 6.9545 4.59568 6.90724 4.27509 7.16954C3.95451 7.43183 3.90726 7.90435 4.16955 8.22494L6.41955 10.9749C6.55833 11.1446 6.76436 11.245 6.98346 11.2498C7.20256 11.2547 7.41282 11.1634 7.55895 11.0001L11.809 6.2501Z\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0ZM1.5 8C1.5 4.41015 4.41015 1.5 8 1.5C11.5899 1.5 14.5 4.41015 14.5 8C14.5 11.5899 11.5899 14.5 8 14.5C4.41015 14.5 1.5 11.5899 1.5 8Z\" />\n    </svg>"])));
}

},{"bel":31}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonTrackersTemplate = nonTrackersTemplate;

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var hero = require('./shared/hero.es6.js');

var _require = require('./tracker-networks.es6'),
    renderSections = _require.renderSections;

var _require2 = require('./shared/thirdparty-text.es6'),
    thirdpartySummary = _require2.thirdpartySummary,
    thirdpartyHeroIcon = _require2.thirdpartyHeroIcon,
    thirdpartyText = _require2.thirdpartyText;

var _require3 = require('./shared/about-link'),
    aboutLink = _require3.aboutLink,
    adAttributionLink = _require3.adAttributionLink;

var _require4 = require('../base/localize.es6.js'),
    ns = _require4.ns;

var _require5 = require('../../browser/utils/request-details'),
    states = _require5.states;

var _require6 = require('./shared/platform-limitations'),
    platformLimitations = _require6.platformLimitations;
/** @this {{ model: { site: import('../models/site.es6.js').PublicSiteModel }}} */


function nonTrackersTemplate() {
  if (!this.model) {
    return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["<section class=\"sliding-subview\"></section>"])));
  }

  var summary = thirdpartySummary(this.model.site.tab.requestDetails, this.model.site.protectionsEnabled);
  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<div class=\"tracker-networks site-info card\" data-test-id=\"non-tracker-list-view\">\n        <div class=\"js-tracker-networks-hero\">\n            ", "\n        </div>\n        <div class=\"tracker-networks__explainer text--center\">\n            <p data-test-id=\"thirdPartySubView.summary\" class=\"token-extension-title-3\">", "</p>\n            <p>", "</p>\n        </div>\n        <div class=\"tracker-networks__details padded-sides js-tracker-networks-details\">\n            ", "\n        </div>\n        ", "\n    </div>"])), renderHero(this.model.site), summary, aboutLink(), renderNonTrackerDetails(this.model.site), this.model.site.tab.platformLimitations ? platformLimitations() : null);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 */


function renderHero(site) {
  var _thirdpartyText = thirdpartyText(site.tab.requestDetails, site.protectionsEnabled),
      title = _thirdpartyText.title;

  var icon = thirdpartyHeroIcon(site.tab.requestDetails, site.protectionsEnabled);
  console.log('icon', icon);
  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["", ""])), hero({
    status: icon,
    title: title,
    showClose: true
  }));
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 */


function renderNonTrackerDetails(site) {
  var requestDetails = site.tab.requestDetails;
  var onlyAllowedNonTrackers = requestDetails.matches(site.protectionsEnabled, [states.protectionsOn_allowedNonTrackers, states.protectionsOff_allowedNonTrackers, states.protectionsOn_blocked_allowedNonTrackers]); // when protections are protectionsOff, we just show every request

  if (!site.protectionsEnabled) {
    return renderSections([{
      name: 'protectionsDisabled',
      heading: function heading() {
        return null;
      },
      companies: requestDetails.all.sortedByPrevalence(),
      bordered: true
    }]);
  } // when protections are ON, render all sections


  return renderSections([{
    name: 'adAttribution',
    heading: function heading() {
      return bel(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n                <div>\n                    <p>", "</p>\n                    <p class=\"padded--top-half\">", "</p>\n                </div>\n                "])), ns.site('sectionHeadingAdAttribution.title', {
        domain: site.tab.domain
      }), adAttributionLink());
    },
    companies: requestDetails.allowed.adClickAttribution.sortedByPrevalence()
  }, {
    name: 'ignored (rule exceptions)',
    heading: function heading() {
      return ns.site('sectionHeadingIgnore.title');
    },
    companies: requestDetails.allowed.ruleException.sortedByPrevalence()
  }, {
    name: 'firstParty',
    heading: function heading() {
      return ns.site('sectionHeadingFirstParty.title', {
        domain: site.tab.domain
      });
    },
    companies: requestDetails.allowed.ownedByFirstParty.sortedByPrevalence()
  }, {
    name: 'thirdParty',
    heading: function heading() {
      // don't display the header if the only allowed requests are non-trackers
      if (onlyAllowedNonTrackers) {
        return null;
      }

      return ns.site('sectionHeadingThirdParty.title');
    },
    companies: requestDetails.allowed.otherThirdPartyRequest.sortedByPrevalence(),
    bordered: onlyAllowedNonTrackers
  }]);
}

},{"../../browser/utils/request-details":62,"../base/localize.es6.js":65,"./shared/about-link":88,"./shared/hero.es6.js":89,"./shared/platform-limitations":90,"./shared/thirdparty-text.es6":92,"./tracker-networks.es6":97,"bel":31}],86:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var hero = require('./shared/hero.es6.js');

var _require = require('./shared/about-link.js'),
    aboutLink = _require.aboutLink;

var i18n = window.DDG.base.i18n;
/**
 * @this {{
 *  model: {
 *      tab: import("../../browser/utils/request-details.js").TabData,
 *      site: import('../models/site.es6.js').PublicSiteModel
 *   }
 * }}
 */

module.exports = function () {
  if (!this.model) {
    return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["<section class=\"sliding-subview\"></section>"])));
  }

  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<div class=\"tracker-networks site-info card\">\n        <div class=\"js-tracker-networks-hero\">\n            ", "\n        </div>\n        <div class=\"tracker-networks__explainer text--center\">\n            <p class=\"token-extension-title-3\">", "</p>\n            <p>\n                ", "\n            </p>\n        </div>\n        ", "\n    </div>"])), renderHero(this.model.site), renderConnectionDescription(this.model.site), aboutLink(), renderCertificateDetails(this.model.site, this.model.tab));
};

function getKeyUsage(key) {
  var capabilities = {
    canEncrypt: i18n.t('connection:encrypt.title'),
    canDecrypt: i18n.t('connection:decrypt.title'),
    canSign: i18n.t('connection:sign.title'),
    canVerify: i18n.t('connection:verify.title'),
    canDerive: i18n.t('connection:derive.title'),
    canWrap: i18n.t('connection:wrap.title'),
    canUnwrap: i18n.t('connection:unwrap.title')
  };
  return Object.keys(capabilities).reduce(function (usage, capability) {
    if (!key[capability]) return usage;
    return [].concat(usage, capabilities[capability]);
  }, []);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 * @param {import("../../browser/utils/request-details.js").TabData} tab
 */


function renderCertificateDetails(site, tab) {
  if (site.httpsState === 'none' || !tab.certificate || tab.certificate.length === 0) return '';
  var certificate = tab.certificate[0];
  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        <div>\n            <div class=\"padded-sides\">\n                ", "\n            </div>\n            <div class=\"page-connection__certificate\">\n                <div class=\"page-connection__certificate-details\">\n                    <h3 class=\"token-extension-body-em\">", "</h3>\n                    <div>\n                        <span>", "</span>\n                        <span class=\"page-connection__certificate-value\">", "</span>\n                    </div>\n                    ", "\n                </div>\n                ", "\n            </div>\n        </div>\n    "])), renderHeader(site, tab), i18n.t('connection:certificateDetail.title'), i18n.t('connection:commonName.title'), certificate.commonName, renderCertificateSummary(certificate), renderPublicKeyDetails(certificate));
}

function renderCertificateSummary(certificate) {
  if (!certificate.summary) return '';
  return bel(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", "</span>\n            </div>"])), i18n.t('connection:summary.title'), certificate.summary);
}

function renderPublicKeyDetails(certificate) {
  if (!certificate.publicKey) return '';
  return bel(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["<div class=\"page-connection__certificate-details\">\n        <h3 class=\"token-extension-body-em\">", "</h3>\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n    </div>"])), i18n.t('connection:publicKey.title'), renderCertificateType(certificate.publicKey), renderCertificateBitSize(certificate.publicKey), renderCertificateEffectiveSize(certificate.publicKey), renderCertificateKeyUsage(certificate.publicKey), renderCertificateIsPermanent(certificate.publicKey));
}

function renderCertificateType(publicKey) {
  if (!publicKey.type) return '';
  return bel(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", "</span>\n            </div>"])), i18n.t('connection:algorithm.title'), publicKey.type);
}

function renderCertificateBitSize(publicKey) {
  if (!publicKey.bitSize) return '';
  return bel(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", " bits</span>\n            </div>"])), i18n.t('connection:keySize.title'), publicKey.bitSize);
}

function renderCertificateIsPermanent(publicKey) {
  if (typeof publicKey.isPermanent !== 'boolean') return '';
  return bel(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", "</span>\n            </div>"])), i18n.t('connection:permanent.title'), publicKey.isPermanent ? 'Yes' : 'No');
}

function renderCertificateKeyUsage(publicKey) {
  var keyUsage = getKeyUsage(publicKey);
  if (keyUsage.length === 0) return '';
  return bel(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", "</span>\n            </div>"])), i18n.t('connection:usage.title'), keyUsage.join(', '));
}

function renderCertificateEffectiveSize(publicKey) {
  if (!publicKey.effectiveSize) return '';
  return bel(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["<div>\n                <span>", "</span>\n                <span class=\"page-connection__certificate-value\">", " bits</span>\n            </div>"])), i18n.t('connection:effectiveSize.title'), publicKey.effectiveSize);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 * @param {import("../../browser/utils/request-details.js").TabData} tab
 */


function renderHeader(site, tab) {
  if (site.httpsState === 'none') {
    return bel(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["<div class=\"section-list-header certificate-header--not-found\">\n            ", "\n        </div>"])), i18n.t('connection:certificateNotFound.title'));
  }

  return bel(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["<div class=\"section-list-header\">\n        ", "\n    </div>"])), i18n.t('connection:certificateForDomain.title', {
    domain: tab.domain
  }));
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 */


function renderConnectionDescription(site) {
  if (site.httpsState === 'none') {
    return i18n.t('connection:insecureConnectionDesc.title');
  }

  if (site.httpsState === 'upgraded') {
    return i18n.t('connection:upgradedConnectionDesc.title');
  }

  return i18n.t('connection:secureConnectionDesc.title');
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 */


function renderHero(site) {
  return bel(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["", ""])), hero({
    status: "connection-".concat(site.httpsState)
  }));
}

},{"./shared/about-link.js":88,"./shared/hero.es6.js":89,"bel":31}],87:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var i18n = window.DDG.base.i18n;

module.exports = function () {
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    <div class=\"search token-mac-title-3\">\n        <form class=\"search-form js-search-form\" name=\"x\" data-test-id=\"search-form\">\n            <input type=\"text\" autocomplete=\"off\" autofocus placeholder=\"", "\"\n                name=\"q\" class=\"search-form__input js-search-input\"\n                value=\"\" />\n            <button class=\"search-form__go js-search-go\" type=\"submit\" aria-label=\"", "\">\n                ", "\n            </button>\n        </form>\n        <button type=\"button\" class=\"cog-button js-search-cog-button\" aria-label=\"", "\">\n        ", "\n        </button>\n    </div>\n    "])), i18n.t('site:searchPlaceholder.title'), i18n.t('site:searchGoButton.title'), loupeIcon(), i18n.t('site:optionsButton.title'), cogIcon());
};

function loupeIcon() {
  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect class=\"loupe-handle\" x=\"11.5\" y=\"12.9142\" width=\"2\" height=\"6\" rx=\"1\" transform=\"rotate(-45 11.5 12.9142)\" />\n    <path class=\"loupe-glass\" d=\"M12.6976 5.27292C14.7478 7.32317 14.7478 10.6473 12.6976 12.6975C10.6473 14.7478 7.32322 14.7478 5.27297 12.6975C3.22272 10.6473 3.22272 7.32317 5.27297 5.27292C7.32322 3.22267 10.6473 3.22267 12.6976 5.27292Z\"\n          stroke-width=\"1.5\"/>\n</svg>"])));
}

function cogIcon() {
  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path class=\"settings-cog\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.43351 13.1462C3.06364 14.0391 3.48767 15.0628 4.3806 15.4327L5.30448 15.8154C6.19741 16.1853 7.2211 15.7612 7.59096 14.8683L7.84778 14.2483C7.89842 14.2495 7.94918 14.2501 8.00007 14.2501C8.05068 14.2501 8.10118 14.2495 8.15154 14.2483L8.40831 14.8682C8.77818 15.7611 9.80187 16.1852 10.6948 15.8153L11.6187 15.4326C12.5116 15.0628 12.9356 14.0391 12.5658 13.1461L12.3093 12.527C12.3828 12.457 12.4546 12.3853 12.5247 12.3118L13.1437 12.5682C14.0366 12.9381 15.0603 12.514 15.4302 11.6211L15.8129 10.6972C16.1827 9.8043 15.7587 8.7806 14.8658 8.41074L14.2482 8.15493C14.2494 8.10345 14.2501 8.05185 14.2501 8.00011C14.2501 7.94964 14.2495 7.89928 14.2483 7.84905L14.8659 7.59324C15.7588 7.22337 16.1828 6.19968 15.8129 5.30675L15.4303 4.38287C15.0604 3.48994 14.0367 3.06592 13.1438 3.43578L12.5273 3.69115C12.4568 3.61712 12.3845 3.54482 12.3105 3.47432L12.5658 2.85787C12.9357 1.96494 12.5117 0.94124 11.6188 0.571378L10.6949 0.188694C9.80195 -0.181168 8.77825 0.242858 8.40839 1.13579L8.15316 1.75196C8.10226 1.75073 8.05122 1.75011 8.00007 1.75011C7.94864 1.75011 7.89734 1.75074 7.84616 1.75198L7.59089 1.13569C7.22102 0.242766 6.19733 -0.181263 5.3044 0.1886L4.38052 0.571284C3.4876 0.941146 3.06357 1.96484 3.43343 2.85777L3.68905 3.47488C3.61513 3.54532 3.54293 3.61755 3.47254 3.69151L2.85533 3.43585C1.9624 3.06599 0.938705 3.49002 0.568843 4.38295L0.186159 5.30683C-0.183704 6.19975 0.240324 7.22345 1.13325 7.59331L1.75185 7.84955C1.75067 7.89961 1.75007 7.9498 1.75007 8.00011C1.75007 8.05168 1.7507 8.10312 1.75194 8.15443L1.13335 8.41066C0.240417 8.78052 -0.18361 9.80422 0.186252 10.6971L0.568936 11.621C0.938798 12.514 1.96249 12.938 2.85542 12.5681L3.47512 12.3114C3.54507 12.3848 3.6168 12.4565 3.69022 12.5265L3.43351 13.1462ZM1.61161 6.43846C1.35648 6.33279 1.23533 6.0403 1.34101 5.78518L1.72369 4.8613C1.82937 4.60618 2.12185 4.48503 2.37697 4.5907L3.47809 5.0468C3.69752 5.13769 3.94855 5.05988 4.09713 4.87459C4.32641 4.58865 4.58647 4.32845 4.87227 4.099C5.05738 3.95039 5.13507 3.69948 5.04422 3.48016L4.58828 2.37941C4.4826 2.12429 4.60375 1.83181 4.85888 1.72613L5.78276 1.34345C6.03788 1.23777 6.33036 1.35893 6.43604 1.61405L6.89159 2.71385C6.98246 2.93322 7.21488 3.05571 7.45092 3.02993C7.63126 3.01022 7.81448 3.00011 8.00007 3.00011C8.18541 3.00011 8.3684 3.0102 8.54851 3.02985C8.78452 3.0556 9.01691 2.93311 9.10776 2.71377L9.56324 1.61414C9.66891 1.35902 9.9614 1.23787 10.2165 1.34354L11.1404 1.72623C11.3955 1.8319 11.5167 2.12439 11.411 2.37951L10.9553 3.47967C10.8644 3.69901 10.9422 3.94995 11.1273 4.09856C11.4132 4.32802 11.6734 4.58826 11.9027 4.87425C12.0513 5.05952 12.3023 5.13731 12.5217 5.04642L13.6221 4.59063C13.8773 4.48495 14.1697 4.6061 14.2754 4.86122L14.6581 5.7851C14.7638 6.04023 14.6426 6.33271 14.3875 6.43839L13.2866 6.89438C13.0674 6.98521 12.9449 7.21748 12.9705 7.45343C12.99 7.63298 13.0001 7.81537 13.0001 8.00011C13.0001 8.18597 12.9899 8.36945 12.9702 8.55005C12.9443 8.78611 13.0668 9.01859 13.2862 9.10947L14.3874 9.56559C14.6425 9.67126 14.7637 9.96375 14.658 10.2189L14.2753 11.1427C14.1696 11.3979 13.8772 11.519 13.622 11.4133L12.5195 10.9566C12.3002 10.8658 12.0493 10.9435 11.9007 11.1285C11.6715 11.4139 11.4117 11.6736 11.1262 11.9026C10.941 12.0511 10.8632 12.3021 10.9541 12.5215L11.4109 13.6245C11.5166 13.8796 11.3954 14.1721 11.1403 14.2778L10.2164 14.6604C9.96132 14.7661 9.66884 14.645 9.56316 14.3898L9.1062 13.2866C9.01536 13.0673 8.78307 12.9449 8.54711 12.9705C8.36745 12.9901 8.18493 13.0001 8.00007 13.0001C7.81497 13.0001 7.63221 12.9901 7.45233 12.9705C7.21634 12.9447 6.984 13.0672 6.89316 13.2865L6.43611 14.3899C6.33044 14.6451 6.03796 14.7662 5.78283 14.6605L4.85895 14.2779C4.60383 14.1722 4.48268 13.8797 4.58836 13.6246L5.04545 12.521C5.13632 12.3017 5.05857 12.0507 4.87337 11.9021C4.58799 11.6731 4.32826 11.4135 4.09918 11.1282C3.95057 10.9431 3.69967 10.8654 3.48037 10.9563L2.37707 11.4133C2.12194 11.5189 1.82946 11.3978 1.72379 11.1427L1.3411 10.2188C1.23543 9.96367 1.35658 9.67119 1.6117 9.56551L2.71385 9.10898C2.93323 9.01811 3.05572 8.78566 3.02992 8.54962C3.01019 8.36916 3.00007 8.18582 3.00007 8.00011C3.00007 7.81552 3.01007 7.63327 3.02957 7.45386C3.0552 7.21793 2.93271 6.98568 2.71345 6.89486L1.61161 6.43846ZM6.12508 8.00008C6.12508 6.96455 6.96455 6.12508 8.00008 6.12508C9.03562 6.12508 9.87508 6.96455 9.87508 8.00008C9.87508 9.03562 9.03562 9.87508 8.00008 9.87508C6.96455 9.87508 6.12508 9.03562 6.12508 8.00008ZM8.00008 4.87508C6.27419 4.87508 4.87508 6.27419 4.87508 8.00008C4.87508 9.72597 6.27419 11.1251 8.00008 11.1251C9.72597 11.1251 11.1251 9.72597 11.1251 8.00008C11.1251 6.27419 9.72597 4.87508 8.00008 4.87508Z\"\n         fill-opacity=\"0.8\"\n     />\n</svg>\n"])));
}

},{"bel":31}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aboutLink = aboutLink;
exports.adAttributionLink = adAttributionLink;

var _localize = require("../../base/localize.es6");

var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

function aboutLink() {
  var text = _localize.ns.site('trackerAboutLink.title');

  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["<a class=\"about-link\" href=\"https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/\" target=\"_blank\">", "</a>"])), text);
}

function adAttributionLink() {
  var text = _localize.ns.site('trackerAdLink.title');

  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<a class=\"ad-link\" href=\"https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/#3rd-party-tracker-loading-protection\" target=\"_blank\">", "</a>"])), text);
}

},{"../../base/localize.es6":65,"bel":31}],89:[function(require,module,exports){
"use strict";

var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var i18n = window.DDG.base.i18n;

module.exports = function (ops) {
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        <div class=\"hero-wrapper\">\n            <div class=\"hero text--center ", "\">\n                <a href=\"javascript:void(0)\"\n                    class=\"hero__close js-sliding-subview-close js-site-done link-action\"\n                    role=\"button\"\n                    aria-label=\"", "\"\n                    data-test-id=\"back-button\"\n                >\n                    <span class=\"icon icon__back-arrow\" data-icon-text=\"", "\"></span>\n                </a>\n                <a href=\"javascript:void(0)\"\n                    class=\"hero__done js-sliding-subview-done js-site-done link-action\"\n                    role=\"button\"\n                >\n                    ", "\n                </a>\n            </div>\n             <div class=\"hero__icon hero__icon--", "\"></div>\n        </div>\n    "])), ops.className || '', i18n.t('site:navigationBack.title'), i18n.t('site:navigationBack.title'), i18n.t('site:navigationComplete.title'), ops.status);
};

},{"bel":31}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.platformLimitations = platformLimitations;

var _bel = _interopRequireDefault(require("bel"));

var _localize = require("../../base/localize.es6");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function platformLimitations() {
  return (0, _bel["default"])(_templateObject || (_templateObject = _taggedTemplateLiteral(["<div>\n        <div class=\"horizontal-separator horizontal-separator--light\"></div>\n        <p class=\"text--center\">", "</p>\n    </div>"])), _localize.ns.site('trackerLimitationsNote.title'));
}

},{"../../base/localize.es6":65,"bel":31}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.protectionToggle = protectionToggle;

var _toggleButton = require("./toggle-button.es6");

var _bel = _interopRequireDefault(require("bel"));

var _environmentCheck = require("../../environment-check");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var raw = require('bel/raw');

var i18n = window.DDG.base.i18n;

var renderUpdatingSpinner = function renderUpdatingSpinner() {
  return (0, _bel["default"])(_templateObject || (_templateObject = _taggedTemplateLiteral(["<img src=\"../img/spinner.svg\" class=\"toggle-spinner\" alt=\"", "\" />"])), i18n.t('site:updatingProtectionList.title'));
};
/**
 * @param {import('../../models/site.es6').PublicSiteModel} model
 * @returns {HTMLElement}
 */


function protectionToggle(model) {
  var text = i18n.t('site:protectionsEnabled.title');
  var active = true;
  var disabled = false;

  if (!model.protectionsEnabled) {
    text = i18n.t('site:protectionsDisabled.title');
    active = false;
  }
  /**
   * Only the `extension` can toggle protections back ON (currently)
   * So for all other platforms, a 'broken site' means that we disable the toggle
   */


  if (model.isBroken) {
    if (!(0, _environmentCheck.isBrowser)()) {
      disabled = true;
      active = false;
    }
  }

  var protectionToggle = model.tab.isPendingUpdates ? renderUpdatingSpinner() : (0, _toggleButton.toggleButton)(active, 'js-site-toggle pull-right', disabled);
  return (0, _bel["default"])(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<div class=\"list-wrapper site-info__protection-wrapper\" data-test-id=\"protection-toggle\">\n        <ul class=\"default-list\">\n            <li class=\"site-info__li--toggle ", "\">\n                <p class=\"site-info__protection js-site-protection\"><span>", "</span></p>\n                <div class=\"site-info__toggle-container\">", "</div>\n            </li>\n        </ul>\n    </div>"])), active ? 'is-active' : '', raw(text), protectionToggle);
}

},{"../../environment-check":73,"./toggle-button.es6":93,"bel":31,"bel/raw":32}],92:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.thirdpartyHeroIcon = thirdpartyHeroIcon;
exports.thirdpartySummary = thirdpartySummary;
exports.thirdpartyText = thirdpartyText;

var _requestDetails = require("../../../browser/utils/request-details");

var _localize = require("../../base/localize.es6");

/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {boolean} protectionsEnabled
 * @returns {{title: string, icon: string}}
 */
function thirdpartyText(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOn_blocked:
    case _requestDetails.states.protectionsOff:
      {
        return {
          title: _localize.ns.site('thirdPartiesNoneFound.title'),
          icon: 'blocked'
        };
      }

    case _requestDetails.states.protectionsOn_allowedTrackers:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers:
      {
        return {
          title: _localize.ns.site('thirdPartiesLoaded.title'),
          icon: 'info'
        };
      }
    // if no 3rd party requests were observed in any way, then we use the 'nothing found' messaging

    default:
      return unreachable(state);
  }
}
/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {boolean} protectionsEnabled
 */


function thirdpartySummary(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
      {
        return _localize.ns.site('thirdPartiesSummaryProtectionsOff.title');
      }

    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOff:
    case _requestDetails.states.protectionsOn_blocked:
      {
        return _localize.ns.site('thirdPartiesSummaryNone.title');
      }

    default:
      return unreachable(state);
  }
}
/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {boolean} protectionsEnabled
 * @returns {string}
 */


function thirdpartyHeroIcon(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOn_blocked:
    case _requestDetails.states.protectionsOff:
      {
        return 'major-networks-no-activity';
      }

    case _requestDetails.states.protectionsOn_blocked_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
      {
        return 'major-networks-info';
      }

    default:
      return unreachable(state);
  }
}
/**
 * @param {never} x
 * @returns {never}
 */


function unreachable(x) {
  throw new Error("Didn't expect to get here with value " + x);
}

},{"../../../browser/utils/request-details":62,"../../base/localize.es6":65}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleButton = toggleButton;

var _templateObject, _templateObject2;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var _require = require('../../environment-check'),
    isAndroid = _require.isAndroid;

var generateMaterialDesignToggle = function generateMaterialDesignToggle(isActiveBoolean, klass, disabled) {
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    <button\n        id=\"basic-switch\"\n        class=\"mdc-switch mdc-switch--", " ", "\"\n        type=\"button\"\n        role=\"switch\"\n        aria-checked=\"false\"\n        ", "\n    >\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__handle-track\">\n            <div class=\"mdc-switch__handle\">\n            <div class=\"mdc-switch__shadow\">\n                <div class=\"mdc-elevation-overlay\"></div>\n            </div>\n            <div class=\"mdc-switch__ripple\"></div>\n            </div>\n        </div>\n        <span class=\"mdc-switch__focus-ring-wrapper\">\n            <div class=\"mdc-switch__focus-ring\"></div>\n        </span>\n    </button>\n        "])), isActiveBoolean ? 'selected' : 'unselected', klass, disabled ? 'disabled' : '');
};
/**
 * @param {boolean} isActiveBoolean
 * @param {string} klass
 * @param {boolean | undefined} disabled
 * @returns {*}
 */


function toggleButton(isActiveBoolean, klass, disabled) {
  if (isAndroid()) {
    return generateMaterialDesignToggle(isActiveBoolean, klass, disabled);
  }

  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    <button class=\"toggle-button toggle-button--is-active-", " ", "\"\n        type=\"button\"\n        aria-pressed=\"", "\"\n        ", "\n    >\n        <div class=\"toggle-button__bg\">\n        </div>\n        <div class=\"toggle-button__knob\"></div>\n    </button>"])), isActiveBoolean, klass, isActiveBoolean ? 'true' : 'false', disabled ? 'disabled' : '');
}

},{"../../environment-check":73,"bel":31}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trackerNetworkSummary = trackerNetworkSummary;
exports.trackerNetworksHeroIcon = trackerNetworksHeroIcon;
exports.trackerNetworksText = trackerNetworksText;

var _requestDetails = require("../../../browser/utils/request-details");

var _localize = require("../../base/localize.es6");

/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {any} protectionsEnabled
 * @returns {{title: string, icon: string}}
 */
function trackerNetworksText(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn_blocked:
    case _requestDetails.states.protectionsOn_blocked_allowedNonTrackers:
      {
        return {
          title: _localize.ns.site('trackerNetworksDesc.title'),
          icon: 'blocked'
        };
      }

    case _requestDetails.states.protectionsOn_blocked_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
      {
        return {
          title: _localize.ns.site('trackerNetworksDesc.title'),
          icon: 'info'
        };
      }

    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers:
      {
        return {
          title: _localize.ns.site('trackerNetworksNotBlocked.title'),
          icon: 'info'
        };
      }

    case _requestDetails.states.protectionsOff_allowedTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
      {
        return {
          title: _localize.ns.site('trackerNetworksNotBlocked.title'),
          icon: 'warning'
        };
      }

    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOff:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
      {
        return {
          title: _localize.ns.site('trackerNetworksNotFound.title'),
          icon: 'blocked'
        };
      }
    // if no 3rd party requests were observed in any way, then we use the 'nothing found' messaging

    default:
      return unreachable(state);
  }
}
/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {boolean} protectionsEnabled
 */


function trackerNetworkSummary(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOff:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
      {
        return _localize.ns.site('trackerNetworksSummaryNoneFound.title');
      }

    case _requestDetails.states.protectionsOn_allowedTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
      {
        return _localize.ns.site('trackerNetworksSummaryNoneBlocked.title');
      }

    case _requestDetails.states.protectionsOff_allowedTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
      return _localize.ns.site('trackerNetworksSummaryProtectionsOff.title');

    default:
      return _localize.ns.site('trackerNetworksSummaryBlocked.title');
  }
}
/**
 * @param {import("../../../browser/utils/request-details").RequestDetails} requestDetails
 * @param {boolean} protectionsEnabled
 * @returns {string}
 */


function trackerNetworksHeroIcon(requestDetails, protectionsEnabled) {
  var state = requestDetails.state(protectionsEnabled);

  switch (state) {
    case _requestDetails.states.protectionsOn:
    case _requestDetails.states.protectionsOff:
    case _requestDetails.states.protectionsOff_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedNonTrackers:
      {
        return 'major-networks-no-activity';
      }

    case _requestDetails.states.protectionsOn_blocked_allowedTrackers:
    case _requestDetails.states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers:
    case _requestDetails.states.protectionsOn_allowedTrackers_allowedNonTrackers:
      {
        return 'major-networks-info';
      }

    case _requestDetails.states.protectionsOff_allowedTrackers:
    case _requestDetails.states.protectionsOff_allowedTrackers_allowedNonTrackers:
      {
        return 'major-networks-warning';
      }

    case _requestDetails.states.protectionsOn_blocked:
    case _requestDetails.states.protectionsOn_blocked_allowedNonTrackers:
      {
        return 'major-networks-blocked';
      }

    default:
      return unreachable(state);
  }
}
/**
 * @param {never} x
 * @returns {never}
 */


function unreachable(x) {
  throw new Error("Didn't expect to get here with value" + x);
}

},{"../../../browser/utils/request-details":62,"../../base/localize.es6":65}],95:[function(require,module,exports){
"use strict";

var isSiteWithOnlyOwnTrackers = function isSiteWithOnlyOwnTrackers(_ref) {
  var trackersCount = _ref.trackersCount,
      tab = _ref.tab;

  if (trackersCount === 0) {
    return false;
  }

  for (var _i = 0, _Object$keys = Object.keys(tab.trackers); _i < _Object$keys.length; _i++) {
    var companyName = _Object$keys[_i];

    if (!isSameEntity(tab.trackers[companyName], tab.parentEntity)) {
      return false;
    }
  }

  return true;
};

var isSameEntity = function isSameEntity(tracker, parentEntity) {
  var parent = (parentEntity === null || parentEntity === void 0 ? void 0 : parentEntity.displayName) || null;
  return parent === tracker.displayName;
};

var offset = 'a'.charCodeAt(0);
var colorCount = 16;

function getColorId(value) {
  var characters = value.toLowerCase().split('');
  var sum = characters.reduce(function (total, character) {
    return total + character.charCodeAt(0) - offset;
  }, 0);
  return Math.abs(sum % colorCount + 1);
}

module.exports = {
  isSiteWithOnlyOwnTrackers: isSiteWithOnlyOwnTrackers,
  isSameEntity: isSameEntity,
  getColorId: getColorId
};

},{}],96:[function(require,module,exports){
"use strict";

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var raw = require('bel/raw');

var _require = require('../models/mixins/normalize-company-name.es6.js'),
    normalizeCompanyName = _require.normalizeCompanyName;

var hero = require('./shared/hero.es6.js');

var _require2 = require('./shared/tracker-networks-text.es6.js'),
    trackerNetworksText = _require2.trackerNetworksText;

var _require3 = require('./shared/utils.es6.js'),
    getColorId = _require3.getColorId;

var _require4 = require('./shared/protection-toggle'),
    protectionToggle = _require4.protectionToggle;

var _require5 = require('./shared/thirdparty-text.es6'),
    thirdpartyText = _require5.thirdpartyText;

var i18n = window.DDG.base.i18n;

function renderHero() {
  return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), hero({
    status: 'hidden'
  }));
}
/** @this {{model: import('../models/site.es6.js').PublicSiteModel}} */


module.exports = function () {
  var _this$model$tab;

  // here we'll show CTAs when the tab is disabled
  var supportsCtaScreens = Boolean((_this$model$tab = this.model.tab) === null || _this$model$tab === void 0 ? void 0 : _this$model$tab.ctaScreens);

  if (this.model.disabled && supportsCtaScreens) {
    return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n            <div class=\"site-info site-info--main\">\n                ", "\n                <div class=\"list-wrapper\" id=\"cta-rotation\"></div>\n                ", "\n            </div>\n        "])), renderSearchWrapper(this.model), renderEmailWrapper(this.model));
  } // console.log('this.model.tab.requestDetails.state(true)', this.model.tab.requestDetails.state(this.model.protectionsEnabled))


  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    <div class=\"site-info site-info--main\">\n    ", "\n    ", "\n    <div class=\"list-wrapper\" data-test-id=\"key-insight\">\n        <ul class=\"default-list card-list\">\n            ", "\n        </ul>\n    </div>\n    <div class=\"list-wrapper\">\n        <ul class=\"default-list card-list card-list--bordered token-extension-body-em\" data-test-id=\"list-links\">\n            <li class=\"js-site-show-page-connection site-info__li--https-status\">\n                <a href=\"javascript:void(0)\" class=\"link-action\" role=\"button\">\n                    ", "\n                </a>\n            </li>\n            <li class=\"js-site-tracker-networks js-site-show-page-trackers site-info__li--trackers border-light--top\" data-test-id=\"tracker-list-link\">\n                <a href=\"javascript:void(0)\" class=\"link-action\" role=\"button\">\n                    ", "\n                </a>\n            </li>\n            <li class=\"js-site-show-page-non-trackers site-info__li--trackers border-light--top\" data-test-id=\"thirdparty-list-link\">\n                <a href=\"javascript:void(0)\" class=\"link-action\" role=\"button\">\n                    ", "\n                </a>\n            </li>\n            ", "\n        </ul>\n    </div>\n    ", "\n    ", "\n    <div class=\"list-wrapper card-list--last\">\n        <ul class=\"default-list\">\n            <li class=\"js-site-manage-allowlist-li site-info__li--manage-allowlist  border-light--top\">\n                ", "\n            </li>\n        </ul>\n    </div>\n    ", "\n</div>"])), renderSearchWrapper(this.model), renderHero(), renderKeyInsight(this.model), renderConnection(this.model), renderTrackerNetworksNew(this.model), renderThirdPartyNew(this.model), renderCookieConsentManaged(this.model), protectionToggle(this.model), renderEmailWrapper(this.model), renderManageAllowlist(), renderManagePermissions(this.model));
};
/**
* @param {import('../models/site.es6.js').PublicSiteModel} model
*/


function renderSearchWrapper(model) {
  var _model$tab;

  if ((_model$tab = model.tab) !== null && _model$tab !== void 0 && _model$tab.search) {
    return bel(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["<section id=\"search-form-container\"></section>"])));
  }
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderEmailWrapper(model) {
  var _model$tab2;

  if ((_model$tab2 = model.tab) !== null && _model$tab2 !== void 0 && _model$tab2.emailProtection) {
    return bel(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["<div class=\"list-wrapper\" id=\"email-alias-container\"></div>"])));
  }
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderConnection(model) {
  return bel(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["<div>\n            <div class=\"site-info__trackers\">\n                <span class=\"site-info__https-status__icon is-", "\"></span>\n                <span>", "</span>\n                <span class=\"icon icon__arrow pull-right\"></span>\n            </div>\n        </div>"])), model.httpsState, model.httpsStatusText);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderTrackerNetworksNew(model) {
  var isActive = !model.isAllowlisted ? 'is-active' : '';

  var _trackerNetworksText = trackerNetworksText(model.tab.requestDetails, model.protectionsEnabled),
      title = _trackerNetworksText.title,
      icon = _trackerNetworksText.icon;

  console.log('-->', model.tab.requestDetails.state(model.protectionsEnabled));
  return bel(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n        <div>\n            <div class=\"site-info__trackers\">\n                <span class=\"site-info__trackers-status__icon icon-", "\" data-test-id=\"trackerLink.icon\"></span>\n                <span class=\"", "\">", "</span>\n                <span class=\"icon icon__arrow pull-right\"></span>\n            </div>\n        </div>"])), icon, isActive, title);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderThirdPartyNew(model) {
  var isActive = !model.isAllowlisted ? 'is-active' : '';

  var _thirdpartyText = thirdpartyText(model.tab.requestDetails, model.protectionsEnabled),
      title = _thirdpartyText.title,
      icon = _thirdpartyText.icon;

  return bel(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n        <div>\n            <div class=\"site-info__trackers\">\n                <span class=\"site-info__trackers-status__icon icon-", "\" data-test-id=\"trackerLink.icon\"></span>\n                <span class=\"", "\">", "</span>\n                <span class=\"icon icon__arrow pull-right\"></span>\n            </div>\n        </div>"])), icon, isActive, title);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderManagePermissions(model) {
  if (!model.permissions || model.permissions.length === 0) {
    return '';
  }

  var localizedPerms = localizePermissions(model.permissions);
  return bel(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["<ul class=\"default-list\">\n        <li class=\"site-info__li--manage-permissions\">\n            ", "\n        </li>\n    </ul>"])), localizedPerms.map(function (_ref, index) {
    var permissionId = _ref.key,
        title = _ref.title,
        permission = _ref.permission,
        options = _ref.options;
    if (!model.permissions) return ''; // todo(Shane): typescript issue

    return bel(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["<div class=\"site-info__page-permission ", "\">\n                    <label>\n                        <div>\n                            <div class=\"site-info__page-permission__icon ", "\"></div>\n                            ", "\n                        </div>\n                        <select class=\"js-site-permission\" name=\"", "\">\n                            ", "\n                        </select>\n                    </label>\n                </div>"])), index !== model.permissions.length - 1 ? 'border-light--bottom--inner' : '', permissionId, title, permissionId, options.map(function (_ref2) {
      var id = _ref2.id,
          title = _ref2.title;
      return bel(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["<option value=\"", "\" ", ">", "</option>"])), id, permission === id ? 'selected' : '', title);
    }));
  }));
}

function renderManageAllowlist() {
  return bel(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["<div class=\"manage-allowlist\">\n            <a href=\"javascript:void(0)\" class=\"js-site-report-broken site-info__report-broken\">\n                ", "\n            </a>\n        </div>"])), i18n.t('site:websiteNotWorkingQ.title'));
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function generateCompanyNamesList(model) {
  // const companyNames = model.tab.requestDetails.companyNames();
  var blockedCompanyNames = model.tab.requestDetails.blockedCompanyNames();
  return {
    companyCount: blockedCompanyNames.length,
    othersCount: blockedCompanyNames.length - 4,
    firstCompany: blockedCompanyNames[0],
    secondCompany: blockedCompanyNames[1],
    thirdCompany: blockedCompanyNames[2],
    fourthCompany: blockedCompanyNames[3]
  };
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderCompanyIconsList(model) {
  var companyNames = model.tab.requestDetails.blockedCompanyNames();
  if (companyNames.length === 0) return '';
  var topCompanies = companyNames.slice(0, 4);
  var remainingCount = companyNames.length - topCompanies.length;
  var remainingCountIcon = remainingCount <= 0 ? '' : bel(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n            <span class=\"site-info__tracker__icon-positioner\">\n                <span class=\"site-info__tracker__icon-wrapper site-info__tracker__icon-wrapper--count\">\n                    <span class=\"site-info__tracker__count\">+", "</span>\n                </span>\n            </div>\n            "])), remainingCount);
  var topCompaniesIcons = topCompanies.map(function (name, index) {
    var slug = normalizeCompanyName(name);
    var locationClass = index === topCompanies.length - 1 ? 'first' : 'other';
    return bel(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n            <span class=\"site-info__tracker__icon-positioner\">\n                <span class=\"site-info__tracker__icon-wrapper site-info__tracker__icon-wrapper--", "\">\n                    <span class=\"site-info__tracker__icon ", " color-", " ", "\"></span>\n                    <span class=\"site-info__tracker__blocked-icon\"></span>\n                </span>\n            </span>\n            "])), locationClass, slug[0].toUpperCase(), getColorId(slug), slug);
  });
  return bel(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n            <div class=\"site-info__key-insight_trackers-icons token-extension-title-3-em\">\n                ", "\n                ", "\n            </div>\n        "])), topCompaniesIcons, remainingCountIcon);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderKeyInsight(model) {
  var title = function title(text) {
    return bel(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["<h1 class=\"token-extension-title-3-em\">", "</h1>"])), text);
  };

  if (model.httpsState === 'none') {
    return bel(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n                <li class=\"site-info__li--key-insight\">\n                    <div class=\"site-info__key-insight site-info__key-insight--insecure-connection\">\n                        ", "\n                        <div class=\"token-extension-title-3\">", "</div>\n                    </div>\n                </li>\n            "])), title(model.tab.domain), raw(i18n.t('site:connectionDescriptionUnencrypted.title')));
  } // remote disabled


  if (model.isBroken) {
    var text = i18n.t('site:protectionsDisabledRemote.title');

    if (model.isDenylisted) {
      text = i18n.t('site:protectionsDisabledRemoteOverride.title');
    }

    return bel(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n        <li class=\"site-info__li--key-insight\">\n            <div class=\"site-info__key-insight site-info__key-insight--protections-off\">\n                ", "\n                <div class=\"note token-extension-title-3\">\n                   ", "\n                </div>\n            </div>\n        </li>\n    "])), title(model.tab.domain), text);
  } // user allow-listed


  if (!model.protectionsEnabled) {
    return bel(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n            <li class=\"site-info__li--key-insight\">\n                <div class=\"site-info__key-insight site-info__key-insight--protections-off\">\n                    ", "\n                    <div class=\"token-extension-title-3\">\n                       ", "\n                    </div>\n                </div>\n            </li>\n            "])), title(model.tab.domain), raw(i18n.t('site:protectionsDisabled.title')));
  }

  if (model.isaMajorTrackingNetwork && model.tab.parentEntity) {
    var company = model.tab.parentEntity;
    return bel(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n                <li class=\"site-info__li--key-insight\">\n                    <div class=\"site-info__key-insight site-info__key-insight--tracker-network\">\n                        ", "\n                        <div class=\"token-extension-title-3\">\n                            ", "\n                        </div>\n                    </div>\n                </li>\n            "])), title(model.tab.domain), raw(i18n.t('site:majorTrackingNetworkDesc.title', {
      companyDisplayName: company.displayName,
      companyPrevalence: Math.round(company.prevalence),
      blocked: model.tab.requestDetails.blocked.entitiesCount > 0
    })));
  }

  if (model.tab.requestDetails.blocked.requestCount === 0) {
    if (model.tab.requestDetails.allowedSpecialCount() > 0) {
      return bel(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n                <li class=\"site-info__li--key-insight\">\n                    <div class=\"site-info__key-insight site-info__key-insight--info\">\n                        ", "\n                        <div class=\"token-extension-title-3\">", "</div>\n                    </div>\n                </li>\n            "])), title(model.tab.domain), i18n.t('site:trackerNetworksSummaryAllowedOnly.title'));
    }

    return bel(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n                <li class=\"site-info__li--key-insight\">\n                    <div class=\"site-info__key-insight site-info__key-insight--no-activity\">\n                        ", "\n                        <div class=\"token-extension-title-3\">", "</div>\n                    </div>\n                </li>\n            "])), title(model.tab.domain), raw(i18n.t('site:trackerNetworksSummaryNone.title')));
  }

  var companyNames = model.tab.requestDetails.blockedCompanyNames();

  if (companyNames.length === 0) {
    return bel(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n                <li class=\"site-info__li--key-insight\">\n                    <div class=\"site-info__key-insight site-info__key-insight--trackers-blocked\">\n                        ", "\n                        <div class=\"token-extension-title-3\"><span>", "</span></div>\n                    </div>\n                </li>\n            "])), title(model.tab.domain), raw(i18n.t('site:trackersBlockedDesc.title', generateCompanyNamesList(model))));
  }

  return bel(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n            <li class=\"site-info__li--key-insight\">\n                <div class=\"site-info__key-insight\">                \n                    ", "\n                    ", "\n                    <div class=\"token-extension-title-3\"><span>", "</span></div>\n                </div>\n            </li>\n        "])), renderCompanyIconsList(model), title(model.tab.domain), raw(i18n.t('site:trackersBlockedDesc.title', generateCompanyNamesList(model))));
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} model
 */


function renderCookieConsentManaged(model) {
  var _model$tab3;

  if (!((_model$tab3 = model.tab) !== null && _model$tab3 !== void 0 && _model$tab3.consentManaged)) return bel(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([""])));
  var _model$tab$consentMan = model.tab.consentManaged,
      consentManaged = _model$tab$consentMan.consentManaged,
      optoutFailed = _model$tab$consentMan.optoutFailed;

  if (consentManaged && !optoutFailed) {
    return bel(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n            <li class=\"js-site-show-consent-managed site-info__li--consent-managed border-light--top\">\n                <div>\n                    <div class=\"site-info__trackers\">\n                        <span class=\"site-info__https-status__icon is-secure\"></span>\n                        <span>", "</span>\n                    </div>\n                </div>\n            </li>\n            "])), i18n.t('site:cookiesMinimized.title'));
  }

  return bel(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([""])));
}

function localizePermissions(permissions) {
  // deep copy before mutating
  var updatedPermissions = JSON.parse(JSON.stringify(permissions));
  return updatedPermissions.map(function (perm) {
    var permKey = "permissions:".concat(perm.key, ".title");

    if (i18n.exists(permKey)) {
      perm.title = i18n.t(permKey);
    }

    perm.options = perm.options.map(function (option) {
      var optionKey = "permissions:".concat(option.id, ".title");

      if (i18n.exists(optionKey)) {
        option.title = i18n.t(optionKey);
      }

      return option;
    });
    return perm;
  });
}

},{"../models/mixins/normalize-company-name.es6.js":77,"./shared/hero.es6.js":89,"./shared/protection-toggle":91,"./shared/thirdparty-text.es6":92,"./shared/tracker-networks-text.es6.js":94,"./shared/utils.es6.js":95,"bel":31,"bel/raw":32}],97:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderCompany = renderCompany;
exports.renderSections = renderSections;
exports.trackerListWrapper = trackerListWrapper;
exports.trackerNetworksTemplate = trackerNetworksTemplate;

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @type {any} */
var bel = require('bel');

var hero = require('./shared/hero.es6.js');

var _require = require('./shared/utils.es6.js'),
    getColorId = _require.getColorId;

var _require2 = require('./shared/tracker-networks-text.es6'),
    trackerNetworksText = _require2.trackerNetworksText,
    trackerNetworksHeroIcon = _require2.trackerNetworksHeroIcon,
    trackerNetworkSummary = _require2.trackerNetworkSummary;

var _require3 = require('./shared/about-link'),
    aboutLink = _require3.aboutLink;

var _require4 = require('./shared/platform-limitations'),
    platformLimitations = _require4.platformLimitations;

var i18n = window.DDG.base.i18n;
/** @this {{ model: { site: import('../models/site.es6.js').PublicSiteModel }}} */

function trackerNetworksTemplate() {
  if (!this.model) {
    return bel(_templateObject || (_templateObject = _taggedTemplateLiteral(["<section class=\"sliding-subview\"></section>"])));
  }

  var summary = trackerNetworkSummary(this.model.site.tab.requestDetails, this.model.site.protectionsEnabled);
  var blocked = this.model.site.tab.requestDetails.blocked;
  var sections = [{
    name: 'blocked',
    heading: function heading() {
      return null;
    },
    companies: blocked.sortedByPrevalence(),
    bordered: true
  }];
  return bel(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["<div class=\"tracker-networks site-info card\" data-test-id=\"tracker-list-view\">\n        <div class=\"js-tracker-networks-hero\">\n            ", "\n        </div>\n        <div class=\"tracker-networks__explainer text--center\" data-test-id=\"tracker-list.summary\">\n            <p data-test-id=\"tracker.summary\" class=\"token-extension-title-3\">", "</p>\n            <p>", "</p>\n        </div>\n        <div class=\"tracker-networks__details padded-sides js-tracker-networks-details\">\n            ", "\n        </div>\n        ", "\n    </div>"])), renderHero(this.model.site), summary, aboutLink(), renderSections(sections), this.model.site.tab.platformLimitations ? platformLimitations() : null);
}
/**
 * @param {import('../models/site.es6.js').PublicSiteModel} site
 */


function renderHero(site) {
  var _trackerNetworksText = trackerNetworksText(site.tab.requestDetails, site.protectionsEnabled),
      title = _trackerNetworksText.title;

  var icon = trackerNetworksHeroIcon(site.tab.requestDetails, site.protectionsEnabled);
  return bel(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["", ""])), hero({
    status: icon,
    title: title,
    showClose: true
  }));
}
/**
 * This is exported so that the allowedRequests UI can re-use the template
 * @param {string} name
 * @param {any} heading
 * @param {any[]} companiesList
 * @param {boolean | undefined} bordered
 */


function trackerListWrapper(name, heading, companiesList, bordered) {
  return bel(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        <ol class=\"default-list site-info__trackers__company-list ", "\" \n             aria-label=\"List of tracker networks\"\n             >\n            ", "\n            ", "\n        </ol>\n    "])), bordered ? 'border--top' : '', heading ? bel(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["<li class=\"section-list-header\" data-test-id=\"sectionHeading\">", "</li>"])), heading) : bel(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""]))), companiesList);
}
/**
 * @param {import("../../browser/utils/request-details.js").AggregateCompanyData} company
 */


function renderCompany(company) {
  if (company.displayName && company.displayName === 'unknown') {
    company.displayName = "(".concat(i18n.t('site:trackerNetworkUnknown.title'), ")");
  }

  var slug = company.normalizedName;
  return bel(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["<li class=\"site-info__trackers__company-list-item\" data-test-id=\"entityListItem\">\n        <h1 title=\"", "\" class=\"site-info__domain block token-extension-title-3-em\" data-test-id=\"entityTitle\">\n            <span class=\"site-info__tracker__icon site-info__tracker__icon--company ", " color-", " ", "\"></span>\n            ", "\n        </h1>\n        <ol class=\"default-list site-info__trackers__company-list__url-list\" aria-label=\"", "\">\n            ", "\n        </ol>\n    </li>"])), company.displayName, slug[0].toUpperCase(), getColorId(slug), slug, company.displayName, i18n.t('site:trackerDomainsForCompany.title', {
    companyName: company.displayName
  }), Object.keys(company.urls).map(function (urlHostname) {
    var url = company.urls[urlHostname];
    return bel(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n                <li data-test-id=\"entityUrlListItem\">\n                    <div class=\"url\">", "</div>\n                    <div class=\"category\">", "</div>\n                </li>"])), urlHostname, i18n.t(url.category));
  }));
}
/**
 * @param {{
 *  heading: () => any | null,
 *  companies: import("../../browser/utils/request-details.js").AggregateCompanyData[],
 *  name: string,
 *  bordered?: boolean,
 *  }[]} sections
 */


function renderSections(sections) {
  var output = sections // exclude all empty lists
  .filter(function (section) {
    return section.companies.length > 0;
  }) // convert each 'section' into a heading + list of companies
  .map(function (section) {
    var companiesList = section.companies.map(function (company) {
      return renderCompany(company);
    });
    var sectionHeading = section.heading();
    return trackerListWrapper(section.name, sectionHeading, companiesList, section.bordered);
  });
  return output;
}

},{"./shared/about-link":88,"./shared/hero.es6.js":89,"./shared/platform-limitations":90,"./shared/tracker-networks-text.es6":94,"./shared/utils.es6.js":95,"bel":31}],98:[function(require,module,exports){
"use strict";

var ParentSlidingSubview = require('./sliding-subview.es6.js');
/** @this {any} */


function BreakageForm(ops) {
  this.model = ops.model;
  this.template = ops.template;
  this.siteView = ops.siteView;
  this.clickSource = ops.clickSource;
  this.$root = window.$('.js-breakage-form'); // @ts-ignore

  ParentSlidingSubview.call(this, ops);

  this._setup();
}

BreakageForm.prototype = window.$.extend({}, // @ts-ignore
ParentSlidingSubview.prototype, {
  _setup: function _setup() {
    this._cacheElems('.js-breakage-form', ['close', 'submit', 'element', 'message', 'dropdown', 'description']);

    this.bindEvents([[this.$close, 'click', this._closeForm], [this.$submit, 'click', this._submitForm]]);
  },
  _closeForm: function _closeForm(e) {
    if (e) e.preventDefault(); // reload page after closing form if user got to form from
    // toggling privacy protection. otherwise destroy view.

    if (this.clickSource === 'toggle') {
      this.siteView.closePopupAndReload(500);
    }
  },
  _submitForm: function _submitForm() {
    var category = this.$dropdown.val();
    var description = this.$description.val();
    this.model.submitBreakageForm(category, description);

    this._showThankYouMessage();
  },
  _showThankYouMessage: function _showThankYouMessage() {
    this.$element.addClass('is-transparent');
    this.$message.removeClass('is-transparent'); // reload page after form submission if user got to form from
    // toggling privacy protection, otherwise destroy view.

    if (this.clickSource === 'toggle') {
      this.siteView.closePopupAndReload(3500);
    }
  }
});
module.exports = BreakageForm;

},{"./sliding-subview.es6.js":103}],99:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.View;

function CtaRotationView(ops) {
  this.model = ops.model;
  this.pageView = ops.pageView;
  this.template = ops.template;
  Parent.call(this, ops);
}

CtaRotationView.prototype = window.$.extend({}, Parent.prototype, {});
module.exports = CtaRotationView;

},{}],100:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.View;
/**
 * Given a username, returns a valid email address with the duck domain
 * @param {string} address
 * @returns {string}
 */

var formatAddress = function formatAddress(address) {
  return address + '@duck.com';
};
/** @this {any} */


function EmailProtectionView(ops) {
  this.model = ops.model;
  this.pageView = ops.pageView;
  this.template = ops.template;
  Parent.call(this, ops);

  this._setup();
}

EmailProtectionView.prototype = window.$.extend({}, Parent.prototype, {
  _setup: function _setup() {
    this.bindEvents([[this.store.subscribe, "change:".concat(this.model.modelName), this._rerender]]);
  },
  copyAlias: function copyAlias() {
    var _navigator$clipboard,
        _this = this;

    // write to clipboard
    var alias = this.model.emailProtectionUserData.nextAlias;
    (_navigator$clipboard = navigator.clipboard) === null || _navigator$clipboard === void 0 ? void 0 : _navigator$clipboard.writeText(formatAddress(alias)); // update the UI to the 'added' state

    this.model.set('state', 'added'); // this timeout doesn't need any cleanup because the UI
    // prevents submissions in the 'added' state

    setTimeout(function () {
      _this.model.set('state', 'idle');
    }, 2000); // always refresh the alias once it was used

    this.model.refreshAlias()["catch"](function (e) {
      return console.error(e);
    });
  }
});
module.exports = EmailProtectionView;

},{}],101:[function(require,module,exports){
"use strict";

var Parent = window.DDG.base.View;
var FOCUS_CLASS = 'go--focused';
/** @this {any} */

function Search(ops) {
  this.model = ops.model;
  this.pageView = ops.pageView;
  this.template = ops.template;
  Parent.call(this, ops);

  this._cacheElems('.js-search', ['form', 'input', 'go', 'cog-button']);

  this.bindEvents([[this.$input, 'input', this._handleInput], [this.$input, 'blur', this._handleBlur], [this.$go, 'click', this._handleSubmit], [this.$form, 'submit', this._handleSubmit], [this.$cogbutton, 'click', this._handleCogClick]]); // todo(Shane): Should we still auto-focus this field?
  // window.setTimeout(() => this.$input.focus(), 200)
}

Search.prototype = window.$.extend({}, Parent.prototype, {
  // Hover effect on search button while typing
  _addHoverEffect: function _addHoverEffect() {
    if (!this.$go.hasClass(FOCUS_CLASS)) {
      this.$go.addClass(FOCUS_CLASS);
    }
  },
  _removeHoverEffect: function _removeHoverEffect() {
    if (this.$go.hasClass(FOCUS_CLASS)) {
      this.$go.removeClass(FOCUS_CLASS);
    }
  },
  _handleBlur: function _handleBlur(e) {
    this._removeHoverEffect();
  },
  _handleInput: function _handleInput(e) {
    var searchText = this.$input.val();
    this.model.set('searchText', searchText);

    if (searchText.length > 0) {
      this._addHoverEffect();
    } else {
      this._removeHoverEffect();
    }
  },
  _handleSubmit: function _handleSubmit(e) {
    e.preventDefault();
    this.model.doSearch(this.$input.val());
    window.close();
  },
  _handleCogClick: function _handleCogClick(e) {
    e.preventDefault();
    this.model.openOptionsPage();
  }
});
module.exports = Search;

},{}],102:[function(require,module,exports){
"use strict";

var _switch = require("@material/switch");

var _environmentCheck = require("../environment-check.js");

var _trackerNetworksTextEs = require("../templates/shared/tracker-networks-text.es6.js");

var _utils = require("./utils/utils.js");

var _thirdpartyText = require("../templates/shared/thirdparty-text.es6");

// @ts-ignore
var Parent = window.DDG.base.View;

var TrackerNetworksView = require('./../views/tracker-networks.es6.js');

var BreakageFormView = require('./../views/breakage-form.es6.js');

var pageConnectionTemplate = require('./../templates/page-connection.es6.js');

var _require = require('./../templates/tracker-networks.es6.js'),
    trackerNetworksTemplate = _require.trackerNetworksTemplate;

var _require2 = require('./../templates/non-trackers.es6.js'),
    nonTrackersTemplate = _require2.nonTrackersTemplate;

var breakageFormTemplate = require('./../templates/breakage-form.es6.js');

var EmailProtectionView = require('./email-protection.es6');

var EmailProtectionModel = require('../models/email-protection.es6');

var emailProtectionTemplate = require('../templates/email-protection.es6');

var SearchView = require('./search.es6');

var SearchModel = require('../models/search.es6');

var searchTemplate = require('../templates/search.es6');

var CtaRotationView = require('./cta-rotation.es6');

var _require3 = require('../models/cta-rotation.es6'),
    CtaRotationModel = _require3.CtaRotationModel;

var ctaRotationView = require('../templates/cta-rotation.es6');

function Site(ops) {
  var _this = this;

  this.model = ops.model;
  this.pageView = ops.pageView;
  this.template = ops.template; // cache 'body' selector

  this.$body = window.$('body'); // get data from background process, then re-render template with it

  this.model.getBackgroundTabData().then(function () {
    if (_this.model.tab && (_this.model.tab.status === 'complete' || _this.model.domain === 'new tab')) {
      // render template for the first time here
      Parent.call(_this, ops); // @ts-ignore

      _this._setup();
    } else {
      // the timeout helps buffer the re-render cycle during heavy
      // page loads with lots of trackers
      Parent.call(_this, ops); // @ts-ignore

      setTimeout(function () {
        return _this.rerender();
      }, 750);
    }
  })["catch"](function (e) {
    console.log('❌ [views/site.es6.js] --> ', e);
  });
}

Site.prototype = window.$.extend({}, Parent.prototype, {
  _onAllowlistClick: function _onAllowlistClick(e) {
    var _this2 = this;

    if (this.$body.hasClass('is-disabled')) return; // Provide visual feedback of change

    this.$toggle.toggleClass('toggle-button--is-active-true');
    this.$toggle.toggleClass('toggle-button--is-active-false'); // Complete the update once the animation has completed

    setTimeout(function () {
      _this2.model.toggleAllowlist();
    }, 250);
  },
  _changePermission: function _changePermission(e) {
    this.model.updatePermission(e.target.name, e.target.value);
  },
  // NOTE: after ._setup() is called this view listens for changes to
  // site model and re-renders every time model properties change
  _setup: function _setup() {
    this._cacheElems('.js-site', ['toggle', 'protection', 'show-page-connection', 'show-page-trackers', 'show-page-non-trackers', 'report-broken', 'permission', 'done']);

    if ((0, _environmentCheck.isAndroid)()) {
      document.querySelectorAll('.mdc-switch').forEach(function ($el) {
        return (// @ts-ignore
          new _switch.MDCSwitch($el) // eslint-disable-line no-new

        );
      });
      (0, _utils.setupMaterialDesignRipple)('.js-site-show-page-connection', '.js-site-show-page-trackers', '.js-site-done');
    }

    this.bindEvents([[this.$toggle, 'click', this._onAllowlistClick], [this.$showpageconnection, 'click', this._showPageConnection], [this.$showpagetrackers, 'click', this._showPageTrackers], [this.$showpagenontrackers, 'click', this._showPageNonTrackers], [this.$reportbroken, 'click', this._onReportBrokenSiteClick], [this.$done, 'click', this._done], [this.$permission, 'change', this._changePermission], [this.store.subscribe, 'change:site', this.rerender]]);

    this._setupFeatures();
  },
  rerender: function rerender() {
    // Prevent rerenders when confirmation form is active,
    // otherwise form will disappear on rerender.
    if (this.$body.hasClass('confirmation-active')) return;

    if (this.model && this.model.disabled) {
      if (!this.$body.hasClass('is-disabled')) {
        this.$body.addClass('is-disabled');

        this._rerender();

        this._setup();
      }
    } else {
      this.$body.removeClass('is-disabled');
      this.unbindEvents();

      this._rerender();

      this._setup();
    }
  },
  _onReportBrokenSiteClick: function _onReportBrokenSiteClick(e) {
    e.preventDefault();

    if (this.model && this.model.disabled) {
      return;
    }

    var isHandledExternally = this.model.checkBrokenSiteReportHandled();

    if (!isHandledExternally) {
      this.showBreakageForm('reportBrokenSite');
    }
  },
  // pass clickSource to specify whether page should reload
  // after submitting breakage form.
  showBreakageForm: function showBreakageForm(clickSource) {
    this.views.breakageForm = new BreakageFormView({
      siteView: this,
      template: breakageFormTemplate,
      model: this.model,
      appendTo: this.$body,
      clickSource: clickSource
    });
  },
  _showPageTrackers: function _showPageTrackers(e) {
    if (this.$body.hasClass('is-disabled')) return;
    this.views.slidingSubview = new TrackerNetworksView({
      template: trackerNetworksTemplate,
      heroFn: _trackerNetworksTextEs.trackerNetworksHeroIcon
    });
  },
  _showPageNonTrackers: function _showPageNonTrackers(e) {
    if (this.$body.hasClass('is-disabled')) return;
    this.views.slidingSubview = new TrackerNetworksView({
      template: nonTrackersTemplate,
      heroFn: _thirdpartyText.thirdpartyHeroIcon
    });
  },
  _showPageConnection: function _showPageConnection(e) {
    if (this.$body.hasClass('is-disabled')) return;
    this.views.slidingSubview = new TrackerNetworksView({
      template: pageConnectionTemplate
    });
  },
  _done: function _done() {
    this.model.close();
  },
  _setupFeatures: function _setupFeatures() {
    var _this$model$tab, _this$model$tab2, _this$model$tab3;

    if ((_this$model$tab = this.model.tab) !== null && _this$model$tab !== void 0 && _this$model$tab.search) {
      if (this.views.search) {
        this.views.search.destroy();
      }

      this.views.search = new SearchView({
        pageView: this,
        model: new SearchModel({
          searchText: ''
        }),
        appendTo: window.$('#search-form-container'),
        template: searchTemplate
      });
    } // does the device support CTA screens?


    if ((_this$model$tab2 = this.model.tab) !== null && _this$model$tab2 !== void 0 && _this$model$tab2.ctaScreens && !this.views.ctaRotations) {
      this.views.ctaRotations = new CtaRotationView({
        pageView: this,
        model: new CtaRotationModel({
          emailProtectionUserData: this.model.emailProtectionUserData
        }),
        appendTo: window.$('#cta-rotation'),
        template: ctaRotationView
      });
    } // does the device support Email Protection?


    if ((_this$model$tab3 = this.model.tab) !== null && _this$model$tab3 !== void 0 && _this$model$tab3.emailProtection) {
      if (this.views.emailProtection) {
        this.views.emailProtection.destroy();
      }

      this.views.emailProtection = new EmailProtectionView({
        model: new EmailProtectionModel({
          emailProtectionUserData: this.model.emailProtectionUserData
        }),
        appendTo: window.$('#email-alias-container'),
        template: emailProtectionTemplate
      });
    }
  }
});
module.exports = Site;

},{"../environment-check.js":73,"../models/cta-rotation.es6":75,"../models/email-protection.es6":76,"../models/search.es6":78,"../templates/cta-rotation.es6":83,"../templates/email-protection.es6":84,"../templates/search.es6":87,"../templates/shared/thirdparty-text.es6":92,"../templates/shared/tracker-networks-text.es6.js":94,"./../templates/breakage-form.es6.js":82,"./../templates/non-trackers.es6.js":85,"./../templates/page-connection.es6.js":86,"./../templates/tracker-networks.es6.js":97,"./../views/breakage-form.es6.js":98,"./../views/tracker-networks.es6.js":104,"./cta-rotation.es6":99,"./email-protection.es6":100,"./search.es6":101,"./utils/utils.js":105,"@material/switch":29}],103:[function(require,module,exports){
"use strict";

var _utils = require("./utils/utils.js");

var _environmentCheck = require("../environment-check.js");

// @ts-ignore
var Parent = window.DDG.base.View;

function SlidingSubview(ops) {
  ops.appendTo = window.$('.sliding-subview--root');
  Parent.call(this, ops);
  this.$root = window.$('.sliding-subview--root');
  this.$root.addClass('sliding-subview--open'); // @ts-ignore

  this.setupNavigationSupport(); // @ts-ignore

  this.setupClose();
}

SlidingSubview.prototype = window.$.extend({}, Parent.prototype, {
  setupClose: function setupClose() {
    this._cacheElems('.js-sliding-subview', ['close', 'done']);

    this.bindEvents([[this.$close, 'click', this._destroy], [this.$done, 'click', this._done]]); // Set up Material design features on Android

    if ((0, _environmentCheck.isAndroid)()) {
      (0, _utils.setupMaterialDesignRipple)('.js-site-done');
    }
  },
  setupNavigationSupport: function setupNavigationSupport() {
    var _this = this;

    // @ts-ignore
    var url = new URL(window.location);
    url.searchParams.set('open', 'true');
    window.history.pushState({}, '', url);

    if (this.popstateHandler) {
      window.removeEventListener('popstate', this.popstateHandler);
    }

    this.popstateHandler = function (e) {
      // @ts-ignore
      _this._destroy(null, {
        fromNavigation: true
      });
    };

    window.addEventListener('popstate', this.popstateHandler);
  },
  _destroy: function _destroy(e) {
    var _this2 = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (this.popstateHandler) {
      window.removeEventListener('popstate', this.popstateHandler);
    } // @ts-ignore


    var url = new URL(window.location);
    url.searchParams["delete"]('open');
    window.history.replaceState({}, '', url);

    if (opts.fromNavigation && (0, _environmentCheck.isIOS)()) {
      // Don't animate out if we've navigated back to the root screen
      this.$root.addClass('sliding-subview--immediate');
      window.setTimeout(function () {
        _this2.$root.removeClass('sliding-subview--open');

        _this2.destroy(); // @ts-ignore


        window.history.replaceState({}, '', window.location);
        window.setTimeout(function () {
          _this2.$root.removeClass('sliding-subview--immediate');
        }, 1);
      }, 1);
      return;
    }

    this.$root.removeClass('sliding-subview--open');
    window.setTimeout(function () {
      _this2.destroy(); // @ts-ignore


      window.history.replaceState({}, '', window.location);
    }, 325); // 325ms = 0.3s in .sliding-subview--root transition + 25ms padding
  },
  _done: function _done() {
    this.model.site.close();
  }
});
module.exports = SlidingSubview;

},{"../environment-check.js":73,"./utils/utils.js":105}],104:[function(require,module,exports){
"use strict";

var ParentSlidingSubview = require('./sliding-subview.es6.js');

var heroTemplate = require('./../templates/shared/hero.es6.js');

var CompanyListModel = require('./../models/site-company-list.es6.js');

var SiteModel = require('./../models/site.es6.js');

function TrackerNetworks(ops) {
  // model data is async
  this.model = null;
  this.currentModelName = null;
  this.currentSiteModelName = null;
  this.template = ops.template;
  this.heroFn = ops.heroFn; // @ts-ignore

  ParentSlidingSubview.call(this, ops); // @ts-ignore

  this.renderAsyncContent();
}

TrackerNetworks.prototype = window.$.extend({}, // @ts-ignore
ParentSlidingSubview.prototype, {
  /** @this {any} */
  setup: function setup() {
    this._cacheElems('.js-tracker-networks', ['hero', 'details']);

    this.bindEvents([[this.store.subscribe, "change:".concat(this.currentSiteModelName), this._rerender]]);
  },

  /** @this {any} */
  renderAsyncContent: function renderAsyncContent() {
    var _this = this;

    var random = Math.round(Math.random() * 100000);
    this.currentModelName = 'siteCompanyList' + random;
    this.currentSiteModelName = 'site' + random;
    this.model = new CompanyListModel({
      modelName: this.currentModelName
    });
    this.model.fetchAsyncData().then(function () {
      _this.model.site = new SiteModel({
        modelName: _this.currentSiteModelName
      });

      _this.model.site.getBackgroundTabData().then(function () {
        var content = _this.template();

        _this.$el.append(content);

        _this.setup();

        _this.setupClose();
      });
    });
  },
  _renderHeroTemplate: function _renderHeroTemplate() {
    if (this.model.site) {
      var _this$heroFn;

      /** @type {import('./../models/site.es6.js').PublicSiteModel} */
      var site = this.model.site;
      var icon = (_this$heroFn = this.heroFn) === null || _this$heroFn === void 0 ? void 0 : _this$heroFn.call(this, site.tab.requestDetails, site.protectionsEnabled);
      this.$hero.html(heroTemplate({
        status: icon,
        title: 'Trackers',
        showClose: true
      }));
    }
  },
  _rerender: function _rerender(e) {
    if (e && e.change) {
      if (e.change.attribute === 'isaMajorTrackingNetwork' || e.change.attribute === 'isAllowlisted' || e.change.attribute === 'totalTrackerNetworksCount') {
        this._renderHeroTemplate();

        this.unbindEvents();
        this.setup();
        this.setupClose();
      }
    }
  }
});
module.exports = TrackerNetworks;

},{"./../models/site-company-list.es6.js":79,"./../models/site.es6.js":80,"./../templates/shared/hero.es6.js":89,"./sliding-subview.es6.js":103}],105:[function(require,module,exports){
"use strict";

var _ripple = require("@material/ripple");

function setupMaterialDesignRipple() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  selectors.forEach(function (selector) {
    var $matches = document.querySelectorAll(selector);
    $matches.forEach(function ($el) {
      $el.classList.add('material-design-ripple');

      _ripple.MDCRipple.attachTo($el);
    });
  });
}

module.exports = {
  setupMaterialDesignRipple: setupMaterialDesignRipple
};

},{"@material/ripple":28}],106:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Връзка",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Криптиране",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Подписване",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Проверка",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Извличане",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Архивиране",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Разархивиране",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Неизвестен",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Подробности за сертификата за сигурност",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Общоприето име",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Публичен ключ",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Алгоритъм",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Размер на ключа",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Употреба",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Резюме",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Постоянен",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Ефективен размер",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Не е намерен сертификат",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Сертификат за {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Тази страница не осигурява защитена връзка. Възможно е други лица да могат да прихванат поверителна информация, която изпращате на тази страница.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Надградихме връзката на тази страница, за да защитим изпращаната от Вас информация по време на преноса.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Тази страница използва сигурна връзка, която защитава изпращаната от Вас информация по време на преноса.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],107:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Камера",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Микрофон",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Местоположение",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Изскачащи прозорци",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Питай всеки път",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Уведоми ме",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Винаги разрешено",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Винаги отказано",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],108:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Изберете опцията, която най-добре описва възникналия проблем.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Изберете проблем от списъка...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Видеото не се възпроизвежда",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Изображенията не се зареждат",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Коментарите не се зареждат",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Липсва съдържание",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Връзките или бутоните не работят",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Не мога да вляза",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Сайтът ме помоли да деактивирам",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Нещо друго",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Подаване на сигнал за повреден сайт",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Ако искате, опишете ни за възникналия проблем",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Изпращане на доклад",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Докладите, изпратени до DuckDuckGo, са 100% анонимни и включват само направения по-горе избор, евентуално въведеното описание, URL адреса и списък на тракерите, които сме открили в сайта.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Благодарим Ви!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Вашият доклад ще помогне за подобряване на браузъра и изживяването на останалите.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],109:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Тракери",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],110:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Актуализиране на списъка за защита",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Защитите са <b>ДЕАКТИВИРАНИ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Защитите за този сайт са <b>АКТИВИРАНИ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Възможно е други лица да могат да прихванат поверителна информация, която изпращате на тази страница.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Надградихме връзката на тази страница, за да защитим изпращаната от Вас информация по време на преноса.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Връзката на тази страница е сигурна и защитава изпращаната от Вас информация по време на преноса.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Не открихме компании, които да се опитват да Ви следят на тази страница.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Открихме само тракери, собственост на {name}, които не блокирахме.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Ние {isWhitelisted, select, true {открихме} other {блокирахме}} {displayCount} {displayCount, plural, =1 {тракер} other {тракера}} от {companyCount} {companyCount, plural, one {компания} other {компании}} на тази страница.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Уебсайтът не работи според очакванията?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Вземете предпазни мерки",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Защитите са ДЕАКТИВИРАНИ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Открихме, че няколко компании Ви следят и профилират на тази страница.} =2 {Открихме, че {firstCompany} и {secondCompany} Ви следят и профилират на тази страница.} one {Открихме, че {firstCompany} Ви следи и профилира на тази страница.} other {Открихме, че {firstCompany}, {secondCompany} и други Ви следят и профилират на тази страница.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Проследяващи мрежи",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (собственик на {domain})\nВи следи в {companyPrevalence}% от водещите сайтове.\nНе можем да блокираме компанията на сайтовете, които притежава, но можем да я блокираме на други страници.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Няма активност за отчитане",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Кои компании блокирахме",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Блокирахме няколко компании, които се опитват да Ви следят.} =2 {Блокирахме {firstCompany} и {secondCompany}, които се опитват да Ви следят.} one {Блокирахме {firstCompany}, която се опитва да Ви следи.} other {Блокирахме {firstCompany}, {secondCompany} и други, които се опитват да Ви следят.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Бисквитките са намалени до минимум",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Настроихме предпочитанията Ви за бисквитките, за да увеличим поверителността, и затворихме изскачащия прозорец за съгласие.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Връзката е сигурна",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Връзката не може да бъде защитена",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} блокирана основна проследяваща мрежа} other {{trackerCount} блокирани основни проследяващи мрежи}}} other {{trackerCount, plural, one {{trackerCount} блокирано проследяващо устройство} other {{trackerCount} блокирани проследяващи устройства}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} открита основна проследяваща мрежа} other {{trackerCount} открити основни проследяващи мрежи}}} other {{trackerCount, plural, one {{trackerCount} открито проследяващо устройство} other {{trackerCount} открити проследяващи устройства}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} е собственик на този сайт и на установените тракери, които се намират на тази страница, затова не ги блокирахме.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Тракерите се използват от компаниите за профилиране. Открихме, че тези компании следят Вашата дейност на тази страница.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Тракерите се използват от компаниите за профилиране. Блокирахме тези компании, които следят Вашата дейност на тази страница.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Проследяващата мрежа е неизвестна",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Домейни на тракери за {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 открити тракери",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Тракери, притежавани от този сайт (разрешени)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {Блокиран е {trackerCount} тракер на {domain}} other {Блокирани са {trackerCount} тракера на {domain}}}} other {{trackerCount, plural, one {Открит е {trackerCount} тракер на {domain}} other {Открити са {trackerCount} тракера на {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Анализ",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Реклама",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Социална мрежа",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],111:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Připojení",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Zašifrujte",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Podepište",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Ověřte",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Odvoďte",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Zabalte",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Rozbalte",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Neznámé",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Podrobnosti o bezpečnostním certifikátu",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Obecný název",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Veřejný klíč",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmus",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Velikost klíče",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Využití",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Shrnutí",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Trvale",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektivní velikost",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certifikát nenalezen",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certifikát pro doménu {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Tahle stránka neumožňuje zabezpečené připojení. Ostatní můžou zachytit citlivé informace, které jejím prostřednictvím odešleš.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Aktualizovali jsme připojení na téhle stránce, abychom ochránili zadávané informace.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Tahle stránka používá zabezpečené připojení, které chrání zadávané informace.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],112:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Fotoaparát",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Poloha",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Vyskakovací okna",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Vždycky se ptát",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Upozornit",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Vždy povolit",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Vždy zamítnout",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],113:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Vyber možnost, která nejlíp popisuje tvůj problém.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Vyber problém ze seznamu...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video nebylo přehráno",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Obrázky nebyly načteny",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentáře nebyly načteny",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Chybí obsah",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Odkazy nebo tlačítka nefungují",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Nemohu se přihlásit",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Tato stránka mě požádala o deaktivaci",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Něco jiného",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Nahlásit nefunkční webové stránky",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Jestli chceš, řekni nám o svém problému víc",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Poslat zprávu",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Hlášení odeslaná službě DuckDuckGo jsou 100% anonymní a obsahují jen to, co nahoře vybereš, volitelný popis, adresu URL a seznam trackerů, které jsme na webu našli.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Děkujeme vám!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Tvoje hlášení pomůže s vylepšováním prohlížeče a jeho funkčnosti pro ostatní uživatele.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],114:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Trackery",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],115:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Aktualizace seznamu ochranných prvků",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Ochrana je <b>VYPNUTÁ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Na tomhle webu je ochrana <b>ZAPNUTÁ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Ostatní můžou zachytit citlivé informace, které na téhle stránce zadáš.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Aktualizovali jsme připojení na téhle stránce, abychom ochránili zadávané informace.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Připojení na téhle stránce je zabezpečené, aby byly zadávané informace chráněné.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Na téhle stránce jsme nenašli žádné služby, které by se tě snažily sledovat.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Našli jsme jen trackery vlastněné službou {name}, které jsme nezablokovali.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Na téhle stránce jsme {isWhitelisted, select, true {našli} other {zablokovali}} {displayCount, plural, =1 {tracker} other {trackery}} (celkem {displayCount}) od {companyCount} {companyCount, plural, one {služby} other {služeb}}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Nefunguje web podle očekávání?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Tady to chce opatrnost",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Ochrana je VYPNUTÁ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Zjistili jsme, že na téhle stránce tě sledují některé služby, které si zároveň vytvářejí tvůj profil.} =2 {Zjistili jsme, že na téhle stránce tě sleduje {firstCompany} a {secondCompany} a zároveň si vytvářejí tvůj profil.} one {Zjistili jsme, že na téhle stránce tě sleduje {secondCompany}. Zároveň si i vytváří tvůj profil.} few {Zjistili jsme, že na téhle stránce tě sleduje {firstCompany}, {secondCompany} a další služby, které si zároveň vytvářejí tvůj profil.} many {Zjistili jsme, že na téhle stránce tě sleduje {firstCompany}, {secondCompany} a další služby, které si zároveň vytvářejí tvůj profil.} other {Zjistili jsme, že na téhle stránce tě sleduje {firstCompany}, {secondCompany} a další služby, které si zároveň vytvářejí tvůj profil.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Sledovací síť",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (vlastník domény {domain})\ntě sleduje na {companyPrevalence} % nejvýznamnějších webů.\nTuhle službu můžeme blokovat jen na stránkách, které nevlastní.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Žádná aktivita k nahlášení",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Koho jsme zablokovali",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Zablokovali jsme některé služby, které se tě snažily sledovat.} =2 {Zablokovali jsme služby {firstCompany} a {secondCompany}, které se tě snažily sledovat.} one {Zablokovali jsme službu {firstCompany}, která se tě snažila sledovat.} few {Zablokovali jsme {firstCompany}, {secondCompany} a další služby, které se tě snažily sledovat.} many {Zablokovali jsme {firstCompany}, {secondCompany} a další služby, které se tě snažily sledovat} other {Zablokovali jsme {firstCompany}, {secondCompany} a další služby, které se tě snažily sledovat}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Omezili jsme cookies",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Tvoje předvolby souborů cookie jsme nastavili na co největší ochranu soukromí a vyskakovací okno se žádostí o souhlas jsme zavřeli.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Připojení je zabezpečené",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Připojení se nepovedlo zabezpečit",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Zablokována {trackerCount} hlavní sledovací síť} few {Zablokovány {trackerCount} hlavní sledovací sítě} many {Zablokováno {trackerCount} hlavních sledovacích sítí} other {Zablokováno {trackerCount} hlavních sledovacích sítí}}} other {{trackerCount, plural, one {Zablokován {trackerCount} tracker} few {Zablokovány {trackerCount} trackery} many {Zablokováno {trackerCount} trackerů} other {Zablokováno {trackerCount} trackerů}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Nalezena {trackerCount} hlavní sledovací síť} few {Nalezeny {trackerCount} hlavní sledovací sítě} many {Nalezeno {trackerCount} hlavních sledovacích sítí} other {Nalezeno {trackerCount} hlavních sledovacích sítí}}} other {{trackerCount, plural, one {Nalezen {trackerCount} tracker} few {Nalezeny {trackerCount} trackery} many {Nalezeno {trackerCount} trackerů} other {Nalezeno {trackerCount} trackerů}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} vlastní tenhle web a trackery, které jsme na něm našli, takže jsme je nezablokovali.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Trackery umožňují různým službám, aby si vytvořily tvůj profil. Na téhle stránce sledují tvou aktivitu tyhle služby.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Trackery umožňují různým službám, aby si vytvořily tvůj profil. Na téhle stránce jsme zablokovali tyhle služby, které sledují tvou aktivitu.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Neznámá sledovací síť",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domény trackerů služby {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Žádné trackery nenalezeny",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Trackery vlastněné tímhle webem (povolené)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} zablokovaný tracker v doméně {domain}} few {{trackerCount} zablokované trackery v doméně {domain}} many {{trackerCount} zablokovaného trackeru v doméně {domain}} other {{trackerCount} zablokovaných trackerů v doméně {domain}}}} other {{trackerCount, plural, one {V doméně {domain} jsme našli {trackerCount} tracker} few {V doméně {domain} jsme našli {trackerCount} trackery} many {V doméně {domain} jsme našli {trackerCount} trackeru} other {V doméně {domain} jsme našli {trackerCount} trackerů}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analytika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklama",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sociální síť",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],116:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Forbindelse",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Krypter",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Log ind",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verificer",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Udled",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Pak",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Pak",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Ukendt",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detaljer om sikkerhedscertifikat",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Almindeligt navn",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Offentlig nøgle",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritme",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Nøglestørrelse",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Anvendelse",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Resumé",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Effektiv størrelse",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certifikat ikke fundet",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certifikat for {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Denne side giver ikke mulighed for en sikker forbindelse. Andre kan muligvis opfange følsomme oplysninger, som du sender på denne side.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Vi har opgraderet forbindelsen på denne side for at beskytte de oplysninger, du sender, mens de overføres.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Denne side bruger en sikker forbindelse, som beskytter de oplysninger, du sender, mens de overføres.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],117:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokalisering",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Pop op-vinduer",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Spørg hver gang",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Underret",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Tillad altid",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Afvis altid",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],118:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Vælg den mulighed, der bedst beskriver det problem, du oplevede.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Vælg dit emne fra listen ...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videoen blev ikke spillet",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Billeder blev ikke indlæst",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Kommentarer blev ikke indlæst",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Indhold mangler",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Links eller knapper fungerer ikke",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Jeg kan ikke logge ind",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Webstedet bad mig om at deaktivere",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Noget andet",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Rapporter ødelagt websted",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Hvis du vil, kan du fortælle os om det problem, du oplevede",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Send rapport",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Rapporter sendt til DuckDuckGo er 100 % anonyme og inkluderer kun dit valg ovenfor, din valgfri beskrivelse, URL'en og en liste over trackere, vi fandt på webstedet.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Tak!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Din rapport vil være med til at forbedre browseren og gøre oplevelsen bedre for andre brugere.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],119:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Trackere",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],120:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Opdatering af beskyttelseslisten",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Beskyttelse er blevet <b>DEAKTIVERET</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Beskyttelse er <b>AKTIVERET</b> for dette websted",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Andre kan muligvis opfange følsomme oplysninger, som du sender på denne side.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Vi har opgraderet forbindelsen på denne side for at beskytte oplysninger, du sender under overførslen.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Forbindelsen på denne side er sikker til at beskytte de oplysninger, du sender, når de overføres.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Vi har ikke fundet nogen virksomheder, der forsøger at spore dig på denne side.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Vi fandt kun trackere, der ejes af {name}, som vi ikke blokerede.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Vi {isWhitelisted, select, true {fandt} other {blokerede}} {displayCount} kendt(e) {displayCount, plural, =1 {tracker} other {trackere}} fra {companyCount} {companyCount, plural, one {virksomhed} other {virksomheder}} på denne side.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Fungerer webstedet ikke som forventet?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Tag forholdsregler",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Beskyttelse er DEAKTIVERET",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Vi har fundet nogle virksomheder, der sporer og profilerer dig på denne side.} =2 {Vi har fundet {firstCompany} og {secondCompany}, der sporer og profilerer dig på denne side.} one {Vi fandt {firstCompany}, der sporede og profilerede dig på denne side.} other {Vi fandt {firstCompany}, {secondCompany} og andre, der sporede og profilerede dig på denne side.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Tracker-netværk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (ejer af {domain})\nsporer dig på {companyPrevalence} % af de bedste sider.\nVi kan ikke blokere dem på websteder, de ejer, men vi kan blokere dem på andre sider.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Ingen aktivitet at rapportere",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Dem har vi blokeret",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Vi har forhindret nogle virksomheder i at forsøge at spore dig.} =2 {Vi har forhindret {firstCompany} og {secondCompany} i at forsøge at spore dig.} one {Vi har forhindret {firstCompany} i at forsøge at spore dig.} other {Vi har forhindret {firstCompany}, {secondCompany} og andre i at forsøge at spore dig.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimeret",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Vi har sat dine cookie-indstillinger til at maksimere fortrolighed og lukket pop op-vinduet med samtykke.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Forbindelsen er sikker",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Forbindelsen kunne ikke sikres",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} større tracker-netværk blokeret} other {{trackerCount} større tracker-netværk blokeret}}} other {{trackerCount, plural, one {{trackerCount} tracker blokeret} other {{trackerCount} trackere blokeret}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} større tracker-netværk fundet} other {{trackerCount} større tracker-netværk fundet}}} other {{trackerCount, plural, one {{trackerCount} tracker fundet} other {{trackerCount} trackere fundet}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} ejer dette websted og de kendte trackere, der findes på denne side, så vi blokerede dem ikke.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Trackere hjælper virksomheder med at profilere dig. Vi har fundet disse virksomheder, der overvåger din aktivitet på denne side.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Trackere hjælper virksomheder med at profilere dig. Vi har forhindret disse virksomheder i at overvåge din aktivitet på denne side.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Tracker-netværk ukendt",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Tracker-domæner for {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "'{'0'}' tracker fundet",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Trackere ejet af dette websted (tilladt)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} Tracker blokeret på {domain}} other {{trackerCount} Trackere blokeret på {domain}}}} other {{trackerCount, plural, one {{trackerCount} Tracker fundet på {domain}} other {{trackerCount} Trackere fundet på {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analyseværktøj",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklamer",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sociale netværk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],121:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Verbindung",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Entschlüsseln",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Unterzeichnen",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Überprüfen",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Ableiten",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Packen",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Entpacken",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Unbekannt",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Details zum Sicherheitszertifikat",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Allgemeiner Name",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Öffentlicher Schlüssel",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algorithmus",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Schlüssellänge",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Verwendung",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Zusammenfassung",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Dauerhaft",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Effektive Größe",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Zertifikat wurde nicht gefunden",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Zertifikat für {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Diese Seite ermöglicht keine sichere Verbindung. Vertrauliche Informationen, die du auf dieser Seite sendest, können von Dritten abgefangen werden.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Wir haben die Verbindung auf dieser Seite verbessert, um die von dir gesendeten Daten während der Übertragung zu schützen.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Diese Seite verwendet eine sichere Verbindung, die die von dir gesendeten Informationen während der Übertragung schützt.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],122:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Standort",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Pop-ups",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Jedes Mal fragen",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Benachrichtigen",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Immer erlauben",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Immer ablehnen",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],123:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Wähle die Option, die dein Problem am besten beschreibt.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Wähle dein Problem aus der Liste aus...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video wurde nicht abgespielt",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Bilder wurden nicht geladen",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Kommentare wurden nicht geladen",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Inhalt fehlt",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Links oder Schaltflächen funktionieren nicht",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Ich kann mich nicht anmelden",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Die Seite hat mich aufgefordert zu deaktivieren",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Etwas anderes",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Fehlerhafte Seite melden",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Du kannst uns dein Problem auch beschreiben",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Bericht senden",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Berichte, die an DuckDuckGo gesendet werden, sind 100 % anonym und enthalten nur deine obige Auswahl, deine optionale Beschreibung, die URL und eine Liste von Trackern, die wir auf der Website gefunden haben.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Vielen Dank!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Dein Bericht trägt dazu bei, den Browser und die Erfahrung für andere Personen zu verbessern.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],124:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Tracker",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],125:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Schutzliste wird aktualisiert",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Schutzmaßnahmen wurden <b>DEAKTIVIERT</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Der Schutz für diese Website ist <b>AKTIVIERT</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Vertrauliche Informationen, die du auf dieser Seite sendest, können von Dritten abgefangen werden.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Wir haben die Verbindung auf dieser Seite verbessert, um die von dir gesendeten Daten während der Übertragung zu schützen.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Die Verbindung auf dieser Seite ist sicher, um die von dir gesendeten Informationen bei der Übertragung zu schützen.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Wir haben keine Unternehmen gefunden, die versuchen, dich auf dieser Seite zu tracken.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Wir haben nur Tracker gefunden, die {name} gehören. Diese haben wir nicht blockiert.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Wir {isWhitelisted, select, true {found} other {blocked}} {displayCount} bekannt {displayCount, plural, =1 {tracker} other {trackers}} von {companyCount} {companyCount, plural, one {company} other {companies}} auf dieser Seite. Complete sentence: Wir haben 1 Tracker von 2 Unternehmen auf dieser Seite gefunden.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Die Website funktioniert nicht wie erwartet?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Vorsichtsmaßnahmen treffen",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Schutzmaßnahmen sind DEAKTIVIERT",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Wir haben einige Unternehmen gefunden, die dich auf dieser Seite tracken und ein Profil über dich erstellen.} =2 {Wir haben herausgefunden, dass {firstCompany} und {secondCompany} dich auf dieser Seite tracken und ein Profil über dich erstellen.} one {Wir haben herausgefunden, dass {firstCompany} und andere dich auf dieser Seite tracken und Profile über dich erstellen.} other {Wir haben herausgefunden, dass {firstCompany}, {secondCompany} und andere dich auf dieser Seite tracken und Profile über dich erstellen.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Tracker-Netzwerk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (Besitzer von {domain})\ntrackt dich auf {companyPrevalence}% der Top-Sites.\nWir können das Unternehmen nicht auf seinen eigenen Websites blockieren, aber wir können es auf anderen Seiten blockieren.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Keine auffällige Aktivität gefunden",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Wen wir blockiert haben",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Wir haben einige Unternehmen daran gehindert, dich zu tracken.} =2 {Wir haben {firstCompany} und {secondCompany} daran gehindert, dich zu tracken.} one {Wir haben {firstCompany} daran gehindert, dich zu tracken.} other {Wir haben {firstCompany}, {secondCompany} und andere daran gehindert, dich zu tracken.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimiert",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Wir haben deine Cookie-Einstellungen so eingestellt, dass die Privatsphäre maximiert wird, und das Zustimmungs-Pop-up geschlossen.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Die Verbindung ist sicher",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Verbindung konnte nicht gesichert werden",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} großes Tracker-Netzwerk blockiert} other {{trackerCount} große Tracker-Netzwerke blockiert}}} other {{trackerCount, plural, one {{trackerCount} Tracker blockiert} other {{trackerCount} Tracker blockiert}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} großes Tracker-Netzwerk gefunden} other {{trackerCount} große Tracker-Netzwerke gefunden}}} other {{trackerCount, plural, one {{trackerCount} Tracker gefunden} other {{trackerCount} Tracker gefunden}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} ist Besitzer dieser Website und der bekannten Tracker darauf. Deshalb haben wir das Unternehmen nicht blockiert.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Tracker helfen Unternehmen, ein Profil von dir zu erstellen. Wir haben herausgefunden, dass diese Unternehmen deine Aktivitäten auf dieser Seite überwachen.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Tracker helfen Unternehmen, ein Profil von dir zu erstellen. Wir haben diese Unternehmen daran gehindert, deine Aktivitäten auf dieser Seite zu überwachen.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Tracker-Netzwerk unbekannt",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Tracker-Domains für {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 Tracker gefunden",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Tracker, die dieser Website gehören (zugelassen)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} Tracker blockiert auf {domain}} other {{trackerCount} Tracker blockiert auf {domain}}}} other {{trackerCount, plural, one {{trackerCount} Tracker gefunden auf {domain}} other {{trackerCount} Tracker gefunden auf {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analytik",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Werbung",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Soziales Netzwerk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],126:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Σύνδεση",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Κρυπτογράφηση",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Υπογραφή",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Επαλήθευση",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Παραγωγή",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Αναδίπλωση",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Χωρίς αναδίπλωση",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Άγνωστο",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Λεπτομέρειες πιστοποιητικού ασφαλείας",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Κοινό όνομα",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Δημόσιο κλειδί",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Αλγόριθμος",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Μέγεθος κλειδιού",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Χρήση",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Περίληψη",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Μόνιμο",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Μέγεθος ισχύος",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Το πιστοποιητικό δεν βρέθηκε",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Πιστοποιητικό για {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Η σελίδα αυτή δεν επιτρέπει ασφαλή σύνδεση. Άλλα άτομα ενδέχεται να μπορούν να υποκλέψουν ευαίσθητες πληροφορίες που στέλνετε στη σελίδα αυτή.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Αναβαθμίσαμε τη σύνδεση στη σελίδα αυτή για προστασία των πληροφοριών που στέλνετε κατά τη μεταφορά τους.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Η σελίδα αυτή χρησιμοποιεί ασφαλή σύνδεση, η οποία προστατεύει τις πληροφορίες που στέλνετε κατά τη μεταφορά τους.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],127:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Κάμερα",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Μικρόφωνο",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Γεωεντοπισμός",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Αναδυόμενα",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Να γίνεται ερώτηση κάθε φορά",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Ειδοποίηση",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Να επιτρέπεται πάντα",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Να μην επιτρέπεται ποτέ",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],128:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Επιλέξτε αυτό που περιγράφει καλύτερα το πρόβλημα που αντιμετωπίσατε.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Επιλέξτε το πρόβλημα που αντιμετωπίζετε, από τη λίστα...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Το βίντεο δεν έπαιξε",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Οι εικόνες δεν φορτώθηκαν",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Τα σχόλια δεν φορτώθηκαν",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Το περιεχόμενο λείπει",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Οι σύνδεσμοι ή τα κουμπιά δεν λειτουργούν",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Δεν μπορώ να συνδεθώ",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Ο ιστότοπος μου ζήτησε να απενεργοποιήσω",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Κάτι άλλο",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Αναφορά ιστότοπου που δεν λειτουργεί",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Αν θέλετε, πείτε μας για το πρόβλημα που αντιμετωπίσατε",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Αποστολή Αναφοράς",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Οι αναφορές που αποστέλλονται στο DuckDuckGo είναι 100% ανώνυμες και περιλαμβάνουν μόνο την πιο πάνω επιλογή σας, την προαιρετική περιγραφή σας, τη διεύθυνση URL και μια λίστα με εφαρμογές παρακολούθησης που βρήκαμε στον ιστότοπο.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Σε ευχαριστώ!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Η αναφορά σας θα μας βοηθήσει στο να βελτιώσουμε το πρόγραμμα περιήγησης και θα καταστήσει την εμπειρία καλύτερη για άλλα άτομα που χρησιμοποιούν τις υπηρεσίες μας.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],129:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Εφαρμογές παρακολούθησης",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],130:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Ενημέρωση του καταλόγου προστασίας",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Οι επιλογές προστασίας έχουν <b>ΑΠΕΝΕΡΓΟΠΟΙΗΘΕΙ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Οι επιλογές προστασίας είναι <b>ΕΝΕΡΓΟΠΟΙΗΜΕΝΕΣ</b> για τον συγκεκριμένο ιστότοπο",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Άλλα άτομα ενδέχεται να μπορούν να υποκλέψουν ευαίσθητες πληροφορίες που στέλνετε στη σελίδα αυτή.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Αναβαθμίσαμε τη σύνδεση στη σελίδα αυτή για προστασία των πληροφοριών που στέλνετε κατά τη μεταφορά τους.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Η σύνδεση στη σελίδα αυτή είναι ασφαλής για προστασία των πληροφοριών που στέλνετε κατά τη μεταφορά τους.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Δεν βρήκαμε εταιρείες που να προσπαθούν να σας παρακολουθήσουν στη σελίδα αυτή.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Βρήκαμε μόνο εφαρμογές παρακολούθησης που ανήκουν στην εταιρεία {name}, τους οποίους δεν μπλοκάραμε.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "{isWhitelisted, select, true {Βρήκαμε} other {Αποκλείσαμε}} {displayCount} γνωστό {displayCount, plural, =1 {εφαρμογή παρακολούθησης} other {εφαρμογές παρακολούθησης}} από {companyCount} {companyCount, plural, one {εταιρεία} other {εταιρείες}} σε αυτήν τη σελίδα.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Δεν λειτουργεί ο ιστότοπος όπως αναμενόταν;",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Λάβετε μέτρα προφύλαξης",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Οι επιλογές προστασίας είναι ΑΠΕΝΕΡΓΟΠΟΙΗΜΕΝΕΣ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Βρήκαμε ορισμένες εταιρείες οι οποίες σας παρακολουθούν και σκιαγραφούν το προφίλ σας σε αυτήν τη σελίδα.} =2 {Βρήκαμε τις εταιρείες {firstCompany} και {secondCompany} οι οποίες σας παρακολουθούν και σκιαγραφούν το προφίλ σας σε αυτήν τη σελίδα.} one {Βρήκαμε την εταιρεία {firstCompany} η οποία σας παρακολουθεί και σκιαγραφεί το προφίλ σας σε αυτήν τη σελίδα.} other {Βρήκαμε τις εταιρείες {firstCompany}, {secondCompany} και άλλες οι οποίες σας παρακολουθούν και σκιαγραφούν το προφίλ σας σε αυτήν τη σελίδα.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Δίκτυο παρακολούθησης",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (ιδιοκτήτης του {domain})\nσάς παρακολουθεί στο {companyPrevalence}% των κορυφαίων ιστότοπων.\nΔεν μπορούμε να τους αποκλείσουμε σε ιστότοπους που τους ανήκουν, ωστόσο μπορούμε σε άλλες σελίδες.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Δεν υπάρχει καμία δραστηριότητα προς αναφορά",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Ποιους μπλοκάραμε",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Αποκλείσαμε ορισμένες εταιρείες από την προσπάθειά τους να σας παρακολουθήσουν.} =2 {Αποκλείσαμε τις εταιρείες {firstCompany} και {secondCompany} από την προσπάθειά τους να σας παρακολουθήσουν.} one {Αποκλείσαμε την εταιρεία {firstCompany} από την προσπάθειά της να σας παρακολουθήσει.} other {Αποκλείσαμε τις εταιρείες {firstCompany}, {secondCompany} και άλλες από την προσπάθειά τους να σας παρακολουθήσουν.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Ελαχιστοποίηση cookies",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Ρυθμίσαμε τις προτιμήσεις σας σχετικά με τα cookies ώστε να μεγιστοποιήσουμε το απόρρητο και κλείσαμε το αναδυόμενο παράθυρο συγκατάθεσης.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Η σύνδεση είναι ασφαλής",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Η σύνδεση ενδέχεται να μην είναι ασφαλής",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Αποκλείστηκε {trackerCount} κύριο δίκτυο παρακολούθησης} other {Αποκλείστηκαν {trackerCount} κύρια δίκτυα παρακολούθησης}}} other {{trackerCount, plural, one {Αποκλείστηκε {trackerCount} παρακολούθηση} other {Αποκλείστηκαν {trackerCount} παρακολουθήσεις}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Βρέθηκε {trackerCount} κύριο δίκτυο παρακολούθησης} other {Βρέθηκαν {trackerCount} κύρια δίκτυα παρακολούθησης}}} other {{trackerCount, plural, one {Βρέθηκε {trackerCount} παρακολούθηση} other {Βρέθηκαν {trackerCount} παρακολουθήσεις}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "Η εταιρεία {companyName} αποτελεί κάτοχο αυτού του ιστότοπου και των γνωστών εφαρμογών παρακολούθησης που βρέθηκαν στη σελίδα αυτή, γι' αυτό δεν τα αποκλείσαμε.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Οι εφαρμογές παρακολούθησης βοηθούν τις εταιρείες να σκιαγραφήσουν το προφίλ σας. Βρήκαμε αυτές τις εταιρείες οι οποίες παρακολουθούν τη δραστηριότητά σας στη συγκεκριμένη σελίδα.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Οι εφαρμογές παρακολούθησης βοηθούν τις εταιρείες να σκιαγραφήσουν το προφίλ σας. Αποκλείσαμε αυτές τις εταιρείες από το να παρακολουθούν τη δραστηριότητά σας στη συγκεκριμένη σελίδα.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Άγνωστο δίκτυο παρακολούθησης",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Τομείς παρακολούθησης για την εταιρεία {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Βρέθηκαν 0 εφαρμογές παρακολούθησης",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Εφαρμογές παρακολούθησης που ανήκουν σε αυτόν τον ιστότοπο (Επιτρέπονται)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} εφαρμογή παρακολούθησης αποκλείστηκε στο {domain}} other {{trackerCount} εφαρμογές παρακολούθησης μπλοκαρίστηκαν στο {domain}}}} other {{trackerCount, plural, one {{trackerCount} εφαρμογή παρακολούθησης βρέθηκε στο {domain}} other {{trackerCount} εφαρμογές παρακολούθησης βρέθηκαν στο {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Ανάλυση",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "διαφήμιση",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Κοινωνικό δίκτυο",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],131:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    },
    "encrypt": {
        "title": "Encrypt",
        "note": "When the cryptographic key can be used to encrypt data"
    },
    "sign": {
        "title": "Sign",
        "note": "When the cryptographic key can be used to sign data"
    },
    "verify": {
        "title": "Verify",
        "note": "When the cryptographic key can be used to verify data"
    },
    "derive": {
        "title": "Derive",
        "note": "When the cryptographic key can be used to derive new keys"
    },
    "wrap": {
        "title": "Wrap",
        "note": "When the cryptographic key can be used to wrap another key"
    },
    "unwrap": {
        "title": "Unwrap",
        "note": "When the cryptographic key can be used to unwrap another key"
    },
    "unknown": {
        "title": "Unknown",
        "note": "The cryptographic key can be used some other purpose we don't recognize"
    },
    "certificateDetail": {
        "title": "Security Certificate Detail",
        "note": "Header for section that contains the SSL certificate details"
    },
    "commonName": {
        "title": "Common Name",
        "note": "The Common Name for an SSL certificate"
    },
    "publicKey": {
        "title": "Public Key",
        "note": "The Public Key for an SSL certificate"
    },
    "algorithm": {
        "title": "Algorithm",
        "note": "The Algorithm used for an SSL certificate"
    },
    "keySize": {
        "title": "Key Size",
        "note": "The size of the encryption key for an SSL certificate"
    },
    "usage": {
        "title": "Usage",
        "note": "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
    },
    "summary": {
        "title": "Summary",
        "note": "Header for summary of connection details"
    },
    "permanent": {
        "title": "Permanent",
        "note": "Whether certificate is permanent"
    },
    "effectiveSize": {
        "title": "Effective Size",
        "note": "Effective size of encryption key for an SSL certificate"
    },
    "certificateNotFound": {
        "title": "Certificate not found",
        "note": "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
    },
    "certificateForDomain": {
        "title": "Certificate for {domain}",
        "note": "Header for certificate details for a given domain"
    },
    "insecureConnectionDesc": {
        "title": "This page is using an unencrypted connection. Third parties may be able to view your activity or intercept sensitive information you send on this page.",
        "note": "Shown we connection is not encrypted"
    },
    "upgradedConnectionDesc": {
        "title": "We upgraded the connection on this page to protect information you send while in transit.",
        "note": "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
    },
    "secureConnectionDesc": {
        "title": "This page uses an encrypted connection, which prevents third parties from viewing your activity or intercepting sensitive information you send on this page.",
        "note": "Shown when the user navigated directly to a secure connection"
    }
}

},{}],132:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    },
    "protectionsUnavailableNote": {
        "title": "Privacy Protection is not available for special pages or local pages.",
        "note": "The text for the warning"
    },
    "spreadTitle": {
        "title": "Love using DuckDuckGo?",
        "note": "Title text for 'spread' CTA"
    },
    "spreadText": {
        "title": "Help us spread the word to your family and friends",
        "note": "Secondary text for 'spread' CTA"
    },
    "spreadButton": {
        "title": "Spread DuckDuckGo",
        "note": "Button text for 'spread' CTA"
    },
    "emailTitle": {
        "title": "Tired of emails being tracked?",
        "note": "Title text for 'email' CTA"
    },
    "emailText": {
        "title": "Sign up for DuckDuckGo Email Protection for your extension now!",
        "note": "Secondary text for 'email' CTA"
    }
}

},{}],133:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    },
    "camera": {
        "title": "Camera",
        "note": "Camera permission is used by the browser to ask the user for access to computer or phone camera"
    },
    "microphone": {
        "title": "Microphone",
        "note": "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
    },
    "geolocation": {
        "title": "Geolocation",
        "note": "Geolocation permission is used by the browser to ask the user to share their current location with the website"
    },
    "popups": {
        "title": "Pop-ups",
        "note": "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
    },
    "ask": {
        "title": "Ask every time",
        "note": "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
    },
    "notify": {
        "title": "Notify",
        "note": "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
    },
    "grant": {
        "title": "Always allow",
        "note": "A permission setting that allows the website to always use this permission without asking"
    },
    "deny": {
        "title": "Always deny",
        "note": "A permission setting that always blocks the website from using this permission"
    }
}
},{}],134:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    },
    "selectTheOptionDesc": {
        "title": "Select the option that best describes the problem you experienced.",
        "note": "The user will see this UI when they're running into issues with a given website, that we may be causing"
    },
    "pickYourIssueFromTheList": {
        "title": "Pick your issue from the list...",
        "note": "Asks the user to pick a specific list from the pulldown"
    },
    "videos": {
        "title": "Video didn't play",
        "note": "User is reporting this page because a video didn't play"
    },
    "images": {
        "title": "Images didn't load",
        "note": "User is reporting this page because one or more images did not load"
    },
    "comments": {
        "title": "Comments didn't load",
        "note": "User is reporting this page because one or more comments did not load"
    },
    "content": {
        "title": "Content is missing",
        "note": "User is reporting this page because some other type of content did not load"
    },
    "links": {
        "title": "Links or buttons don't work",
        "note": "User is reporting this page because one or more links or buttons did not work when clicked"
    },
    "login": {
        "title": "I can't sign in",
        "note": "User is reporting this page because they are unable to log into the website"
    },
    "paywall": {
        "title": "The site asked me to disable",
        "note": "User is reporting this page asked them to disable their privacy or ad blocking extension"
    },
    "other": {
        "title": "Something else",
        "note": "User is reporting this page because of some other reason than the ones we listed"
    },
    "tellUsMoreDesc": {
        "title": "If you'd like, tell us about the problem you experienced",
        "note": "A hint for a text box that lets user enter free text to describe their problem"
    },
    "sendReport": {
        "title": "Send Report",
        "note": "Button for submitting report"
    },
    "reportsAreAnonymousDesc": {
        "title": "Reports sent to DuckDuckGo only include information required to help us address your feedback.",
        "note": "A small disclaimer at the bottom of the view describing what is included in the report"
    },
    "thankYou": {
        "title": "Thank you!",
        "note": "Title for what the user sees upon submitting the report"
    },
    "yourReportWillHelpDesc": {
        "title": "Your report will help improve our products and make the experience better for other people.",
        "note": "Body that the user sees upon submitting the report"
    }
}

},{}],135:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    }
}

},{}],136:[function(require,module,exports){
module.exports={
    "smartling": {
        "string_format" : "icu",
        "translate_paths": [{
            "path": "*/title",
            "key": "{*}/title",
            "instruction": "*/note"
        }]
    },
    "updatingProtectionList": {
        "title": "Updating protection list",
        "note": "Message shown while updating the list of protections"
    },
    "protectionsEnabled": {
        "title": "Protections are <b>ON</b> for this site",
        "note": "Headline when privacy protections are enabled"
    },
    "protectionsDisabled": {
        "title": "Protections are <b>OFF</b> for this site",
        "note": "Headline when privacy protections are disabled by user"
    },
    "protectionsDisabledRemote": {
        "title": "We temporarily turned Privacy Protection off as it appears to be breaking this site.",
        "note": "Headline when privacy protections are disabled by DDG"
    },
    "protectionsDisabledRemoteOverride": {
        "title": "We recommend disabling Privacy Protection for this site to prevent the site from breaking.",
        "note": "Headline when privacy protections are disabled by user"
    },
    "connectionDescriptionUnencrypted": {
        "title": "<b>This site is not secure</b> and may compromise any information you send on this page.",
        "note": "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
    },
    "trackerNetworksSummaryBlocked": {
        "title": "The following third-party domains’ requests were blocked from loading because they were identified as tracking requests. If a company's requests are loaded, it can allow them to profile you.",
        "note": "The summary immediately shown on the 'trackers blocked' screen"
    },
    "trackerNetworksSummaryNoneBlocked": {
        "title": "No tracking requests were blocked from loading on this page. If a company's requests are loaded, it can allow them to profile you.",
        "note": "The message shown when we detected trackers, but none were blocked"
    },
    "trackerNetworksSummaryNoneFound": {
        "title": "We did not identify any tracking requests on this page.",
        "note": "The message shown when we didn't detect any trackers"
    },
    "trackerNetworksSummaryNone": {
        "title": "We didn't find any companies trying to load tracking requests on this page.",
        "note": "We did not find any trackers on this page"
    },
    "trackerNetworksSummaryAllowedOnly": {
        "title": "To prevent site breakage, we didn’t block any companies from loading tracking requests on this page.",
        "note": "The message shown when we allowed some trackers to load."
    },
    "trackerNetworksSummaryProtectionsOff": {
        "title": "No tracking requests were blocked from loading because Protections are turned off for this site. If a company's requests are loaded, it can allow them to profile you.",
        "note": "We found trackers, but protections were disabled"
    },
    "createNewDuckAddress": {
        "title": "Create new Duck Address",
        "note": "Create a new private email alias"
    },
    "createNewDuckAddressCopied": {
        "title": "Copied to your clipboard!",
        "note": "Note to inform that the email address was copied"
    },
    "websiteNotWorkingQ": {
        "title": "Website not working as expected?",
        "note": "Call to action for user to click if they are having issues with this web page"
    },
    "takePrecautions": {
        "title": "Take Precautions",
        "note": "Title shown when the page is unencrypted"
    },
    "majorTrackingNetworkDesc": {
        "title": "<b>This site is owned by {companyDisplayName}</b>, which operates a tracker network across {companyPrevalence}% of the top websites. {blocked, select, true {We were able to block some of their requests on this page.} other {}}",
        "note": "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
    },
    "trackersBlockedDesc": {
        "title": "We blocked {companyCount, plural, =0 {We blocked} =1 {<b>{firstCompany}</b>} =2 {<b>{firstCompany}</b> and <b>{secondCompany}</b>} =3 {<b>{firstCompany}</b>, <b>{secondCompany}</b> and <b>{thirdCompany}</b>} =4 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> and <b>{fourthCompany}</b>} =5 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> and <b>1 other</b>} other {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> and <b>{othersCount} others</b>}} from loading tracking requests on this page.",
        "note": "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
    },
    "cookiesMinimized": {
        "title": "Cookies Managed",
        "note": "Title for when we have set the cookie privacy settings on this website to maximize privacy"
    },
    "connectionSecure": {
        "title": "Connection Is Encrypted",
        "note": "The connection to the website is secure (HTTPS)"
    },
    "connectionNotSecure": {
        "title": "Connection Is Not Encrypted",
        "note": "The connection is not secure (HTTP)"
    },
    "trackerNetworksDesc": {
        "title": "Requests Blocked from Loading",
        "note": "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
    },
    "trackerNetworksNotBlocked": {
        "title": "No Tracking Requests Blocked",
        "note": "This indicates that no trackers were blocked."
    },
    "trackerNetworksNotFound": {
        "title": "No Tracking Requests Found",
        "note": "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded"
    },
    "trackerNetworksProtectionsDisabled": {
        "note": "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded"
    },
    "thirdParties": {
        "title": "Third-Party Requests Loaded",
        "subtitle": "Requests from third-party domains were loaded on this page.",
        "note": "todo"
    },
    "thirdPartiesLoaded": {
        "title": "Third-Party Requests Loaded",
        "subtitle": "Requests from other third-party domains were loaded on this page.",
        "note": "todo"
    },
    "thirdPartiesNoneFound": {
        "title": "No Third-Party Requests Found",
        "note": "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page."
    },
    "firstPartyDesc": {
        "title": "{companyName} owns this site and the known trackers found on this page, so we didn't block them.",
        "note": "When trackers detected belong to companyName, we can't block them on a site that company owns"
    },
    "noTrackersFound": {
        "title": "We didn't find any companies trying to load tracking requests on this page.",
        "note": "We did not find any trackers on this page"
    },
    "trackersFoundForAllowlisted": {
        "title": "Trackers help companies profile you. We found these companies monitoring your activity on this page.",
        "note": "This header for the list of tracker companies is shown when a site has protections disabled"
    },
    "trackersFoundAndBlocked": {
        "title": "Trackers help companies profile you. We blocked these companies from monitoring your activity on this page.",
        "note": "This header for the list of tracker companies is shown when a site has protections enabled"
    },
    "trackerNetworkUnknown": {
        "title": "Tracker network unknown",
        "note": "Shown when we don't have a company name for a given tracker"
    },
    "trackerDomainsForCompany": {
        "title": "Tracker domains for {companyName}",
        "note": "Title for the list of tracker domains detected from a given company"
    },
    "zeroTrackersFound": {
        "title": "0 Trackers Found",
        "note": "We did not find any trackers on this page"
    },
    "trackerOwnedByThisSite": {
        "title": "Trackers Owned by This Site (Allowed)",
        "note": "Trackers owned by this site are not blocked"
    },
    "trackerCountForDomain": {
        "title": "{trackerCount} {trackerCount, plural, =1 {Tracker} other {Trackers}} {blocked, select, true {Blocked} other {Found}} on {domain}",
        "note": "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
    },
    "trackerLimitationsNote": {
        "title": "Please note: platform limitations may limit our ability to detect all requests.",
        "note": "Shown at the bottom of tracker lists"
    },
    "trackerAboutLink": {
        "title": "About our Web Tracking Protections",
        "note": "Shown in tracker lists"
    },
    "trackerAdLink": {
        "title": "How our search ads impact our protections",
        "note": "Shown in tracker lists for Ad Attribution"
    },
    "sectionHeadingAdAttribution": {
        "title": "The following domain’s requests were loaded because a {domain} ad on DuckDuckGo was recently clicked. These requests help evaluate ad effectiveness. All ads on DuckDuckGo are non-profiling."
    },
    "sectionHeadingIgnore": {
        "title": "The following domains’ requests were loaded to prevent site breakage."
    },
    "sectionHeadingFirstParty": {
        "title": "The following domains’ requests were loaded because they’re associated with {domain}."
    },
    "sectionHeadingThirdParty": {
        "title": "The following domains' requests were also loaded."
    },
    "sectionHeadingProtectionsDisabled": {
        "title": "The following domains' requests were loaded because protections are off.",
        "note": "The label to display when it's a single combined list"
    },
    "thirdPartiesSummaryLoaded": {
        "title": "The following third-party domains’ requests were loaded. If a company's requests are loaded, it can allow them to profile you, though our other web tracking protections still apply.",
        "note": "Shown as the summary in third parties screen"
    },
    "thirdPartiesSummaryProtectionsOff": {
        "title": "The following third-party domains’ requests were loaded. If a company's requests are loaded, it can allow them to profile you, though our other web tracking protections still apply.",
        "note": "Shown when any requests were loaded, but protections are off"
    },
    "thirdPartiesSummaryNone": {
        "title": "We did not identify any requests from third-party domains.",
        "note": "Shown in third party listing screen"
    },
    "analyticsCategory": {
        "title": "Analytics",
        "note": "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
    },
    "advertisingCategory": {
        "title": "Advertising",
        "note": "Used to describe the type of tracker, in this case one that is used for advertising"
    },
    "socialCategory": {
        "title": "Social Network",
        "note": "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
    },
    "searchPlaceholder": {
        "title": "Search DuckDuckGo",
        "note": "Placeholder text for the search bar"
    },
    "searchGoButton": {
        "title": "Search",
        "note": "Aria label for the search button"
    },
    "optionsButton": {
        "title": "More options",
        "note": "Aria label for the for the options button"
    },
    "navigationComplete": {
        "title": "Done",
        "note": "Button text for iOS on top bar navigation"
    },
    "navigationBack": {
        "title": "Back",
        "note": "Aria label and visible text for iOS on top bar navigation"
    }
}

},{}],137:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Conexión",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Cifrar",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Firmar",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verificar",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Derivar",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Envolver",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Desenvolver",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Desconocido",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detalle del certificado de seguridad",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Nombre común",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Clave pública",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmo",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Tamaño de la clave",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Uso",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Resumen",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanente",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Tamaño efectivo",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "No se ha encontrado el certificado",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificado de {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Esta página no permite una conexión segura. Otras personas pueden interceptar la información confidencial que envíes en ella.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Hemos mejorado la conexión de esta página para proteger la información que envías mientras estás en tránsito.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Esta página utiliza una conexión segura que protege la información que envías mientras estás en tránsito.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],138:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Cámara",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Micrófono",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolocalización",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Ventanas emergentes",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Preguntar cada vez",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Notificar",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Permitir siempre",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Rechazar siempre",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],139:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Selecciona la opción que describa mejor el problema que has encontrado.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Elige tu problema en la lista...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "No se ha reproducido el vídeo",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Las imágenes no se cargaron",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "No se han cargado los comentarios",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Falta contenido",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Los enlaces o botones no funcionan",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "No puedo iniciar sesión",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "El sitio me pidió que desactivara",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Otro problema",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Informar de sitio web dañado",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Si quieres, cuéntanos qué problema has encontrado",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Enviar informe",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Los informes enviados a DuckDuckGo son 100 % anónimos y solo incluyen tu selección anterior, tu descripción opcional, la URL y una lista de los rastreadores que hemos encontrado en el sitio.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "¡Gracias!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Tu informe ayudará a mejorar el navegador y la experiencia para otras personas.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],140:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Rastreadores",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],141:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Actualizando la lista de protección",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Las protecciones se han <b>DESACTIVADO</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Las protecciones están <b>HABILITADAS</b> para este sitio",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Otras personas pueden interceptar la información confidencial que envíes en ella.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Hemos actualizado la conexión de esta página para proteger la información que envías en tránsito.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "La conexión en esta página es segura para proteger la información que envías en tránsito.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "No hemos encontrado ninguna empresa que haya intentado rastrearte en esta página.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Solo hemos encontrado rastreadores propiedad de {name}, los cuales no hemos bloqueado.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Hemos {isWhitelisted, select, true {encontrado} other {bloqueado}} {displayCount} known {displayCount, plural, =1 {rastreador} otros {rastreadores}} de {companyCount} {companyCount, plural, one {empresa} otras {empresas}} en esta página.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "¿El sitio web no funciona como esperabas?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Toma precauciones",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Las protecciones están DESACTIVADAS",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Hemos encontrado algunas empresas rastreándote y perfilándote en esta página.} =2 {Hemos encontrado a {firstCompany} y {secondCompany} rastreándote y perfilándote en esta página.} one {Hemos encontrado a {firstCompany} rastreándote y perfilándote en esta página.} other {Hemos encontrado a {firstCompany}, {secondCompany} y otras rastreándote y perfilándote en esta página.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Red de rastreadores",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (propietario de {domain})\nte rastrea en el {companyPrevalence} % de los sitios principales.\nNo podemos bloquearlos en los sitios que poseen, pero sí en otras páginas.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "No hay actividad que comunicar",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "A quién hemos bloqueado",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Hemos bloqueado a algunas empresas para que no intenten rastrearte.} =2 {Hemos bloqueado a {firstCompany} y {secondCompany} para que no intenten rastrearte.} one {Hemos bloqueado a {firstCompany} para que no intente rastrearte.} other {Hemos bloqueado a {firstCompany}, {secondCompany} y otros para que no intenten rastrearte.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimizadas",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Hemos configurado tus preferencias de cookies para maximizar la privacidad y hemos cerrado la ventana emergente de consentimiento.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "La conexión es segura",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "No se ha podido asegurar la conexión",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} red de rastreadores principal bloqueada} other {{trackerCount} redes de rastreadores principales bloqueadas}}} other {{trackerCount, plural, one {{trackerCount} rastreador bloqueado} other {{trackerCount} rastreadores bloqueados}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} red de rastreadores principal encontrada} other {{trackerCount} redes de rastreadores principales encontradas}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado} other {{trackerCount} rastreadores encontrados}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} es el propietario de este sitio y de los rastreadores conocidos encontrados en esta página, por lo que no los hemos bloqueado.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Los rastreadores ayudan a las empresas a elaborar tu perfil. Hemos encontrado a estas empresas realizando un seguimiento de tu actividad en esta página.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Los rastreadores ayudan a las empresas a elaborar tu perfil. Hemos bloqueado a estas empresas para que no controlen tu actividad en esta página.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Red de rastreadores desconocida",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Dominios de rastreadores de {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 rastreadores encontrados",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Rastreadores propiedad de este sitio (permitidos)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} rastreador bloqueado en {domain}} other {{trackerCount} rastreadores bloqueados en {domain}}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado en {domain}} other {{trackerCount} rastreadores encontrados en {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Análisis",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Publicidad",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Red social",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],142:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Ühendus",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Krüpteeri",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Logi sisse",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Kinnita",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Tuleta",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Paki",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Paki lahti",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Tundmatu",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Turvasertifikaadi üksikasjad",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Üldine nimi",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Avalik võti",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritm",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Võtme suurus",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Kasutamine",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Kokkuvõte",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Püsiv",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektiivne suurus",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Sertifikaati ei leitud",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Domeeni {domain} sertifikaat",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "See leht ei luba turvalist ühendust. Teised võivad olla võimelised kinni püüdma tundlikku teavet, mida sa sellel lehel saadad.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Me täiendasime selle lehel kasutatavat ühendust, et kaitsta sinu saadetud teavet edastamise ajal.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "See leht kasutab turvalist ühendust, mis kaitseb edastamise ajal saadavat teavet.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],143:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kaamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Asukohatuvastus",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Hüpikaknad",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Küsi iga kord",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Teavita",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Luba alati",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Keela alati",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],144:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Vali suvand, mis kirjeldab sinu probleemi kõige paremini.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Vali loendist oma probleem...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videot ei esitatud",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Pilte ei laaditud",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Kommentaare ei laaditud",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Sisu puudub",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Lingid või nupud ei töötanud",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Ma ei saa sisse logida",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Sait palus mul välja lülitada",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Midagi muud",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Teata mittetoimivast saidist",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Soovi korral räägi meile probleemist, mida kogesid",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Saada aruanne",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "DuckDuckGo'le saadetud teated on 100% anonüümsed ja sisaldavad ainult sinu ülalesitatud valikut, sinu vabatahtlikku kirjeldust, URL-i ja nimekirja jälguritest, mille me saidilt leidsime.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Aitäh!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Sinu teade aitab täiustada brauserit ja parendada teiste inimeste kasutajakogemust.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],145:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Jälgurid",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],146:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Kaitseloendi värskendamine",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Kaitsed on <b>KEELATUD</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Kaitsed on sellel saidil <b>LUBATUD</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Teised võivad olla võimelised kinni püüdma tundlikku teavet, mida sa sellel lehel saadad.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Me täiendasime sellel lehel olevat ühendust, et kaitsta sinu saadetud teavet selle edastamise ajal.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Sellel lehel kasutatav ühendus on turvaline, et kaitsta sinu saadetud teavet.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Me ei leidnud ühtegi ettevõtet, mis üritaks sind sellel lehel jälgida.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Me leidsime ainult ettevõttele {name} kuuluvad jälgurid, mida me ei blokeerinud.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Me {isWhitelisted, select, true {leidsime} other {blokeerisime}} sellel leheküljel {displayCount} teadaoleva {displayCount, plural, =1 {jälguri} {jälgurit}} {companyCount} {companyCount, plural, one {ettevõttelt} other {ettevõttelt}}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Kas veebisait ei tööta ootuspäraselt?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Kasuta ettevaatusabinõusid",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Kaitsed on KEELATUD",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Leidsime sellel lehel mõned ettevõtted, kes sind jälgivad ja profileerivad.} =2 {Me leidsime ettevõtte {firstCompany} ja {secondCompany}, kes sind sellel lehel jälgivad ja profileerivad.} one {Leidsime ettevõtte {firstCompany}, kes jälgib ja profileerib sind sellel lehel.} other {Leidsime ettevõtted {firstCompany}, {secondCompany} ja veel teisi, kes jälgivad ja profileerivad sind sellel lehel.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Jälgimisvõrk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (domeeni {domain} omanik)\njälgib sind {companyPrevalence}% populaarseimatest saitidest.\nMe ei saa blokeerida neid nende enda saitidel, kuid saame blokeerida teisi lehekülgi.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Raporteeritavat tegevust ei ole",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Kelle me blokeerisime",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Me blokeerisime mõnede ettevõtete püüded sind jälgida.} =2 {Me blokeerisime ettevõtete {firstCompany} ja {secondCompany} püüded sind jälgida.} one {Me blokeerisime ettevõtte {firstCompany} püüded sind jälgida.} other {Me blokeerisime ettevõtte {firstCompany}, {secondCompany} ja teiste püüded sind jälgida.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Minimeeritud küpsised",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Me seadistasime sinu küpsiste eelistused maksimeerima privaatsust ja sulgesime nõusoleku hüpikakna.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Ühendus on turvaline",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Ühendust ei saanud turvata",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} Peamine jälgimisvõrk on blokeeritud} other {{trackerCount} Peamine jälgimisvõrk on blokeeritud}}} other {{trackerCount, plural, one {{trackerCount} jälgija on blokeeritud} other {{trackerCount} jälgijat on blokeeritud}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} Leitud peamine jälgimisvõrk} other {{trackerCount} Leitud peamine jälgimisvõrk}}} other {{trackerCount, plural, one {{trackerCount} jälitaja leitud} other {{trackerCount} jälitajat leitud}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} omab seda saiti ja sellel lehel kasutatavaid teada olevaid jälgureid, seega me ei blokeerinud neid.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Jälgurid aitavad ettevõtetel sind profileerida. Leidsime, et need ettevõtted jälgivad sinu tegevust sellel lehel.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Jälgurid aitavad ettevõtetel sind profileerida. Blokeerisime need ettevõtted, kes jälgivad sinu tegevust sellel lehel.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Tundmatu jälgimisvõrk",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Ettevõtte {companyName} jälguri domeenid",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Leiti 0 jälgurit",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Sellele saidile kuuluvad jälgurid (lubatud)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {Saidil {domain} blokeeriti {trackerCount} jälgur} other {Saidil {domain} blokeeriti {trackerCount} jälgurit}}} other {{trackerCount, plural, one {Saidilt {domain} leiti {trackerCount} jälgur} other {Saidilt {domain} leiti {trackerCount} jälgurit}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analüütika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklaamimine",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sotsiaalvõrk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],147:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Yhteys",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Salaa",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Allekirjoita",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Vahvista",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Johda",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Rivitä",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Poista rivitys",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Tuntematon",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Suojausvarmenteen tiedot",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Yleinen nimi",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Julkinen avain",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmi",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Avaimen koko",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Käyttö",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Yhteenveto",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Pysyvä",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Tehokas koko",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Varmennetta ei löydy",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Verkkotunnuksen {domain} varmenne",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Tämä sivu ei salli suojattua yhteyttä. Muut saattavat pystyä sieppaamaan tällä sivulla lähettämäsi arkaluonteiset tiedot.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Päivitimme tämän sivun yhteyden suojataksemme siirron aikana lähettämiäsi tietoja.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Tällä sivulla käytetään suojattua yhteyttä, joka suojaa siirron aikana lähettämiäsi tietoja.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],148:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofoni",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geopaikannus",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Ponnahdusikkunat",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Kysy joka kerta",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Ilmoita",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Salli aina",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Kiellä aina",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],149:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Valitse vaihtoehto, joka parhaiten kuvaa ongelmaa.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Valitse ongelma luettelosta...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videoita ei toistettu",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Kuvat eivät latautuneet",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Kommentit eivät latautuneet",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Sisältöä puuttuu",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Linkit tai painikkeet eivät toimineet",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "En pysty kirjautumaan sisään",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Sivusto pyysi minua poistamaan käytöstä",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Jotain muuta",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Ilmoita viallisesta sivustosta",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Jos haluat, kerro meille ongelmasta",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Lähetä raportti",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "DuckDuckGolle lähetetyt raportit ovat täysin anonyymeja, ja ne sisältävät vain yllä olevan valintasi, valinnaisen kuvauksesi, URL-osoitteen ja luettelon sivustolta löytämistämme seurantaohjelmista.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Kiitos!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Raporttisi auttaa parantamaan selainta sekä muiden ihmisten käyttökokemusta.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],150:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Seurantaohjelmat",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],151:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Suojausluettelon päivittäminen",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Suojaukset ovat <b>POIS KÄYTÖSTÄ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Tämän sivuston suojaukset ovat <b>KÄYTÖSSÄ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Muut saattavat pystyä sieppaamaan tällä sivulla lähettämäsi arkaluonteiset tiedot.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Päivitimme tämän sivun yhteyden suojataksemme siirron aikana lähettämäsi tiedot.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Tämän sivun yhteys on suojattu, jotta lähettämäsi tiedot voidaan suojata siirron aikana.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Emme löytäneet yrityksiä, jotka yrittäisivät seurata sinua tällä sivulla.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Löysimme vain yrityksen {name} omistamia seurantaohjelmia, joita emme estäneet.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Me {isWhitelisted, select, true {löysimme} other {estimme}} {displayCount} tunnettua {displayCount, plural, =1 {seurantaohjelma} other {seurantaohjelmaa}} from {companyCount} {companyCount, plural, one {yrityksestä} other {yrityksistä}} tältä sivulta.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Eikö verkkosivusto toimi odotetulla tavalla?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Ota varotoimet käyttöön",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Suojaukset ovat POIS KÄYTÖSTÄ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Löysimme joitakin yrityksiä seuraamassa ja profiloimassa sinua tällä sivulla.} =2 {Löysimme yritykset {firstCompany} ja {secondCompany} seuraamassa ja profiloimassa sinua tällä sivulla.} one {Löysimme yrityksen {firstCompany} seuraamassa ja profiloimassa sinua tällä sivulla.} other {Löysimme yritykset {firstCompany}, {secondCompany} sekä muita yrityksiä seuraamassa ja profiloimassa sinua tällä sivulla.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Seurantaverkosto",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (verkkotunnuksen {domain} omistaja)\nseuraa sinua {companyPrevalence} prosentissa suosituimmista sivustoista.\nEmme voi estää heitä omistamillaan sivustoilla, mutta voimme estää heitä muilla sivuilla.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Ei raportoitavaa toimintaa",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Kenet olemme estäneet?",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Olemme estäneet joitakin yrityksiä jäljittämästä sinua.} =2 {Olemme estäneet yritykset {firstCompany} ja {secondCompany} jäljittämästä sinua.} one {Olemme estäneet yrityksen {firstCompany} jäljittämästä sinua.} other {Olemme estäneet yritykset {firstCompany} ja {secondCompany} sekä muita yrityksiä jäljittämästä sinua.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Evästeet minimoitu",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Olemme asettaneet evästeasetukset maksimoimaan tietosuojan ja sulkeneet suostumuksen ponnahdusikkunan.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Yhteys on suojattu",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Yhteyttä ei voitu suojata",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} merkittävä seurantaverkosto estetty} other {{trackerCount} merkittävää seurantaverkostoa estetty}}} other {{trackerCount, plural, one {{trackerCount} seurantapalvelin estetty} other {{trackerCount} seurantapalvelinta estetty}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} merkittävä seurantaverkosto löytynyt} other {{trackerCount} merkittävää seurantaverkostoa löytynyt}}} other {{trackerCount, plural, one {{trackerCount} seurantapalvelin löytynyt} other {{trackerCount} seurantapalvelinta löytynyt}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "Yritys {companyName} omistaa tämän sivuston ja tällä sivulla olevat tunnetut seurantaohjelmat, joten emme estäneet niitä.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Seurantaohjelmat auttavat yrityksiä profiloimaan sinut. Löysimme nämä yritykset seuraamassa ja profiloimassa sinua tällä sivulla.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Seurantaohjelmat auttavat yrityksiä profiloimaan sinut. Olemme estäneet nämä yritykset seuraamasta toimintaasi tällä sivulla.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Tuntematon seurantaverkosto",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Yrityksen {companyName} seurantaverkkotunnukset",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 seurantaohjelmaa löytyi",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Tämän sivuston omistamat seurantaohjelmat (sallittu)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} seurantaohjelma estetty verkkotunnuksessa {domain}} other {{trackerCount} seurantaohjelmaa estetty verkkotunnuksessa {domain}}}} other {{trackerCount, plural, one {{trackerCount} seuraaja löydetty verkkotunnuksessa {domain}} other {{trackerCount} seuraajaa löydetty verkkotunnuksessa {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analyysi",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Mainostus",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Someverkosto",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],152:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Connexion",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Chiffrer",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Signer",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Vérifier",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Dériver",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Emballer",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Déballer",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Inconnu",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Détails du certificat de sécurité",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Nom commun",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Clé publique",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algorithme",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Taille de la clé",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Utilisation",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Résumé",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Taille réelle",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certificat introuvable",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificat pour {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Cette connexion n'est pas sécurisée. Les informations sensibles que vous envoyez sur cette page peuvent être interceptées.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Nous avons amélioré la connexion à cette page pour protéger les informations que vous envoyez pendant leur transit.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Votre connexion à cette page est sécurisée, protégeant les informations que vous envoyez pendant leur transit.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],153:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Appareil photo",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Micro",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Géolocalisation",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Fenêtres contextuelles",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Toujours demander",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Notifier",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Toujours autoriser",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Toujours refuser",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],154:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Sélectionnez l'option qui décrit le mieux le problème rencontré.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Sélectionnez votre problème dans la liste...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "La vidéo n'a pas été lue",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Les images ne se sont pas chargées",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Les commentaires n'ont pas été chargés",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Le contenu est manquant",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Les liens ou les boutons ne fonctionnent pas",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Je ne peux pas me connecter",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Le site m'a demandé de désactiver",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Autre chose",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Signaler un problème de site",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Si vous le souhaitez, vous pouvez nous en dire plus au sujet du problème rencontré",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Envoyer un rapport",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Les signalements envoyés à DuckDuckGo sont 100 % anonymes et comprennent uniquement votre sélection ci-dessus, votre description facultative, l'URL et la liste des traqueurs que nous avons détectés sur le site.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Merci!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Votre signalement nous permettra d'améliorer le navigateur et l'expérience de nos utilisateurs.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],155:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Traqueurs",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],156:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Mise à jour de la liste de protection",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "La protection a été <b>DÉSACTIVÉE</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "La protection est <b>ACTIVÉE</b> sur ce site",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Les informations sensibles que vous envoyez sur cette page peuvent être interceptées.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Nous avons amélioré la connexion à cette page pour protéger les informations que vous envoyez pendant leur transit.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "La connexion à cette page est sécurisée pour protéger les informations que vous envoyez pendant leur transit.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Nous n'avons détecté aucune entreprise tentant de vous suivre sur cette page.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Nous avons trouvé uniquement des traqueurs appartenant à {name}, que nous n'avons pas bloqués.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Nous avons {isWhitelisted, select, true {trouvé} other {bloqué}} {displayCount} {displayCount, plural, =1 {traqueur connu} other {traqueurs connus}} appartenant à {companyCount} {companyCount, plural, one {entreprise} other {entreprises}} sur cette page.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Le site Web ne fonctionne pas correctement ?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Prenez des précautions",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "La protection est DÉSACTIVÉE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Nous avons détecté plusieurs entreprises qui vous suivent et vous profilent sur cette page.} =2 {Nous avons détecté que {firstCompany} et {secondCompany} vous suivent et vous profilent sur cette page.} one {Nous avons détecté que {firstCompany} vous suit et vous profile sur cette page.} other {Nous avons détecté que {firstCompany}, {secondCompany} et plusieurs autres entreprises vous suivent et vous profilent sur cette page.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Réseau de traqueurs",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (propriétaire de {domain})\nvous suit sur {companyPrevalence} % des principaux sites.\nNous ne pouvons pas bloquer l'entreprise sur les sites qui lui appartiennent, mais nous pouvons le faire sur d'autres pages.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Aucune activité à signaler",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Qui nous avons bloqué",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Nous avons empêché plusieurs entreprises de vous suivre.} =2 {Nous avons empêché {firstCompany} et {secondCompany} de vous suivre.} one {Nous avons empêché {firstCompany} de vous suivre.} other {Nous avons empêché {firstCompany}, {secondCompany} et plusieurs autres entreprises de vous suivre.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimisés",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Nous avons défini vos préférences en matière de cookies pour renforcer la confidentialité de vos données et nous avons fermé la fenêtre contextuelle de consentement.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Connexion sécurisée",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Impossible de sécuriser la connexion",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} réseau majeur de traqueurs bloqué} other {{trackerCount} réseaux majeurs de traqueurs bloqués}}} other {{trackerCount, plural, one {{trackerCount} Tracker bloqué} other {{trackerCount} Trackers bloqués}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} réseau majeur de traqueurs trouvé} other {{trackerCount} réseaux majeurs de traqueurs trouvés}}} other {{trackerCount, plural, one {{trackerCount} Tracker trouvé} other {{trackerCount} Trackers trouvés}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} est propriétaire de ce site et des traqueurs connus trouvés sur cette page. Nous n'avons donc pas pu bloquer cette entreprise.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Les traqueurs permettent aux entreprises de vous profiler. Nous avons détecté que ces entreprises surveillent votre activité sur cette page.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Les traqueurs permettent aux entreprises de vous profiler. Nous avons empêché ces entreprises de surveiller votre activité sur cette page.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Réseau de traqueurs inconnu",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domaines de traqueurs associés à {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 traqueur trouvé",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Traqueurs appartenant à ce site (autorisés)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} traqueur bloqué sur {domain}} other {{trackerCount} traqueurs bloqués sur {domain}}}} other {{trackerCount, plural, one {{trackerCount} traqueur trouvé sur {domain}} other {{trackerCount} traqueurs trouvés sur {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analytique",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Publicité",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Réseau social",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],157:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Veza",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Enkripcija",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Potpis",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Provjera",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Derivacija",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Zamotavanje",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Odmotavanje",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Nepoznato",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Pojedinosti sigurnosnog certifikata",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Uobičajeno ime",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Javni ključ",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritam",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Veličina ključa",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Upotreba",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Sažetak",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Trajno",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektivna veličina",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Potvrda nije pronađena",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Potvrda za {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Ova stranica ne dopušta sigurnu vezu. Drugi će možda moći presresti osjetljive podatke koje šalješ na ovoj stranici.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Na ovoj smo stranici nadogradili vezu kako bismo zaštitili podatke koje šalješ tijekom prijenosa.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Ova stranica koristi sigurnu vezu, koja štiti informacije koje šalješ tijekom prijenosa.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],158:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokacija",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Skočni prozori",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Pitaj svaki puta",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Obavijesti",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Uvijek dopusti",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Uvijek odbij",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],159:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Odaberi opciju koja najbolje opisuje nastali problem.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Odaberi svoj problem s popisa...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videozapis nije se reproducirao",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Slike se nisu učitale",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentari se nisu učitali",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Nedostaje sadržaj",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Veze ili gumbi ne funkcioniraju",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Ne mogu se prijaviti",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Web-mjesto zatražilo je da onemogućim",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Nešto drugo",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Prijavi neispravno web-mjesto",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Ako želiš, reci nam više o svom problemu",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Pošalji izvještaj",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Izvještaji poslani DuckDuckGo 100 % su anonimni i uključuju samo tvoj gornji odabir, izborni opis, URL i popis alata za praćenje koje smo pronašli na web-mjestu.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Hvala!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Tvoj će izvještaj pomoći poboljšati preglednik, kao i doživljaj pretraživanja za druge posjetitelje.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],160:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Alati za praćenje",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],161:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Ažuriranje popisa zaštite",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Zaštita je <b>ONESPOSOBLJENA</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Zaštita je <b>OMOGUĆENA</b> za ovu stranicu",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Drugi će možda moći presresti osjetljive podatke koje šalješ na ovoj stranici.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Nadogradili smo vezu na ovoj stranici kako bismo zaštitili podatke koje šalješ u prijenosu.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Veza na ovoj stranici sigurna je kako bi se zaštitili podaci koje šalješ u prijenosu.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Nismo pronašli nijednu tvrtku koja te pokušava pratiti na ovoj stranici.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Našli smo samo alate za praćenje u vlasništvu tvrtke {name}, koje nismo blokirali.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Mi {isWhiteListed, odaberite, true {found} other {blokiran}} {blokiran}} {DisplayCount} poznat {DisplayCount, množina, =1 {tracker} drugi {trackeri}} iz {CompanyCount} {CompanyCount, množina, jedan {tvrtka} drugi {tvrtke}} na ovoj stranici.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Web-mjesto ne radi u skladu s očekivanjima?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Poduzmi mjere predostrožnosti",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Zaštita je ONESPOSOBLJENA",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Pronašli smo neke tvrtke koje te prate i profiliraju na ovoj stranici.} =2 {Pronašli smo tvrtke {firstCompany} i {secondCompany} kako te prate i profiliraju na ovoj stranici.} one {Pronašli smo da te {firstCompany} prati i profilira na ovoj stranici.} few {Pronašli smo da te {firstCompany}, {secondCompany} i druge tvrtke prate i profiliraju na ovoj stranici.} many {Pronašli smo da te {firstCompany}, {secondCompany} i druge tvrtke prate i profiliraju na ovoj stranici.} other {Pronašli smo da te {firstCompany}, {secondCompany} i druge tvrtke prate i profiliraju na ovoj stranici.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Mreže za praćenje",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} ( vlasnik {domain})\nprati te preko {companyPrevalence} % najboljih web-mjesta.\nNe možemo ih blokirati na njihovim web-mjestima, ali možemo na drugima.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nema aktivnosti za prijavu",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Koga smo blokirali",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Blokirali smo pokušaje nekih tvrtki da te prate.} =2 {Blokirali smo pokušaje tvrtki {firstCompany} i {secondCompany} da te prate.} one {Blokirali smo pokušaje tvrtke {firstCompany} da te prati.} few {Blokirali smo pokušaje tvrtki {firstCompany}, {secondCompany} i drugih da te prate.} many {Blokirali smo pokušaje tvrtki {firstCompany} i {secondCompany} i drugih da te prate.} other {Blokirali smo pokušaje tvrtki {firstCompany} i {secondCompany} i drugih da te prate.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Kolačići minimizirani",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Odredili smo tvoje postavke kolačića kako bismo maksimizirali privatnost te smo zatvorili skočni prozor za pristanak.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Veza je sigurna",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Veza nije bilo moguće osigurati",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Blokirana je {trackerCount} veća mreža za praćenje} few {Blokirane su {trackerCount} veće mreže za praćenje} many {Blokirano je {trackerCount} većih mreža za praćenje} other {Blokirano je {trackerCount} većih mreža za praćenje}}} other {{trackerCount, plural, one {Blokiran je {trackerCount} alat za praćenje} few {Blokirana su {trackerCount} alata za praćenje} many {Blokirano je {trackerCount} alata za praćenje} other {Blokirano je {trackerCount} alata za praćenje}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Pronađena je {trackerCount} veća mreža za praćenje} few {Pronađene su {trackerCount} veće mreže za praćenje} many {Pronađeno je {trackerCount} većih mreža za praćenje} other {Pronađeno je {trackerCount} većih mreža za praćenje}}} other {{trackerCount, plural, one {Pronađen je {trackerCount} alat za praćenje} few {Pronađena su {trackerCount} alata za praćenje} many {Pronađeno je {trackerCount} alata za praćenje} other {Pronađeno je {trackerCount} alata za praćenje}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} posjeduje ovu stranicu i poznate alate za praćenje pronađene na ovoj stranici, tako da ih nismo blokirali.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Alati za praćenje pomažu tvrtkama da te profiliraju. Pronašli smo sljedeće tvrtke koje prate tvoju aktivnost na ovoj stranici.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Alati za praćenje pomažu tvrtkama da te profiliraju. Tim smo tvrtkama blokirali praćenje tvojih aktivnosti na ovoj stranici.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Mreža alata za praćenje nije poznata",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domene alata za praćenje za {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Pronađeno je 0 alata za praćenje",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Alati za praćenje u vlasništvu ove stranice (dopušteno)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {Blokiran je {trackerCount} alat za praćenje na domeni {domain}} few {Blokirana su {trackerCount} alata za praćenje na domeni {domain}} many {Blokirano je {trackerCount} alata za praćenje na domeni {domain}} other {Blokirano je {trackerCount} alata za praćenje na domeni {domain}}}} other {{trackerCount, plural, one {Pronađen je {trackerCount} alat za praćenje na domeni {domain}} few {Pronađena su {trackerCount} alata za praćenje na domeni {domain}} many {Pronađeno je {trackerCount} alata za praćenje na domeni {domain}} other {Pronađeno je {trackerCount} alata za praćenje na domeni {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analitika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Oglašavanje",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Društvena mreža",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],162:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Kapcsolat",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Titkosítás",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Jel",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Érvényesítés",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Származtatás",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Becsomagolás",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Kibontás",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Ismeretlen",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Biztonsági tanúsítvány részletei",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Közhasználatú név",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Nyilvános kulcs",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmus",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Kulcs mérete",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Használat",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Összefoglalás",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Állandó",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Effektív méret",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "A tanúsítvány nem található",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Tanúsítvány: {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Ez az oldal nem tesz lehetővé biztonságos kapcsolatot. Mások megszerezhetik az ezen az oldalon keresztül küldött érzékeny adatokat.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Az oldal kapcsolatát biztonságosabbá tettük, hogy megvédjük az elküldött adatokat az átvitel során.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Az oldal biztonságos kapcsolatot használ, amely az átvitel során védi az elküldött adatokat.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],163:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Földrajzi helymeghatározás",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Előugró ablakok",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Kérdezzen rá minden alkalommal",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Értesítés",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Engedélyezés mindig",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Megtagadás mindig",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],164:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Válaszd ki azt a lehetőséget, amelyik a legjobban leírja a tapasztalt problémát.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Válaszd ki a problémát a listából…",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "A videót nem játszotta le",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "A képek nem töltődtek be",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "A megjegyzések nem töltődtek be",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Hiányzik a tartalom",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "A hivatkozások vagy a gombok nem működnek",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Nem tudok bejelentkezni",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "A webhely kérte tőlem a letiltást",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Valami más",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Hibás weboldal jelentése",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Ha szeretnéd, írd le részletesebben a problémát",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Jelentés küldése",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "A DuckDuckGónak küldött jelentések 100%-ban névtelenek, és csak a fenti választást, az opcionális leírást, az URL-címet és a webhelyen talált nyomkövetők listáját tartalmazzák.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Köszönjük!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "A jelentésed alapján tökéletesíthetjük a böngészőt, és jobb élményt nyújthatunk másoknak.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],165:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Nyomkövetők",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],166:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "A védelmi lista frissítése",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Védelmek <b>LETILTVA</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "A védelmek <b>ENGEDÉLYEZVE</b> vannak ezen az oldalon",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Mások megszerezhetik az ezen az oldalon keresztül küldött érzékeny adatokat.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Az oldal kapcsolatát biztonságosabbá tettük, hogy megvédjük az elküldött adatokat az átvitel során.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Az oldal kapcsolata biztonságos, hogy megvédje az elküldött adatokat az átvitel során.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Az oldalon nem található olyan cég, amely megpróbált volna nyomon követni.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Csak a(z) {name} tulajdonában lévő nyomkövetőket találtunk, amelyeket nem tiltottunk le.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Ezen az oldalon {companyCount} {companyCount, plural, one {cég} other {cég}} {displayCount} ismert {displayCount, plural, =1 {nyomkövetőjét} other {nyomkövetőjét}} {isWhitelisted, select, true {találtuk meg} other {tiltottuk le}}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "A weboldal nem az elvártak szerint működik?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Óvintézkedésekre van szükség",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Védelmek LETILTVA",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Azt észleltük, hogy néhány cég ezen az oldalon nyomon követ és profilt alkot rólad.} =2 {Azt észleltük, hogy a(z) {firstCompany} és a(z) {secondCompany} ezen az oldalon nyomon követ és profilt alkot rólad.} one {Azt észleltük, hogy a(z) {firstCompany} ezen az oldalon nyomon követ és profilt alkot rólad.} other {Azt észleltük, hogy a(z) {firstCompany}, a(z) {secondCompany} és mások ezen az oldalon nyomon követnek és profilt alkotnak rólad.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Nyomkövető hálózat",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "A(z) {companyDisplayName} (a(z) {domain} tulajdonosa)\na legnépszerűbb oldalak {companyPrevalence}%-án nyomon követ téged.\nA saját oldalaikon nem tudjuk letiltani őket, de más oldalakon igen.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nincs jelentendő tevékenység",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Letiltott cégek",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Megtiltottuk néhány cégnek hogy megpróbáljon nyomon követni téged.} =2 {Megtiltottuk, hogy a(z) {firstCompany} és a(z) {secondCompany} megpróbáljon nyomon követni téged.} one {Megtiltottuk, hogy a(z) {firstCompany} megpróbáljon nyomon követni téged.} other {Megtiltottuk, hogy a(z) {firstCompany}, a(z) {secondCompany} és mások megpróbáljanak nyomon követni téged.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Sütik minimalizálva",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "A sütibeállításokat az adatvédelem maximalizálására állítottuk be, és bezártuk a beleegyezést kérő felugró ablakot.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "A kapcsolat biztonságos",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "A kapcsolatot nem sikerült biztonságossá tenni",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} nagy nyomkövető-hálózat letiltva} other {{trackerCount} nagy nyomkövető-hálózat letiltva}}} other {{trackerCount, plural, one {{trackerCount} nyomkövető letiltva} other {{trackerCount} nyomkövető letiltva}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} nagy nyomkövető-hálózat megtalálva} other {{trackerCount} nagy nyomkövető-hálózat megtalálva}}} other {{trackerCount, plural, one {{trackerCount} nyomkövető megtalálva} other {{trackerCount} nyomkövető megtalálva}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "A(z) {companyName} tulajdonában van ez az oldal és az oldalon található ismert nyomkövetők, ezért nem tiltottuk lő őket.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "A nyomkövetők segítségével a cégek profilt alkothatnak rólad. Azt észleltük, hogy ezen az oldalon ezek a cégek nyomon követik a tevékenységedet.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "A nyomkövetők segítségével a cégek profilt alkothatnak rólad. Letiltottuk ezeket a cégeket, hogy nyomon kövessék az oldalon végzett tevékenységedet.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "A nyomkövető hálózat ismeretlen",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "A(z) {companyName} nyomkövető tartományai",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 nyomkövetőt találtunk",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "A webhely tulajdonában lévő nyomkövetők (engedélyezett)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} nyomkövető letiltva itt: {domain}} other {{trackerCount} nyomkövető letiltva itt: {domain}}}} other {{trackerCount, plural, one {{trackerCount} nyomkövető található itt: {domain}} other {{trackerCount} nyomkövető található itt: {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analitika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Hirdetés",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Közösségi hálózat",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],167:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Connessione",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Crittografia",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Firma",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verifica",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Origine",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Wrapping",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Rimozione wrapping",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Sconosciuto",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Dettagli del certificato di sicurezza",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Nome comune",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Chiave pubblica",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmo",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Dimensione chiave",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Utilizzo",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Riepilogo",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanente",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Dimensione effettiva",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certificato non trovato",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificato per {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Questa pagina non consente una connessione sicura. Altri utenti potrebbero riuscire a intercettare le informazioni sensibili che vengono trasmesse.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Abbiamo aggiornato la connessione di questa pagina per proteggere le informazioni inviate.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Questa pagina utilizza una connessione sicura. Le informazioni inviate sono protette.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],168:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Fotocamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Microfono",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolocalizzazione",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Popup",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Chiedi ogni volta",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Invia una notifica",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Consenti sempre",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Rifiuta sempre",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],169:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Seleziona l'opzione che meglio descrive il problema riscontrato.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Seleziona il problema dall'elenco...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Il video non è stato riprodotto",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Le immagini non sono state caricate",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "I commenti non sono stati caricati",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Manca il contenuto",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Collegamenti o pulsanti non funzionano",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Non riesco ad accedere",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Il sito mi ha chiesto di disabilitare",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Qualcos'altro",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Segnala sito danneggiato",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Se preferisci, spiegaci il problema riscontrato",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Invia il rapporto",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Le segnalazioni inviate a DuckDuckGo sono anonime al 100% e includono solo le opzioni da te selezionate, la descrizione facoltativa, l'URL e un elenco dei sistemi di tracciamento individuati sul sito.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Grazie!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "La tua segnalazione contribuirà a migliorare il browser e a rendere l'esperienza di navigazione migliore per gli altri utenti.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],170:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Sistemi di tracciamento",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],171:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Aggiornamento elenco delle protezioni",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Le protezioni sono state <b>DISATTIVATE</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Le protezioni sono <b>ATTIVATE</b> per questo sito",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Altri utenti potrebbero riuscire a intercettare le informazioni sensibili che vengono trasmesse.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Abbiamo aggiornato la connessione di questa pagina per proteggere le informazioni inviate.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "La connessione di questa pagina è sicura e protegge le informazioni trasmesse.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "In questa pagina non è stata individuata alcuna azienda che cerca di tracciarti.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Abbiamo trovato solo sistemi di tracciamento di proprietà di {name}, che non abbiamo bloccato.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "In questa pagina abbiamo {isWhitelisted, select, true {trovato} other {bloccato}} {displayCount} {displayCount, plural, =1 {sistema di tracciamento noto} other {sistemi di tracciamento noti}} da {companyCount} {companyCount, plural, one {azienda} other {aziende}}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Il sito web non funziona come dovrebbe?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Adotta le dovute precauzioni",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Le protezioni sono DISATTIVATE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {In questa pagina abbiamo trovato alcune aziende che effettuano il tracciamento e la profilazione dell'utente.} =2 {È stato rilevato che {firstCompany} e {secondCompany} stanno effettuando il tracciamento e la profilazione dell'utente su questa pagina.} one {È stato rilevato che {firstCompany} sta effettuando il tracciamento e la profilazione dell'utente su questa pagina.} other {È stato rilevato che {firstCompany}, {secondCompany} e altre aziende stanno effettuando il tracciamento e la profilazione dell'utente su questa pagina.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Reti di sistemi di tracciamento",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (proprietaria di {domain})\ntraccia la tua attività tramite il {companyPrevalence}% dei migliori siti.\nNon possiamo impedirle di accedere ai siti di cui è titolare, ma possiamo intervenire su altre pagine.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nessuna attività da segnalare",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Aziende bloccate",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Abbiamo impedito il tentativo di tracciamento da parte di alcune aziende.} =2 {Abbiamo impedito il tentativo di tracciamento da parte di {firstCompany} e {secondCompany}.} one {Abbiamo impedito il tentativo di tracciamento da parte di {firstCompany}.} other {Abbiamo impedito il tentativo di tracciamento da parte di {firstCompany}, {secondCompany} e altre aziende.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookie ridotti al minimo",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Abbiamo configurato le preferenze dei cookie in modo da massimizzare la privacy e abbiamo chiuso il pop-up di consenso.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "La connessione è sicura",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Impossibile proteggere la connessione",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rete di tracciamento principale bloccata} other {{trackerCount} reti di tracciamento principali bloccate}}} other {{trackerCount, plural, one {{trackerCount} sistema di tracciamento bloccato} other {{trackerCount} sistemi di tracciamento bloccati}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rete di tracciamento principale rilevata} other {{trackerCount} reti di tracciamento principali rilevate}}} other {{trackerCount, plural, one {{trackerCount} sistema di tracciamento rilevato} other {{trackerCount} sistemi di tracciamento rilevati}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} è proprietaria di questo sito e dei sistemi di tracciamento noti presenti in questa pagina, pertanto non li abbiamo bloccati.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "I sistemi di tracciamento consentono alle aziende di tracciare un profilo dell'utente. In questa pagina sono presenti queste aziende che monitorano la tua attività.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "I sistemi di tracciamento consentono alle aziende di tracciare un profilo dell'utente. Abbiamo impedito a queste aziende di monitorare la tua attività su questa pagina.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Rete di sistemi di tracciamento sconosciuta",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domini di sistemi di tracciamento per {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 sistemi di tracciamento trovati",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Sistemi di tracciamento appartenenti a questo sito (consentiti)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sistema di tracciamento bloccato su {domain}} other {{trackerCount} sistemi di tracciamento bloccati su {domain}}}} other {{trackerCount, plural, one {{trackerCount} sistema di tracciamento trovato su {domain}} other {{trackerCount} sistemi di tracciamento trovati su {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analisi",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Pubblicità",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Social Network",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],172:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Ryšys",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Šifruoti",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Pasirašyti",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Tikrinti",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Išvesti",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Suskleisti",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Išskleisti",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Nežinomas",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Išsami informacija apie saugos sertifikatą",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Bendras pavadinimas",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Viešas raktas",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmas",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Rakto dydis",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Naudojimas",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Santrauka",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Nuolatinis",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektyvus dydis",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Sertifikatas nerastas",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Sertifikatas, skirtas {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Šiame puslapyje neleidžiamas saugus ryšys. Kiti asmenys gali perimti konfidencialią informaciją, kurią siunčiate šiame puslapyje.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Atnaujinome šiame puslapyje esantį ryšį, kad apsaugotume siunčiamą informaciją jos perdavimo metu.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Šiame puslapyje naudojamas saugus ryšys, kuris apsaugo siunčiamą informaciją jos perdavimo metu.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],173:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Fotoaparatas",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofonas",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geografinė padėtis",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Iššokantieji langai",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Klausti kiekvieną kartą",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Pranešti",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Visada leisti",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Visada atmesti",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],174:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Pasirinkite parinktį, kuri geriausiai apibūdina iškilusią problemą.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Pasirinkite problemą iš sąrašo...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Vaizdo įrašas nebuvo paleistas",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Vaizdai neįkelti",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentarai nebuvo įkelti",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Trūksta turinio",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Nuorodos ar mygtukai neveikia",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Negaliu prisijungti",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Svetainė paprašė manęs išjungti",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Kažkas kito",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Pranešti apie sugadintą svetainę",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Jei norite, papasakokite apie problemą, su kuria susidūrėte",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Siųsti ataskaitą",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "„DuckDuckGo“ siunčiamos ataskaitos yra 100 % anonimiškos ir apima tik jūsų pasirinkimą aukščiau, pasirenkamą aprašymą, URL ir stebėjimo priemonių, kurias radome svetainėje, sąrašą.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Ačiū!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Jūsų ataskaita padės patobulinti naršyklę ir pagerinti kitų naudotojų patirtį.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],175:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Stebėjimo priemonės",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],176:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Apsaugos sąrašo atnaujinimas",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Apsaugos buvo <b>IŠJUNGTOS</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Apsaugos yra <b>ĮJUNGTOS</b> šioje svetainėje",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Kiti asmenys gali perimti konfidencialią informaciją, kurią siunčiate šiame puslapyje.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Atnaujinome šiame puslapyje esantį ryšį, kad apsaugotume siunčiamą informaciją.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Šiame puslapyje esantis ryšys yra saugus, kad būtų apsaugota siunčiama informacija.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Šiame puslapyje neradome jokių įmonių, kurios bandytų jus stebėti.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Radome tik {name} priklausančias stebėjimo priemones, kurių neblokavome.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Mes {isWhitelisted, select, true {found} other {blocked}} {displayCount} žinome {displayCount, plural, =1 {tracker} other {trackers}} iš {companyCount} {companyCount, plural, one {company} other {companies}} šiame puslapyje.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Svetainė neveikia taip, kaip tikėtasi?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Imkitės atsargumo priemonių",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Apsaugos yra IŠJUNGTOS",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Šiame puslapyje radome keletą jus stebinčių ir profiliuojančių įmonių.} =2 {Šiame puslapyje radome {firstCompany} ir {secondCompany} stebinčias ir profiliuojančias jus.} one {Nustatėme, kad šiame puslapyje jus stebi ir profiliuoja {firstCompany}.} few {Nustatėme, kad šiame puslapyje jus stebi ir profiliuoja {firstCompany}, {secondCompany} ir kt.} many {Nustatėme, kad šiame puslapyje jus stebi ir profiliuoja {firstCompany}, {secondCompany} ir kt.} other {Nustatėme, kad šiame puslapyje jus stebi ir profiliuoja {firstCompany}, {secondCompany} ir kt.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Stebėjimo priemonių tinklas",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} ({domain} savininkas)\nstebi jus {companyPrevalence} % populiariausių svetainių.\nNegalime jų užblokuoti jiems priklausančiose svetainėse, bet galime kituose puslapiuose.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nėra jokios veiklos",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Ką mes užblokavome",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Užblokavome kai kurių įmonių bandymus jus stebėti.} =2 {Užblokavome {firstCompany} ir {secondCompany} bandymus jus stebėti.} one {Užblokavome {firstCompany} nuo bandymo jus stebėti.} few {Užblokavome {firstCompany}, {secondCompany} ir kt. nuo bandymo jus stebėti.} many {Užblokavome {firstCompany}, {secondCompany} ir kt. nuo bandymo jus stebėti.} other {Užblokavome {firstCompany}, {secondCompany} ir kt. nuo bandymo jus stebėti.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Slapukai yra sumažinti",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Nustatėme slapukų nuostatas, kad būtų užtikrintas kuo didesnis privatumas, ir uždarėme iššokantįjį sutikimo langą.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Ryšys yra saugus",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Nepavyko užtikrinti ryšio saugumo",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Užblokuotas {trackerCount} pagrindinis stebėjimo priemonės tinklas} few {Užblokuoti {trackerCount} pagrindiniai stebėjimo priemonės tinklai} many {Užblokuota {trackerCount} pagrindinio stebėjimo priemonės tinklo} other {Užblokuota {trackerCount} pagrindinių stebėjimo priemonės tinklų}}} other {{trackerCount, plural, one {Užblokuota {trackerCount} stebėjimo priemonė} few {Užblokuotos {trackerCount} stebėjimo priemonės} many {Užblokuota {trackerCount} stebėjimo priemonė} other {Užblokuota {trackerCount} stebėjimo priemonių}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Rastas {trackerCount} pagrindinis stebėjimo priemonės tinklas} few {Rasti {trackerCount} pagrindiniai stebėjimo priemonės tinklai} many {Rasta {trackerCount} pagrindinio stebėjimo priemonės tinklo} other {Rasta {trackerCount} pagrindinių stebėjimo priemonės tinklų}}} other {{trackerCount, plural, one {Rasta {trackerCount} stebėjimo priemonė} few {Rastos {trackerCount} stebėjimo priemonės} many {Rasta {trackerCount} stebėjimo priemonės} other {Rasta {trackerCount} stebėjimo priemonių}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} priklauso ši svetainė ir žinomos stebėjimo priemonės, rastos šiame puslapyje, todėl mes jų neužblokavome.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Stebėjimo priemonės padeda įmonėms sudaryti jūsų profilį. Nustatėme, kad šios įmonės stebi jūsų veiklą šiame puslapyje.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Stebėjimo priemonės padeda įmonėms sudaryti jūsų profilį. Užblokavome šių įmonių galimybę stebėti jūsų veiklą šiame puslapyje.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Stebėjimo priemonių tinklas nežinomas",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "{companyName} stebėjimo priemonių domenai",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Rasta 0 stebėjimo priemonių",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Šiai svetainei priklausančios stebėjimo priemonės (leidžiama)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} stebėjimo priemonė užblokuota {domain}} few {{trackerCount} stebėjimo priemonės užblokuotos {domain}} many {{trackerCount} stebėjimo priemonės užblokuota {domain}} other {{trackerCount} stebėjimo priemonių užblokuota {domain}}}} other {{trackerCount, plural, one {{trackerCount} stebėjimo priemonė rasta {domain}} few {{trackerCount} stebėjimo priemonės rastos {domain}} many {{trackerCount} stebėjimo priemonės rasta {domain}} other {{trackerCount} stebėjimo priemonių rasta {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analizė",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklaminis",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Socialinis tinklas",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],177:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Savienojums",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Šifrēt",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Parakstīt",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Pārbaudīt",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Atvasināt",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Iesaiņot",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Izsaiņot",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Nezināms",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Informācija par drošības sertifikātu",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Parastais nosaukums",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Publiska atslēga",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritms",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Atslēgas izmērs",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Lietojums",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Kopsavilkums",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Pastāvīgs",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Derīgs izmērs",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Sertifikāts nav atrasts",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "{domain} sertifikāts",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Ar šo lapu nevar izveidot drošu savienojumu. Citi var pārtvert šai lapai nosūtīto sensitīvo informāciju.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Mēs esam uzlabojuši šīs lapas savienojumu, lai aizsargātu nosūtīto informāciju tās pārraides laikā.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Šajā lapā tiek izmantots drošs savienojums, kas aizsargā nosūtīto informāciju tās pārraides laikā.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],178:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofons",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Ģeolokācija",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Uznirstošie logi",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Jautāt katru reizi",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Paziņot",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Vienmēr atļaut",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Vienmēr liegt",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],179:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Izvēlies atbilstošāko problēmas raksturojumu.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Norādi problēmu sarakstā...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video netika demonstrēts",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Attēli netika ielādēti",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentāri netika ielādēti",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Trūkst satura",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Saites vai pogas nedarbojas",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Es nevaru pierakstīties",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Vietne pieprasīja atspējošanu",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Kaut kas cits",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Ziņot par bojātu vietni",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Ja vēlies, pastāsti mums par savu problēmu",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Nosūtīt ziņojumu",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "DuckDuckGo nosūtītie ziņojumi ir 100% anonīmi, un tajos ir iekļauta tikai tava augstāk norādītā izvēle, neobligātais apraksts, URL un vietnē atrasto izsekotāju saraksts.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Paldies!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Tavs ziņojums palīdzēs uzlabot pārlūkprogrammu un uzlabot citu lietotāju pieredzi.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],180:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Izsekotāji",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],181:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Aizsardzības saraksta atjaunināšana",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Aizsardzība ir <b>ATSPĒJOTA</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Aizsardzība šajā vietnē ir <b>IESPĒJOTA</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Citi var pārtvert šai lapai nosūtīto sensitīvo informāciju.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Mēs esam uzlabojuši šīs lapas savienojumu, lai aizsargātu nosūtīto informāciju tās pārraidīšanas laikā.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Šīs lapas savienojums ir drošs un aizsargā nosūtīto informāciju.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Neatradām nevienu uzņēmumu, kas censtos tevi izsekot šajā lapā.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Esam atraduši tikai {name} piederošus izsekotājus, kurus nebloķējām.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Mēs {isWhitelisted, select, true {esam atraduši} other {esam bloķējuši}} {displayCount} zināmus {displayCount, plural, =1 {izsekotāju} other {izsekotājus}} no {companyCount} {companyCount, plural, one {uzņēmuma} other {uzņēmumiem}} šajā lapā.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Tīmekļa vietne nedarbojas, kā paredzēts?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Veikt piesardzības pasākumus",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Aizsardzība ir ATSPĒJOTA",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Esam atraduši dažus uzņēmumus, kas tevi izseko un profilē šajā lapā.} =2 {Esam atraduši {firstCompany} un {secondCompany}, kas tevi izseko un profilē šajā lapā.} zero {Esam atraduši {firstCompany}, {secondCompany} un citus, kas izseko un profilē tevi šajā lapā.} one {Esam atraduši {firstCompany}, kas izseko un profilē tevi šajā lapā.} other {Esam atraduši {firstCompany}, {secondCompany} un citus, kas izseko un profilē tevi šajā lapā.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Izsekotāju tīkls",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} ({domain} īpašnieks)\nizseko tevi {companyPrevalence}% populārāko vietņu.\nMēs nevaram tos bloķēt viņiem piederošajās vietnēs, bet varam bloķēt citās lapās.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nav darbību, par kurām ziņot",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Ko mēs esam bloķējuši",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Esam bloķējuši dažu uzņēmumu mēģinājumus izsekot tevi.} =2 {Esam bloķējuši {firstCompany} un {secondCompany} mēģinājumus izsekot tevi.} zero {Esam bloķējuši {firstCompany}, {secondCompany} un citu centienus izsekot tevi.} one {Esam bloķējuši {firstCompany} centienus izsekot tevi.} other {Esam bloķējuši {firstCompany}, {secondCompany} un citu centienus izsekot tevi.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Minimizēti sīkfaili",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Mēs esam iestatījuši sīkfailu preferences, lai maksimāli palielinātu konfidencialitāti, un aizvēruši piekrišanas uznirstošo logu.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Savienojums ir drošs",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Savienojumu nav iespējams padarīt drošu",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, zero {{trackerCount} lielāko izsekotāju tīkli ir bloķēti} one {{trackerCount} lielāko izsekotāju tīkls ir bloķēts} other {{trackerCount} lielāko izsekotāju tīkli ir bloķēti}}} other {{trackerCount, plural, zero {{trackerCount} Izsekotāji ir bloķēti} one {{trackerCount} Izsekotājs ir bloķēts} other {{trackerCount} Izsekotāji ir bloķēti}}}}} other {{majorNetwork, select, true {{trackerCount, plural, zero {Atrasti {trackerCount} lielāko izsekotāju tīkli} one {Atrasts {trackerCount} lielāko izsekotāju tīkls} other {Atrasti {trackerCount} lielāko izsekotāju tīkli}}} other {{trackerCount, plural, zero {{trackerCount} Atrasti izsekotāji} one {{trackerCount} Atrasts izsekotājs} other {{trackerCount} Atrasti izsekotāji}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} ir šīs vietnes un šajā lapā atrodamo zināmo izsekotāju īpašnieks, tāpēc mēs tos nebloķējām.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Izsekotāji palīdz uzņēmumiem tevi profilēt. Esam atraduši šos uzņēmumus, kuri novēro tavas darbības šajā lapā.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Izsekotāji palīdz uzņēmumiem veidot tavu profilu. Esam bloķējuši šo uzņēmumu iespēju pārraudzīt tavas darbības šajā lapā.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Izsekošanas tīkls nav zināms",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "{companyName} izsekošanas domēni",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Atrasti 0 izsekotāji",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Šai vietnei piederošie izsekotāji (atļauts)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, zero {{trackerCount} bloķēti izsekotāji {domain}} one {{trackerCount} bloķēts izsekotājs {domain}} other {{trackerCount} bloķēti izsekotāji {domain}}}} other {{trackerCount, plural, zero {Atrasti {trackerCount} izsekotāji {domain}} one {Atrasts {trackerCount} izsekotājs {domain}} other {Atrasti {trackerCount} izsekotāji {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analītika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklāma",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sociālais tīkls",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],182:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Tilkobling",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Krypter",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Signer",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verifiser",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Hent fra",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Pakk inn",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Pakk ut",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Ukjent",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detaljer om sikkerhetssertifikatet",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Navn",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Offentlig nøkkel",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritme",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Nøkkelstørrelse",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Bruk",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Sammendrag",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Effektiv størrelse",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Fant ikke sertifikat",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Sertifikat for {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Denne siden gir ikke mulighet til sikker tilkobling. Andre kan fange opp sensitiv informasjon du sender på denne siden.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Vi har oppgradert tilkoblingen på denne siden, så informasjonen du sender er beskyttet i transitt.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Denne siden bruker en sikker tilkobling. Informasjonen du sender er beskyttet i transitt.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],183:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokalisering",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Popup-vinduer",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Spør hver gang",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Varsle",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Alltid tillat",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Alltid nekte",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],184:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Velg alternativet som best beskriver problemet du opplevde.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Velg problemet ditt fra listen …",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video ble ikke avspilt",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Bildene ble ikke lastet inn",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Kommentarene ble ikke lastet inn",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Innhold mangler",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Linker eller knapper fungerer ikke",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Jeg kan ikke logge inn",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Nettstedet ba meg om å deaktivere",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Noe annet",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Rapporter nettstedfeil",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Fortell oss om problemet du opplevde, hvis du har lyst",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Send rapport",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Rapporter sendt til DuckDuckGo er 100 % anonyme og inkluderer bare valget ditt ovenfor, den valgfrie beskrivelsen din, URL-adressen og en liste over sporere vi fant på nettstedet.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Takk!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Rapporten bidrar til å forbedre nettleseren og gjøre opplevelsen bedre for andre.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],185:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Sporere",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],186:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Oppdaterer beskyttelseslisten",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Beskyttelse er <b>DEAKTIVERT</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Beskyttelse er <b>AKTIVERT</b> for dette nettstedet",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Andre kan fange opp sensitiv informasjon du sender på denne siden.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Vi har oppgradert tilkoblingen på denne siden, så informasjonen du sender er beskyttet i transitt.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Tilkoblingen på denne siden er sikret, så informasjonen du sender er beskyttet i transitt.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Vi fant ingen firmaer som prøver å spore deg på denne siden.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Vi fant bare sporere eid av {name}, som vi ikke blokkerte.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Vi {isWhitelisted, select, true {fant} other {blokkerte}} {displayCount} {displayCount, plural, =1 {kjent sporer} other {kjente sporere}} fra {companyCount} {companyCount, plural, one {firma} other {firmaer}} på denne siden.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Virker ikke nettsiden som forventet?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Ta forholdsregler",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Beskyttelse er DEAKTIVERT",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Vi oppdaget at noen selskaper sporer og profilerer deg på denne siden.} =2 {Vi oppdaget at {firstCompany} og {secondCompany} sporer og profilerer deg på denne siden.} one {Vi oppdaget at {firstCompany} sporer og profilerer deg på denne siden.} other {Vi oppdaget at {firstCompany}, {secondCompany} og andre sporer og profilerer deg på denne siden.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Sporingsnettverk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (eieren av {domain})\nsporer deg på {companyPrevalence} % av de mest populære nettstedene.\nVi kan ikke blokkere dem på nettsteder de eier, men vi kan på andre sider.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Ingen aktivitet å rapportere",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Disse blokkerte vi",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Vi blokkerte noen selskaper fra å prøve å spore deg.} =2 {Vi blokkerte {firstCompany} og {secondCompany} fra å prøve å spore deg.} one {Vi blokkerte {firstCompany} fra å prøve å spore deg.} other {Vi blokkerte {firstCompany}, {secondCompany} og andre fra å prøve å spore deg.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Informasjonskapsler er minimert",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Vi har angitt informasjonskapselpreferansene dine for å maksimere personvernet, og lukket samtykke-popupen.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Tilkoblingen er sikker",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Tilkoblingen kunne ikke sikres",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} større sporingsnettverk blokkert} other {{trackerCount} større sporingsnettverk blokkert}}} other {{trackerCount, plural, one {{trackerCount} sporing blokkert} other {{trackerCount} sporinger blokkert}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} større sporingsnettverk oppdaget} other {{trackerCount} større sporingsnettverk oppdaget}}} other {{trackerCount, plural, one {{trackerCount} sporer funnet} other {{trackerCount} sporere funnet}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} eier dette nettstedet og de kjente sporerne som finnes på denne siden, så vi blokkerte dem ikke.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Sporere hjelper firmaer å profilere deg. Vi oppdaget at disse selskapene overvåker aktiviteten din på denne siden.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Sporere hjelper firmaer å profilere deg. Vi blokkerte disse selskapene fra å overvåke aktiviteten din på denne siden.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Sporingsnettverket ukjent",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Sporingsdomener for {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 sporere funnet",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Sporere som eies av dette nettstedet (tillatt)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sporer er blokkert på {domain}} other {{trackerCount} sporere er blokkert på {domain}}}} other {{trackerCount, plural, one {{trackerCount} sporer funnet på {domain}} other {{trackerCount} sporere funnet på {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analyse",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Annonsering",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sosialt nettverk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],187:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Verbinding",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Versleutelen",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Tekenen",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verifiëren",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Afleiden",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Inpakken",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Uitpakken",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Onbekend",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detail van veiligheidscertificaat",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Algemene naam",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Openbare sleutel",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritme",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Sleutelgrootte",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Gebruik",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Overzicht",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Effectieve grootte",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certificaat niet gevonden",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificaat voor {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Deze pagina staat geen beveiligde verbinding toe. Anderen kunnen mogelijk gevoelige informatie onderscheppen die je op deze pagina verzendt.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Wij hebben de verbinding op deze pagina geüpgraded om de informatie die je verzendt te beschermen tijdens de overdracht.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Deze pagina maakt gebruik van een beveiligde verbinding, die de informatie die je verzendt beveiligt.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],188:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Camera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Microfoon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolocatie",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Pop-ups",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Elke keer vragen",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Informeren",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Altijd toestaan",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Altijd weigeren",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],189:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Selecteer de optie die het beste je probleem beschrijft.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Kies je probleem in de lijst ...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video werd niet afgespeeld",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Afbeeldingen zijn niet geladen",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Opmerkingen zijn niet geladen",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Inhoud ontbreekt",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Links of knoppen werken niet",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Ik kan niet inloggen",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "De site heeft me gevraagd om uit te schakelen",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Iets anders",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Defecte website melden",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Vertel ons eventueel over het probleem dat je hebt ondervonden",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Verzend Rapport",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Rapporten die naar DuckDuckGo worden verzonden, zijn 100% anoniem en bevatten alleen je selectie hierboven, je optionele beschrijving, de URL en een lijst met trackers die we op de site hebben gevonden.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Dankjewel!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Je rapport helpt ons om de browser én de ervaring voor anderen te verbeteren.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],190:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Trackers",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],191:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Beveiligingslijst updaten",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Beveiliging is <b>UITGESCHAKELD</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Beveiliging is <b>INGESCHAKELD</b> voor deze site",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Anderen kunnen mogelijk gevoelige informatie onderscheppen die je op deze pagina verzendt.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Wij hebben de verbinding op deze pagina geüpgraded om de informatie die je verzendt te beschermen tijdens de overdracht.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "De verbinding op deze pagina is beveiligd om informatie die je verzendt tijdens de overdracht te beveiligen.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "We hebben geen bedrijven gevonden die je proberen te volgen op deze pagina.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "We hebben alleen trackers gevonden die eigendom zijn van {name}. Deze zijn niet geblokkeerd.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "We {isWhitelisted, select, true {vonden} other {blokkeerden}} {displayCount} bekende {displayCount, plural, =1 {tracker} other {trackers}} van {companyCount} {companyCount, plural, one {bedrijf} other {bedrijven}} op deze pagina.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Werkt de website niet zoals verwacht?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Neem voorzorgsmaatregelen",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Beveiliging is UITGESCHAKELD",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {We hebben op deze pagina enkele bedrijven gevonden die je volgen en een profiel van je maken.} =2 {We hebben geconstateerd dat {firstCompany} en {secondCompany} je op deze pagina willen traceren en een profiel van je willen maken.} one {We hebben geconstateerd dat {firstCompany} je op deze pagina wil traceren en een profiel van je wil maken.} other {We hebben geconstateerd dat {firstCompany}, {secondCompany} en andere bedrijven je op deze pagina willen traceren en een profiel van je willen maken.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Tracker-netwerk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (eigenaar van {domain})\nvolgt je op {companyPrevalence}% van de populairste sites.\nWe kunnen ze niet blokkeren op sites waarvan ze de eigenaar zijn, maar we kunnen ze wel blokkeren op andere pagina's.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Geen activiteit te melden",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Wie we hebben geblokkeerd",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {We hebben voorkomen dat sommige bedrijven je volgen.} =2 {We hebben voorkomen dat {firstCompany} en {secondCompany} je kunnen volgen.} one {We hebben voorkomen dat {firstCompany} je kan volgen.} other {We hebben voorkomen dat {firstCompany}, {secondCompany} en anderen je kunnen volgen.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies geminimaliseerd",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "We hebben je cookievoorkeuren ingesteld voor maximale privacy en het pop-upvenster waarin om toestemming wordt gevraagd gesloten.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Verbinding is veilig",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Verbinding kan niet worden beveiligd",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} groot trackernetwerk geblokkeerd} other {{trackerCount} grote trackernetwerken geblokkeerd}}} other {{trackerCount, plural, one {{trackerCount} tracker geblokkeerd} other {{trackerCount} trackers geblokkeerd}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} groot trackernetwerk gevonden} other {{trackerCount} grote trackernetwerken gevonden}}} other {{trackerCount, plural, one {{trackerCount} tracker gevonden} other {{trackerCount} trackers gevonden}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} is eigenaar van deze site en de bekende trackers op deze pagina. Die hebben we dus niet geblokkeerd.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Trackers helpen bedrijven om een profiel van je te maken. We hebben deze bedrijven gevonden die je activiteit op deze pagina volgen.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Trackers helpen bedrijven om een profiel van je te maken. We hebben voorkomen dat deze bedrijven je activiteit op deze pagina volgen.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Tracker-netwerk onbekend",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Trackerdomeinen voor {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 trackers gevonden",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Trackers die eigendom zijn van deze site (Toegestaan)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} tracker geblokkeerd op {domain}} other {{trackerCount} trackers geblokkeerd op {domain}}}} other {{trackerCount, plural, one {{trackerCount} tracker gevonden op {domain}} other {{trackerCount} trackers gevonden op {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analyses",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "adverteren",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sociaal netwerk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],192:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Połączenie",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Szyfruj",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Podpisz",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Zweryfikuj",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Utwórz pochodne",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Zapakuj",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Odpakuj",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Nieznane",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Szczegóły certyfikatu bezpieczeństwa",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Nazwa ogólna",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Klucz publiczny",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algorytm",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Rozmiar klucza",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Zastosowanie",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Podsumowanie",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Stałe",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektywny rozmiar",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Nie znaleziono certyfikatu",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certyfikat dla {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Ta strona nie pozwala na bezpieczne połączenie. Inne osoby mogą przechwycić poufne informacje przesyłane przez użytkownika na tej stronie.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Uaktualniliśmy połączenie na tej stronie, aby chronić przesyłane informacje.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Ta strona korzysta z bezpiecznego połączenia, które chroni informacje wysyłane podczas przesyłania.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],193:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Aparat",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokalizacja",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Wyskakujące okienka",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Pytaj za każdym razem",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Powiadom",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Zawsze zezwalaj",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Zawsze odmawiaj",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],194:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Wybierz opcję, która najlepiej opisuje napotkany problem.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Wybierz problem z listy...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Film nie został odtworzony",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Obrazy nie zostały załadowane",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentarze nie zostały załadowane",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Brakuje treści",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Linki lub przyciski nie działają",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Nie mogę się zalogować",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Witryna poprosiła mnie o wyłączenie",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Coś innego",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Zgłoś uszkodzoną witrynę",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Jeśli chcesz, opowiedz nam o napotkanym problemie",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Wyślij raport",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Raporty wysyłane do DuckDuckGo są w 100% anonimowe i zawierają tylko Twój wybór powyżej, opcjonalny opis, adres URL i listę skryptów śledzących, które znaleźliśmy na stronie.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Dziękujemy!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Twoje zgłoszenie pomoże ulepszyć przeglądarkę i poprawić komfort korzystania innych użytkowników.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],195:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Skrypty śledzące",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],196:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Aktualizowanie listy ochrony",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Zabezpieczenia zostały <b>WYŁĄCZONE</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Zabezpieczenia są <b>WŁĄCZONE</b> dla tej strony",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Inne osoby mogą przechwycić poufne informacje przesyłane przez użytkownika na tej stronie.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Uaktualniliśmy połączenie na tej stronie, aby chronić przesyłane informacje.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Połączenie na tej stronie jest bezpieczne, chroniąc przesyłane informacje.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Nie znaleźliśmy żadnych firm próbujących śledzić Cię na tej stronie.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Znaleźliśmy tylko skrypty śledzące należące do {name}, których nie zablokowaliśmy.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "{isWhitelisted, select, true {Znaleźliśmy} other {Zablokowaliśmy}} {displayCount} znany(-e) {displayCount, plural, =1 {moduł śledzący} other {moduły śledzące}} {companyCount} {companyCount, plural, one {firmy} other {firm}} na tej stronie.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Witryna internetowa nie działa zgodnie z oczekiwaniami?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Zachowaj środki ostrożności",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Zabezpieczenia są WYŁĄCZONE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Na tej stronie znaleźliśmy firmy śledzące i profilujące użytkownika.} =2 {Na tej stronie znaleźliśmy firmy {firstCompany} i {secondCompany} śledzące i profilujące użytkownika.} one {Na tej stronie znaleźliśmy {firstCompany} śledzącą i profilującą użytkownika.} few {Na tej stronie znaleźliśmy {firstCompany}, {secondCompany} i inne firmy śledzące i profilujące użytkownika.} many {Na tej stronie znaleźliśmy {firstCompany}, {secondCompany} i inne firmy śledzące i profilujące użytkownika.} other {Na tej stronie znaleźliśmy {firstCompany}, {secondCompany} i inne firmy śledzące i profilujące użytkownika.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Sieć skryptów śledzących",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (właściciel {domain})\nśledzi Cię na {companyPrevalence}% najpopularniejszych stron.\nNie możemy blokować ich w witrynach, których są właścicielami, ale możemy to robić na innych stronach.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Brak aktywności do zgłoszenia",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Kogo zablokowaliśmy",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Zablokowaliśmy niektórym firmom możliwość prób śledzenia użytkownika.} =2 {Zablokowaliśmy próbę profilowania użytkownika przez {firstCompany} i {secondCompany}.} one {Zablokowaliśmy próbę śledzenia użytkownika przez {firstCompany}.} few {Zablokowaliśmy próbę śledzenia użytkownika przez {firstCompany}, {secondCompany} i inne firmy.} many {Zablokowaliśmy próbę śledzenia użytkownika przez {firstCompany}, {secondCompany} i inne firmy.} other {Zablokowaliśmy próbę śledzenia użytkownika przez {firstCompany}, {secondCompany} i inne firmy.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Ograniczono pliki cookie",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Ustawiliśmy preferencje dotyczące plików cookie, aby zmaksymalizować prywatność, i zamknęliśmy wyskakujące okienko zgody.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Połączenie jest bezpieczne",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Połączenie nie może zostać zabezpieczone",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Zablokowano {trackerCount} dużą sieć skryptów śledzących} few {Zablokowano {trackerCount} duże sieci skryptów śledzących} many {Zablokowano {trackerCount} dużych sieci skryptów śledzących} other {Zablokowano {trackerCount} dużej sieci skryptów śledzących}}} other {{trackerCount, plural, one {Zablokowano {trackerCount} skrypt śledzący} few {Zablokowano {trackerCount} skrypty śledzące} many {Zablokowano {trackerCount} skryptów śledzących} other {Zablokowano {trackerCount} skryptu śledzącego}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Znaleziono {trackerCount} dużą sieć skryptów śledzących} few {Znaleziono {trackerCount} duże sieci skryptów śledzących} many {Znaleziono {trackerCount} dużych sieci skryptów śledzących} other {Znaleziono {trackerCount} dużej sieci skryptów śledzących}}} other {{trackerCount, plural, one {Znaleziono {trackerCount} skrypt śledzący} few {Znaleziono {trackerCount} skrypty śledzące} many {Znaleziono {trackerCount} skryptów śledzących} other {Znaleziono {trackerCount} skryptów śledzących}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} jest właścicielem tej witryny i znanych skryptów śledzących znalezionych na tej stronie, dlatego ich nie zablokowaliśmy.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Skrypty śledzące ułatwiają firmom profilowanie użytkownika. Znaleźliśmy następujące firmy, które monitorują Twoją aktywność na tej stronie.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Skrypty śledzące ułatwiają firmom profilowanie użytkownika. Zablokowaliśmy tym firmom możliwość monitorowania Twojej aktywności na tej stronie.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Nieznana sieć skryptów śledzących",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domeny skryptów śledzących {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Znaleziono 0 skryptów śledzących",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Skrypty śledzące należące do tej strony (dozwolone)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {Zablokowano {trackerCount} skrypt śledzący na {domain}} few {Zablokowano {trackerCount} skrypty śledzące na {domain}} many {Zablokowano {trackerCount} skryptów śledzących na {domain}} other {Zablokowano {trackerCount} skryptu śledzącego na {domain}}}} other {{trackerCount, plural, one {Znaleziono {trackerCount} skrypt śledzący na {domain}} few {Znaleziono {trackerCount} skrypty śledzące na {domain}} many {Znaleziono {trackerCount} skryptów śledzących na {domain}} other {Znaleziono {trackerCount} skryptu śledzącego na {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analityka",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklama",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sieć społecznościowa",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],197:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Ligação",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Encriptar",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Assinar",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verificar",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Derivar",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Embrulhar",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Desembrulhar",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Desconhecido",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detalhe do Certificado de Segurança",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Nome comum",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Chave pública",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmo",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Tamanho da chave",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Uso",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Resumo",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanente",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Tamanho efetivo",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certificado não encontrado",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificado para {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Esta página não permite uma ligação segura. Outras pessoas podem intercetar informações confidenciais que enviares nesta página.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Melhorámos a ligação nesta página para proteger a informação que envias enquanto estás em trânsito.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Esta página utiliza uma ligação segura que protege a informação que envias enquanto está em trânsito.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],198:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Câmara",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Microfone",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolocalização",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Pop-ups",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Pergunte todas as vezes",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Notificar",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Permitir sempre",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Negar sempre",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],199:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Seleciona a opção que melhor descreve o problema que enfrentaste.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Escolhe o teu problema na lista…",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "O vídeo não foi reproduzido",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "As imagens não foram carregadas",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Os comentários não foram carregados",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Falta conteúdo",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Os links ou botões não funcionam",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Não consigo entrar",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "O site pediu-me para desativar",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Outra coisa",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Denunciar site danificado",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Se preferires, fala-nos do problema que enfrentaste",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Enviar relatório",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Os relatórios enviados para o DuckDuckGo são 100% anónimos e apenas incluem a tua seleção acima, a tua descrição opcional, o URL e uma lista de rastreadores que encontrámos no site.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Obrigado!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "O teu relatório ajudará a melhorar o navegador e melhorará a experiência de todos.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],200:[function(require,module,exports){
arguments[4][140][0].apply(exports,arguments)
},{"dup":140}],201:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "A atualizar a lista de proteção",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "As proteções foram <b>DESATIVADAS</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "As proteções estão <b>ATIVADAS</b> neste site",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Outros poderão ser capazes de intercetar informações sensíveis que envias nesta página.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Melhorámos a ligação nesta página para proteger a informação que envias em trânsito.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "A ligação nesta página é segura e protege a informação que envias em trânsito.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Não encontrámos nenhuma empresa a tentar monitorizar-te nesta página.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Encontrámos apenas monitorizadores pertencentes a {name}, que não bloqueámos.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Nós {isWhitelisted, select, true {encontrámos} other {bloqueámos}} {displayCount} {displayCount, plural, =1 {rastreador} other {rastreadores}} conhecido(s) de {companyCount} {companyCount, plural, one {empresa} other {empresas}} nesta página.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "O website não funciona como esperado?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Toma precauções",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "As proteções estão DESATIVADAS",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Encontrámos algumas empresas a monitorizar e a segmentar o teu perfil nesta página.} =2 {Encontrámos as empresas {firstCompany} e {secondCompany} a rastrear-te e segmentar-te nesta página.} one {Encontrámos a empresa {firstCompany} a rastrear-te e segmentar-te nesta página.} other {Encontrámos as empresas {firstCompany}, {secondCompany} e outras a rastrear-te e segmentar-te nesta página.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Rede de rastreamento",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (proprietário de {domain})\nrastreia-te em {companyPrevalence}% dos sites principais.\nNão podemos bloqueá-lo em sites da sua propriedade, mas podemos noutras páginas.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nenhuma atividade a relatar",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Quem bloqueamos",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Bloqueámos as tentativas de monitorização de algumas empresas.} =2 {Bloqueámos as tentativas de monitorização de {firstCompany} e {secondCompany}.} one {Bloqueámos a tentativa de monitorização de {firstCompany}.} other {Bloqueámos as tentativas de monitorização de {firstCompany}, {secondCompany} e outros.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimizados",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Definimos as tuas preferências de cookies para maximizar a privacidade e fechamos o pop-up de consentimento.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "A ligação é segura",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "A ligação pode não ser segura",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rede principal de rastreamento bloqueada} other {{trackerCount} rede principais de rastreamento bloqueadas}}} other {{trackerCount, plural, one {{trackerCount} rastreador bloqueado} other {{trackerCount} rastreadores bloqueados}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rede principal de rastreamento encontrada} other {{trackerCount} redes principais de rastreamento encontradas}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado} other {{trackerCount} rastreadores encontrados}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} é proprietário deste site e dos monitorizadores detetados nesta página, portanto não os bloqueámos.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Os rastreadores ajudam as empresas a segmentar-te. Encontrámos estas empresas a rastrear a tua atividade nesta página.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Os rastreadores ajudam as empresas a segmentar-te. Bloqueámos o rastreio da tua atividade nesta página por parte destas empresas.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Rede de rastreadores desconhecida",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domínios de rastreador de {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 rastreadores encontrados",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Rastreadores propriedade deste Site (Permitido)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} rastreador bloqueado em {domain}} other {{trackerCount} rastreadores bloqueados em {domain}}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado em {domain}} other {{trackerCount} rastreadores encontrados em {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Dados analíticos",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Publicidade",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Redes sociais",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],202:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Conexiune",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Criptare",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Semn",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verificare",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Derivare",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Încadrare",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Anulare încadrare",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Necunoscut",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Detalii privind certificatul de securitate",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Denumirea comună",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Cheie publică",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritm",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Dimensiunea cheii",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Utilizare",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Rezumat",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Dimensiune efectivă",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certificatul nu a fost găsit",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certificat pentru {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Această pagină nu permite o conexiune securizată. Este posibil ca alte persoane să poată intercepta informațiile sensibile pe care le trimiți pe această pagină.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Am îmbunătățit conexiunea de pe această pagină pentru a proteja informațiile pe care le trimiți, în timp ce acestea se află în tranzit.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Această pagină folosește o conexiune securizată, care protejează informațiile pe care le trimiți, în timpul tranzitului.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],203:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Aparat foto",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Microfon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Localizare geografică",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Ferestre pop-up",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Întreabă de fiecare dată",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Notificare",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Permite întotdeauna",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Refuză întotdeauna",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],204:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Selectează opțiunea care descrie cel mai bine problema cu care te-ai confruntat.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Alegeți problema ta din listă...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videoclipul nu a funcționat",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Imaginile nu s-au încărcat",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Comentariile nu s-au încărcat",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Conținutul lipsește",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Linkurile sau butoanele nu funcționează",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Nu mă pot conecta",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Site-ul mi-a cerut să dezactivez",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Altceva",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Raportează Site-ul Defect",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Dacă dorești, spune-ne despre problema cu care te-ai confruntat",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Trimite raportul",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Rapoartele trimise către DuckDuckGo sunt 100% anonime și includ doar selecția ta de mai sus, descrierea ta opțională, adresa URL și o listă de tehnologii de urmărire pe care le-am găsit pe site.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Mulțumim!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Raportul tău va contribui la îmbunătățirea browserului și la îmbunătățirea experienței pentru alte persoane.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],205:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Tehnologii de urmărire",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],206:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Se actualizează lista de protecție",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Protecțiile au fost <b>DEZACTIVATE</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Protecțiile sunt <b>ACTIVATE</b> pentru acest site",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Este posibil ca alte persoane să poată intercepta informațiile sensibile pe care le trimiți pe această pagină.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Am îmbunătățit conexiunea de pe această pagină pentru a proteja informațiile pe care le trimiți, în timp ce se află în tranzit.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Conexiunea de pe această pagină este securizată pentru a proteja informațiile pe care le trimiți în timp ce se află în tranzit.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Nu am găsit nicio companie care să încerce să te urmărească pe această pagină.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Am găsit doar instrumente de urmărire deținute de {name}, pe care nu le-am blocat.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Am {isWhitelisted, select, true {găsit} other {blocat}} {displayCount} {displayCount, plural, =1 {instrument de urmărire} alte {instrumente de urmărire}} cunoscut/cunoscute de la {companyCount} {companyCount, plural, one {companie} other {companii}} pe această pagină.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Site-ul nu funcționează așa cum era de așteptat?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Ia măsuri de precauție",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Protecțiile sunt DEZACTIVATE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Pe această pagină am găsit câteva companii care te urmăresc și îți creează profilul.} =2 {Am găsit {firstCompany} și {secondCompany} care te urmăresc și îți creează profilul pe această pagină.} one {Pe această pagină, am găsit instrumente de urmărire și de creare de profiluri de la {firstCompany}.} few {Pe această pagină, am găsit instrumente de urmărire și de creare de profiluri de la {firstCompany}, {secondCompany} și alții.} other {Pe această pagină, am găsit instrumente de urmărire și de creare de profiluri de la {firstCompany}, {secondCompany} și alții.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Rețea de instrumente de urmărire",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (proprietară a {domain})\nte urmărește pe {companyPrevalence}% din principalele site-uri.\nNu o putem bloca pe site-urile pe care le deține, dar putem să o facem pe alte pagini.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Nicio activitate de raportat",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Pe cine am blocat",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Am blocat unele companii să încerce să te urmărească.} =2 {Am blocat companiile {firstCompany} și {secondCompany} ca să nu încerce să te urmărească.} one {Am blocat {firstCompany} ca să nu încerce să te urmărească.} few {Am blocat {firstCompany}, {secondCompany} și altele ca să nu încerce să te urmărească.} other {Am blocat {firstCompany}, {secondCompany} și altele ca să nu încerce să te urmărească.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Module cookie minimizate",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Am setat preferințele tale privind modulele cookie pentru a maximiza confidențialitatea și am închis fereastra pop-up de consimțământ.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Conexiunea este securizată",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Conexiunea nu a putut fi securizată",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rețea principală urmăritoare blocată} few {{trackerCount} rețele principale urmăritoare blocate} other {{trackerCount} de rețele principale urmăritoare blocate}}} other {{trackerCount, plural, one {{trackerCount} Urmăritor Blocat} few {{trackerCount} Urmăritori Blocați} other {{trackerCount} Urmăritori Blocați}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} rețea principală urmăritoare găsită} few {{trackerCount} rețele principale urmăritoare găsite} other {{trackerCount} de rețele principale urmăritoare găsite}}} other {{trackerCount, plural, one {{trackerCount} Urmăritor Găsit} few {{trackerCount} Urmăritori Găsiți} other {{trackerCount} Urmăritori Găsiți}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} este proprietara acestui site și a instrumentelor de urmărire cunoscute găsite pe această pagină, așadar nu am blocat-o.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Instrumentele de urmărire ajută companiile să creeze profilul tău. Am găsit aceste companii care îți monitorizează activitatea pe această pagină.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Instrumentele de urmărire ajută companiile să creeze profilul tău. Am împiedicat aceste companii să monitorizeze activitatea ta pe această pagină.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Rețea cu tehnologii de urmărire necunoscută",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domenii tehnologii de urmărire pentru {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 tehnologii de urmărire găsite",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Instrumente de urmărire deținute de acest site (permise)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} instrument de urmărire blocat pe {domain}} few {{trackerCount} instrumente de urmărire blocate pe {domain}} other {{trackerCount} instrumente de urmărire blocate pe {domain}}}} other {{trackerCount, plural, one {{trackerCount} instrument de urmărire găsit pe {domain}} few {{trackerCount} instrumente de urmărire găsite pe {domain}} other {{trackerCount} instrumente de urmărire găsite pe {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analiză",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "publicitate",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Rețea socială",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],207:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Соединение",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Шифрование",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Подпись",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Подтверждение",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Производные",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Сворачивание",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Развертка",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Неизвестно",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "О сертификате безопасности",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Общепринятое название",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Открытый ключ",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Алгоритм",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Размер ключа",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Применение",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Сводка",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Постоянный",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Фактический размер",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Сертификат не найден",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Сертификат {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Эта страница не поддерживает безопасное соединение. Конфиденциальная информация, передаваемая здесь, может быть перехвачена.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Чтобы защитить передаваемую вами информацию, мы повысили безопасность соединения на этой странице.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Безопасное соединение на этой странице защищает ваши данные при отправке.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],208:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Камера",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Микрофон",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Геолокация",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Всплывающие окна",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Спрашивать каждый раз",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Спрашивать разрешение",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Разрешать всегда",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Не разрешать",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],209:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Выберите наиболее точное описание проблемы, с которой вы столкнулись.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Выберите проблему из списка...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Не воспроизводится видео",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Не загружаются изображения",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Не загружаются комментарии",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Отсутствует содержимое",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Не работают ссылки или кнопки",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Не могу войти",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Сайт попросил меня отключить",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Что-то другое",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Сообщить о неработающем сайте",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "По желанию оставьте пояснение",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Отправить жалобу",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Сообщения о неполадках, отправляемые в DuckDuckGo, на 100% анонимны и содержат лишь выбранный вами тип проблемы, пояснение, адрес сайта и список найденных на нем трекеров.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Спасибо!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Ваше сообщение будет способствовать улучшению браузера и повышению удобства пользования.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],210:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Трекеры",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],211:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Список защиты обновляется",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Функции защиты <b>ОТКЛЮЧЕНЫ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Функции защиты <b>ВКЛЮЧЕНЫ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Конфиденциальная информация, передаваемая на этой странице, может быть перехвачена.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Чтобы защитить отправляемые вами данные, мы повысили безопасность соединения.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Безопасное соединение с этой страницей обеспечивает защиту ваших данных при передаче.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "На этой странице не обнаружено ни одной компании, которая пытается отслеживать ваши действия.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Обнаружены только трекеры, принадлежащие {name}, которые мы не блокировали.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Мы {isWhitelisted, select, true {обнаружили} other {заблокировали}} {displayCount} {displayCount, plural, =1 {трекер} other {трекера(-ов)}} {companyCount} {companyCount, plural, one {компании} other {компаний}} на этой странице.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Сайт плохо работает?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Будьте осторожны!",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Функции защиты ОТКЛЮЧЕНЫ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Мы обнаружили, что некоторые компании отслеживают и профилируют вас на этой странице.} =2 {Мы обнаружили, что {firstCompany} и {secondCompany} отслеживают и профилируют вас на этой странице.} one {Мы обнаружили, что {firstCompany} отслеживает и профилирует вас на этой странице.} few {Мы обнаружили, что {firstCompany}, {secondCompany} и другие компании отслеживают и профилируют вас на этой странице.} many {Мы обнаружили, что {firstCompany}, {secondCompany} и другие компании отслеживают и профилируют вас на этой странице.} other {Мы обнаружили, что {firstCompany}, {secondCompany} и другие компании отслеживают и профилируют вас на этой странице.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Сеть трекеров",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (владелец {domain}) отслеживает ваши действия на {companyPrevalence}% самых популярных сайтов.\nМы можем блокировать трекеры на страницах других сайтов, но не сайтах, принадлежащих этой компании.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Пока нет сведений для отчета",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Кого мы заблокировали",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Чтобы предотвратить отслеживание, мы заблокировали несколько компаний.} =2 {Чтобы предотвратить отслеживание, мы заблокировали {firstCompany} и {secondCompany}.} one {Чтобы предотвратить отслеживание, мы заблокировали {firstCompany}.} few {Чтобы предотвратить отслеживание, мы заблокировали {firstCompany}, {secondCompany} и другие компании.} many {Чтобы предотвратить отслеживание, мы заблокировали {firstCompany}, {secondCompany} и другие компании.} other {Чтобы предотвратить отслеживание, мы заблокировали {firstCompany}, {secondCompany} и другие компании.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Минимум куки-файлов",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Заданные нами параметры максимально защищают вашу конфиденциальность и блокируют всплывающее окно настроек куки-файлов.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Установлено безопасное соединение",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Не удалось обезопасить соединение",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Заблокирована {trackerCount} крупная сеть трекеров} few {Заблокировано {trackerCount} крупные сети трекеров} many {Заблокировано {trackerCount} крупных сетей трекеров} other {Заблокировано {trackerCount} крупных сетей трекеров}}} other {{trackerCount, plural, one {Заблокирован {trackerCount} трекер} few {Заблокировано {trackerCount} трекера} many {Заблокировано {trackerCount} трекеров} other {Заблокированы {trackerCount} трекеры}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Обнаружена {trackerCount} крупная сеть трекеров} few {Обнаружено {trackerCount} крупные сети трекеров} many {Обнаружено {trackerCount} крупных сетей трекеров} other {Обнаружено {trackerCount} крупных сетей трекеров}}} other {{trackerCount, plural, one {Найден {trackerCount} трекер} few {Найдено {trackerCount} трекера} many {Найдено {trackerCount} трекеров} other {Найдены {trackerCount} трекеры}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "Этот сайт и найденные на нем трекеры принадлежат компании {companyName}, поэтому мы их не блокировали.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Трекеры применяются для профилирования посетителей сайтов. Перечисленные здесь компании отслеживают ваши действия на этой странице.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Трекеры применяются для профилирования посетителей сайтов. Мы заблокировали компании, которые пытались отслеживать ваши действия на этой странице.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Сеть трекеров неизвестна",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Трекерные домены {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Трекеры не обнаружены",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Трекеры, принадлежащие этому сайту (разрешены)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {На {domain} заблокирован {trackerCount} трекер} few {На {domain} заблокировано {trackerCount} трекера} many {На {domain} заблокировано {trackerCount} трекеров} other {Заблокировано трекеров на сайте {domain}: {trackerCount}}}} other {{trackerCount, plural, one {На сайте {domain} обнаружен {trackerCount} трекер} few {На сайте {domain} обнаружено {trackerCount} трекера} many {На сайте {domain} обнаружено {trackerCount} трекеров} other {Обнаружено трекеров на сайте {domain}: {trackerCount}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Аналитика",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Реклама",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Социальная сеть",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],212:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Pripojenie",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Šifrovať",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Podpísať",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Overiť",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Odvodiť",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Zabaliť",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Rozbaliť",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Neznáme",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Podrobnosti bezpečnostného certifikátu",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Všeobecný názov",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Verejný kľúč",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritmus",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Veľkosť kľúča",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Používanie",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Zhrnutie",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Trvalé",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Efektívna veľkosť",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certifikát nebol nájdený",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certifikát pre {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Táto stránka neumožňuje zabezpečené pripojenie. Iné osoby môžu zachytiť citlivé údaje, ktoré odošlete na tejto stránke.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Inovovali sme pripojenie na tejto stránke, aby sme chránili vami odosielané údaje počas prenosu.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Táto stránka používa zabezpečené pripojenie, ktoré chráni odosielané údaje počas prenosu.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],213:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofón",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokácia",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Automaticky zobrazené okná",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Vždy sa opýtať",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Oznámiť",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Vždy povoliť",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Vždy odoprieť",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],214:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Vyberte možnosť, ktorá najlepšie opisuje problém, ktorý ste zaznamenali.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Vyberte problém zo zoznamu...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video sa neprehráva",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Obrázky sa nepodarilo načítať",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentáre nepodarilo načítať",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Chýba obsah",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Odkazy alebo tlačidlá nefungujú",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Nemôžem sa prihlásiť",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Táto stránka ma požiadala o deaktiváciu",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Niečo iné",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Nahlásiť nefunkčný web",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Ak chcete, povedzte nám o probléme, ktorý ste zaznamenali",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Odoslať správu",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Správy odoslané službe DuckDuckGo sú 100 % anonymné a obsahujú len váš výber, voliteľný opis, adresu URL a zoznam sledovacích zariadení, ktoré sme na stránke našli.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Ďakujeme!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Vaše hlásenie pomôže zlepšiť prehliadač a zlepšiť skúsenosti ostatných používateľov.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],215:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Sledovacie zariadenia",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],216:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Aktualizácia zoznamu ochrany",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Ochrana bola <b>VYPNUTÁ</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Ochrana je pre túto lokalitu je <b>ZAPNUTÁ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Iné osoby môžu zachytiť citlivé údaje, ktoré odosielate na tejto stránke.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Pripojenie na tejto stránke sme vylepšili, aby sme chránili vami odosielané údaje počas prenosu.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Spojenie na tejto stránke je zabezpečené, aby sa chránili vami zaslané údaje počas prenosu.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Na tejto stránke sme nenašli žiadne spoločnosti, ktoré by sa vás snažili sledovať.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Našli sme len sledovacie zariadenia, ktoré vlastní {name}, ktoré sme nezablokovali.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "My {isWhitelisted, select, true {found} iné {blocked}} {displayCount} známe {displayCount, množné číslo, =1 {tracker} iné {trackers}} z {companyCount} {companyCount, množné číslo, jeden {company} iné {company}} na tejto stránke.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Webová lokalita nefunguje podľa očakávania?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Vykonajte preventívne opatrenia",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Ochrana je VYPNUTÁ",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Na tejto stránke sme našli niekoľko spoločností, ktoré vás sledujú a profilujú.} =2 {Na tejto stránke sme našli spoločnosť {firstCompany} a {secondCompany}, ktoré vás sledujú a profilujú.} one {Na tejto stránke sme našli spoločnosť {firstCompany}, ktorá vás sleduje a profiluje.} few {Na tejto stránke sme našli spoločnosť {firstCompany}, {secondCompany} a ďalšie, ktoré vás sledujú a profilujú.} many {Na tejto stránke sme našli spoločnosť {firstCompany}, {secondCompany} a ďalšie, ktoré vás sledujú a profilujú.} other {Na tejto stránke sme našli spoločnosť {firstCompany}, {secondCompany} a ďalšie, ktoré vás sledujú a profilujú.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Siete sledovacích objektov",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (vlastník {domain})\nvás sleduje na {companyPrevalence}% top stránok.\nNemôžeme ich zablokovať na lokalitách, ktoré vlastnia, ale môžeme ich zablokovať na iných stránkach.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Žiadna aktivita na hlásenie",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Koho sme zablokovali",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Zablokovali sme niektoré spoločnosti, ktoré sa vás pokúšali sledovať.} =2 {Zablokovali sme {firstCompany} a {secondCompany}, ktoré sa vás pokúšali sledovať.} one {Zablokovali sme spoločnosť {firstCompany}, ktorá sa vás pokúšali sledovať.} few {Zablokovali sme spoločnosti {firstCompany}, {secondCompany} a ďalšie, ktoré sa vás pokúšali sledovať.} many {Zablokovali sme spoločnosť {firstCompany}, {secondCompany} a ďalšie, ktoré sa vás pokúšali sledovať.} other {Zablokovali sme spoločnosti {firstCompany}, {secondCompany} a ďalšie, ktoré sa vás pokúšali sledovať.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Súbory cookie boli minimalizované",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Nastavili sme vaše nastavenia súborov cookie na maximalizáciu ochrany súkromia a zatvorili sme automaticky zobrazované okno so súhlasom.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Pripojenie je zabezpečené",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Pripojenie sa nepodarilo zabezpečiť ",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Zablokovala sa {trackerCount} hlavná sieť sledovacích zariadení} few {Zablokovali sa {trackerCount} hlavné siete sledovacích zariadení} many {Zablokovala sa {trackerCount} hlavnej siete sledovacích zariadení} other {Zablokovalo sa {trackerCount} hlavných sietí sledovacích zariadení}}} other {{trackerCount, plural, one {Zablokovalo sa {trackerCount} sledovacie zariadenie} few {Zablokovali sa {trackerCount} sledovacie zariadenia} many {Zablokovalo sa {trackerCount} sledovacieho zariadenia} other {Zablokovalo sa {trackerCount} sledovacích zariadení}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Našla sa {trackerCount} hlavná sieť sledovacích zariadení} few {Našli sa {trackerCount} hlavné siete sledovacích zariadení} many {Našlo sa {trackerCount} hlavnej siete sledovacích zariadení} other {Našlo sa {trackerCount} hlavných sietí sledovacích zariadení}}} other {{trackerCount, plural, one {Našlo sa {trackerCount} sledovacie zariadenie} few {Našli sa {trackerCount} sledovacie zariadenia} many {Našlo sa {trackerCount} sledovacieho zariadenia} other {Našlo sa {trackerCount} sledovacích zariadení}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} vlastní túto stránku a známe sledovacie zariadenia nájdené na tejto stránke, takže sme ich nezablokovali.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Sledovacie zariadenia pomáhajú spoločnostiam profilovať vás. Na tejto stránke sme našli tieto spoločnosti, ktoré monitorujú vašu aktivitu.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Sledovacie zariadenia pomáhajú spoločnostiam profilovať vás. Týmto spoločnostiam sme zablokovali monitorovanie vašej aktivity na tejto stránke.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Neznáma sieť sledovacích zariadení",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domény sledovacích zariadení pre spoločnosť {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Našlo sa '{'0'}' sledovacích zariadení",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Sledovacie zariadenia vlastnené touto lokalitou (povolené)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sledovacie zariadenie zablokované na {domain}} few {{trackerCount} sledovacie zariadenia zablokované na {domain}} many {{trackerCount} sledovacieho zariadenia zablokovaného na {domain}} other {{trackerCount} sledovacích zariadení zablokovaných na {domain}}}} other {{trackerCount, plural, one {{trackerCount} sledovacie zariadenie nájdené na {domain}} few {{trackerCount} sledovacie zariadenia nájdené na {domain}} many {{trackerCount} sledovacieho zariadenia nájdeného na {domain}} other {{trackerCount} sledovacích zariadení nájdených na {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analytické údaje",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Reklama",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sociálna sieť",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],217:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Povezava",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Šifriraj",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Znak",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Preveri",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Izpelji",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Zavij",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Razvij",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Neznano",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Podrobnosti varnostnega potrdila",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Splošno ime",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Javni ključ",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritem",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Velikost ključa",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Uporaba",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Povzetek",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Trajno",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Učinkovita velikost",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certifikata ni bilo mogoče najti",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Potrdilo za spletno mesto {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Ta stran ne omogoča varne povezave. Drugi lahko prestrežejo občutljive podatke, ki jih pošljete na tej strani.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Na tej strani smo nadgradili povezavo za zaščito podatkov, ki jih pošiljate med prenosom.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Ta stran uporablja varno povezavo za zaščito podatkov, ki jih pošljete med prenosom.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],218:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokacija",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Pojavna okna",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Vprašaj vsakič",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Obvesti",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Vedno dovolite",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Vedno zavrnite",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],219:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Izberite možnost, ki najbolje opisuje težavo, na katero ste naleteli.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Svoje vprašanje izberite s seznama ...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video se ni predvajal",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Slike se niso naložile",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Komentarji se niso naložili",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Vsebina manjka",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Povezave ali tipke ne delujejo",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Ne morem se prijaviti",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Spletišče me je prosilo, da onemogočim",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Nekaj drugega",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Prijavite poškodovano spletno mesto",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Če želite, nam opišite težavo, na katero ste naleteli.",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Pošlji poročilo",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Poročila, poslana družbi DuckDuckGo, so 100 % anonimna in vključujejo samo vaš zgornji izbor, vaš neobvezni opis, URL in seznam sledilnikov, ki smo jih našli na spletnem mestu.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Hvala!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Vaše poročilo bo pripomoglo k izboljšanju brskalnika in boljši izkušnji drugih uporabnikov.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],220:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Sledilniki",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],221:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Posodabljanje seznama zaščite",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Zaščite so bile <b>ONEMOGOČENE</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Zaščite za to spletno mesto so <b>OMOGOČENE</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Drugi lahko prestrežejo občutljive podatke, ki jih pošljete na tej strani.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Na tej strani smo nadgradili povezavo za zaščito podatkov, ki jih pošiljate med prenosom.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Povezava na tej strani je varna za zaščito podatkov, ki jih pošiljate med prenosom.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Na tej strani nismo našli nobenega podjetja, ki bi vas poskušalo izslediti.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Našli smo le sledilnike v lasti {name}, ki jih nismo blokirali.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Na tej strani smo {isWhitelisted, select, true {našli} other {blokirali}} odkrite sledilnike: {displayCount} iz toliko podjetij: {companyCount}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Spletno mesto ne deluje po pričakovanjih?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Previdnostni ukrepi",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Zaščite so ONEMOGOČENE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Na tej strani smo našli nekaj podjetij, ki vam sledijo in vas profilirajo.} =2 {Na tej strani smo odkrili podjetji {firstCompany} in {secondCompany}, ki vam sledita in vas profilirata.} one {Na tej strani smo našli podjetje {firstCompany}, ki vas spremlja in profilira.} two {Na tej strani smo našli podjetji {firstCompany}, {secondCompany} in druga podjetja, ki vas spremljajo in profilirajo.} few {Na tej strani smo našli podjetji {firstCompany}, {secondCompany} in druga podjetja, ki vas spremljajo in profilirajo.} other {Na tej strani smo našli podjetji {firstCompany}, {secondCompany} in druga podjetja, ki vas spremljajo in profilirajo.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Sledilno omrežje",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (lastnik {domain})\nvas spremlja na {companyPrevalence} % najboljših spletnih mest.\nNe moremo jih blokirati na straneh, ki so v njihovi lasti, lahko pa jih blokiramo na drugih straneh.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Ni dejavnosti za poročanje",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Koga smo blokirali",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Nekaterim podjetjem smo preprečili, da bi vam poskušala slediti.} =2 {Blokirali smo podjetji {firstCompany} in {secondCompany}, da vam ne bi poskušali slediti.} one {Blokirali smo podjetje {firstCompany}, da vam ne bi poskušalo slediti.} two {Blokirali smo {firstCompany}, {secondCompany} in druga podjetja, da vam ne bi poskušala slediti.} few {Blokirali smo {firstCompany}, {secondCompany} in druga podjetja, da vam ne bi poskušala slediti.} other {Blokirali smo {firstCompany}, {secondCompany} in druga podjetja, da vam ne bi poskušala slediti.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Piškotki so minimizirani",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Nastavili smo vaše nastavitve piškotkov za čim večjo zasebnost in zaprli pojavno okno za soglasje.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Povezava je varna",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Povezave ni bilo mogoče zavarovati",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {Blokirano {trackerCount} glavno sledilno omrežje} two {Blokirani {trackerCount} glavni omrežji} few {Blokiranih {trackerCount} glavnih omrežij} other {Blokiranih {trackerCount} glavnih sledilnih omrežij}}} other {{trackerCount, plural, one {Blokiran {trackerCount} sledilnik} two {Blokirana {trackerCount} sledilnika} few {Blokiranih {trackerCount} sledilnikov} other {Blokiranih {trackerCount} sledilnikov}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {Najdeno {trackerCount} glavno sledilno omrežje} two {Najdeni {trackerCount} glavni omrežji} few {Najdenih {trackerCount} glavnih omrežij} other {Najdenih {trackerCount} glavnih sledilnih omrežij}}} other {{trackerCount, plural, one {Najden {trackerCount} sledilnik} two {Najdena {trackerCount} sledilnika} few {Najdeni {trackerCount} sledilniki} other {Najdenih {trackerCount} sledilnikov}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "Podjetje {companyName} je lastnik tega spletnega mesta in znanih sledilnikov na tej strani, zato jih nismo blokirali.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Sledilniki podjetjem pomagajo pri oblikovanju vašega profila. Ta podjetja spremljajo vaše dejavnosti na tej strani.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Sledilniki podjetjem pomagajo pri oblikovanju vašega profila. Tem podjetjem smo preprečili spremljanje vaših dejavnosti na tej strani.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Neznano omrežje sledilnika",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Domene sledilnikov podjetja {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "Nobenega sledilnika ni bilo mogoče najti",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Sledilniki v lasti tega spletnega mesta (dovoljeni)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sledilnik je bil blokiran na {domain}} two {{trackerCount} sledilnika sta bila blokirana na {domain}} few {{trackerCount} sledilniki so bili blokirani na {domain}} other {{trackerCount} sledilnikov je bilo blokiranih na {domain}}}} other {{trackerCount, plural, one {{trackerCount} sledilnik je bil najden na {domain}} two {{trackerCount} sledilnika sta bila najdena na {domain}} few {{trackerCount} sledilniki so bili najdeni na {domain}} other {{trackerCount} sledilnikov je bilo najdenih na {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analitika",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Oglaševanje",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Družbena omrežja",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],222:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Anslutning",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Kryptera",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "Underteckna",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Verifiera",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Härled",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Packa in",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Packa upp",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Okänd",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Information om säkerhetscertifikat",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Vanligt namn",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Offentlig nyckel",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritm",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Nyckelstorlek",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Användning",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Sammanfattning",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Permanent",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Verklig storlek",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Certifikatet hittades inte",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "Certifikat för {domain}",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Den här sidan tillåter inte säker anslutning. Det kan hända att andra kan komma åt känslig information som du skickar på sidan.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Vi har uppgraderat anslutningen på den här sidan för att skydda den information som du skickar medan den överförs.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Den här sidan använder en säker anslutning. Det skyddar den information som du skickar medan den överförs.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],223:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Geolokalisering",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Popup-fönster",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Fråga varje gång",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Meddela",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Tillåt alltid",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Neka alltid",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],224:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Välj det alternativ som bäst beskriver det problem som du har stött på.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Välj din fråga i listan ...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Videon kunde inte spelas upp",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Bilderna kunde inte laddas",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Inlägg kunde inte laddas",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "Innehåll saknas",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Länkar eller knappar fungerar inte",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Jag kan inte logga in",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Webbplatsen bad mig att avaktivera",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Övrigt",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Rapportera skadad webbplats",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "Om du vill kan du berätta mer om det problem som du har stött på",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Skicka anmälan",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "Rapporter som skickas till DuckDuckGo är 100 % anonyma och innehåller endast ditt val ovan, din valfria beskrivning, webbadressen och en lista över spårare som vi hittade på webbplatsen.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Tack!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Din rapport bidrar till att förbättra webbläsaren och göra upplevelsen bättre för andra.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],225:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "Spårare",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],226:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Skyddslistan uppdateras",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Skydd har <b>INAKTIVERATS</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Skydd är <b>AKTIVERADE</b> för den här webbplatsen",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Andra kan få tillgång till känslig information som du skickar på den här sidan.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Vi har uppgraderat anslutningen på den här sidan för att skydda den information som du skickar medan den överförs.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Anslutningen på den här sidan är säker för att skydda information som du skickar medan den överförs.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Vi har inte hittat några företag som försöker spåra dig på den här sidan.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Vi hittade bara spårare som ägs av {name}, vilka vi inte har blockerat.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Vi {isWhitelisted, select, true {hittade} other {blockerade}} {displayCount} {displayCount, plural, =1 {känd spårare} other {kända spårare}} från {companyCount} {companyCount, plural, one {företag} other {företag}} på den här sidan.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Fungerar inte webbplatsen som förväntat?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Vidta försiktighetsåtgärder",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Skydd är INAKTIVERADE",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Vi hittade några företag som spårar och profilerar dig på den här sidan.} =2 {Vi har upptäckt att {firstCompany} och {secondCompany} spårar och profilerar dig på den här sidan.} one {Vi har upptäckt att {firstCompany} spårar och profilerar dig på den här sidan.} other {Vi har upptäckt att {firstCompany}, {secondCompany} med flera spårar och profilerar dig på den här sidan.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "Spårningsnätverk",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} (som äger {domain})\nspårar dig på {companyPrevalence} % av de populäraste webbplatserna.\nVi kan inte blockera dem på webbplatser som de själva äger, men vi kan göra det på andra webbplatser.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Ingen aktivitet att rapportera",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Vilka vi har blockerat",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Vi har blockerat vissa företag från att försöka spåra dig.} =2 {Vi har blockerat {firstCompany} och {secondCompany} från att försöka spåra dig.} one {Vi har blockerat {firstCompany} från att försöka spåra dig.} other {Vi har blockerat {firstCompany}, {secondCompany} med flera från att försöka spåra dig.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Cookies minimerade",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Vi har konfigurerat dina cookieinställningar för att maximera din integritet och stängt popup-fönstret för samtycke.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Anslutningen är säker",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Anslutningen kunde inte säkras",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} större spårningsnätverk blockerades} other {{trackerCount} större spårningsnätverk blockerades}}} other {{trackerCount, plural, one {{trackerCount} spårare blockerades} other {{trackerCount} spårare blockerades}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} större spårningsnätverk hittades} other {{trackerCount} större spårningsnätverk hittades}}} other {{trackerCount, plural, one {{trackerCount} spårare hittades} other {{trackerCount} spårare hittades}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} äger den här webbplatsen och de kända spårare som hittades på sidan, så vi har inte blockerat dem.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Spårare hjälper företag att profilera dig. Vi har upptäckt att följande företag övervakar din aktivitet på den här sidan.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Spårare hjälper företag att profilera dig. Vi har blockerat följande företag från att övervaka din aktivitet på den här sidan.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "Okänt spårarnätverk",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "Spårardomäner för {companyName}",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 spårare hittades",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Spårare som ägs av den här webbplatsen (tillåtna)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{trackerCount} spårare blockerad på {domain}} other {{trackerCount} spårare blockerade på {domain}}}} other {{trackerCount, plural, one {{trackerCount} spårare hittades på {domain}} other {{trackerCount} spårare hittades på {domain}}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analys",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "Annonsering",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Socialt nätverk",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}],227:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "connection" : {
    "title" : "Bağlantı",
    "note" : "The technical details of the connection between the browser and the website (whether encrypted and how)"
  },
  "encrypt" : {
    "title" : "Şifreleme",
    "note" : "When the cryptographic key can be used to encrypt data"
  },
  "sign" : {
    "title" : "İmzala",
    "note" : "When the cryptographic key can be used to sign data"
  },
  "verify" : {
    "title" : "Doğrulama",
    "note" : "When the cryptographic key can be used to verify data"
  },
  "derive" : {
    "title" : "Türev",
    "note" : "When the cryptographic key can be used to derive new keys"
  },
  "wrap" : {
    "title" : "Paketleme",
    "note" : "When the cryptographic key can be used to wrap another key"
  },
  "unwrap" : {
    "title" : "Paket açma",
    "note" : "When the cryptographic key can be used to unwrap another key"
  },
  "unknown" : {
    "title" : "Bilinmiyor",
    "note" : "The cryptographic key can be used some other purpose we don't recognize"
  },
  "certificateDetail" : {
    "title" : "Güvenlik Sertifikası Detayı",
    "note" : "Header for section that contains the SSL certificate details"
  },
  "commonName" : {
    "title" : "Ortak Ad",
    "note" : "The Common Name for an SSL certificate"
  },
  "publicKey" : {
    "title" : "Ortak Anahtar",
    "note" : "The Public Key for an SSL certificate"
  },
  "algorithm" : {
    "title" : "Algoritma",
    "note" : "The Algorithm used for an SSL certificate"
  },
  "keySize" : {
    "title" : "Anahtar Boyutu",
    "note" : "The size of the encryption key for an SSL certificate"
  },
  "usage" : {
    "title" : "Kullanım",
    "note" : "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)"
  },
  "summary" : {
    "title" : "Özet",
    "note" : "Header for summary of connection details"
  },
  "permanent" : {
    "title" : "Kalıcı",
    "note" : "Whether certificate is permanent"
  },
  "effectiveSize" : {
    "title" : "Geçerli Boyut",
    "note" : "Effective size of encryption key for an SSL certificate"
  },
  "certificateNotFound" : {
    "title" : "Sertifika bulunamadı",
    "note" : "When the connection is not encrypted (ie. http) we do not have any certificate details to show"
  },
  "certificateForDomain" : {
    "title" : "{domain} için sertifika",
    "note" : "Header for certificate details for a given domain"
  },
  "insecureConnectionDesc" : {
    "title" : "Bu sayfa güvenli bağlantıya izin vermiyor. Başkaları bu sayfada gönderdiğiniz hassas bilgileri ele geçirebilir.",
    "note" : "Shown we connection is not encrypted"
  },
  "upgradedConnectionDesc" : {
    "title" : "Aktarım sırasında gönderdiğiniz bilgileri korumak için bu sayfadaki bağlantıyı yükselttik.",
    "note" : "Shown when we successfully upgrade a connection from an insecure one to a secure connection"
  },
  "secureConnectionDesc" : {
    "title" : "Bu sayfa, gönderdiğiniz bilgileri aktarım sırasında koruyan güvenli bir bağlantı kullanır.",
    "note" : "Shown when the user navigated directly to a secure connection"
  }
}
},{}],228:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "camera" : {
    "title" : "Kamera",
    "note" : "Camera permission is used by the browser to ask the user for access to computer or phone camera"
  },
  "microphone" : {
    "title" : "Mikrofon",
    "note" : "Microphone permission is used by the browser to ask the user for access to computer or phone microphone"
  },
  "geolocation" : {
    "title" : "Coğrafi Konum",
    "note" : "Geolocation permission is used by the browser to ask the user to share their current location with the website"
  },
  "popups" : {
    "title" : "Açılır pencereler",
    "note" : "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows"
  },
  "ask" : {
    "title" : "Her seferinde sor",
    "note" : "A permission setting that specifies the user should be asked each time the website wants to use a given permission"
  },
  "notify" : {
    "title" : "Bildir",
    "note" : "A permission setting that specifies the user should be notified each time the website wants to use a given permission"
  },
  "grant" : {
    "title" : "Her zaman izin ver",
    "note" : "A permission setting that allows the website to always use this permission without asking"
  },
  "deny" : {
    "title" : "Her zaman reddet",
    "note" : "A permission setting that always blocks the website from using this permission"
  }
}
},{}],229:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "selectTheOptionDesc" : {
    "title" : "Karşılaştığınız sorunu en iyi tanımlayan seçeneği seçin.",
    "note" : "The user will see this UI when they're running into issues with a given website, that we may be causing"
  },
  "pickYourIssueFromTheList" : {
    "title" : "Listeden yaşadığınız sorunu seçin...",
    "note" : "Asks the user to pick a specific list from the pulldown"
  },
  "videos" : {
    "title" : "Video oynatılamadı",
    "note" : "User is reporting this page because a video didn't play"
  },
  "images" : {
    "title" : "Resimler yüklenemedi",
    "note" : "User is reporting this page because one or more images did not load"
  },
  "comments" : {
    "title" : "Yorumlar yüklenmedi",
    "note" : "User is reporting this page because one or more comments did not load"
  },
  "content" : {
    "title" : "İçerik eksik",
    "note" : "User is reporting this page because some other type of content did not load"
  },
  "links" : {
    "title" : "Bağlantılar veya düğmeler çalışmıyor",
    "note" : "User is reporting this page because one or more links or buttons did not work when clicked"
  },
  "login" : {
    "title" : "Oturum açamıyorum",
    "note" : "User is reporting this page because they are unable to log into the website"
  },
  "paywall" : {
    "title" : "Site benden devre dışı bırakmamı istedi",
    "note" : "User is reporting this page asked them to disable their privacy or ad blocking extension"
  },
  "other" : {
    "title" : "Başka bir şey",
    "note" : "User is reporting this page because of some other reason than the ones we listed"
  },
  "reportBrokenSite" : {
    "title" : "Hatalı Siteyi Bildirin",
    "note" : "Title for reporting broken website view"
  },
  "tellUsMoreDesc" : {
    "title" : "İsterseniz bize yaşadığınız sorun hakkında bilgi verin",
    "note" : "A hint for a text box that lets user enter free text to describe their problem"
  },
  "sendReport" : {
    "title" : "Rapor gönder",
    "note" : "Button for submitting report"
  },
  "reportsAreAnonymousDesc" : {
    "title" : "DuckDuckGo'ya gönderilen raporlar %100 isimsizdir ve yalnızca yukarıdaki seçiminizi, isteğe bağlı açıklamanızı, URL'yi ve sitede bulduğumuz izleyicilerin bir listesini içerir.",
    "note" : "A small disclaimer at the bottom of the view describing what is included in the report"
  },
  "thankYou" : {
    "title" : "Teşekkür ederiz!",
    "note" : "Title for what the user sees upon submitting the report"
  },
  "yourReportWillHelpDesc" : {
    "title" : "Raporunuz tarayıcıyı geliştirmemize ve diğer kullanıcılar için daha iyi bir deneyim sunmamıza yardımcı olacaktır.",
    "note" : "Body that the user sees upon submitting the report"
  }
}

},{}],230:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "trackers" : {
    "title" : "İzleyiciler",
    "note" : "Trackers are a pieces of code on a website that monitors users as they navigate the web"
  }
}

},{}],231:[function(require,module,exports){
module.exports={
  "smartling" : {
    "string_format" : "icu",
    "translate_paths" : [
    {
      "path" : "*/title",
      "key" : "{*}/title",
      "instruction" : "*/note"
    }]
  },
  "updatingProtectionList" : {
    "title" : "Koruma listesi güncelleniyor",
    "note" : "Message shown while updating the list of protections"
  },
  "protectionsDisabled" : {
    "title" : "Korumalar <b>DEVRE DIŞI BIRAKILDI</b>",
    "note" : "Headline when privacy protections are disabled"
  },
  "protectionsEnabled" : {
    "title" : "Korumalar bu site için <b>ETKİNLEŞTİRİLDİ</b>",
    "note" : "Headline when privacy protections are enabled"
  },
  "connectionDescriptionUnencrypted" : {
    "title" : "Başkaları bu sayfada gönderdiğiniz hassas bilgileri ele geçirebilir.",
    "note" : "Shown when the connection is not encrypted (HTTP instead of HTTPS)"
  },
  "connectionDescriptionUpgraded" : {
    "title" : "Aktarım sırasında gönderdiğiniz bilgileri korumak için bu sayfadaki bağlantıyı yükselttik.",
    "note" : "Shown when the connection has been upgraded from unencrypted to encrypted (HTTP to HTTPS)"
  },
  "connectionDescriptionEncrypted" : {
    "title" : "Bu sayfadaki bağlantı, gönderdiğiniz bilgileri aktarım sırasında korumak için güvenlidir.",
    "note" : "Shown when the connection is encrypted (HTTPS not HTTP)"
  },
  "trackerNetworksSummaryNone" : {
    "title" : "Bu sayfada sizi takip etmeye çalışan herhangi bir şirket bulamadık.",
    "note" : "We did not find any trackers on this page"
  },
  "trackerNetworksSummaryOwn" : {
    "title" : "Yalnızca {name} şirketine ait ve engellemediğimiz izleyiciler bulduk.",
    "note" : "We found but did not block trackers from company named"
  },
  "trackerNetworksSummaryOther" : {
    "title" : "Bu sayfada {companyCount} {companyCount, plural, one {company} other {companies}} şirketten {displayCount} bilinen {displayCount, plural, =1 {tracker} other {trackers}} izleyiciyi {isWhitelisted, select, true {found} other {blocked}}.",
    "note" : "This summarizes the number of trackers that we either blocked or did not block (depending on the protection setting for this site)"
  },
  "websiteNotWorkingQ" : {
    "title" : "Web sitesi beklendiği gibi çalışmıyor mu?",
    "note" : "Call to action for user to click if they are having issues with this web page"
  },
  "takePrecautions" : {
    "title" : "Önlem Alın",
    "note" : "Title shown when the page is unencrypted"
  },
  "protectionsAreDisabled" : {
    "title" : "Korumalar DEVRE DIŞI",
    "note" : "Shown when user has disabled protections for this site (or they have been programatically disabled)"
  },
  "foundCompanyNamesList" : {
    "title" : "{companyCount, plural, =0 {Bu sayfada sizi izleyen ve profilinizi çıkaran bazı şirketler olduğunu belirledik.} =2 {Bu sayfada sizi izleyen ve profilinizi çıkaran {firstCompany} ve {secondCompany} bulduk.} one {{firstCompany} şirketinin sizi bu sayfada izlediğini ve profilinizi çıkardığını belirledik.} other {{firstCompany}, {secondCompany} ve diğerlerinin sizi bu sayfada izlediğini ve profilinizi çıkardığını belirledik.}}",
    "note" : "Returns a string in the form of 'We found CompanyA, CompanyB and others tracking and profiling you on this page.'"
  },
  "majorTrackerNetwork" : {
    "title" : "İzleyici Ağı",
    "note" : "Tracker network is a group of trackers, usually in the form of a company name, that track users across websites"
  },
  "majorTrackingNetworkDesc" : {
    "title" : "{companyDisplayName} ({domain} alan adının sahibi)\nsizi en popüler sitelerin %{companyPrevalence} kadarında izliyor.\nOnları sahip oldukları sitelerde engelleyemiyor, ancak diğer sayfalarda engelleyebiliyoruz.",
    "note" : "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc"
  },
  "noActivityToReport" : {
    "title" : "Raporlanacak Etkinlik Yok",
    "note" : "Title when we did not find any trackers on this page"
  },
  "trackersBlocked" : {
    "title" : "Engellenen Şirketler",
    "note" : "Title for the list of companies that we blocked"
  },
  "trackersBlockedDesc" : {
    "title" : "{companyCount, plural, =0 {Bazı şirketlerin sizi izlemesini engelledik.} =2 {{firstCompany} ve {secondCompany} tarafından izlenmenizi engelledik.} one {{firstCompany} tarafından izlenmenizi engelledik.} other {{firstCompany}, {secondCompany} ve diğerlerinin sizi izlemesini engelledik.}}",
    "note" : "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'"
  },
  "cookiesMinimized" : {
    "title" : "Çerezler Minimize Edildi",
    "note" : "Title for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "cookiesMinimizedDesc" : {
    "title" : "Çerez tercihlerinizi gizliliği en üst düzeye çıkaracak şekilde ayarladık ve onay açılır penceresini kapattık.",
    "note" : "Description for when we have set the cookie privacy settings on this website to maximize privacy"
  },
  "connectionSecure" : {
    "title" : "Bağlantı Güvenli",
    "note" : "The connection to the website is secure (HTTPS)"
  },
  "connectionNotSecure" : {
    "title" : "Bağlantı Güvenli Hâle Getirilemedi",
    "note" : "The connection is not secure (HTTP)"
  },
  "trackerNetworksDesc" : {
    "title" : "{blocked, select, true {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} Başlıca İzleyici Ağı Engellendi} other {{trackerCount} Başlıca İzleyici Ağları Engellendi}}} other {{trackerCount, plural, one {{trackerCount} İzleyici Engellendi} other {{trackerCount} İzleyici Engellendi}}}}} other {{majorNetwork, select, true {{trackerCount, plural, one {{trackerCount} Ana İzleyici Ağı Bulundu} other {{trackerCount} Başlıca İzleyici Ağları Bulundu}}} other {{trackerCount, plural, one {{trackerCount} İzleyici Bulundu} other {{trackerCount} İzleyici Bulundu}}}}}}",
    "note" : "This describes how many trackers (or major tracking networks) were blocked (or found if protections are disabled).  Ex: 9 Trackers Blocked"
  },
  "firstPartyDesc" : {
    "title" : "{companyName} bu sitenin ve bu sayfada bulunan bilinen izleyicilerin sahibi olduğundan bu şirketi engellemedik.",
    "note" : "When trackers detected belong to companyName, we can't block them on a site that company owns"
  },
  "trackersFoundForAllowlisted" : {
    "title" : "Şirketler izleyici kullanarak profilinizi çıkarabilir. Bu sayfadaki etkinliğinizi bu şirketlerin izlediğini belirledik.",
    "note" : "This header for the list of tracker companies is shown when a site has protections disabled"
  },
  "trackersFoundAndBlocked" : {
    "title" : "Şirketler izleyici kullanarak profilinizi çıkarabilir. Bu sayfadaki etkinliğinizin bu şirketler tarafından izlenmesini engelledik.",
    "note" : "This header for the list of tracker companies is shown when a site has protections enabled"
  },
  "trackerNetworkUnknown" : {
    "title" : "İzleyici ağı bilinmiyor",
    "note" : "Shown when we don't have a company name for a given tracker"
  },
  "trackerDomainsForCompany" : {
    "title" : "{companyName} için izleyici alan adları",
    "note" : "Title for the list of tracker domains detected from a given company"
  },
  "zeroTrackersFound" : {
    "title" : "0 İzleyici Bulundu",
    "note" : "We did not find any trackers on this page"
  },
  "trackerOwnedByThisSite" : {
    "title" : "Bu Sitenin Sahip Olduğu İzleyiciler (İzin Verilenler)",
    "note" : "Trackers owned by this site are not blocked"
  },
  "trackerCountForDomain" : {
    "title" : "{blocked, select, true {{trackerCount, plural, one {{domain} üzerinde {trackerCount} İzleyici Engellendi} other {{domain} üzerinde {trackerCount} İzleyici Engellendi}}} other {{trackerCount, plural, one {{domain} üzerinde {trackerCount} İzleyici Bulundu} other {{domain} üzerinde {trackerCount} İzleyici Bulundu}}}}",
    "note" : "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked"
  },
  "analyticsCategory" : {
    "title" : "Analitik",
    "note" : "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner"
  },
  "advertisingCategory" : {
    "title" : "tanıtım",
    "note" : "Used to describe the type of tracker, in this case one that is used for advertising"
  },
  "socialCategory" : {
    "title" : "Sosyal Ağ",
    "note" : "Used to describe the type of tracker, in this case one that is used by one of the popular social networksr"
  }
}

},{}]},{},[63]);
