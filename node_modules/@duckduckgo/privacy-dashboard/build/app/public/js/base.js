"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "node_modules/jquery/dist/jquery.js"(exports, module) {
      (function(global, factory) {
        "use strict";
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = global.document ? factory(global, true) : function(w3) {
            if (!w3.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w3);
          };
        } else {
          factory(global);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr2 = [];
        var getProto = Object.getPrototypeOf;
        var slice2 = arr2.slice;
        var flat = arr2.flat ? function(array) {
          return arr2.flat.call(array);
        } : function(array) {
          return arr2.concat.apply([], array);
        };
        var push = arr2.push;
        var indexOf = arr2.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction2(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i3, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i3 in preservedScriptAttributes) {
              val = node[i3] || node.getAttribute && node.getAttribute(i3);
              if (val) {
                script.setAttribute(i3, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.6.2", jQuery = function(selector, context) {
          return new jQuery.fn.init(selector, context);
        };
        jQuery.fn = jQuery.prototype = {
          // The current version of jQuery being used
          jquery: version,
          constructor: jQuery,
          // The default length of a jQuery object is 0
          length: 0,
          toArray: function() {
            return slice2.call(this);
          },
          // Get the Nth element in the matched element set OR
          // Get the whole matched element set as a clean array
          get: function(num) {
            if (num == null) {
              return slice2.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          // Take an array of elements and push it onto the stack
          // (returning the new matched element set)
          pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          // Execute a callback for every element in the matched set.
          each: function(callback) {
            return jQuery.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i3) {
              return callback.call(elem, i3, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice2.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i3) {
              return (i3 + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery.grep(this, function(_elem, i3) {
              return i3 % 2;
            }));
          },
          eq: function(i3) {
            var len = this.length, j3 = +i3 + (i3 < 0 ? len : 0);
            return this.pushStack(j3 >= 0 && j3 < len ? [this[j3]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          // For internal use only.
          // Behaves like an Array's method, not like a jQuery method.
          push,
          sort: arr2.sort,
          splice: arr2.splice
        };
        jQuery.extend = jQuery.fn.extend = function() {
          var options, name, src, copy2, copyIsArray, clone, target = arguments[0] || {}, i3 = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i3] || {};
            i3++;
          }
          if (typeof target !== "object" && !isFunction(target)) {
            target = {};
          }
          if (i3 === length) {
            target = this;
            i3--;
          }
          for (; i3 < length; i3++) {
            if ((options = arguments[i3]) != null) {
              for (name in options) {
                copy2 = options[name];
                if (name === "__proto__" || target === copy2) {
                  continue;
                }
                if (deep && copy2 && (jQuery.isPlainObject(copy2) || (copyIsArray = Array.isArray(copy2)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery.extend(deep, clone, copy2);
                } else if (copy2 !== void 0) {
                  target[name] = copy2;
                }
              }
            }
          }
          return target;
        };
        jQuery.extend({
          // Unique for each copy of jQuery on the page
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          // Assume jQuery is ready without the ready module
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          // Evaluates a script in a provided context; falls back to the global one
          // if not specified.
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i3 = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i3 < length; i3++) {
                if (callback.call(obj[i3], i3, obj[i3]) === false) {
                  break;
                }
              }
            } else {
              for (i3 in obj) {
                if (callback.call(obj[i3], i3, obj[i3]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          // results is for internal usage only
          makeArray: function(arr3, results) {
            var ret = results || [];
            if (arr3 != null) {
              if (isArrayLike(Object(arr3))) {
                jQuery.merge(
                  ret,
                  typeof arr3 === "string" ? [arr3] : arr3
                );
              } else {
                push.call(ret, arr3);
              }
            }
            return ret;
          },
          inArray: function(elem, arr3, i3) {
            return arr3 == null ? -1 : indexOf.call(arr3, elem, i3);
          },
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          merge: function(first, second) {
            var len = +second.length, j3 = 0, i3 = first.length;
            for (; j3 < len; j3++) {
              first[i3++] = second[j3];
            }
            first.length = i3;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches2 = [], i3 = 0, length = elems.length, callbackExpect = !invert;
            for (; i3 < length; i3++) {
              callbackInverse = !callback(elems[i3], i3);
              if (callbackInverse !== callbackExpect) {
                matches2.push(elems[i3]);
              }
            }
            return matches2;
          },
          // arg is for internal usage only
          map: function(elems, callback, arg) {
            var length, value, i3 = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i3 < length; i3++) {
                value = callback(elems[i3], i3, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i3 in elems) {
                value = callback(elems[i3], i3, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          // A global GUID counter for objects
          guid: 1,
          // jQuery.support is not used in Core but other projects attach their
          // properties to it so it needs to exist.
          support
        });
        if (typeof Symbol === "function") {
          jQuery.fn[Symbol.iterator] = arr2[Symbol.iterator];
        }
        jQuery.each(
          "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
          function(_i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
          }
        );
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        var Sizzle = (
          /*!
           * Sizzle CSS Selector Engine v2.3.8
           * https://sizzlejs.com/
           *
           * Copyright JS Foundation and other contributors
           * Released under the MIT license
           * https://js.foundation/
           *
           * Date: 2022-11-16
           */
          function(window3) {
            var i3, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches2, contains, expando = "sizzle" + 1 * /* @__PURE__ */ new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a3, b3) {
              if (a3 === b3) {
                hasDuplicate = true;
              }
              return 0;
            }, hasOwn2 = {}.hasOwnProperty, arr3 = [], pop = arr3.pop, pushNative = arr3.push, push2 = arr3.push, slice3 = arr3.slice, indexOf2 = function(list, elem) {
              var i4 = 0, len = list.length;
              for (; i4 < len; i4++) {
                if (list[i4] === elem) {
                  return i4;
                }
              }
              return -1;
            }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace2 = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace2 + "*(" + identifier + ")(?:" + whitespace2 + // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace2 + // "Attribute values must be CSS identifiers [capture 5]
            // or strings [capture 3 or capture 4]"
            `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace2 + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace2 + "+", "g"), rtrim2 = new RegExp("^" + whitespace2 + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace2 + "+$", "g"), rcomma = new RegExp("^" + whitespace2 + "*," + whitespace2 + "*"), rcombinators = new RegExp("^" + whitespace2 + "*([>+~]|" + whitespace2 + ")" + whitespace2 + "*"), rdescend = new RegExp(whitespace2 + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
              "ID": new RegExp("^#(" + identifier + ")"),
              "CLASS": new RegExp("^\\.(" + identifier + ")"),
              "TAG": new RegExp("^(" + identifier + "|[*])"),
              "ATTR": new RegExp("^" + attributes),
              "PSEUDO": new RegExp("^" + pseudos),
              "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace2 + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace2 + "*(?:([+-]|)" + whitespace2 + "*(\\d+)|))" + whitespace2 + "*\\)|)", "i"),
              "bool": new RegExp("^(?:" + booleans + ")$", "i"),
              // For use in libraries implementing .is()
              // We use this for POS matching in `select`
              "needsContext": new RegExp("^" + whitespace2 + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace2 + "*((?:-\\d)?\\d*)" + whitespace2 + "*\\)|)(?=[^-]|$)", "i")
            }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape2, nonHex) {
              var high = "0x" + escape2.slice(1) - 65536;
              return nonHex ? (
                // Strip the backslash prefix from a non-hex escape sequence
                nonHex
              ) : (
                // Replace a hexadecimal escape sequence with the encoded Unicode code point
                // Support: IE <=11+
                // For values outside the Basic Multilingual Plane (BMP), manually construct a
                // surrogate pair
                high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
              );
            }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
              if (asCodePoint) {
                if (ch === "\0") {
                  return "\uFFFD";
                }
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
              }
              return "\\" + ch;
            }, unloadHandler = function() {
              setDocument();
            }, inDisabledFieldset = addCombinator(
              function(elem) {
                return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
              },
              { dir: "parentNode", next: "legend" }
            );
            try {
              push2.apply(
                arr3 = slice3.call(preferredDoc.childNodes),
                preferredDoc.childNodes
              );
              arr3[preferredDoc.childNodes.length].nodeType;
            } catch (e3) {
              push2 = {
                apply: arr3.length ? (
                  // Leverage slice if possible
                  function(target, els) {
                    pushNative.apply(target, slice3.call(els));
                  }
                ) : (
                  // Support: IE<9
                  // Otherwise append directly
                  function(target, els) {
                    var j3 = target.length, i4 = 0;
                    while (target[j3++] = els[i4++]) {
                    }
                    target.length = j3 - 1;
                  }
                )
              };
            }
            function Sizzle2(selector, context, results, seed) {
              var m3, i4, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
              results = results || [];
              if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
              }
              if (!seed) {
                setDocument(context);
                context = context || document3;
                if (documentIsHTML) {
                  if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                    if (m3 = match[1]) {
                      if (nodeType === 9) {
                        if (elem = context.getElementById(m3)) {
                          if (elem.id === m3) {
                            results.push(elem);
                            return results;
                          }
                        } else {
                          return results;
                        }
                      } else {
                        if (newContext && (elem = newContext.getElementById(m3)) && contains(context, elem) && elem.id === m3) {
                          results.push(elem);
                          return results;
                        }
                      }
                    } else if (match[2]) {
                      push2.apply(results, context.getElementsByTagName(selector));
                      return results;
                    } else if ((m3 = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                      push2.apply(results, context.getElementsByClassName(m3));
                      return results;
                    }
                  }
                  if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && // Support: IE 8 only
                  // Exclude object elements
                  (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                    newSelector = selector;
                    newContext = context;
                    if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                      newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                      if (newContext !== context || !support2.scope) {
                        if (nid = context.getAttribute("id")) {
                          nid = nid.replace(rcssescape, fcssescape);
                        } else {
                          context.setAttribute("id", nid = expando);
                        }
                      }
                      groups = tokenize(selector);
                      i4 = groups.length;
                      while (i4--) {
                        groups[i4] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i4]);
                      }
                      newSelector = groups.join(",");
                    }
                    try {
                      if (support2.cssSupportsSelector && // eslint-disable-next-line no-undef
                      !CSS.supports("selector(" + newSelector + ")")) {
                        throw new Error();
                      }
                      push2.apply(
                        results,
                        newContext.querySelectorAll(newSelector)
                      );
                      return results;
                    } catch (qsaError) {
                      nonnativeSelectorCache(selector, true);
                    } finally {
                      if (nid === expando) {
                        context.removeAttribute("id");
                      }
                    }
                  }
                }
              }
              return select(selector.replace(rtrim2, "$1"), context, results, seed);
            }
            function createCache() {
              var keys = [];
              function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                  delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
              }
              return cache;
            }
            function markFunction(fn) {
              fn[expando] = true;
              return fn;
            }
            function assert2(fn) {
              var el = document3.createElement("fieldset");
              try {
                return !!fn(el);
              } catch (e3) {
                return false;
              } finally {
                if (el.parentNode) {
                  el.parentNode.removeChild(el);
                }
                el = null;
              }
            }
            function addHandle(attrs, handler) {
              var arr4 = attrs.split("|"), i4 = arr4.length;
              while (i4--) {
                Expr.attrHandle[arr4[i4]] = handler;
              }
            }
            function siblingCheck(a3, b3) {
              var cur = b3 && a3, diff = cur && a3.nodeType === 1 && b3.nodeType === 1 && a3.sourceIndex - b3.sourceIndex;
              if (diff) {
                return diff;
              }
              if (cur) {
                while (cur = cur.nextSibling) {
                  if (cur === b3) {
                    return -1;
                  }
                }
              }
              return a3 ? 1 : -1;
            }
            function createInputPseudo(type) {
              return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
              };
            }
            function createButtonPseudo(type) {
              return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
              };
            }
            function createDisabledPseudo(disabled) {
              return function(elem) {
                if ("form" in elem) {
                  if (elem.parentNode && elem.disabled === false) {
                    if ("label" in elem) {
                      if ("label" in elem.parentNode) {
                        return elem.parentNode.disabled === disabled;
                      } else {
                        return elem.disabled === disabled;
                      }
                    }
                    return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                    /* jshint -W018 */
                    elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                  }
                  return elem.disabled === disabled;
                } else if ("label" in elem) {
                  return elem.disabled === disabled;
                }
                return false;
              };
            }
            function createPositionalPseudo(fn) {
              return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches3) {
                  var j3, matchIndexes = fn([], seed.length, argument), i4 = matchIndexes.length;
                  while (i4--) {
                    if (seed[j3 = matchIndexes[i4]]) {
                      seed[j3] = !(matches3[j3] = seed[j3]);
                    }
                  }
                });
              });
            }
            function testContext(context) {
              return context && typeof context.getElementsByTagName !== "undefined" && context;
            }
            support2 = Sizzle2.support = {};
            isXML = Sizzle2.isXML = function(elem) {
              var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
              return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
            };
            setDocument = Sizzle2.setDocument = function(node) {
              var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
              if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
                return document3;
              }
              document3 = doc;
              docElem = document3.documentElement;
              documentIsHTML = !isXML(document3);
              if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                  subWindow.addEventListener("unload", unloadHandler, false);
                } else if (subWindow.attachEvent) {
                  subWindow.attachEvent("onunload", unloadHandler);
                }
              }
              support2.scope = assert2(function(el) {
                docElem.appendChild(el).appendChild(document3.createElement("div"));
                return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
              });
              support2.cssSupportsSelector = assert2(function() {
                return CSS.supports("selector(*)") && // Support: Firefox 78-81 only
                // In old Firefox, `:is()` didn't use forgiving parsing. In that case,
                // fail this test as there's no selector to test against that.
                // `CSS.supports` uses unforgiving parsing
                document3.querySelectorAll(":is(:jqfake)") && // `*` is needed as Safari & newer Chrome implemented something in between
                // for `:has()` - it throws in `qSA` if it only contains an unsupported
                // argument but multiple ones, one of which is supported, are fine.
                // We want to play safe in case `:is()` gets the same treatment.
                !CSS.supports("selector(:is(*,:jqfake))");
              });
              support2.attributes = assert2(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
              });
              support2.getElementsByTagName = assert2(function(el) {
                el.appendChild(document3.createComment(""));
                return !el.getElementsByTagName("*").length;
              });
              support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
              support2.getById = assert2(function(el) {
                docElem.appendChild(el).id = expando;
                return !document3.getElementsByName || !document3.getElementsByName(expando).length;
              });
              if (support2.getById) {
                Expr.filter["ID"] = function(id) {
                  var attrId = id.replace(runescape, funescape);
                  return function(elem) {
                    return elem.getAttribute("id") === attrId;
                  };
                };
                Expr.find["ID"] = function(id, context) {
                  if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var elem = context.getElementById(id);
                    return elem ? [elem] : [];
                  }
                };
              } else {
                Expr.filter["ID"] = function(id) {
                  var attrId = id.replace(runescape, funescape);
                  return function(elem) {
                    var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return node2 && node2.value === attrId;
                  };
                };
                Expr.find["ID"] = function(id, context) {
                  if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var node2, i4, elems, elem = context.getElementById(id);
                    if (elem) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                      elems = context.getElementsByName(id);
                      i4 = 0;
                      while (elem = elems[i4++]) {
                        node2 = elem.getAttributeNode("id");
                        if (node2 && node2.value === id) {
                          return [elem];
                        }
                      }
                    }
                    return [];
                  }
                };
              }
              Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                  return context.getElementsByTagName(tag);
                } else if (support2.qsa) {
                  return context.querySelectorAll(tag);
                }
              } : function(tag, context) {
                var elem, tmp = [], i4 = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                  while (elem = results[i4++]) {
                    if (elem.nodeType === 1) {
                      tmp.push(elem);
                    }
                  }
                  return tmp;
                }
                return results;
              };
              Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                  return context.getElementsByClassName(className);
                }
              };
              rbuggyMatches = [];
              rbuggyQSA = [];
              if (support2.qsa = rnative.test(document3.querySelectorAll)) {
                assert2(function(el) {
                  var input;
                  docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
                  if (el.querySelectorAll("[msallowcapture^='']").length) {
                    rbuggyQSA.push("[*^$]=" + whitespace2 + `*(?:''|"")`);
                  }
                  if (!el.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push("\\[" + whitespace2 + "*(?:value|" + booleans + ")");
                  }
                  if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                    rbuggyQSA.push("~=");
                  }
                  input = document3.createElement("input");
                  input.setAttribute("name", "");
                  el.appendChild(input);
                  if (!el.querySelectorAll("[name='']").length) {
                    rbuggyQSA.push("\\[" + whitespace2 + "*name" + whitespace2 + "*=" + whitespace2 + `*(?:''|"")`);
                  }
                  if (!el.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                  }
                  if (!el.querySelectorAll("a#" + expando + "+*").length) {
                    rbuggyQSA.push(".#.+[+~]");
                  }
                  el.querySelectorAll("\\\f");
                  rbuggyQSA.push("[\\r\\n\\f]");
                });
                assert2(function(el) {
                  el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                  var input = document3.createElement("input");
                  input.setAttribute("type", "hidden");
                  el.appendChild(input).setAttribute("name", "D");
                  if (el.querySelectorAll("[name=d]").length) {
                    rbuggyQSA.push("name" + whitespace2 + "*[*^$|!~]?=");
                  }
                  if (el.querySelectorAll(":enabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                  }
                  docElem.appendChild(el).disabled = true;
                  if (el.querySelectorAll(":disabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                  }
                  el.querySelectorAll("*,:x");
                  rbuggyQSA.push(",.*:");
                });
              }
              if (support2.matchesSelector = rnative.test(matches2 = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert2(function(el) {
                  support2.disconnectedMatch = matches2.call(el, "*");
                  matches2.call(el, "[s!='']:x");
                  rbuggyMatches.push("!=", pseudos);
                });
              }
              if (!support2.cssSupportsSelector) {
                rbuggyQSA.push(":has");
              }
              rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
              rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
              hasCompare = rnative.test(docElem.compareDocumentPosition);
              contains = hasCompare || rnative.test(docElem.contains) ? function(a3, b3) {
                var adown = a3.nodeType === 9 && a3.documentElement || a3, bup = b3 && b3.parentNode;
                return a3 === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a3.compareDocumentPosition && a3.compareDocumentPosition(bup) & 16));
              } : function(a3, b3) {
                if (b3) {
                  while (b3 = b3.parentNode) {
                    if (b3 === a3) {
                      return true;
                    }
                  }
                }
                return false;
              };
              sortOrder = hasCompare ? function(a3, b3) {
                if (a3 === b3) {
                  hasDuplicate = true;
                  return 0;
                }
                var compare = !a3.compareDocumentPosition - !b3.compareDocumentPosition;
                if (compare) {
                  return compare;
                }
                compare = (a3.ownerDocument || a3) == (b3.ownerDocument || b3) ? a3.compareDocumentPosition(b3) : (
                  // Otherwise we know they are disconnected
                  1
                );
                if (compare & 1 || !support2.sortDetached && b3.compareDocumentPosition(a3) === compare) {
                  if (a3 == document3 || a3.ownerDocument == preferredDoc && contains(preferredDoc, a3)) {
                    return -1;
                  }
                  if (b3 == document3 || b3.ownerDocument == preferredDoc && contains(preferredDoc, b3)) {
                    return 1;
                  }
                  return sortInput ? indexOf2(sortInput, a3) - indexOf2(sortInput, b3) : 0;
                }
                return compare & 4 ? -1 : 1;
              } : function(a3, b3) {
                if (a3 === b3) {
                  hasDuplicate = true;
                  return 0;
                }
                var cur, i4 = 0, aup = a3.parentNode, bup = b3.parentNode, ap = [a3], bp = [b3];
                if (!aup || !bup) {
                  return a3 == document3 ? -1 : b3 == document3 ? 1 : (
                    /* eslint-enable eqeqeq */
                    aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a3) - indexOf2(sortInput, b3) : 0
                  );
                } else if (aup === bup) {
                  return siblingCheck(a3, b3);
                }
                cur = a3;
                while (cur = cur.parentNode) {
                  ap.unshift(cur);
                }
                cur = b3;
                while (cur = cur.parentNode) {
                  bp.unshift(cur);
                }
                while (ap[i4] === bp[i4]) {
                  i4++;
                }
                return i4 ? (
                  // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i4], bp[i4])
                ) : (
                  // Otherwise nodes in our document sort first
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  /* eslint-disable eqeqeq */
                  ap[i4] == preferredDoc ? -1 : bp[i4] == preferredDoc ? 1 : (
                    /* eslint-enable eqeqeq */
                    0
                  )
                );
              };
              return document3;
            };
            Sizzle2.matches = function(expr, elements) {
              return Sizzle2(expr, null, null, elements);
            };
            Sizzle2.matchesSelector = function(elem, expr) {
              setDocument(elem);
              if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                  var ret = matches2.call(elem, expr);
                  if (ret || support2.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                  // fragment in IE 9
                  elem.document && elem.document.nodeType !== 11) {
                    return ret;
                  }
                } catch (e3) {
                  nonnativeSelectorCache(expr, true);
                }
              }
              return Sizzle2(expr, document3, null, [elem]).length > 0;
            };
            Sizzle2.contains = function(context, elem) {
              if ((context.ownerDocument || context) != document3) {
                setDocument(context);
              }
              return contains(context, elem);
            };
            Sizzle2.attr = function(elem, name) {
              if ((elem.ownerDocument || elem) != document3) {
                setDocument(elem);
              }
              var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
              return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            };
            Sizzle2.escape = function(sel) {
              return (sel + "").replace(rcssescape, fcssescape);
            };
            Sizzle2.error = function(msg) {
              throw new Error("Syntax error, unrecognized expression: " + msg);
            };
            Sizzle2.uniqueSort = function(results) {
              var elem, duplicates = [], j3 = 0, i4 = 0;
              hasDuplicate = !support2.detectDuplicates;
              sortInput = !support2.sortStable && results.slice(0);
              results.sort(sortOrder);
              if (hasDuplicate) {
                while (elem = results[i4++]) {
                  if (elem === results[i4]) {
                    j3 = duplicates.push(i4);
                  }
                }
                while (j3--) {
                  results.splice(duplicates[j3], 1);
                }
              }
              sortInput = null;
              return results;
            };
            getText = Sizzle2.getText = function(elem) {
              var node, ret = "", i4 = 0, nodeType = elem.nodeType;
              if (!nodeType) {
                while (node = elem[i4++]) {
                  ret += getText(node);
                }
              } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                  return elem.textContent;
                } else {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    ret += getText(elem);
                  }
                }
              } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
              }
              return ret;
            };
            Expr = Sizzle2.selectors = {
              // Can be adjusted by the user
              cacheLength: 50,
              createPseudo: markFunction,
              match: matchExpr,
              attrHandle: {},
              find: {},
              relative: {
                ">": { dir: "parentNode", first: true },
                " ": { dir: "parentNode" },
                "+": { dir: "previousSibling", first: true },
                "~": { dir: "previousSibling" }
              },
              preFilter: {
                "ATTR": function(match) {
                  match[1] = match[1].replace(runescape, funescape);
                  match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                  if (match[2] === "~=") {
                    match[3] = " " + match[3] + " ";
                  }
                  return match.slice(0, 4);
                },
                "CHILD": function(match) {
                  match[1] = match[1].toLowerCase();
                  if (match[1].slice(0, 3) === "nth") {
                    if (!match[3]) {
                      Sizzle2.error(match[0]);
                    }
                    match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                    match[5] = +(match[7] + match[8] || match[3] === "odd");
                  } else if (match[3]) {
                    Sizzle2.error(match[0]);
                  }
                  return match;
                },
                "PSEUDO": function(match) {
                  var excess, unquoted = !match[6] && match[2];
                  if (matchExpr["CHILD"].test(match[0])) {
                    return null;
                  }
                  if (match[3]) {
                    match[2] = match[4] || match[5] || "";
                  } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                  (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
                  (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                    match[0] = match[0].slice(0, excess);
                    match[2] = unquoted.slice(0, excess);
                  }
                  return match.slice(0, 3);
                }
              },
              filter: {
                "TAG": function(nodeNameSelector) {
                  var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                  return nodeNameSelector === "*" ? function() {
                    return true;
                  } : function(elem) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
                  };
                },
                "CLASS": function(className) {
                  var pattern = classCache[className + " "];
                  return pattern || (pattern = new RegExp("(^|" + whitespace2 + ")" + className + "(" + whitespace2 + "|$)")) && classCache(
                    className,
                    function(elem) {
                      return pattern.test(
                        typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                      );
                    }
                  );
                },
                "ATTR": function(name, operator, check) {
                  return function(elem) {
                    var result = Sizzle2.attr(elem, name);
                    if (result == null) {
                      return operator === "!=";
                    }
                    if (!operator) {
                      return true;
                    }
                    result += "";
                    return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                  };
                },
                "CHILD": function(type, what, _argument, first, last) {
                  var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                  return first === 1 && last === 0 ? (
                    // Shortcut for :nth-*(n)
                    function(elem) {
                      return !!elem.parentNode;
                    }
                  ) : function(elem, _context, xml) {
                    var cache, uniqueCache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                    if (parent) {
                      if (simple) {
                        while (dir2) {
                          node = elem;
                          while (node = node[dir2]) {
                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                              return false;
                            }
                          }
                          start = dir2 = type === "only" && !start && "nextSibling";
                        }
                        return true;
                      }
                      start = [forward ? parent.firstChild : parent.lastChild];
                      if (forward && useCache) {
                        node = parent;
                        outerCache = node[expando] || (node[expando] = {});
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex && cache[2];
                        node = nodeIndex && parent.childNodes[nodeIndex];
                        while (node = ++nodeIndex && node && node[dir2] || // Fallback to seeking `elem` from the start
                        (diff = nodeIndex = 0) || start.pop()) {
                          if (node.nodeType === 1 && ++diff && node === elem) {
                            uniqueCache[type] = [dirruns, nodeIndex, diff];
                            break;
                          }
                        }
                      } else {
                        if (useCache) {
                          node = elem;
                          outerCache = node[expando] || (node[expando] = {});
                          uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                          cache = uniqueCache[type] || [];
                          nodeIndex = cache[0] === dirruns && cache[1];
                          diff = nodeIndex;
                        }
                        if (diff === false) {
                          while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                              if (useCache) {
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                uniqueCache[type] = [dirruns, diff];
                              }
                              if (node === elem) {
                                break;
                              }
                            }
                          }
                        }
                      }
                      diff -= last;
                      return diff === first || diff % first === 0 && diff / first >= 0;
                    }
                  };
                },
                "PSEUDO": function(pseudo, argument) {
                  var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
                  if (fn[expando]) {
                    return fn(argument);
                  }
                  if (fn.length > 1) {
                    args = [pseudo, pseudo, "", argument];
                    return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches3) {
                      var idx, matched = fn(seed, argument), i4 = matched.length;
                      while (i4--) {
                        idx = indexOf2(seed, matched[i4]);
                        seed[idx] = !(matches3[idx] = matched[i4]);
                      }
                    }) : function(elem) {
                      return fn(elem, 0, args);
                    };
                  }
                  return fn;
                }
              },
              pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                  var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
                  return matcher[expando] ? markFunction(function(seed, matches3, _context, xml) {
                    var elem, unmatched = matcher(seed, null, xml, []), i4 = seed.length;
                    while (i4--) {
                      if (elem = unmatched[i4]) {
                        seed[i4] = !(matches3[i4] = elem);
                      }
                    }
                  }) : function(elem, _context, xml) {
                    input[0] = elem;
                    matcher(input, null, xml, results);
                    input[0] = null;
                    return !results.pop();
                  };
                }),
                "has": markFunction(function(selector) {
                  return function(elem) {
                    return Sizzle2(selector, elem).length > 0;
                  };
                }),
                "contains": markFunction(function(text) {
                  text = text.replace(runescape, funescape);
                  return function(elem) {
                    return (elem.textContent || getText(elem)).indexOf(text) > -1;
                  };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                  if (!ridentifier.test(lang || "")) {
                    Sizzle2.error("unsupported lang: " + lang);
                  }
                  lang = lang.replace(runescape, funescape).toLowerCase();
                  return function(elem) {
                    var elemLang;
                    do {
                      if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                      }
                    } while ((elem = elem.parentNode) && elem.nodeType === 1);
                    return false;
                  };
                }),
                // Miscellaneous
                "target": function(elem) {
                  var hash = window3.location && window3.location.hash;
                  return hash && hash.slice(1) === elem.id;
                },
                "root": function(elem) {
                  return elem === docElem;
                },
                "focus": function(elem) {
                  return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": createDisabledPseudo(false),
                "disabled": createDisabledPseudo(true),
                "checked": function(elem) {
                  var nodeName2 = elem.nodeName.toLowerCase();
                  return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
                },
                "selected": function(elem) {
                  if (elem.parentNode) {
                    elem.parentNode.selectedIndex;
                  }
                  return elem.selected === true;
                },
                // Contents
                "empty": function(elem) {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    if (elem.nodeType < 6) {
                      return false;
                    }
                  }
                  return true;
                },
                "parent": function(elem) {
                  return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function(elem) {
                  return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                  return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function(elem) {
                  var attr;
                  return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && // Support: IE <10 only
                  // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                  ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                // Position-in-collection
                "first": createPositionalPseudo(function() {
                  return [0];
                }),
                "last": createPositionalPseudo(function(_matchIndexes, length) {
                  return [length - 1];
                }),
                "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                  return [argument < 0 ? argument + length : argument];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                  var i4 = 0;
                  for (; i4 < length; i4 += 2) {
                    matchIndexes.push(i4);
                  }
                  return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                  var i4 = 1;
                  for (; i4 < length; i4 += 2) {
                    matchIndexes.push(i4);
                  }
                  return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                  var i4 = argument < 0 ? argument + length : argument > length ? length : argument;
                  for (; --i4 >= 0; ) {
                    matchIndexes.push(i4);
                  }
                  return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                  var i4 = argument < 0 ? argument + length : argument;
                  for (; ++i4 < length; ) {
                    matchIndexes.push(i4);
                  }
                  return matchIndexes;
                })
              }
            };
            Expr.pseudos["nth"] = Expr.pseudos["eq"];
            for (i3 in { radio: true, checkbox: true, file: true, password: true, image: true }) {
              Expr.pseudos[i3] = createInputPseudo(i3);
            }
            for (i3 in { submit: true, reset: true }) {
              Expr.pseudos[i3] = createButtonPseudo(i3);
            }
            function setFilters() {
            }
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();
            tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
              var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
              if (cached) {
                return parseOnly ? 0 : cached.slice(0);
              }
              soFar = selector;
              groups = [];
              preFilters = Expr.preFilter;
              while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                  if (match) {
                    soFar = soFar.slice(match[0].length) || soFar;
                  }
                  groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    // Cast descendant combinators to space
                    type: match[0].replace(rtrim2, " ")
                  });
                  soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                  if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,
                      type,
                      matches: match
                    });
                    soFar = soFar.slice(matched.length);
                  }
                }
                if (!matched) {
                  break;
                }
              }
              return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : (
                // Cache the tokens
                tokenCache(selector, groups).slice(0)
              );
            };
            function toSelector(tokens) {
              var i4 = 0, len = tokens.length, selector = "";
              for (; i4 < len; i4++) {
                selector += tokens[i4].value;
              }
              return selector;
            }
            function addCombinator(matcher, combinator, base) {
              var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
              return combinator.first ? (
                // Check against closest ancestor/preceding element
                function(elem, context, xml) {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      return matcher(elem, context, xml);
                    }
                  }
                  return false;
                }
              ) : (
                // Check against all ancestor/preceding elements
                function(elem, context, xml) {
                  var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
                  if (xml) {
                    while (elem = elem[dir2]) {
                      if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) {
                          return true;
                        }
                      }
                    }
                  } else {
                    while (elem = elem[dir2]) {
                      if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                        if (skip && skip === elem.nodeName.toLowerCase()) {
                          elem = elem[dir2] || elem;
                        } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                          return newCache[2] = oldCache[2];
                        } else {
                          uniqueCache[key] = newCache;
                          if (newCache[2] = matcher(elem, context, xml)) {
                            return true;
                          }
                        }
                      }
                    }
                  }
                  return false;
                }
              );
            }
            function elementMatcher(matchers) {
              return matchers.length > 1 ? function(elem, context, xml) {
                var i4 = matchers.length;
                while (i4--) {
                  if (!matchers[i4](elem, context, xml)) {
                    return false;
                  }
                }
                return true;
              } : matchers[0];
            }
            function multipleContexts(selector, contexts, results) {
              var i4 = 0, len = contexts.length;
              for (; i4 < len; i4++) {
                Sizzle2(selector, contexts[i4], results);
              }
              return results;
            }
            function condense(unmatched, map, filter, context, xml) {
              var elem, newUnmatched = [], i4 = 0, len = unmatched.length, mapped = map != null;
              for (; i4 < len; i4++) {
                if (elem = unmatched[i4]) {
                  if (!filter || filter(elem, context, xml)) {
                    newUnmatched.push(elem);
                    if (mapped) {
                      map.push(i4);
                    }
                  }
                }
              }
              return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
              if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
              }
              if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
              }
              return markFunction(function(seed, results, context, xml) {
                var temp, i4, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
                  selector || "*",
                  context.nodeType ? [context] : context,
                  []
                ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? (
                  // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                  postFinder || (seed ? preFilter : preexisting || postFilter) ? (
                    // ...intermediate processing is necessary
                    []
                  ) : (
                    // ...otherwise use results directly
                    results
                  )
                ) : matcherIn;
                if (matcher) {
                  matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                  temp = condense(matcherOut, postMap);
                  postFilter(temp, [], context, xml);
                  i4 = temp.length;
                  while (i4--) {
                    if (elem = temp[i4]) {
                      matcherOut[postMap[i4]] = !(matcherIn[postMap[i4]] = elem);
                    }
                  }
                }
                if (seed) {
                  if (postFinder || preFilter) {
                    if (postFinder) {
                      temp = [];
                      i4 = matcherOut.length;
                      while (i4--) {
                        if (elem = matcherOut[i4]) {
                          temp.push(matcherIn[i4] = elem);
                        }
                      }
                      postFinder(null, matcherOut = [], temp, xml);
                    }
                    i4 = matcherOut.length;
                    while (i4--) {
                      if ((elem = matcherOut[i4]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i4]) > -1) {
                        seed[temp] = !(results[temp] = elem);
                      }
                    }
                  }
                } else {
                  matcherOut = condense(
                    matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
                  );
                  if (postFinder) {
                    postFinder(null, results, matcherOut, xml);
                  } else {
                    push2.apply(results, matcherOut);
                  }
                }
              });
            }
            function matcherFromTokens(tokens) {
              var checkContext, matcher, j3, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i4 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
              }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf2(checkContext, elem) > -1;
              }, implicitRelative, true), matchers = [function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
              }];
              for (; i4 < len; i4++) {
                if (matcher = Expr.relative[tokens[i4].type]) {
                  matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                  matcher = Expr.filter[tokens[i4].type].apply(null, tokens[i4].matches);
                  if (matcher[expando]) {
                    j3 = ++i4;
                    for (; j3 < len; j3++) {
                      if (Expr.relative[tokens[j3].type]) {
                        break;
                      }
                    }
                    return setMatcher(
                      i4 > 1 && elementMatcher(matchers),
                      i4 > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice(0, i4 - 1).concat({ value: tokens[i4 - 2].type === " " ? "*" : "" })
                      ).replace(rtrim2, "$1"),
                      matcher,
                      i4 < j3 && matcherFromTokens(tokens.slice(i4, j3)),
                      j3 < len && matcherFromTokens(tokens = tokens.slice(j3)),
                      j3 < len && toSelector(tokens)
                    );
                  }
                  matchers.push(matcher);
                }
              }
              return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
              var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j3, matcher, matchedCount = 0, i4 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) {
                  outermostContext = context == document3 || context || outermost;
                }
                for (; i4 !== len && (elem = elems[i4]) != null; i4++) {
                  if (byElement && elem) {
                    j3 = 0;
                    if (!context && elem.ownerDocument != document3) {
                      setDocument(elem);
                      xml = !documentIsHTML;
                    }
                    while (matcher = elementMatchers[j3++]) {
                      if (matcher(elem, context || document3, xml)) {
                        results.push(elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }
                  if (bySet) {
                    if (elem = !matcher && elem) {
                      matchedCount--;
                    }
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }
                matchedCount += i4;
                if (bySet && i4 !== matchedCount) {
                  j3 = 0;
                  while (matcher = setMatchers[j3++]) {
                    matcher(unmatched, setMatched, context, xml);
                  }
                  if (seed) {
                    if (matchedCount > 0) {
                      while (i4--) {
                        if (!(unmatched[i4] || setMatched[i4])) {
                          setMatched[i4] = pop.call(results);
                        }
                      }
                    }
                    setMatched = condense(setMatched);
                  }
                  push2.apply(results, setMatched);
                  if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                    Sizzle2.uniqueSort(results);
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }
                return unmatched;
              };
              return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle2.compile = function(selector, match) {
              var i4, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
              if (!cached) {
                if (!match) {
                  match = tokenize(selector);
                }
                i4 = match.length;
                while (i4--) {
                  cached = matcherFromTokens(match[i4]);
                  if (cached[expando]) {
                    setMatchers.push(cached);
                  } else {
                    elementMatchers.push(cached);
                  }
                }
                cached = compilerCache(
                  selector,
                  matcherFromGroupMatchers(elementMatchers, setMatchers)
                );
                cached.selector = selector;
              }
              return cached;
            };
            select = Sizzle2.select = function(selector, context, results, seed) {
              var i4, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
              results = results || [];
              if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                  context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                  if (!context) {
                    return results;
                  } else if (compiled) {
                    context = context.parentNode;
                  }
                  selector = selector.slice(tokens.shift().value.length);
                }
                i4 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i4--) {
                  token = tokens[i4];
                  if (Expr.relative[type = token.type]) {
                    break;
                  }
                  if (find = Expr.find[type]) {
                    if (seed = find(
                      token.matches[0].replace(runescape, funescape),
                      rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                    )) {
                      tokens.splice(i4, 1);
                      selector = seed.length && toSelector(tokens);
                      if (!selector) {
                        push2.apply(results, seed);
                        return results;
                      }
                      break;
                    }
                  }
                }
              }
              (compiled || compile(selector, match))(
                seed,
                context,
                !documentIsHTML,
                results,
                !context || rsibling.test(selector) && testContext(context.parentNode) || context
              );
              return results;
            };
            support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
            support2.detectDuplicates = !!hasDuplicate;
            setDocument();
            support2.sortDetached = assert2(function(el) {
              return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
            });
            if (!assert2(function(el) {
              el.innerHTML = "<a href='#'></a>";
              return el.firstChild.getAttribute("href") === "#";
            })) {
              addHandle("type|href|height|width", function(elem, name, isXML2) {
                if (!isXML2) {
                  return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
              });
            }
            if (!support2.attributes || !assert2(function(el) {
              el.innerHTML = "<input/>";
              el.firstChild.setAttribute("value", "");
              return el.firstChild.getAttribute("value") === "";
            })) {
              addHandle("value", function(elem, _name, isXML2) {
                if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
                  return elem.defaultValue;
                }
              });
            }
            if (!assert2(function(el) {
              return el.getAttribute("disabled") == null;
            })) {
              addHandle(booleans, function(elem, name, isXML2) {
                var val;
                if (!isXML2) {
                  return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
              });
            }
            return Sizzle2;
          }(window2)
        );
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
        jQuery.escapeSelector = Sizzle.escape;
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n2, elem) {
          var matched = [];
          for (; n2; n2 = n2.nextSibling) {
            if (n2.nodeType === 1 && n2 !== elem) {
              matched.push(n2);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery.expr.match.needsContext;
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i3) {
              return !!qualifier.call(elem, i3, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery.filter(qualifier, elements, not);
        }
        jQuery.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery.fn.extend({
          find: function(selector) {
            var i3, ret, len = this.length, self = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery(selector).filter(function() {
                for (i3 = 0; i3 < len; i3++) {
                  if (jQuery.contains(self[i3], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i3 = 0; i3 < len; i3++) {
              jQuery.find(selector, self[i3], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(
              this,
              // If this is a positional/relative selector, check membership in the returned set
              // so $("p:first").is("p:last") won't return true for a doc with two "p".
              typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [],
              false
            ).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init2 = jQuery.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(
                  match[1],
                  context && context.nodeType ? context.ownerDocument || context : document2,
                  true
                ));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : (
              // Execute immediately if ready is not present
              selector(jQuery)
            );
          }
          return jQuery.makeArray(selector, this);
        };
        init2.prototype = jQuery.fn;
        rootjQuery = jQuery(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery.fn.extend({
          has: function(target) {
            var targets = jQuery(target, this), l3 = targets.length;
            return this.filter(function() {
              var i3 = 0;
              for (; i3 < l3; i3++) {
                if (jQuery.contains(this, targets[i3])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i3 = 0, l3 = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i3 < l3; i3++) {
                for (cur = this[i3]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : (
                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors)
                  ))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
          },
          // Determine the position of an element within the set
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(
              this,
              // If it receives a jQuery object, the first element is used
              elem.jquery ? elem[0] : elem
            );
          },
          add: function(selector, context) {
            return this.pushStack(
              jQuery.uniqueSort(
                jQuery.merge(this.get(), jQuery(selector, context))
              )
            );
          },
          addBack: function(selector) {
            return this.add(
              selector == null ? this.prevObject : this.prevObject.filter(selector)
            );
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
          }
        }, function(name, fn) {
          jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery.each(options.match(rnothtmlwhite) || [], function(_24, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add2(args) {
                  jQuery.each(args, function(_24, arg) {
                    if (isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType(arg) !== "string") {
                      add2(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            // Remove a callback from the list
            remove: function() {
              jQuery.each(arguments, function(_24, arg) {
                var index;
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
              self.fireWith(this, arguments);
              return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
              return !!fired;
            }
          };
          return self;
        };
        function Identity(v3) {
          return v3;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery.extend({
          Deferred: function(func) {
            var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                "notify",
                "progress",
                jQuery.Callbacks("memory"),
                jQuery.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery.Callbacks("once memory"),
                jQuery.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn) {
                return promise.then(null, fn);
              },
              // Keep pipe for back-compat
              pipe: function() {
                var fns = arguments;
                return jQuery.Deferred(function(newDefer) {
                  jQuery.each(tuples, function(_i, tuple) {
                    var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this,
                          fn ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction(then)) {
                        if (special) {
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special)
                          );
                        } else {
                          maxDepth++;
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special),
                            resolve(
                              maxDepth,
                              deferred2,
                              Identity,
                              deferred2.notifyWith
                            )
                          );
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process2 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e3) {
                        if (jQuery.Deferred.exceptionHook) {
                          jQuery.Deferred.exceptionHook(
                            e3,
                            process2.stackTrace
                          );
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e3];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process2();
                    } else {
                      if (jQuery.Deferred.getStackHook) {
                        process2.stackTrace = jQuery.Deferred.getStackHook();
                      }
                      window2.setTimeout(process2);
                    }
                  };
                }
                return jQuery.Deferred(function(newDefer) {
                  tuples[0][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onProgress) ? onProgress : Identity,
                      newDefer.notifyWith
                    )
                  );
                  tuples[1][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onFulfilled) ? onFulfilled : Identity
                    )
                  );
                  tuples[2][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onRejected) ? onRejected : Thrower
                    )
                  );
                }).promise();
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function(obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery.each(tuples, function(i3, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(
                  function() {
                    state = stateString;
                  },
                  // rejected_callbacks.disable
                  // fulfilled_callbacks.disable
                  tuples[3 - i3][2].disable,
                  // rejected_handlers.disable
                  // fulfilled_handlers.disable
                  tuples[3 - i3][3].disable,
                  // progress_callbacks.lock
                  tuples[0][2].lock,
                  // progress_handlers.lock
                  tuples[0][3].lock
                );
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          // Deferred helper
          when: function(singleValue) {
            var remaining = arguments.length, i3 = remaining, resolveContexts = Array(i3), resolveValues = slice2.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i4) {
              return function(value) {
                resolveContexts[i4] = this;
                resolveValues[i4] = arguments.length > 1 ? slice2.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(
                singleValue,
                primary.done(updateFunc(i3)).resolve,
                primary.reject,
                !remaining
              );
              if (primary.state() === "pending" || isFunction(resolveValues[i3] && resolveValues[i3].then)) {
                return primary.then();
              }
            }
            while (i3--) {
              adoptValue(resolveValues[i3], updateFunc(i3), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery.Deferred.exceptionHook = function(error2, stack) {
          if (window2.console && window2.console.warn && error2 && rerrorNames.test(error2.name)) {
            window2.console.warn("jQuery.Deferred exception: " + error2.message, error2.stack, stack);
          }
        };
        jQuery.readyException = function(error2) {
          window2.setTimeout(function() {
            throw error2;
          });
        };
        var readyList = jQuery.Deferred();
        jQuery.fn.ready = function(fn) {
          readyList.then(fn).catch(function(error2) {
            jQuery.readyException(error2);
          });
          return this;
        };
        jQuery.extend({
          // Is the DOM ready to be used? Set to true once it occurs.
          isReady: false,
          // A counter to track how many items to wait for before
          // the ready event fires. See trac-6781
          readyWait: 1,
          // Handle when the DOM is ready
          ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
              return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery]);
          }
        });
        jQuery.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn, key, value, chainable, emptyGet, raw4) {
          var i3 = 0, len = elems.length, bulk = key == null;
          if (toType(key) === "object") {
            chainable = true;
            for (i3 in key) {
              access(elems, fn, i3, key[i3], true, emptyGet, raw4);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction(value)) {
              raw4 = true;
            }
            if (bulk) {
              if (raw4) {
                fn.call(elems, value);
                fn = null;
              } else {
                bulk = fn;
                fn = function(elem, _key, value2) {
                  return bulk.call(jQuery(elem), value2);
                };
              }
            }
            if (fn) {
              for (; i3 < len; i3++) {
                fn(
                  elems[i3],
                  key,
                  raw4 ? value : value.call(elems[i3], i3, fn(elems[i3], key))
                );
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn.call(elems);
          }
          return len ? fn(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          this.expando = jQuery.expando + Data.uid++;
        }
        Data.uid = 1;
        Data.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : (
              // Always use camelCase key (gh-2257)
              owner[this.expando] && owner[this.expando][camelCase(key)]
            );
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i3, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i3 = key.length;
              while (i3--) {
                delete cache[key[i3]];
              }
            }
            if (key === void 0 || jQuery.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data();
        var dataUser = new Data();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e3) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          // TODO: Now that all calls to _data and _removeData have been replaced
          // with direct calls to dataPriv methods, these can be deprecated.
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery.fn.extend({
          data: function(key, value) {
            var i3, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i3 = attrs.length;
                  while (i3--) {
                    if (attrs[i3]) {
                      name = attrs[i3].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
              jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          // Not public - generate a queueHooks object, or return the current one
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery.queue(this, type, data);
              jQuery._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          // Get a promise resolved when queues of a certain type
          // are emptied (fx is the type by default)
          promise: function(type, obj) {
            var tmp, count = 1, defer2 = jQuery.Deferred(), elements = this, i3 = this.length, resolve = function() {
              if (!--count) {
                defer2.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i3--) {
              tmp = dataPriv.get(elements[i3], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer2.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
          // Support: Firefox <=43 - 45
          // Disconnected elements can have computed display: none, so first confirm that elem is
          // in the document.
          isAttached(elem) && jQuery.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery(this).show();
              } else {
                jQuery(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          // XHTML parsers do not magically insert elements in the
          // same way that tag soup parsers do. So we cannot shorten
          // this by omitting <tbody> or other required elements.
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i3 = 0, l3 = elems.length;
          for (; i3 < l3; i3++) {
            dataPriv.set(
              elems[i3],
              "globalEval",
              !refElements || dataPriv.get(refElements[i3], "globalEval")
            );
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap2, attached, j3, fragment = context.createDocumentFragment(), nodes = [], i3 = 0, l3 = elems.length;
          for (; i3 < l3; i3++) {
            elem = elems[i3];
            if (elem || elem === 0) {
              if (toType(elem) === "object") {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap2 = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap2[1] + jQuery.htmlPrefilter(elem) + wrap2[2];
                j3 = wrap2[0];
                while (j3--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i3 = 0;
          while (elem = nodes[i3++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j3 = 0;
              while (elem = tmp[j3++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function expectSync(elem, type) {
          return elem === safeActiveElement() === (type === "focus");
        }
        function safeActiveElement() {
          try {
            return document2.activeElement;
          } catch (err) {
          }
        }
        function on(elem, types, selector, data, fn, one) {
          var origFn, type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types) {
              on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = void 0;
          } else if (fn == null) {
            if (typeof selector === "string") {
              fn = data;
              data = void 0;
            } else {
              fn = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return elem;
          }
          if (one === 1) {
            origFn = fn;
            fn = function(event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
          });
        }
        jQuery.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t4, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e3) {
                return typeof jQuery !== "undefined" && jQuery.event.triggered !== e3.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t4 = types.length;
            while (t4--) {
              tmp = rtypenamespace.exec(types[t4]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery.event.special[type] || {};
              handleObj = jQuery.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery.event.global[type] = true;
            }
          },
          // Detach an event or set of events from an element
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j3, origCount, tmp, events, t4, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t4 = types.length;
            while (t4--) {
              tmp = rtypenamespace.exec(types[t4]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events) {
                  jQuery.event.remove(elem, type + types[t4], handler, selector, true);
                }
                continue;
              }
              special = jQuery.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j3 = handlers.length;
              while (j3--) {
                handleObj = handlers[j3];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j3, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i3, j3, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i3 = 1; i3 < arguments.length; i3++) {
              args[i3] = arguments[i3];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i3 = 0;
            while ((matched = handlerQueue[i3++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j3 = 0;
              while ((handleObj = matched.handlers[j3++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i3, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i3 = 0; i3 < delegateCount; i3++) {
                    handleObj = handlers[i3];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
          },
          special: {
            load: {
              // Prevent triggered image.load events from bubbling to window.load
              noBubble: true
            },
            click: {
              // Utilize native event to ensure correct state for checkable inputs
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", returnTrue);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              // For cross-browser consistency, suppress native .click() on links
              // Also prevent it if we're currently inside a leveraged native-event stack
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, expectSync2) {
          if (!expectSync2) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var notAsync, result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved.length) {
                  saved = slice2.call(arguments);
                  dataPriv.set(this, type, saved);
                  notAsync = expectSync2(this, type);
                  this[type]();
                  result = dataPriv.get(this, type);
                  if (saved !== result || notAsync) {
                    dataPriv.set(this, type, false);
                  } else {
                    result = {};
                  }
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result && result.value;
                  }
                } else if ((jQuery.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved.length) {
                dataPriv.set(this, type, {
                  value: jQuery.event.trigger(
                    // Support: IE <=9 - 11+
                    // Extend with the prototype to reset the above stopImmediatePropagation()
                    jQuery.extend(saved[0], jQuery.Event.prototype),
                    saved.slice(1),
                    this
                  )
                });
                event.stopImmediatePropagation();
              }
            }
          });
        }
        jQuery.removeEvent = function(elem, type, handle2) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle2);
          }
        };
        jQuery.Event = function(src, props) {
          if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery.expando] = true;
        };
        jQuery.Event.prototype = {
          constructor: jQuery.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e3 = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e3 && !this.isSimulated) {
              e3.preventDefault();
            }
          },
          stopPropagation: function() {
            var e3 = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e3 && !this.isSimulated) {
              e3.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e3 = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e3 && !this.isSimulated) {
              e3.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery.event.addProp);
        jQuery.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          jQuery.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
              leverageNative(this, type, expectSync);
              return false;
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
        });
        jQuery.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery.fn.extend({
          on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
          },
          one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
          },
          off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery(types.delegateTarget).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
              );
              return this;
            }
            if (typeof types === "object") {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn = selector;
              selector = void 0;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function() {
              jQuery.event.remove(this, types, fn, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i3, l3, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i3 = 0, l3 = events[type].length; i3 < l3; i3++) {
                  jQuery.event.add(dest, type, events[type][i3]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i3 = 0, l3 = collection.length, iNoClone = l3 - 1, value = args[0], valueIsFunction = isFunction(value);
          if (valueIsFunction || l3 > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
              var self = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self.html());
              }
              domManip(self, args, callback, ignored);
            });
          }
          if (l3) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i3 < l3; i3++) {
                node = fragment;
                if (i3 !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i3], node, i3);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i3 = 0; i3 < hasScripts; i3++) {
                  node = scripts[i3];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery._evalUrl && !node.noModule) {
                        jQuery._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove3(elem, selector, keepData) {
          var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i3 = 0;
          for (; (node = nodes[i3]) != null; i3++) {
            if (!keepData && node.nodeType === 1) {
              jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery.extend({
          htmlPrefilter: function(html18) {
            return html18;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i3, l3, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i3 = 0, l3 = srcElements.length; i3 < l3; i3++) {
                fixInput(srcElements[i3], destElements[i3]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i3 = 0, l3 = srcElements.length; i3 < l3; i3++) {
                  cloneCopyEvent(srcElements[i3], destElements[i3]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery.event.special, i3 = 0;
            for (; (elem = elems[i3]) !== void 0; i3++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery.event.remove(elem, type);
                      } else {
                        jQuery.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery.fn.extend({
          detach: function(selector) {
            return remove3(this, selector, true);
          },
          remove: function(selector) {
            return remove3(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i3 = 0;
            for (; (elem = this[i3]) != null; i3++) {
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i3 = 0, l3 = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery.htmlPrefilter(value2);
                try {
                  for (; i3 < l3; i3++) {
                    elem = this[i3] || {};
                    if (elem.nodeType === 1) {
                      jQuery.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e3) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery.inArray(this, ignored) < 0) {
                jQuery.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i3 = 0;
            for (; i3 <= last; i3++) {
              elems = i3 === last ? this : this.clone(true);
              jQuery(insert[i3])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        );
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? (
            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + ""
          ) : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i3 = cssPrefixes.length;
          while (i3--) {
            name = cssPrefixes[i3] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches2 = rcssNum.exec(value);
          return matches2 ? (
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches2[2] - (subtract || 0)) + (matches2[3] || "px")
          ) : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i3 = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i3 < 4; i3 += 2) {
            if (box === "margin") {
              delta += jQuery.css(elem, box + cssExpand[i3], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery.css(elem, "padding" + cssExpand[i3], true, styles);
              if (box !== "padding") {
                delta += jQuery.css(elem, "border" + cssExpand[i3] + "Width", true, styles);
              } else {
                extra += jQuery.css(elem, "border" + cssExpand[i3] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery.css(elem, "padding" + cssExpand[i3], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery.css(elem, "border" + cssExpand[i3] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(
              elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
              // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
              // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
          }
          return delta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Interestingly, in some cases IE 9 doesn't suffer from this issue.
          !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
          // This happens for inline elements with no explicit setting (gh-3571)
          val === "auto" || // Support: Android <=4.1 - 4.3 only
          // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
          !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
          elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(
            elem,
            dimension,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles,
            // Provide the current computed size to request scroll gutter calculation (gh-3589)
            val
          ) + "px";
        }
        jQuery.extend({
          // Add in style property hooks for overriding the default
          // behavior of getting and setting a style property
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          // Don't automatically add "px" to these possibly-unitless properties
          cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
          },
          // Add in properties whose names you wish to fix before
          // setting or getting the value
          cssProps: {},
          // Get and set the style property on a DOM Node
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== void 0) {
              type = typeof value;
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery.each(["height", "width"], function(_i, dimension) {
          jQuery.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery.css(elem, "display")) && // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches2, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
                elem,
                dimension,
                extra,
                isBorderBox,
                styles
              ) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(
                  elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
                );
              }
              if (subtract && (matches2 = rcssNum.exec(value)) && (matches2[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery.cssHooks.marginLeft = addGetHookIf(
          support.reliableMarginLeft,
          function(elem, computed) {
            if (computed) {
              return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px";
            }
          }
        );
        jQuery.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix2, suffix) {
          jQuery.cssHooks[prefix2 + suffix] = {
            expand: function(value) {
              var i3 = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i3 < 4; i3++) {
                expanded[prefix2 + cssExpand[i3] + suffix] = parts[i3] || parts[i3 - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix2 !== "margin") {
            jQuery.cssHooks[prefix2 + suffix].set = setPositiveNumber;
          }
        });
        jQuery.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles, len, map = {}, i3 = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i3 < len; i3++) {
                  map[name2[i3]] = jQuery.css(elem, name2[i3], false, styles);
                }
                return map;
              }
              return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end, easing) {
          return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery.easing[this.easing](
                percent,
                this.options.duration * percent,
                0,
                1,
                this.options.duration
              );
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery.fx.step[tween.prop]) {
                jQuery.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery.easing = {
          linear: function(p3) {
            return p3;
          },
          swing: function(p3) {
            return 0.5 - Math.cos(p3 * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i3 = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i3 < 4; i3 += 2 - includeWidth) {
            which = cssExpand[i3];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
          }
          propTween = !jQuery.isEmptyObject(props);
          if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
              specialEasing: {},
              easing: jQuery.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery.Tween(
                elem,
                animation.opts,
                prop,
                end,
                animation.opts.specialEasing[prop] || animation.opts.easing
              );
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery.fx.timer(
            jQuery.extend(tick, {
              elem,
              anim: animation,
              queue: animation.opts.queue
            })
          );
          return animation;
        }
        jQuery.Animation = jQuery.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery.speed = function(speed, easing, fn) {
          var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
          };
          if (jQuery.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery.fx.speeds) {
                opt.duration = jQuery.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery.fn[name];
          jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery.timers = [];
        jQuery.fx.tick = function() {
          var timer, i3 = 0, timers = jQuery.timers;
          fxNow = Date.now();
          for (; i3 < timers.length; i3++) {
            timer = timers[i3];
            if (!timer() && timers[i3] === timer) {
              timers.splice(i3--, 1);
            }
          }
          if (!timers.length) {
            jQuery.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery.fx.timer = function(timer) {
          jQuery.timers.push(timer);
          jQuery.fx.start();
        };
        jQuery.fx.interval = 13;
        jQuery.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery.fx.stop = function() {
          inProgress = null;
        };
        jQuery.fx.speeds = {
          slow: 600,
          fast: 200,
          // Default speed
          _default: 400
        };
        jQuery.fn.delay = function(time, type) {
          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery.expr.attrHandle;
        jQuery.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery.removeAttr(this, name);
            });
          }
        });
        jQuery.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i3 = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i3++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle2, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle2 = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle2;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery.propFix[name] || name];
            });
          }
        });
        jQuery.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
              name = jQuery.propFix[name] || name;
              hooks = jQuery.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery.fn.extend({
          addClass: function(value) {
            var classNames, cur, curValue, className, i3, finalValue;
            if (isFunction(value)) {
              return this.each(function(j3) {
                jQuery(this).addClass(value.call(this, j3, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i3 = 0; i3 < classNames.length; i3++) {
                    className = classNames[i3];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value) {
            var classNames, cur, curValue, className, i3, finalValue;
            if (isFunction(value)) {
              return this.each(function(j3) {
                jQuery(this).removeClass(value.call(this, j3, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i3 = 0; i3 < classNames.length; i3++) {
                    className = classNames[i3];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var classNames, className, i3, self, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (isFunction(value)) {
              return this.each(function(i4) {
                jQuery(this).toggleClass(
                  value.call(this, i4, getClass(this), stateVal),
                  stateVal
                );
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function() {
              if (isValidValue) {
                self = jQuery(this);
                for (i3 = 0; i3 < classNames.length; i3++) {
                  className = classNames[i3];
                  if (self.hasClass(className)) {
                    self.removeClass(className);
                  } else {
                    self.addClass(className);
                  }
                }
              } else if (value === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute(
                    "class",
                    className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                  );
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i3 = 0;
            className = " " + selector + " ";
            while (elem = this[i3++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i3) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i3, jQuery(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery.find.attr(elem, "value");
                return val != null ? val : (
                  // Support: IE <=10 - 11 only
                  // option.text throws exceptions (trac-14686, trac-14858)
                  // Strip and collapse whitespace
                  // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                  stripAndCollapse(jQuery.text(elem))
                );
              }
            },
            select: {
              get: function(elem) {
                var value, option, i3, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                if (index < 0) {
                  i3 = max;
                } else {
                  i3 = one ? index : 0;
                }
                for (; i3 < max; i3++) {
                  option = options[i3];
                  if ((option.selected || i3 === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i3 = options.length;
                while (i3--) {
                  option = options[i3];
                  if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery.each(["radio", "checkbox"], function() {
          jQuery.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        support.focusin = "onfocusin" in window2;
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e3) {
          e3.stopPropagation();
        };
        jQuery.extend(jQuery.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i3, cur, tmp, bubbleType, ontype, handle2, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i3 = 0;
            while ((cur = eventPath[i3++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i3 > 1 ? bubbleType : special.bindType || type;
              handle2 = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle2) {
                handle2.apply(cur, data);
              }
              handle2 = ontype && cur[ontype];
              if (handle2 && handle2.apply && acceptData(cur)) {
                event.result = handle2.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          // Piggyback on a donor event to simulate a different one
          // Used only for `focus(in | out)` events
          simulate: function(type, elem, event) {
            var e3 = jQuery.extend(
              new jQuery.Event(),
              event,
              {
                type,
                isSimulated: true
              }
            );
            jQuery.event.trigger(e3, null, elem);
          }
        });
        jQuery.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery.event.trigger(type, data, elem, true);
            }
          }
        });
        if (!support.focusin) {
          jQuery.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
            var handler = function(event) {
              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
              setup: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) {
                  doc.addEventListener(orig, handler, true);
                }
                dataPriv.access(doc, fix, (attaches || 0) + 1);
              },
              teardown: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true);
                  dataPriv.remove(doc, fix);
                } else {
                  dataPriv.access(doc, fix, attaches);
                }
              }
            };
          });
        }
        var location2 = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e3) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix2, obj, traditional, add2) {
          var name;
          if (Array.isArray(obj)) {
            jQuery.each(obj, function(i3, v3) {
              if (traditional || rbracket.test(prefix2)) {
                add2(prefix2, v3);
              } else {
                buildParams(
                  prefix2 + "[" + (typeof v3 === "object" && v3 != null ? i3 : "") + "]",
                  v3,
                  traditional,
                  add2
                );
              }
            });
          } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
              buildParams(prefix2 + "[" + name + "]", obj[name], traditional, add2);
            }
          } else {
            add2(prefix2, obj);
          }
        }
        jQuery.param = function(a3, traditional) {
          var prefix2, s3 = [], add2 = function(key, valueOrFunction) {
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s3[s3.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a3 == null) {
            return "";
          }
          if (Array.isArray(a3) || a3.jquery && !jQuery.isPlainObject(a3)) {
            jQuery.each(a3, function() {
              add2(this.name, this.value);
            });
          } else {
            for (prefix2 in a3) {
              buildParams(prefix2, a3[prefix2], traditional, add2);
            }
          }
          return s3.join("&");
        };
        jQuery.fn.extend({
          serialize: function() {
            return jQuery.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery.prop(this, "elements");
              return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location2.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i3 = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              while (dataType = dataTypes[i3++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_24, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s3, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s3.contents, dataTypes = s3.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s3.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s3.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s3, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s3.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s3.converters) {
              converters[conv.toLowerCase()] = s3.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s3.responseFields[current]) {
              jqXHR[s3.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s3.dataFilter) {
              response = s3.dataFilter(response, s3.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s3.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e3) {
                      return {
                        state: "parsererror",
                        error: conv ? e3 : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery.extend({
          // Counter for holding the number of active queries
          active: 0,
          // Last-Modified header cache for next request
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location2.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location2.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
              // Convert anything to text
              "* text": String,
              // Text to html (true = no transformation)
              "text html": true,
              // Evaluate text as a json expression
              "text json": JSON.parse,
              // Parse text as xml
              "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
              url: true,
              context: true
            }
          },
          // Creates a full fledged settings object into target
          // with both ajaxSettings and settings fields.
          // If target is omitted, writes into ajaxSettings.
          ajaxSetup: function(target, settings) {
            return settings ? (
              // Building a settings object
              ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
            ) : (
              // Extending ajaxSettings
              ajaxExtend(jQuery.ajaxSettings, target)
            );
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          // Main method
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i3, uncached, s3 = jQuery.ajaxSetup({}, options), callbackContext = s3.context || s3, globalEventContext = s3.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s3.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              // Raw string
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              // Caches the header
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              // Overrides response content-type header
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s3.mimeType = type;
                }
                return this;
              },
              // Status-dependent callbacks
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              // Cancel the request
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s3.url = ((url || s3.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
            s3.type = options.method || options.type || s3.method || s3.type;
            s3.dataTypes = (s3.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s3.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s3.url;
                urlAnchor.href = urlAnchor.href;
                s3.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e3) {
                s3.crossDomain = true;
              }
            }
            if (s3.data && s3.processData && typeof s3.data !== "string") {
              s3.data = jQuery.param(s3.data, s3.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s3, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery.event && s3.global;
            if (fireGlobals && jQuery.active++ === 0) {
              jQuery.event.trigger("ajaxStart");
            }
            s3.type = s3.type.toUpperCase();
            s3.hasContent = !rnoContent.test(s3.type);
            cacheURL = s3.url.replace(rhash, "");
            if (!s3.hasContent) {
              uncached = s3.url.slice(cacheURL.length);
              if (s3.data && (s3.processData || typeof s3.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s3.data;
                delete s3.data;
              }
              if (s3.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s3.url = cacheURL + uncached;
            } else if (s3.data && s3.processData && (s3.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s3.data = s3.data.replace(r20, "+");
            }
            if (s3.ifModified) {
              if (jQuery.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
              }
              if (jQuery.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
              }
            }
            if (s3.data && s3.hasContent && s3.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s3.contentType);
            }
            jqXHR.setRequestHeader(
              "Accept",
              s3.dataTypes[0] && s3.accepts[s3.dataTypes[0]] ? s3.accepts[s3.dataTypes[0]] + (s3.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s3.accepts["*"]
            );
            for (i3 in s3.headers) {
              jqXHR.setRequestHeader(i3, s3.headers[i3]);
            }
            if (s3.beforeSend && (s3.beforeSend.call(callbackContext, jqXHR, s3) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s3.complete);
            jqXHR.done(s3.success);
            jqXHR.fail(s3.error);
            transport = inspectPrefiltersOrTransports(transports, s3, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s3]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s3.async && s3.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s3.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e3) {
                if (completed2) {
                  throw e3;
                }
                done(-1, e3);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error2, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s3, jqXHR, responses);
              }
              if (!isSuccess && jQuery.inArray("script", s3.dataTypes) > -1 && jQuery.inArray("json", s3.dataTypes) < 0) {
                s3.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s3, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s3.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s3.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error2 = response.error;
                  isSuccess = !error2;
                }
              } else {
                error2 = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error2]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(
                  isSuccess ? "ajaxSuccess" : "ajaxError",
                  [jqXHR, s3, isSuccess ? success : error2]
                );
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s3]);
                if (!--jQuery.active) {
                  jQuery.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
          }
        });
        jQuery.each(["get", "post"], function(_i, method) {
          jQuery[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery.ajax(jQuery.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery.isPlainObject(url) && url));
          };
        });
        jQuery.ajaxPrefilter(function(s3) {
          var i3;
          for (i3 in s3.headers) {
            if (i3.toLowerCase() === "content-type") {
              s3.contentType = s3.headers[i3] || "";
            }
          }
        });
        jQuery._evalUrl = function(url, options, doc) {
          return jQuery.ajax({
            url,
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery.globalEval(response, options, doc);
            }
          });
        };
        jQuery.fn.extend({
          wrapAll: function(html18) {
            var wrap2;
            if (this[0]) {
              if (isFunction(html18)) {
                html18 = html18.call(this[0]);
              }
              wrap2 = jQuery(html18, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap2.insertBefore(this[0]);
              }
              wrap2.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html18) {
            if (isFunction(html18)) {
              return this.each(function(i3) {
                jQuery(this).wrapInner(html18.call(this, i3));
              });
            }
            return this.each(function() {
              var self = jQuery(this), contents = self.contents();
              if (contents.length) {
                contents.wrapAll(html18);
              } else {
                self.append(html18);
              }
            });
          },
          wrap: function(html18) {
            var htmlIsFunction = isFunction(html18);
            return this.each(function(i3) {
              jQuery(this).wrapAll(htmlIsFunction ? html18.call(this, i3) : html18);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery.expr.pseudos.hidden = function(elem) {
          return !jQuery.expr.pseudos.visible(elem);
        };
        jQuery.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e3) {
          }
        };
        var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // trac-1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i3, xhr = options.xhr();
                xhr.open(
                  options.type,
                  options.url,
                  options.async,
                  options.username,
                  options.password
                );
                if (options.xhrFields) {
                  for (i3 in options.xhrFields) {
                    xhr[i3] = options.xhrFields[i3];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i3 in headers) {
                  xhr.setRequestHeader(i3, headers[i3]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                            // File: protocol always yields status 0; see trac-8605, trac-14207
                            xhr.status,
                            xhr.statusText
                          );
                        }
                      } else {
                        complete(
                          xhrSuccessStatus[xhr.status] || xhr.status,
                          xhr.statusText,
                          // Support: IE <=9 only
                          // IE9 has no XHR2 but throws on binary (trac-11426)
                          // For XHR2 non-text, let the caller handle it (gh-2498)
                          (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                          xhr.getAllResponseHeaders()
                        );
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e3) {
                  if (callback) {
                    throw e3;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery.ajaxPrefilter(function(s3) {
          if (s3.crossDomain) {
            s3.contents.script = false;
          }
        });
        jQuery.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery.globalEval(text);
              return text;
            }
          }
        });
        jQuery.ajaxPrefilter("script", function(s3) {
          if (s3.cache === void 0) {
            s3.cache = false;
          }
          if (s3.crossDomain) {
            s3.type = "GET";
          }
        });
        jQuery.ajaxTransport("script", function(s3) {
          if (s3.crossDomain || s3.scriptAttrs) {
            var script, callback;
            return {
              send: function(_24, complete) {
                script = jQuery("<script>").attr(s3.scriptAttrs || {}).prop({ charset: s3.scriptCharset, src: s3.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery.ajaxPrefilter("json jsonp", function(s3, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s3.jsonp !== false && (rjsonp.test(s3.url) ? "url" : typeof s3.data === "string" && (s3.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s3.data) && "data");
          if (jsonProp || s3.dataTypes[0] === "jsonp") {
            callbackName = s3.jsonpCallback = isFunction(s3.jsonpCallback) ? s3.jsonpCallback() : s3.jsonpCallback;
            if (jsonProp) {
              s3[jsonProp] = s3[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s3.jsonp !== false) {
              s3.url += (rquery.test(s3.url) ? "&" : "?") + s3.jsonp + "=" + callbackName;
            }
            s3.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s3.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s3[callbackName]) {
                s3.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery(scripts).remove();
          }
          return jQuery.merge([], parsed.childNodes);
        };
        jQuery.fn.load = function(url, params, callback) {
          var selector, type, response, self = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self.length > 0) {
            jQuery.ajax({
              url,
              // If "type" variable is undefined, then "GET" method will be used.
              // Make value of this field explicit since
              // user can override it through ajaxSetup method
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self.html(selector ? (
                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector)
              ) : (
                // Otherwise use the full result
                responseText
              ));
            }).always(callback && function(jqXHR, status) {
              self.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery.expr.pseudos.animated = function(elem) {
          return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
          }).length;
        };
        jQuery.offset = {
          setOffset: function(elem, options, i3) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
              options = options.call(elem, i3, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery.fn.extend({
          // offset() relates an element's border box to the document origin
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i3) {
                jQuery.offset.setOffset(this, options, i3);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          // position() relates an element's margin box to its offset parent's padding box
          // This corresponds to the behavior of CSS absolute positioning
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset2, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery.css(elem, "position") === "fixed") {
              offset2 = elem.getBoundingClientRect();
            } else {
              offset2 = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery(offsetParent).offset();
                parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset2.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
              left: offset2.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
          },
          // This method will return documentElement in the following cases:
          // 1) For the element inside the iframe without offsetParent, this method will return
          //    documentElement of the parent window
          // 2) For the hidden or detached element
          // 3) For body or html element, i.e. in case of the html node - it will return itself
          //
          // but those exceptions were never presented as a real life use-cases
          // and might be considered as more preferable results.
          //
          // This logic, however, is not guaranteed and can change at any point in the future
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top = "pageYOffset" === prop;
          jQuery.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(
                  !top ? val2 : win.pageXOffset,
                  top ? val2 : win.pageYOffset
                );
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery.each(["top", "left"], function(_i, prop) {
          jQuery.cssHooks[prop] = addGetHookIf(
            support.pixelPosition,
            function(elem, computed) {
              if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
              }
            }
          );
        });
        jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type2, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(
                    elem.body["scroll" + name],
                    doc["scroll" + name],
                    elem.body["offset" + name],
                    doc["offset" + name],
                    doc["client" + name]
                  );
                }
                return value2 === void 0 ? (
                  // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type2, extra)
                ) : (
                  // Set width or height on the element
                  jQuery.style(elem, type2, value2, extra)
                );
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
          };
        });
        jQuery.fn.extend({
          bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function(types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
          },
          hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          }
        });
        jQuery.each(
          "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
          function(_i, name) {
            jQuery.fn[name] = function(data, fn) {
              return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
            };
          }
        );
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery.proxy = function(fn, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!isFunction(fn)) {
            return void 0;
          }
          args = slice2.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice2.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy;
        };
        jQuery.holdReady = function(hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        };
        jQuery.isArray = Array.isArray;
        jQuery.parseJSON = JSON.parse;
        jQuery.nodeName = nodeName;
        jQuery.isFunction = isFunction;
        jQuery.isWindow = isWindow;
        jQuery.camelCase = camelCase;
        jQuery.type = toType;
        jQuery.now = Date.now;
        jQuery.isNumeric = function(obj) {
          var type = jQuery.type(obj);
          return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj));
        };
        jQuery.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery.noConflict = function(deep) {
          if (window2.$ === jQuery) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery) {
            window2.jQuery = _jQuery;
          }
          return jQuery;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery;
        }
        return jQuery;
      });
    }
  });

  // shared/js/ui/base/mixins/events.js
  var events_exports = {};
  __export(events_exports, {
    bindEvents: () => bindEvents,
    unbindEvents: () => unbindEvents
  });
  function bindEvents(events) {
    if (!this._bEvents) {
      this._bEvents = [];
    }
    for (var i3 = 0, evt; evt = events[i3]; i3++) {
      if (evt.length < 2 || !evt[0] || !evt[1] || !evt[2]) {
        continue;
      }
      const eventObject = {
        bound: evt[2].bind(this),
        evt
      };
      if (typeof evt[0] === "string") {
        this.$ && this.$(evt[0]).on(evt[1], eventObject.bound);
      } else {
        evt[0].on(evt[1], eventObject.bound);
      }
      this._bEvents.push(eventObject);
    }
  }
  function unbindEvents() {
    while (this._bEvents && this._bEvents.length) {
      const eventObject = this._bEvents[this._bEvents.length - 1];
      const evt = eventObject.evt;
      if (evt) {
        if (typeof evt[0] === "string") {
          this.$ && this.$(evt[0]).off(evt[1], eventObject.bound);
        } else {
          evt[0].off(evt[1], eventObject.bound);
        }
      }
      this._bEvents.pop();
    }
    this._bEvents = null;
  }
  var init_events = __esm({
    "shared/js/ui/base/mixins/events.js"() {
      "use strict";
    }
  });

  // shared/js/ui/base/mixins/index.js
  var init_mixins = __esm({
    "shared/js/ui/base/mixins/index.js"() {
      "use strict";
      init_events();
    }
  });

  // node_modules/is-plain-object/dist/is-plain-object.mjs
  function isObject(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isPlainObject(o3) {
    var ctor, prot;
    if (isObject(o3) === false)
      return false;
    ctor = o3.constructor;
    if (ctor === void 0)
      return true;
    prot = ctor.prototype;
    if (isObject(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }
  var init_is_plain_object = __esm({
    "node_modules/is-plain-object/dist/is-plain-object.mjs"() {
    }
  });

  // node_modules/deep-freeze/index.js
  var require_deep_freeze = __commonJS({
    "node_modules/deep-freeze/index.js"(exports, module) {
      module.exports = function deepFreeze2(o3) {
        Object.freeze(o3);
        Object.getOwnPropertyNames(o3).forEach(function(prop) {
          if (o3.hasOwnProperty(prop) && o3[prop] !== null && (typeof o3[prop] === "object" || typeof o3[prop] === "function") && !Object.isFrozen(o3[prop])) {
            deepFreeze2(o3[prop]);
          }
        });
        return o3;
      };
    }
  });

  // node_modules/eventemitter2/lib/eventemitter2.js
  var require_eventemitter2 = __commonJS({
    "node_modules/eventemitter2/lib/eventemitter2.js"(exports, module) {
      !function(undefined2) {
        var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
        var defaultMaxListeners = 10;
        function init2() {
          this._events = {};
          if (this._conf) {
            configure.call(this, this._conf);
          }
        }
        function configure(conf) {
          if (conf) {
            this._conf = conf;
            conf.delimiter && (this.delimiter = conf.delimiter);
            this._maxListeners = conf.maxListeners !== undefined2 ? conf.maxListeners : defaultMaxListeners;
            conf.wildcard && (this.wildcard = conf.wildcard);
            conf.newListener && (this.newListener = conf.newListener);
            conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
            if (this.wildcard) {
              this.listenerTree = {};
            }
          } else {
            this._maxListeners = defaultMaxListeners;
          }
        }
        function logPossibleMemoryLeak(count, eventName) {
          var errorMsg = "(node) warning: possible EventEmitter memory leak detected. " + count + " listeners added. Use emitter.setMaxListeners() to increase limit.";
          if (this.verboseMemoryLeak) {
            errorMsg += " Event name: " + eventName + ".";
          }
          if (typeof process !== "undefined" && process.emitWarning) {
            var e3 = new Error(errorMsg);
            e3.name = "MaxListenersExceededWarning";
            e3.emitter = this;
            e3.count = count;
            process.emitWarning(e3);
          } else {
            console.error(errorMsg);
            if (console.trace) {
              console.trace();
            }
          }
        }
        function EventEmitter3(conf) {
          this._events = {};
          this.newListener = false;
          this.verboseMemoryLeak = false;
          configure.call(this, conf);
        }
        EventEmitter3.EventEmitter2 = EventEmitter3;
        function searchListenerTree(handlers, type, tree, i3) {
          if (!tree) {
            return [];
          }
          var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i3], nextType = type[i3 + 1];
          if (i3 === typeLength && tree._listeners) {
            if (typeof tree._listeners === "function") {
              handlers && handlers.push(tree._listeners);
              return [tree];
            } else {
              for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {
                handlers && handlers.push(tree._listeners[leaf]);
              }
              return [tree];
            }
          }
          if (currentType === "*" || currentType === "**" || tree[currentType]) {
            if (currentType === "*") {
              for (branch in tree) {
                if (branch !== "_listeners" && tree.hasOwnProperty(branch)) {
                  listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i3 + 1));
                }
              }
              return listeners;
            } else if (currentType === "**") {
              endReached = i3 + 1 === typeLength || i3 + 2 === typeLength && nextType === "*";
              if (endReached && tree._listeners) {
                listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));
              }
              for (branch in tree) {
                if (branch !== "_listeners" && tree.hasOwnProperty(branch)) {
                  if (branch === "*" || branch === "**") {
                    if (tree[branch]._listeners && !endReached) {
                      listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));
                    }
                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i3));
                  } else if (branch === nextType) {
                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i3 + 2));
                  } else {
                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i3));
                  }
                }
              }
              return listeners;
            }
            listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i3 + 1));
          }
          xTree = tree["*"];
          if (xTree) {
            searchListenerTree(handlers, type, xTree, i3 + 1);
          }
          xxTree = tree["**"];
          if (xxTree) {
            if (i3 < typeLength) {
              if (xxTree._listeners) {
                searchListenerTree(handlers, type, xxTree, typeLength);
              }
              for (branch in xxTree) {
                if (branch !== "_listeners" && xxTree.hasOwnProperty(branch)) {
                  if (branch === nextType) {
                    searchListenerTree(handlers, type, xxTree[branch], i3 + 2);
                  } else if (branch === currentType) {
                    searchListenerTree(handlers, type, xxTree[branch], i3 + 1);
                  } else {
                    isolatedBranch = {};
                    isolatedBranch[branch] = xxTree[branch];
                    searchListenerTree(handlers, type, { "**": isolatedBranch }, i3 + 1);
                  }
                }
              }
            } else if (xxTree._listeners) {
              searchListenerTree(handlers, type, xxTree, typeLength);
            } else if (xxTree["*"] && xxTree["*"]._listeners) {
              searchListenerTree(handlers, type, xxTree["*"], typeLength);
            }
          }
          return listeners;
        }
        function growListenerTree(type, listener) {
          type = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          for (var i3 = 0, len = type.length; i3 + 1 < len; i3++) {
            if (type[i3] === "**" && type[i3 + 1] === "**") {
              return;
            }
          }
          var tree = this.listenerTree;
          var name = type.shift();
          while (name !== undefined2) {
            if (!tree[name]) {
              tree[name] = {};
            }
            tree = tree[name];
            if (type.length === 0) {
              if (!tree._listeners) {
                tree._listeners = listener;
              } else {
                if (typeof tree._listeners === "function") {
                  tree._listeners = [tree._listeners];
                }
                tree._listeners.push(listener);
                if (!tree._listeners.warned && this._maxListeners > 0 && tree._listeners.length > this._maxListeners) {
                  tree._listeners.warned = true;
                  logPossibleMemoryLeak.call(this, tree._listeners.length, name);
                }
              }
              return true;
            }
            name = type.shift();
          }
          return true;
        }
        EventEmitter3.prototype.delimiter = ".";
        EventEmitter3.prototype.setMaxListeners = function(n2) {
          if (n2 !== undefined2) {
            this._maxListeners = n2;
            if (!this._conf)
              this._conf = {};
            this._conf.maxListeners = n2;
          }
        };
        EventEmitter3.prototype.event = "";
        EventEmitter3.prototype.once = function(event, fn) {
          return this._once(event, fn, false);
        };
        EventEmitter3.prototype.prependOnceListener = function(event, fn) {
          return this._once(event, fn, true);
        };
        EventEmitter3.prototype._once = function(event, fn, prepend) {
          this._many(event, 1, fn, prepend);
          return this;
        };
        EventEmitter3.prototype.many = function(event, ttl, fn) {
          return this._many(event, ttl, fn, false);
        };
        EventEmitter3.prototype.prependMany = function(event, ttl, fn) {
          return this._many(event, ttl, fn, true);
        };
        EventEmitter3.prototype._many = function(event, ttl, fn, prepend) {
          var self = this;
          if (typeof fn !== "function") {
            throw new Error("many only accepts instances of Function");
          }
          function listener() {
            if (--ttl === 0) {
              self.off(event, listener);
            }
            return fn.apply(this, arguments);
          }
          listener._origin = fn;
          this._on(event, listener, prepend);
          return self;
        };
        EventEmitter3.prototype.emit = function() {
          this._events || init2.call(this);
          var type = arguments[0];
          if (type === "newListener" && !this.newListener) {
            if (!this._events.newListener) {
              return false;
            }
          }
          var al = arguments.length;
          var args, l3, i3, j3;
          var handler;
          if (this._all && this._all.length) {
            handler = this._all.slice();
            if (al > 3) {
              args = new Array(al);
              for (j3 = 0; j3 < al; j3++)
                args[j3] = arguments[j3];
            }
            for (i3 = 0, l3 = handler.length; i3 < l3; i3++) {
              this.event = type;
              switch (al) {
                case 1:
                  handler[i3].call(this, type);
                  break;
                case 2:
                  handler[i3].call(this, type, arguments[1]);
                  break;
                case 3:
                  handler[i3].call(this, type, arguments[1], arguments[2]);
                  break;
                default:
                  handler[i3].apply(this, args);
              }
            }
          }
          if (this.wildcard) {
            handler = [];
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            searchListenerTree.call(this, handler, ns2, this.listenerTree, 0);
          } else {
            handler = this._events[type];
            if (typeof handler === "function") {
              this.event = type;
              switch (al) {
                case 1:
                  handler.call(this);
                  break;
                case 2:
                  handler.call(this, arguments[1]);
                  break;
                case 3:
                  handler.call(this, arguments[1], arguments[2]);
                  break;
                default:
                  args = new Array(al - 1);
                  for (j3 = 1; j3 < al; j3++)
                    args[j3 - 1] = arguments[j3];
                  handler.apply(this, args);
              }
              return true;
            } else if (handler) {
              handler = handler.slice();
            }
          }
          if (handler && handler.length) {
            if (al > 3) {
              args = new Array(al - 1);
              for (j3 = 1; j3 < al; j3++)
                args[j3 - 1] = arguments[j3];
            }
            for (i3 = 0, l3 = handler.length; i3 < l3; i3++) {
              this.event = type;
              switch (al) {
                case 1:
                  handler[i3].call(this);
                  break;
                case 2:
                  handler[i3].call(this, arguments[1]);
                  break;
                case 3:
                  handler[i3].call(this, arguments[1], arguments[2]);
                  break;
                default:
                  handler[i3].apply(this, args);
              }
            }
            return true;
          } else if (!this._all && type === "error") {
            if (arguments[1] instanceof Error) {
              throw arguments[1];
            } else {
              throw new Error("Uncaught, unspecified 'error' event.");
            }
            return false;
          }
          return !!this._all;
        };
        EventEmitter3.prototype.emitAsync = function() {
          this._events || init2.call(this);
          var type = arguments[0];
          if (type === "newListener" && !this.newListener) {
            if (!this._events.newListener) {
              return Promise.resolve([false]);
            }
          }
          var promises = [];
          var al = arguments.length;
          var args, l3, i3, j3;
          var handler;
          if (this._all) {
            if (al > 3) {
              args = new Array(al);
              for (j3 = 1; j3 < al; j3++)
                args[j3] = arguments[j3];
            }
            for (i3 = 0, l3 = this._all.length; i3 < l3; i3++) {
              this.event = type;
              switch (al) {
                case 1:
                  promises.push(this._all[i3].call(this, type));
                  break;
                case 2:
                  promises.push(this._all[i3].call(this, type, arguments[1]));
                  break;
                case 3:
                  promises.push(this._all[i3].call(this, type, arguments[1], arguments[2]));
                  break;
                default:
                  promises.push(this._all[i3].apply(this, args));
              }
            }
          }
          if (this.wildcard) {
            handler = [];
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            searchListenerTree.call(this, handler, ns2, this.listenerTree, 0);
          } else {
            handler = this._events[type];
          }
          if (typeof handler === "function") {
            this.event = type;
            switch (al) {
              case 1:
                promises.push(handler.call(this));
                break;
              case 2:
                promises.push(handler.call(this, arguments[1]));
                break;
              case 3:
                promises.push(handler.call(this, arguments[1], arguments[2]));
                break;
              default:
                args = new Array(al - 1);
                for (j3 = 1; j3 < al; j3++)
                  args[j3 - 1] = arguments[j3];
                promises.push(handler.apply(this, args));
            }
          } else if (handler && handler.length) {
            handler = handler.slice();
            if (al > 3) {
              args = new Array(al - 1);
              for (j3 = 1; j3 < al; j3++)
                args[j3 - 1] = arguments[j3];
            }
            for (i3 = 0, l3 = handler.length; i3 < l3; i3++) {
              this.event = type;
              switch (al) {
                case 1:
                  promises.push(handler[i3].call(this));
                  break;
                case 2:
                  promises.push(handler[i3].call(this, arguments[1]));
                  break;
                case 3:
                  promises.push(handler[i3].call(this, arguments[1], arguments[2]));
                  break;
                default:
                  promises.push(handler[i3].apply(this, args));
              }
            }
          } else if (!this._all && type === "error") {
            if (arguments[1] instanceof Error) {
              return Promise.reject(arguments[1]);
            } else {
              return Promise.reject("Uncaught, unspecified 'error' event.");
            }
          }
          return Promise.all(promises);
        };
        EventEmitter3.prototype.on = function(type, listener) {
          return this._on(type, listener, false);
        };
        EventEmitter3.prototype.prependListener = function(type, listener) {
          return this._on(type, listener, true);
        };
        EventEmitter3.prototype.onAny = function(fn) {
          return this._onAny(fn, false);
        };
        EventEmitter3.prototype.prependAny = function(fn) {
          return this._onAny(fn, true);
        };
        EventEmitter3.prototype.addListener = EventEmitter3.prototype.on;
        EventEmitter3.prototype._onAny = function(fn, prepend) {
          if (typeof fn !== "function") {
            throw new Error("onAny only accepts instances of Function");
          }
          if (!this._all) {
            this._all = [];
          }
          if (prepend) {
            this._all.unshift(fn);
          } else {
            this._all.push(fn);
          }
          return this;
        };
        EventEmitter3.prototype._on = function(type, listener, prepend) {
          if (typeof type === "function") {
            this._onAny(type, listener);
            return this;
          }
          if (typeof listener !== "function") {
            throw new Error("on only accepts instances of Function");
          }
          this._events || init2.call(this);
          this.emit("newListener", type, listener);
          if (this.wildcard) {
            growListenerTree.call(this, type, listener);
            return this;
          }
          if (!this._events[type]) {
            this._events[type] = listener;
          } else {
            if (typeof this._events[type] === "function") {
              this._events[type] = [this._events[type]];
            }
            if (prepend) {
              this._events[type].unshift(listener);
            } else {
              this._events[type].push(listener);
            }
            if (!this._events[type].warned && this._maxListeners > 0 && this._events[type].length > this._maxListeners) {
              this._events[type].warned = true;
              logPossibleMemoryLeak.call(this, this._events[type].length, type);
            }
          }
          return this;
        };
        EventEmitter3.prototype.off = function(type, listener) {
          if (typeof listener !== "function") {
            throw new Error("removeListener only takes instances of Function");
          }
          var handlers, leafs = [];
          if (this.wildcard) {
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            leafs = searchListenerTree.call(this, null, ns2, this.listenerTree, 0);
          } else {
            if (!this._events[type])
              return this;
            handlers = this._events[type];
            leafs.push({ _listeners: handlers });
          }
          for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
            var leaf = leafs[iLeaf];
            handlers = leaf._listeners;
            if (isArray(handlers)) {
              var position = -1;
              for (var i3 = 0, length = handlers.length; i3 < length; i3++) {
                if (handlers[i3] === listener || handlers[i3].listener && handlers[i3].listener === listener || handlers[i3]._origin && handlers[i3]._origin === listener) {
                  position = i3;
                  break;
                }
              }
              if (position < 0) {
                continue;
              }
              if (this.wildcard) {
                leaf._listeners.splice(position, 1);
              } else {
                this._events[type].splice(position, 1);
              }
              if (handlers.length === 0) {
                if (this.wildcard) {
                  delete leaf._listeners;
                } else {
                  delete this._events[type];
                }
              }
              this.emit("removeListener", type, listener);
              return this;
            } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {
              if (this.wildcard) {
                delete leaf._listeners;
              } else {
                delete this._events[type];
              }
              this.emit("removeListener", type, listener);
            }
          }
          function recursivelyGarbageCollect(root) {
            if (root === undefined2) {
              return;
            }
            var keys = Object.keys(root);
            for (var i4 in keys) {
              var key = keys[i4];
              var obj = root[key];
              if (obj instanceof Function || typeof obj !== "object" || obj === null)
                continue;
              if (Object.keys(obj).length > 0) {
                recursivelyGarbageCollect(root[key]);
              }
              if (Object.keys(obj).length === 0) {
                delete root[key];
              }
            }
          }
          recursivelyGarbageCollect(this.listenerTree);
          return this;
        };
        EventEmitter3.prototype.offAny = function(fn) {
          var i3 = 0, l3 = 0, fns;
          if (fn && this._all && this._all.length > 0) {
            fns = this._all;
            for (i3 = 0, l3 = fns.length; i3 < l3; i3++) {
              if (fn === fns[i3]) {
                fns.splice(i3, 1);
                this.emit("removeListenerAny", fn);
                return this;
              }
            }
          } else {
            fns = this._all;
            for (i3 = 0, l3 = fns.length; i3 < l3; i3++)
              this.emit("removeListenerAny", fns[i3]);
            this._all = [];
          }
          return this;
        };
        EventEmitter3.prototype.removeListener = EventEmitter3.prototype.off;
        EventEmitter3.prototype.removeAllListeners = function(type) {
          if (arguments.length === 0) {
            !this._events || init2.call(this);
            return this;
          }
          if (this.wildcard) {
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            var leafs = searchListenerTree.call(this, null, ns2, this.listenerTree, 0);
            for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
              var leaf = leafs[iLeaf];
              leaf._listeners = null;
            }
          } else if (this._events) {
            this._events[type] = null;
          }
          return this;
        };
        EventEmitter3.prototype.listeners = function(type) {
          if (this.wildcard) {
            var handlers = [];
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            searchListenerTree.call(this, handlers, ns2, this.listenerTree, 0);
            return handlers;
          }
          this._events || init2.call(this);
          if (!this._events[type])
            this._events[type] = [];
          if (!isArray(this._events[type])) {
            this._events[type] = [this._events[type]];
          }
          return this._events[type];
        };
        EventEmitter3.prototype.eventNames = function() {
          return Object.keys(this._events);
        };
        EventEmitter3.prototype.listenerCount = function(type) {
          return this.listeners(type).length;
        };
        EventEmitter3.prototype.listenersAny = function() {
          if (this._all) {
            return this._all;
          } else {
            return [];
          }
        };
        if (typeof define === "function" && define.amd) {
          define(function() {
            return EventEmitter3;
          });
        } else if (typeof exports === "object") {
          module.exports = EventEmitter3;
        } else {
          window.EventEmitter2 = EventEmitter3;
        }
      }();
    }
  });

  // shared/js/ui/base/notifiers.js
  function add(notifierName) {
    registered[notifierName] = (state, notification) => {
      if (state === void 0)
        state = {};
      if (notification.notifierName === notifierName) {
        if (notification.change) {
          return {
            change: notification.change,
            attributes: notification.attributes
          };
        }
        if (notification.action) {
          return {
            action: notification.action,
            data: notification.data,
            attributes: notification.attributes
          };
        }
      } else {
        return state;
      }
    };
  }
  function combine() {
    const keys = Object.keys(registered);
    return function combination(state, notification) {
      const nextState = {};
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key = keys[i3];
        if (typeof registered[key] !== "function") {
          throw new Error("notifier " + key + "must be a function");
        }
        nextState[key] = registered[key](state[key], notification);
      }
      return nextState;
    };
  }
  function remove(notifier) {
    if (registered[notifier]) {
      delete registered[notifier];
      return true;
    }
  }
  var registered;
  var init_notifiers = __esm({
    "shared/js/ui/base/notifiers.js"() {
      "use strict";
      registered = {};
    }
  });

  // shared/js/ui/base/store.js
  var store_exports = {};
  __export(store_exports, {
    publish: () => publish,
    register: () => register,
    remove: () => remove2,
    subscribe: () => subscribe
  });
  function register(notifierName) {
    if (typeof notifierName !== "string") {
      throw new Error("notifierName argument must be a string");
    }
    if (registered[notifierName]) {
      throw new Error(`notifierName argument must be unique to store ${notifierName} already exists`);
    }
    add(notifierName);
    const combinedNotifiers = combine();
    if (!_store) {
      _store = _createStore(combinedNotifiers);
      _store.subscribe((notification) => {
        notification = (0, import_deep_freeze.default)(notification);
        _publish(notification);
      });
    } else {
      _store.replaceNotifier(combinedNotifiers);
    }
  }
  function publish(notification) {
    _store.dispatch(notification);
  }
  function _publish(notification) {
    if (notification && notification.change) {
      _publisher.emit(`change:${notification.notifierName}`, notification);
    }
    if (notification && notification.action) {
      _publisher.emit(`action:${notification.notifierName}`, notification);
    }
  }
  function remove2(notifierName) {
    if (remove(notifierName)) {
      const combinedNotifiers = combine();
      _store.replaceNotifier(combinedNotifiers);
    }
  }
  function _createStore(notifier) {
    if (!notifier || typeof notifier !== "function")
      throw new Error("notifier must be a function");
    let state = {};
    let listener = null;
    let isEmitting = false;
    function dispatch(notification) {
      if (!notification || !isPlainObject(notification))
        throw new Error("notification parameter is required and must be a plain object");
      if (!notification.notifierName || typeof notification.notifierName !== "string") {
        throw new Error("notifierName property of notification parameter is required and must be a string");
      }
      if (isEmitting)
        throw new Error("subscribers may not generate notifications");
      isEmitting = true;
      state = notifier(state, notification);
      if (listener)
        listener(notification);
      isEmitting = false;
      return notification;
    }
    function subscribe2(cb) {
      if (!cb || typeof cb !== "function")
        throw new Error("listener must be a function");
      listener = cb;
    }
    function replaceNotifier(next) {
      if (typeof next !== "function")
        throw new Error("new notifier must be a function");
      notifier = next;
    }
    dispatch({ notifierName: "@@createStore/INIT" });
    return {
      dispatch,
      subscribe: subscribe2,
      replaceNotifier
    };
  }
  var import_deep_freeze, import_eventemitter2, _publisher, _store, subscribe;
  var init_store = __esm({
    "shared/js/ui/base/store.js"() {
      "use strict";
      init_is_plain_object();
      import_deep_freeze = __toESM(require_deep_freeze());
      import_eventemitter2 = __toESM(require_eventemitter2());
      init_notifiers();
      _publisher = new import_eventemitter2.default();
      _publisher.setMaxListeners(100);
      _store = null;
      subscribe = _publisher;
    }
  });

  // shared/js/ui/base/page.js
  function BasePage(_ops) {
    this.views = {};
    this.store = store_exports;
    this.ready();
  }
  var import_jquery, page_default;
  var init_page = __esm({
    "shared/js/ui/base/page.js"() {
      "use strict";
      import_jquery = __toESM(require_jquery());
      init_mixins();
      init_store();
      BasePage.prototype = import_jquery.default.extend({}, events_exports, {
        // pageName: '' - should be unique, defined by each page subclass
        ready: function() {
        }
      });
      page_default = BasePage;
    }
  });

  // node_modules/zod/lib/index.mjs
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }
  function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        ctx.schemaErrorMap,
        getErrorMap(),
        errorMap
      ].filter((x2) => !!x2)
    });
    ctx.common.issues.push(issue);
  }
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      if (typeof ctx.data === "undefined") {
        return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
      }
      return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return ZodArray.create(deepPartialify(schema.element));
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  function mergeValues(a3, b3) {
    const aType = getParsedType(a3);
    const bType = getParsedType(b3);
    if (a3 === b3) {
      return { valid: true, data: a3 };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b3);
      const sharedKeys = util.objectKeys(a3).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a3, ...b3 };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a3[key], b3[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a3.length !== b3.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index = 0; index < a3.length; index++) {
        const itemA = a3[index];
        const itemB = b3[index];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a3 === +b3) {
      return { valid: true, data: a3 };
    } else {
      return { valid: false };
    }
  }
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  var util, ZodParsedType, getParsedType, ZodIssueCode, quotelessJson, ZodError, errorMap, overrideErrorMap, makeIssue, EMPTY_PATH, ParseStatus, INVALID, DIRTY, OK, isAborted, isDirty, isValid, isAsync, errorUtil, ParseInputLazyPath, handleResult, ZodType, cuidRegex, uuidRegex, emailRegex, ZodString, ZodNumber, ZodBigInt, ZodBoolean, ZodDate, ZodUndefined, ZodNull, ZodAny, ZodUnknown, ZodNever, ZodVoid, ZodArray, objectUtil, AugmentFactory, ZodObject, ZodUnion, ZodDiscriminatedUnion, ZodIntersection, ZodTuple, ZodRecord, ZodMap, ZodSet, ZodFunction, ZodLazy, ZodLiteral, ZodEnum, ZodNativeEnum, ZodPromise, ZodEffects, ZodOptional, ZodNullable, ZodDefault, ZodNaN, BRAND, ZodBranded, custom, late, ZodFirstPartyTypeKind, instanceOfType, stringType, numberType, nanType, bigIntType, booleanType, dateType, undefinedType, nullType, anyType, unknownType, neverType, voidType, arrayType, objectType, strictObjectType, unionType, discriminatedUnionType, intersectionType, tupleType, recordType, mapType, setType, functionType, lazyType, literalType, enumType, nativeEnumType, promiseType, effectsType, optionalType, nullableType, preprocessType, ostring, onumber, oboolean, NEVER, mod;
  var init_lib = __esm({
    "node_modules/zod/lib/index.mjs"() {
      (function(util2) {
        util2.assertEqual = (val) => val;
        function assertIs(_arg) {
        }
        util2.assertIs = assertIs;
        function assertNever(_x) {
          throw new Error();
        }
        util2.assertNever = assertNever;
        util2.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
            obj[item] = item;
          }
          return obj;
        };
        util2.getValidEnumValues = (obj) => {
          const validKeys = util2.objectKeys(obj).filter((k3) => typeof obj[obj[k3]] !== "number");
          const filtered = {};
          for (const k3 of validKeys) {
            filtered[k3] = obj[k3];
          }
          return util2.objectValues(filtered);
        };
        util2.objectValues = (obj) => {
          return util2.objectKeys(obj).map(function(e3) {
            return obj[e3];
          });
        };
        util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
          const keys = [];
          for (const key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
        util2.find = (arr2, checker) => {
          for (const item of arr2) {
            if (checker(item))
              return item;
          }
          return void 0;
        };
        util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
        function joinValues(array, separator = " | ") {
          return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
        }
        util2.joinValues = joinValues;
        util2.jsonStringifyReplacer = (_24, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        };
      })(util || (util = {}));
      ZodParsedType = util.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set"
      ]);
      getParsedType = (data) => {
        const t4 = typeof data;
        switch (t4) {
          case "undefined":
            return ZodParsedType.undefined;
          case "string":
            return ZodParsedType.string;
          case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
          case "boolean":
            return ZodParsedType.boolean;
          case "function":
            return ZodParsedType.function;
          case "bigint":
            return ZodParsedType.bigint;
          case "object":
            if (Array.isArray(data)) {
              return ZodParsedType.array;
            }
            if (data === null) {
              return ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
              return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
              return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
              return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
              return ZodParsedType.date;
            }
            return ZodParsedType.object;
          default:
            return ZodParsedType.unknown;
        }
      };
      ZodIssueCode = util.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of"
      ]);
      quotelessJson = (obj) => {
        const json = JSON.stringify(obj, null, 2);
        return json.replace(/"([^"]+)":/g, "$1:");
      };
      ZodError = class extends Error {
        constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
          } else {
            this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
        }
        get errors() {
          return this.issues;
        }
        format(_mapper) {
          const mapper = _mapper || function(issue) {
            return issue.message;
          };
          const fieldErrors = { _errors: [] };
          const processError = (error2) => {
            for (const issue of error2.issues) {
              if (issue.code === "invalid_union") {
                issue.unionErrors.map(processError);
              } else if (issue.code === "invalid_return_type") {
                processError(issue.returnTypeError);
              } else if (issue.code === "invalid_arguments") {
                processError(issue.argumentsError);
              } else if (issue.path.length === 0) {
                fieldErrors._errors.push(mapper(issue));
              } else {
                let curr = fieldErrors;
                let i3 = 0;
                while (i3 < issue.path.length) {
                  const el = issue.path[i3];
                  const terminal = i3 === issue.path.length - 1;
                  if (!terminal) {
                    curr[el] = curr[el] || { _errors: [] };
                  } else {
                    curr[el] = curr[el] || { _errors: [] };
                    curr[el]._errors.push(mapper(issue));
                  }
                  curr = curr[el];
                  i3++;
                }
              }
            }
          };
          processError(this);
          return fieldErrors;
        }
        toString() {
          return this.message;
        }
        get message() {
          return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
          return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
            if (sub.path.length > 0) {
              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
              fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
              formErrors.push(mapper(sub));
            }
          }
          return { formErrors, fieldErrors };
        }
        get formErrors() {
          return this.flatten();
        }
      };
      ZodError.create = (issues) => {
        const error2 = new ZodError(issues);
        return error2;
      };
      errorMap = (issue, _ctx) => {
        let message;
        switch (issue.code) {
          case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
              message = "Required";
            } else {
              message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
          case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
          case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
          case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
          case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
          case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
          case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
          case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
          case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
          case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
              if ("startsWith" in issue.validation) {
                message = `Invalid input: must start with "${issue.validation.startsWith}"`;
              } else if ("endsWith" in issue.validation) {
                message = `Invalid input: must end with "${issue.validation.endsWith}"`;
              } else {
                util.assertNever(issue.validation);
              }
            } else if (issue.validation !== "regex") {
              message = `Invalid ${issue.validation}`;
            } else {
              message = "Invalid";
            }
            break;
          case ZodIssueCode.too_small:
            if (issue.type === "array")
              message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else if (issue.type === "date")
              message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;
            else
              message = "Invalid input";
            break;
          case ZodIssueCode.too_big:
            if (issue.type === "array")
              message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else if (issue.type === "date")
              message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;
            else
              message = "Invalid input";
            break;
          case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
          case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
          case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
          default:
            message = _ctx.defaultError;
            util.assertNever(issue);
        }
        return { message };
      };
      overrideErrorMap = errorMap;
      makeIssue = (params) => {
        const { data, path, errorMaps, issueData } = params;
        const fullPath = [...path, ...issueData.path || []];
        const fullIssue = {
          ...issueData,
          path: fullPath
        };
        let errorMessage = "";
        const maps = errorMaps.filter((m3) => !!m3).slice().reverse();
        for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message || errorMessage
        };
      };
      EMPTY_PATH = [];
      ParseStatus = class _ParseStatus {
        constructor() {
          this.value = "valid";
        }
        dirty() {
          if (this.value === "valid")
            this.value = "dirty";
        }
        abort() {
          if (this.value !== "aborted")
            this.value = "aborted";
        }
        static mergeArray(status, results) {
          const arrayValue = [];
          for (const s3 of results) {
            if (s3.status === "aborted")
              return INVALID;
            if (s3.status === "dirty")
              status.dirty();
            arrayValue.push(s3.value);
          }
          return { status: status.value, value: arrayValue };
        }
        static async mergeObjectAsync(status, pairs) {
          const syncPairs = [];
          for (const pair of pairs) {
            syncPairs.push({
              key: await pair.key,
              value: await pair.value
            });
          }
          return _ParseStatus.mergeObjectSync(status, syncPairs);
        }
        static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
              return INVALID;
            if (value.status === "aborted")
              return INVALID;
            if (key.status === "dirty")
              status.dirty();
            if (value.status === "dirty")
              status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
              finalObject[key.value] = value.value;
            }
          }
          return { status: status.value, value: finalObject };
        }
      };
      INVALID = Object.freeze({
        status: "aborted"
      });
      DIRTY = (value) => ({ status: "dirty", value });
      OK = (value) => ({ status: "valid", value });
      isAborted = (x2) => x2.status === "aborted";
      isDirty = (x2) => x2.status === "dirty";
      isValid = (x2) => x2.status === "valid";
      isAsync = (x2) => typeof Promise !== void 0 && x2 instanceof Promise;
      (function(errorUtil2) {
        errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
        errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
      })(errorUtil || (errorUtil = {}));
      ParseInputLazyPath = class {
        constructor(parent, value, path, key) {
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
        }
        get path() {
          return this._path.concat(this._key);
        }
      };
      handleResult = (ctx, result) => {
        if (isValid(result)) {
          return { success: true, data: result.value };
        } else {
          if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
          }
          const error2 = new ZodError(ctx.common.issues);
          return { success: false, error: error2 };
        }
      };
      ZodType = class {
        constructor(def) {
          this.spa = this.safeParseAsync;
          this.superRefine = this._refinement;
          this._def = def;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.default = this.default.bind(this);
          this.describe = this.describe.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
        }
        get description() {
          return this._def.description;
        }
        _getType(input) {
          return getParsedType(input.data);
        }
        _getOrReturnCtx(input, ctx) {
          return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          };
        }
        _processInputParams(input) {
          return {
            status: new ParseStatus(),
            ctx: {
              common: input.parent.common,
              data: input.data,
              parsedType: getParsedType(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent
            }
          };
        }
        _parseSync(input) {
          const result = this._parse(input);
          if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
          }
          return result;
        }
        _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
        }
        parse(data, params) {
          const result = this.safeParse(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        safeParse(data, params) {
          var _a2;
          const ctx = {
            common: {
              issues: [],
              async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
              contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
        }
        async parseAsync(data, params) {
          const result = await this.safeParseAsync(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        async safeParseAsync(data, params) {
          const ctx = {
            common: {
              issues: [],
              contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
              async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
          };
          const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
          const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
          return handleResult(ctx, result);
        }
        refine(check, message) {
          const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
              return { message };
            } else if (typeof message === "function") {
              return message(val);
            } else {
              return message;
            }
          };
          return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
              code: ZodIssueCode.custom,
              ...getIssueProperties(val)
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then((data) => {
                if (!data) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            if (!result) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        refinement(check, refinementData) {
          return this._refinement((val, ctx) => {
            if (!check(val)) {
              ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
              return false;
            } else {
              return true;
            }
          });
        }
        _refinement(refinement) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement }
          });
        }
        optional() {
          return ZodOptional.create(this);
        }
        nullable() {
          return ZodNullable.create(this);
        }
        nullish() {
          return this.optional().nullable();
        }
        array() {
          return ZodArray.create(this);
        }
        promise() {
          return ZodPromise.create(this);
        }
        or(option) {
          return ZodUnion.create([this, option]);
        }
        and(incoming) {
          return ZodIntersection.create(this, incoming);
        }
        transform(transform) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform }
          });
        }
        default(def) {
          const defaultValueFunc = typeof def === "function" ? def : () => def;
          return new ZodDefault({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
          });
        }
        brand() {
          return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(void 0)
          });
        }
        describe(description) {
          const This = this.constructor;
          return new This({
            ...this._def,
            description
          });
        }
        isOptional() {
          return this.safeParse(void 0).success;
        }
        isNullable() {
          return this.safeParse(null).success;
        }
      };
      cuidRegex = /^c[^\s-]{8,}$/i;
      uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
      emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
      ZodString = class _ZodString extends ZodType {
        constructor() {
          super(...arguments);
          this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
          });
          this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
          this.trim = () => new _ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }]
          });
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(
              ctx2,
              {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx2.parsedType
              }
              //
            );
            return INVALID;
          }
          const status = new ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.length < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.length > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "email") {
              if (!emailRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "email",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "uuid") {
              if (!uuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "uuid",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid") {
              if (!cuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "cuid",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "url") {
              try {
                new URL(input.data);
              } catch (_a2) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "url",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "regex") {
              check.regex.lastIndex = 0;
              const testResult = check.regex.test(input.data);
              if (!testResult) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  validation: "regex",
                  code: ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "trim") {
              input.data = input.data.trim();
            } else if (check.kind === "startsWith") {
              if (!input.data.startsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: { startsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "endsWith") {
              if (!input.data.endsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_string,
                  validation: { endsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        _addCheck(check) {
          return new _ZodString({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        email(message) {
          return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
        }
        url(message) {
          return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
        }
        uuid(message) {
          return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
        }
        cuid(message) {
          return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
        }
        regex(regex, message) {
          return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil.errToObj(message)
          });
        }
        startsWith(value, message) {
          return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil.errToObj(message)
          });
        }
        endsWith(value, message) {
          return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil.errToObj(message)
          });
        }
        min(minLength, message) {
          return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
          });
        }
        max(maxLength, message) {
          return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
          });
        }
        length(len, message) {
          return this.min(len, message).max(len, message);
        }
        get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      ZodString.create = (params) => {
        return new ZodString({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          ...processCreateParams(params)
        });
      };
      ZodNumber = class _ZodNumber extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.number,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          let ctx = void 0;
          const status = new ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "int") {
              if (!util.isInteger(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.invalid_type,
                  expected: "integer",
                  received: "float",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (floatSafeRemainder(input.data, check.value) !== 0) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new _ZodNumber({
            ...this._def,
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil.toString(message)
              }
            ]
          });
        }
        _addCheck(check) {
          return new _ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        int(message) {
          return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
          });
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
        get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int");
        }
      };
      ZodNumber.create = (params) => {
        return new ZodNumber({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          ...processCreateParams(params)
        });
      };
      ZodBigInt = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.bigint,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodBigInt.create = (params) => {
        return new ZodBigInt({
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          ...processCreateParams(params)
        });
      };
      ZodBoolean = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.boolean,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodBoolean.create = (params) => {
        return new ZodBoolean({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          ...processCreateParams(params)
        });
      };
      ZodDate = class _ZodDate extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.date,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_date
            });
            return INVALID;
          }
          const status = new ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.getTime() < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  message: check.message,
                  inclusive: true,
                  minimum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.getTime() > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  message: check.message,
                  inclusive: true,
                  maximum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else {
              util.assertNever(check);
            }
          }
          return {
            status: status.value,
            value: new Date(input.data.getTime())
          };
        }
        _addCheck(check) {
          return new _ZodDate({
            ...this._def,
            checks: [...this._def.checks, check]
          });
        }
        min(minDate, message) {
          return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
          });
        }
        max(maxDate, message) {
          return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
          });
        }
        get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min != null ? new Date(min) : null;
        }
        get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max != null ? new Date(max) : null;
        }
      };
      ZodDate.create = (params) => {
        return new ZodDate({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodDate,
          ...processCreateParams(params)
        });
      };
      ZodUndefined = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.undefined,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodUndefined.create = (params) => {
        return new ZodUndefined({
          typeName: ZodFirstPartyTypeKind.ZodUndefined,
          ...processCreateParams(params)
        });
      };
      ZodNull = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.null,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodNull.create = (params) => {
        return new ZodNull({
          typeName: ZodFirstPartyTypeKind.ZodNull,
          ...processCreateParams(params)
        });
      };
      ZodAny = class extends ZodType {
        constructor() {
          super(...arguments);
          this._any = true;
        }
        _parse(input) {
          return OK(input.data);
        }
      };
      ZodAny.create = (params) => {
        return new ZodAny({
          typeName: ZodFirstPartyTypeKind.ZodAny,
          ...processCreateParams(params)
        });
      };
      ZodUnknown = class extends ZodType {
        constructor() {
          super(...arguments);
          this._unknown = true;
        }
        _parse(input) {
          return OK(input.data);
        }
      };
      ZodUnknown.create = (params) => {
        return new ZodUnknown({
          typeName: ZodFirstPartyTypeKind.ZodUnknown,
          ...processCreateParams(params)
        });
      };
      ZodNever = class extends ZodType {
        _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
          });
          return INVALID;
        }
      };
      ZodNever.create = (params) => {
        return new ZodNever({
          typeName: ZodFirstPartyTypeKind.ZodNever,
          ...processCreateParams(params)
        });
      };
      ZodVoid = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.void,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return OK(input.data);
        }
      };
      ZodVoid.create = (params) => {
        return new ZodVoid({
          typeName: ZodFirstPartyTypeKind.ZodVoid,
          ...processCreateParams(params)
        });
      };
      ZodArray = class _ZodArray extends ZodType {
        _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def = this._def;
          if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.array,
              received: ctx.parsedType
            });
            return INVALID;
          }
          if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: def.minLength.value,
                type: "array",
                inclusive: true,
                message: def.minLength.message
              });
              status.dirty();
            }
          }
          if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: def.maxLength.value,
                type: "array",
                inclusive: true,
                message: def.maxLength.message
              });
              status.dirty();
            }
          }
          if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i3) => {
              return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i3));
            })).then((result2) => {
              return ParseStatus.mergeArray(status, result2);
            });
          }
          const result = ctx.data.map((item, i3) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i3));
          });
          return ParseStatus.mergeArray(status, result);
        }
        get element() {
          return this._def.type;
        }
        min(minLength, message) {
          return new _ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) }
          });
        }
        max(maxLength, message) {
          return new _ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) }
          });
        }
        length(len, message) {
          return this.min(len, message).max(len, message);
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      ZodArray.create = (schema, params) => {
        return new ZodArray({
          type: schema,
          minLength: null,
          maxLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray,
          ...processCreateParams(params)
        });
      };
      (function(objectUtil2) {
        objectUtil2.mergeShapes = (first, second) => {
          return {
            ...first,
            ...second
          };
        };
      })(objectUtil || (objectUtil = {}));
      AugmentFactory = (def) => (augmentation) => {
        return new ZodObject({
          ...def,
          shape: () => ({
            ...def.shape(),
            ...augmentation
          })
        });
      };
      ZodObject = class _ZodObject extends ZodType {
        constructor() {
          super(...arguments);
          this._cached = null;
          this.nonstrict = this.passthrough;
          this.augment = AugmentFactory(this._def);
          this.extend = AugmentFactory(this._def);
        }
        _getCached() {
          if (this._cached !== null)
            return this._cached;
          const shape = this._def.shape();
          const keys = util.objectKeys(shape);
          return this._cached = { shape, keys };
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx2.parsedType
            });
            return INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
              if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
              }
            }
          }
          const pairs = [];
          for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
              for (const key of extraKeys) {
                pairs.push({
                  key: { status: "valid", value: key },
                  value: { status: "valid", value: ctx.data[key] }
                });
              }
            } else if (unknownKeys === "strict") {
              if (extraKeys.length > 0) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.unrecognized_keys,
                  keys: extraKeys
                });
                status.dirty();
              }
            } else if (unknownKeys === "strip")
              ;
            else {
              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
          } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
              const value = ctx.data[key];
              pairs.push({
                key: { status: "valid", value: key },
                value: catchall._parse(
                  new ParseInputLazyPath(ctx, value, ctx.path, key)
                  //, ctx.child(key), value, getParsedType(value)
                ),
                alwaysSet: key in ctx.data
              });
            }
          }
          if (ctx.common.async) {
            return Promise.resolve().then(async () => {
              const syncPairs = [];
              for (const pair of pairs) {
                const key = await pair.key;
                syncPairs.push({
                  key,
                  value: await pair.value,
                  alwaysSet: pair.alwaysSet
                });
              }
              return syncPairs;
            }).then((syncPairs) => {
              return ParseStatus.mergeObjectSync(status, syncPairs);
            });
          } else {
            return ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get shape() {
          return this._def.shape();
        }
        strict(message) {
          errorUtil.errToObj;
          return new _ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
              errorMap: (issue, ctx) => {
                var _a2, _b, _c, _d;
                const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                if (issue.code === "unrecognized_keys")
                  return {
                    message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                  };
                return {
                  message: defaultError
                };
              }
            } : {}
          });
        }
        strip() {
          return new _ZodObject({
            ...this._def,
            unknownKeys: "strip"
          });
        }
        passthrough() {
          return new _ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
          });
        }
        setKey(key, schema) {
          return this.augment({ [key]: schema });
        }
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        merge(merging) {
          const merged = new _ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject
          });
          return merged;
        }
        catchall(index) {
          return new _ZodObject({
            ...this._def,
            catchall: index
          });
        }
        pick(mask) {
          const shape = {};
          util.objectKeys(mask).map((key) => {
            if (this.shape[key])
              shape[key] = this.shape[key];
          });
          return new _ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        omit(mask) {
          const shape = {};
          util.objectKeys(this.shape).map((key) => {
            if (util.objectKeys(mask).indexOf(key) === -1) {
              shape[key] = this.shape[key];
            }
          });
          return new _ZodObject({
            ...this._def,
            shape: () => shape
          });
        }
        deepPartial() {
          return deepPartialify(this);
        }
        partial(mask) {
          const newShape = {};
          if (mask) {
            util.objectKeys(this.shape).map((key) => {
              if (util.objectKeys(mask).indexOf(key) === -1) {
                newShape[key] = this.shape[key];
              } else {
                newShape[key] = this.shape[key].optional();
              }
            });
            return new _ZodObject({
              ...this._def,
              shape: () => newShape
            });
          } else {
            for (const key in this.shape) {
              const fieldSchema = this.shape[key];
              newShape[key] = fieldSchema.optional();
            }
          }
          return new _ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        required() {
          const newShape = {};
          for (const key in this.shape) {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
          return new _ZodObject({
            ...this._def,
            shape: () => newShape
          });
        }
        keyof() {
          return createZodEnum(util.objectKeys(this.shape));
        }
      };
      ZodObject.create = (shape, params) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      ZodObject.strictCreate = (shape, params) => {
        return new ZodObject({
          shape: () => shape,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      ZodObject.lazycreate = (shape, params) => {
        return new ZodObject({
          shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject,
          ...processCreateParams(params)
        });
      };
      ZodUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
            for (const result of results) {
              if (result.result.status === "valid") {
                return result.result;
              }
            }
            for (const result of results) {
              if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
              }
            }
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union,
              unionErrors
            });
            return INVALID;
          }
          if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              return {
                result: await option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              };
            })).then(handleResults);
          } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options) {
              const childCtx = {
                ...ctx,
                common: {
                  ...ctx.common,
                  issues: []
                },
                parent: null
              };
              const result = option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              });
              if (result.status === "valid") {
                return result;
              } else if (result.status === "dirty" && !dirty) {
                dirty = { result, ctx: childCtx };
              }
              if (childCtx.common.issues.length) {
                issues.push(childCtx.common.issues);
              }
            }
            if (dirty) {
              ctx.common.issues.push(...dirty.ctx.common.issues);
              return dirty.result;
            }
            const unionErrors = issues.map((issues2) => new ZodError(issues2));
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union,
              unionErrors
            });
            return INVALID;
          }
        }
        get options() {
          return this._def.options;
        }
      };
      ZodUnion.create = (types, params) => {
        return new ZodUnion({
          options: types,
          typeName: ZodFirstPartyTypeKind.ZodUnion,
          ...processCreateParams(params)
        });
      };
      ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.options.get(discriminatorValue);
          if (!option) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_union_discriminator,
              options: this.validDiscriminatorValues,
              path: [discriminator]
            });
            return INVALID;
          }
          if (ctx.common.async) {
            return option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          } else {
            return option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          }
        }
        get discriminator() {
          return this._def.discriminator;
        }
        get validDiscriminatorValues() {
          return Array.from(this.options.keys());
        }
        get options() {
          return this._def.options;
        }
        /**
         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
         * have a different value for each object in the union.
         * @param discriminator the name of the discriminator property
         * @param types an array of object schemas
         * @param params
         */
        static create(discriminator, types, params) {
          const options = /* @__PURE__ */ new Map();
          try {
            types.forEach((type) => {
              const discriminatorValue = type.shape[discriminator].value;
              options.set(discriminatorValue, type);
            });
          } catch (e3) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
          }
          if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
          }
          return new _ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams(params)
          });
        }
      };
      ZodIntersection = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
              return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_intersection_types
              });
              return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
              status.dirty();
            }
            return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
            return Promise.all([
              this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              }),
              this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              })
            ]).then(([left, right]) => handleParsed(left, right));
          } else {
            return handleParsed(this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }), this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }));
          }
        }
      };
      ZodIntersection.create = (left, right, params) => {
        return new ZodIntersection({
          left,
          right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection,
          ...processCreateParams(params)
        });
      };
      ZodTuple = class _ZodTuple extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.array,
              received: ctx.parsedType
            });
            return INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: this._def.items.length,
              inclusive: true,
              type: "array"
            });
            return INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: this._def.items.length,
              inclusive: true,
              type: "array"
            });
            status.dirty();
          }
          const items = ctx.data.map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
              return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          }).filter((x2) => !!x2);
          if (ctx.common.async) {
            return Promise.all(items).then((results) => {
              return ParseStatus.mergeArray(status, results);
            });
          } else {
            return ParseStatus.mergeArray(status, items);
          }
        }
        get items() {
          return this._def.items;
        }
        rest(rest) {
          return new _ZodTuple({
            ...this._def,
            rest
          });
        }
      };
      ZodTuple.create = (schemas, params) => {
        if (!Array.isArray(schemas)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple({
          items: schemas,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null,
          ...processCreateParams(params)
        });
      };
      ZodRecord = class _ZodRecord extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.object,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
            pairs.push({
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
            });
          }
          if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
          } else {
            return ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get element() {
          return this._def.valueType;
        }
        static create(first, second, third) {
          if (second instanceof ZodType) {
            return new _ZodRecord({
              keyType: first,
              valueType: second,
              typeName: ZodFirstPartyTypeKind.ZodRecord,
              ...processCreateParams(third)
            });
          }
          return new _ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
          });
        }
      };
      ZodMap = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.map,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
            };
          });
          if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async () => {
              for (const pair of pairs) {
                const key = await pair.key;
                const value = await pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                  return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                  status.dirty();
                }
                finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
            });
          } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs) {
              const key = pair.key;
              const value = pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          }
        }
      };
      ZodMap.create = (keyType, valueType, params) => {
        return new ZodMap({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap,
          ...processCreateParams(params)
        });
      };
      ZodSet = class _ZodSet extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.set,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const def = this._def;
          if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: def.minSize.value,
                type: "set",
                inclusive: true,
                message: def.minSize.message
              });
              status.dirty();
            }
          }
          if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: def.maxSize.value,
                type: "set",
                inclusive: true,
                message: def.maxSize.message
              });
              status.dirty();
            }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2) {
              if (element.status === "aborted")
                return INVALID;
              if (element.status === "dirty")
                status.dirty();
              parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i3) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i3)));
          if (ctx.common.async) {
            return Promise.all(elements).then((elements2) => finalizeSet(elements2));
          } else {
            return finalizeSet(elements);
          }
        }
        min(minSize, message) {
          return new _ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) }
          });
        }
        max(maxSize, message) {
          return new _ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) }
          });
        }
        size(size, message) {
          return this.min(size, message).max(size, message);
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      ZodSet.create = (valueType, params) => {
        return new ZodSet({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet,
          ...processCreateParams(params)
        });
      };
      ZodFunction = class _ZodFunction extends ZodType {
        constructor() {
          super(...arguments);
          this.validate = this.implement;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.function,
              received: ctx.parsedType
            });
            return INVALID;
          }
          function makeArgsIssue(args, error2) {
            return makeIssue({
              data: args,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                getErrorMap(),
                errorMap
              ].filter((x2) => !!x2),
              issueData: {
                code: ZodIssueCode.invalid_arguments,
                argumentsError: error2
              }
            });
          }
          function makeReturnsIssue(returns, error2) {
            return makeIssue({
              data: returns,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                getErrorMap(),
                errorMap
              ].filter((x2) => !!x2),
              issueData: {
                code: ZodIssueCode.invalid_return_type,
                returnTypeError: error2
              }
            });
          }
          const params = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args) => {
              const error2 = new ZodError([]);
              const parsedArgs = await this._def.args.parseAsync(args, params).catch((e3) => {
                error2.addIssue(makeArgsIssue(args, e3));
                throw error2;
              });
              const result = await fn(...parsedArgs);
              const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e3) => {
                error2.addIssue(makeReturnsIssue(result, e3));
                throw error2;
              });
              return parsedReturns;
            });
          } else {
            return OK((...args) => {
              const parsedArgs = this._def.args.safeParse(args, params);
              if (!parsedArgs.success) {
                throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
              }
              const result = fn(...parsedArgs.data);
              const parsedReturns = this._def.returns.safeParse(result, params);
              if (!parsedReturns.success) {
                throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
              }
              return parsedReturns.data;
            });
          }
        }
        parameters() {
          return this._def.args;
        }
        returnType() {
          return this._def.returns;
        }
        args(...items) {
          return new _ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
          });
        }
        returns(returnType) {
          return new _ZodFunction({
            ...this._def,
            returns: returnType
          });
        }
        implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        static create(args, returns, params) {
          return new _ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
          });
        }
      };
      ZodLazy = class extends ZodType {
        get schema() {
          return this._def.getter();
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
      };
      ZodLazy.create = (getter, params) => {
        return new ZodLazy({
          getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy,
          ...processCreateParams(params)
        });
      };
      ZodLiteral = class extends ZodType {
        _parse(input) {
          if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_literal,
              expected: this._def.value
            });
            return INVALID;
          }
          return { status: "valid", value: input.data };
        }
        get value() {
          return this._def.value;
        }
      };
      ZodLiteral.create = (value, params) => {
        return new ZodLiteral({
          value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral,
          ...processCreateParams(params)
        });
      };
      ZodEnum = class extends ZodType {
        _parse(input) {
          if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
              expected: util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodIssueCode.invalid_type
            });
            return INVALID;
          }
          if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
              received: ctx.data,
              code: ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return INVALID;
          }
          return OK(input.data);
        }
        get options() {
          return this._def.values;
        }
        get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
      };
      ZodEnum.create = createZodEnum;
      ZodNativeEnum = class extends ZodType {
        _parse(input) {
          const nativeEnumValues = util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
              expected: util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodIssueCode.invalid_type
            });
            return INVALID;
          }
          if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
              received: ctx.data,
              code: ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return INVALID;
          }
          return OK(input.data);
        }
        get enum() {
          return this._def.values;
        }
      };
      ZodNativeEnum.create = (values, params) => {
        return new ZodNativeEnum({
          values,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
          ...processCreateParams(params)
        });
      };
      ZodPromise = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.promise,
              received: ctx.parsedType
            });
            return INVALID;
          }
          const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
          return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            });
          }));
        }
      };
      ZodPromise.create = (schema, params) => {
        return new ZodPromise({
          type: schema,
          typeName: ZodFirstPartyTypeKind.ZodPromise,
          ...processCreateParams(params)
        });
      };
      ZodEffects = class extends ZodType {
        innerType() {
          return this._def.schema;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
              return Promise.resolve(processed).then((processed2) => {
                return this._def.schema._parseAsync({
                  data: processed2,
                  path: ctx.path,
                  parent: ctx
                });
              });
            } else {
              return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
              });
            }
          }
          const checkCtx = {
            addIssue: (arg) => {
              addIssueToContext(ctx, arg);
              if (arg.fatal) {
                status.abort();
              } else {
                status.dirty();
              }
            },
            get path() {
              return ctx.path;
            }
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
              const result = effect.refinement(acc, checkCtx);
              if (ctx.common.async) {
                return Promise.resolve(result);
              }
              if (result instanceof Promise) {
                throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
              }
              return acc;
            };
            if (ctx.common.async === false) {
              const inner = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              executeRefinement(inner.value);
              return { status: status.value, value: inner.value };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
                if (inner.status === "aborted")
                  return INVALID;
                if (inner.status === "dirty")
                  status.dirty();
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value };
                });
              });
            }
          }
          if (effect.type === "transform") {
            if (ctx.common.async === false) {
              const base = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (!isValid(base))
                return base;
              const result = effect.transform(base.value, checkCtx);
              if (result instanceof Promise) {
                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
              }
              return { status: status.value, value: result };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
                if (!isValid(base))
                  return base;
                return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
              });
            }
          }
          util.assertNever(effect);
        }
      };
      ZodEffects.create = (schema, effect, params) => {
        return new ZodEffects({
          schema,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect,
          ...processCreateParams(params)
        });
      };
      ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
        return new ZodEffects({
          schema,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          ...processCreateParams(params)
        });
      };
      ZodOptional = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.undefined) {
            return OK(void 0);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      ZodOptional.create = (type, params) => {
        return new ZodOptional({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional,
          ...processCreateParams(params)
        });
      };
      ZodNullable = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === ZodParsedType.null) {
            return OK(null);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      ZodNullable.create = (type, params) => {
        return new ZodNullable({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable,
          ...processCreateParams(params)
        });
      };
      ZodDefault = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        removeDefault() {
          return this._def.innerType;
        }
      };
      ZodDefault.create = (type, params) => {
        return new ZodOptional({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional,
          ...processCreateParams(params)
        });
      };
      ZodNaN = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: ZodParsedType.nan,
              received: ctx.parsedType
            });
            return INVALID;
          }
          return { status: "valid", value: input.data };
        }
      };
      ZodNaN.create = (params) => {
        return new ZodNaN({
          typeName: ZodFirstPartyTypeKind.ZodNaN,
          ...processCreateParams(params)
        });
      };
      BRAND = Symbol("zod_brand");
      ZodBranded = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        unwrap() {
          return this._def.type;
        }
      };
      custom = (check, params = {}, fatal) => {
        if (check)
          return ZodAny.create().superRefine((data, ctx) => {
            if (!check(data)) {
              const p3 = typeof params === "function" ? params(data) : params;
              const p22 = typeof p3 === "string" ? { message: p3 } : p3;
              ctx.addIssue({ code: "custom", ...p22, fatal });
            }
          });
        return ZodAny.create();
      };
      late = {
        object: ZodObject.lazycreate
      };
      (function(ZodFirstPartyTypeKind2) {
        ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
      instanceOfType = (cls, params = {
        message: `Input not instance of ${cls.name}`
      }) => custom((data) => data instanceof cls, params, true);
      stringType = ZodString.create;
      numberType = ZodNumber.create;
      nanType = ZodNaN.create;
      bigIntType = ZodBigInt.create;
      booleanType = ZodBoolean.create;
      dateType = ZodDate.create;
      undefinedType = ZodUndefined.create;
      nullType = ZodNull.create;
      anyType = ZodAny.create;
      unknownType = ZodUnknown.create;
      neverType = ZodNever.create;
      voidType = ZodVoid.create;
      arrayType = ZodArray.create;
      objectType = ZodObject.create;
      strictObjectType = ZodObject.strictCreate;
      unionType = ZodUnion.create;
      discriminatedUnionType = ZodDiscriminatedUnion.create;
      intersectionType = ZodIntersection.create;
      tupleType = ZodTuple.create;
      recordType = ZodRecord.create;
      mapType = ZodMap.create;
      setType = ZodSet.create;
      functionType = ZodFunction.create;
      lazyType = ZodLazy.create;
      literalType = ZodLiteral.create;
      enumType = ZodEnum.create;
      nativeEnumType = ZodNativeEnum.create;
      promiseType = ZodPromise.create;
      effectsType = ZodEffects.create;
      optionalType = ZodOptional.create;
      nullableType = ZodNullable.create;
      preprocessType = ZodEffects.createWithPreprocess;
      ostring = () => stringType().optional();
      onumber = () => numberType().optional();
      oboolean = () => booleanType().optional();
      NEVER = INVALID;
      mod = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        getParsedType,
        ZodParsedType,
        defaultErrorMap: errorMap,
        setErrorMap,
        getErrorMap,
        makeIssue,
        EMPTY_PATH,
        addIssueToContext,
        ParseStatus,
        INVALID,
        DIRTY,
        OK,
        isAborted,
        isDirty,
        isValid,
        isAsync,
        ZodType,
        ZodString,
        ZodNumber,
        ZodBigInt,
        ZodBoolean,
        ZodDate,
        ZodUndefined,
        ZodNull,
        ZodAny,
        ZodUnknown,
        ZodNever,
        ZodVoid,
        ZodArray,
        get objectUtil() {
          return objectUtil;
        },
        ZodObject,
        ZodUnion,
        ZodDiscriminatedUnion,
        ZodIntersection,
        ZodTuple,
        ZodRecord,
        ZodMap,
        ZodSet,
        ZodFunction,
        ZodLazy,
        ZodLiteral,
        ZodEnum,
        ZodNativeEnum,
        ZodPromise,
        ZodEffects,
        ZodTransformer: ZodEffects,
        ZodOptional,
        ZodNullable,
        ZodDefault,
        ZodNaN,
        BRAND,
        ZodBranded,
        custom,
        Schema: ZodType,
        ZodSchema: ZodType,
        late,
        get ZodFirstPartyTypeKind() {
          return ZodFirstPartyTypeKind;
        },
        any: anyType,
        array: arrayType,
        bigint: bigIntType,
        boolean: booleanType,
        date: dateType,
        discriminatedUnion: discriminatedUnionType,
        effect: effectsType,
        "enum": enumType,
        "function": functionType,
        "instanceof": instanceOfType,
        intersection: intersectionType,
        lazy: lazyType,
        literal: literalType,
        map: mapType,
        nan: nanType,
        nativeEnum: nativeEnumType,
        never: neverType,
        "null": nullType,
        nullable: nullableType,
        number: numberType,
        object: objectType,
        oboolean,
        onumber,
        optional: optionalType,
        ostring,
        preprocess: preprocessType,
        promise: promiseType,
        record: recordType,
        set: setType,
        strictObject: strictObjectType,
        string: stringType,
        transformer: effectsType,
        tuple: tupleType,
        "undefined": undefinedType,
        union: unionType,
        unknown: unknownType,
        "void": voidType,
        NEVER,
        ZodIssueCode,
        quotelessJson,
        ZodError
      });
    }
  });

  // shared/js/ui/environment-check.js
  function isEnvironment(platform2) {
    return document.body.classList.contains(`environment--${platform2}`);
  }
  function currentPlatform() {
    const matchingClass = [...document.body.classList].find((x2) => x2.startsWith("environment--"));
    if (matchingClass) {
      const platform2 = matchingClass.slice(13);
      if (isValidPlatform(platform2)) {
        return platform2;
      }
    }
    return null;
  }
  function isValidPlatform(name) {
    if (!name)
      throw new Error(`not a valid platform name ${name}`);
    const names = ["ios", "android", "macos", "browser", "windows"];
    if (names.includes(name)) {
      return true;
    }
    throw new Error("nope!");
  }
  function platformSwitch(mapping) {
    if (!lastKnownPlatformName)
      lastKnownPlatformName = currentPlatform();
    if (!lastKnownPlatformName)
      throw new Error("could not determine the current platform.");
    if (lastKnownPlatformName in mapping) {
      return mapping[lastKnownPlatformName]();
    }
    if ("default" in mapping) {
      return mapping.default();
    }
    throw new Error("did not expect to get here - use a default!");
  }
  var isIOS, isAndroid, isBrowser, isWindows, isMacos, lastKnownPlatformName;
  var init_environment_check = __esm({
    "shared/js/ui/environment-check.js"() {
      "use strict";
      isIOS = () => isEnvironment("ios");
      isAndroid = () => isEnvironment("android");
      isBrowser = () => isEnvironment("browser");
      isWindows = () => isEnvironment("windows");
      isMacos = () => isEnvironment("macos");
    }
  });

  // schema/__generated__/schema.parsers.mjs
  var protectionsDisabledReasonSchema, ownedByFirstPartyReasonSchema, ruleExceptionReasonSchema, adClickAttributionReasonSchema, otherThirdPartyRequestReasonSchema, stateBlockedSchema, stateAllowedSchema, extensionMessageGetPrivacyDashboardDataSchema, emailProtectionUserDataSchema, protectionsStatusSchema, localeSettingsSchema, parentEntitySchema, fireButtonSchema, searchSchema, breakageReportRequestSchema, setListOptionsSchema, windowsIncomingVisibilitySchema, cookiePromptManagementStatusSchema, refreshAliasResponseSchema, extensionMessageSetListOptionsSchema, fireOptionSchema, primaryScreenSchema, eventOriginSchema, detectedRequestSchema, tabSchema, breakageReportSchema, fireButtonDataSchema, remoteFeatureSettingsSchema, setProtectionParamsSchema, requestDataSchema, getPrivacyDashboardDataSchema, windowsViewModelSchema, windowsIncomingViewModelSchema, windowsIncomingMessageSchema, apiSchema;
  var init_schema_parsers = __esm({
    "schema/__generated__/schema.parsers.mjs"() {
      "use strict";
      init_lib();
      protectionsDisabledReasonSchema = mod.literal("protectionDisabled");
      ownedByFirstPartyReasonSchema = mod.literal("ownedByFirstParty");
      ruleExceptionReasonSchema = mod.literal("ruleException");
      adClickAttributionReasonSchema = mod.literal("adClickAttribution");
      otherThirdPartyRequestReasonSchema = mod.literal("otherThirdPartyRequest");
      stateBlockedSchema = mod.object({
        blocked: mod.record(mod.unknown())
      });
      stateAllowedSchema = mod.object({
        allowed: mod.object({
          reason: mod.union([protectionsDisabledReasonSchema, ownedByFirstPartyReasonSchema, ruleExceptionReasonSchema, adClickAttributionReasonSchema, otherThirdPartyRequestReasonSchema])
        })
      });
      extensionMessageGetPrivacyDashboardDataSchema = mod.object({
        messageType: mod.literal("getPrivacyDashboardData"),
        options: mod.object({
          tabId: mod.number().optional().nullable()
        })
      });
      emailProtectionUserDataSchema = mod.object({
        nextAlias: mod.string()
      });
      protectionsStatusSchema = mod.object({
        unprotectedTemporary: mod.boolean(),
        enabledFeatures: mod.array(mod.string()),
        allowlisted: mod.boolean(),
        denylisted: mod.boolean()
      });
      localeSettingsSchema = mod.object({
        locale: mod.string()
      });
      parentEntitySchema = mod.object({
        displayName: mod.string(),
        prevalence: mod.number()
      });
      fireButtonSchema = mod.object({
        enabled: mod.boolean()
      });
      searchSchema = mod.object({
        term: mod.string()
      });
      breakageReportRequestSchema = mod.object({
        category: mod.string().optional(),
        description: mod.string().optional()
      });
      setListOptionsSchema = mod.object({
        lists: mod.array(mod.object({
          list: mod.union([mod.literal("allowlisted"), mod.literal("denylisted")]),
          domain: mod.string(),
          value: mod.boolean()
        }))
      });
      windowsIncomingVisibilitySchema = mod.object({
        Feature: mod.literal("PrivacyDashboard"),
        Name: mod.literal("VisibilityChanged"),
        Data: mod.object({
          isVisible: mod.boolean()
        })
      });
      cookiePromptManagementStatusSchema = mod.object({
        consentManaged: mod.boolean(),
        cosmetic: mod.boolean().optional(),
        optoutFailed: mod.boolean().optional(),
        selftestFailed: mod.boolean().optional(),
        configurable: mod.boolean().optional()
      });
      refreshAliasResponseSchema = mod.object({
        personalAddress: mod.string(),
        privateAddress: mod.string()
      });
      extensionMessageSetListOptionsSchema = mod.object({
        messageType: mod.literal("setLists"),
        options: setListOptionsSchema
      });
      fireOptionSchema = mod.record(mod.unknown()).and(mod.object({
        name: mod.union([mod.literal("CurrentSite"), mod.literal("LastHour"), mod.literal("Last24Hour"), mod.literal("Last7days"), mod.literal("Last4Weeks"), mod.literal("AllTime")]),
        selected: mod.boolean().optional(),
        options: mod.object({
          since: mod.number().optional(),
          origins: mod.array(mod.string()).optional()
        }),
        descriptionStats: mod.object({
          clearHistory: mod.boolean(),
          site: mod.string().optional(),
          duration: mod.union([mod.literal("hour"), mod.literal("day"), mod.literal("week"), mod.literal("month"), mod.literal("all")]),
          openTabs: mod.number(),
          cookies: mod.number(),
          pinnedTabs: mod.number()
        })
      }));
      primaryScreenSchema = mod.object({
        layout: mod.union([mod.literal("default"), mod.literal("highlighted-protections-toggle")])
      });
      eventOriginSchema = mod.object({
        screen: mod.union([mod.literal("primaryScreen"), mod.literal("breakageForm")])
      });
      detectedRequestSchema = mod.object({
        url: mod.string(),
        eTLDplus1: mod.string().optional(),
        pageUrl: mod.string(),
        state: mod.union([stateBlockedSchema, stateAllowedSchema]),
        entityName: mod.string().optional(),
        category: mod.string().optional(),
        prevalence: mod.number().optional(),
        ownerName: mod.string().optional()
      });
      tabSchema = mod.object({
        id: mod.number().optional(),
        url: mod.string(),
        upgradedHttps: mod.boolean(),
        protections: protectionsStatusSchema,
        localeSettings: localeSettingsSchema.optional(),
        parentEntity: parentEntitySchema.optional(),
        specialDomainName: mod.string().optional()
      });
      breakageReportSchema = mod.object({
        request: breakageReportRequestSchema.optional(),
        response: mod.record(mod.unknown()).optional()
      });
      fireButtonDataSchema = mod.object({
        options: mod.array(fireOptionSchema)
      });
      remoteFeatureSettingsSchema = mod.object({
        primaryScreen: primaryScreenSchema.optional()
      });
      setProtectionParamsSchema = mod.object({
        isProtected: mod.boolean(),
        eventOrigin: eventOriginSchema
      });
      requestDataSchema = mod.object({
        requests: mod.array(detectedRequestSchema),
        installedSurrogates: mod.array(mod.string()).optional()
      });
      getPrivacyDashboardDataSchema = mod.object({
        requestData: requestDataSchema,
        emailProtectionUserData: emailProtectionUserDataSchema.optional(),
        tab: tabSchema,
        fireButton: fireButtonSchema.optional()
      });
      windowsViewModelSchema = mod.object({
        protections: protectionsStatusSchema,
        rawRequestData: requestDataSchema,
        tabUrl: mod.string(),
        upgradedHttps: mod.boolean(),
        parentEntity: parentEntitySchema.optional(),
        permissions: mod.array(mod.unknown()).optional(),
        certificates: mod.array(mod.unknown()).optional(),
        cookiePromptManagementStatus: cookiePromptManagementStatusSchema.optional()
      });
      windowsIncomingViewModelSchema = mod.object({
        Feature: mod.literal("PrivacyDashboard"),
        Name: mod.literal("ViewModelUpdated"),
        Data: windowsViewModelSchema
      });
      windowsIncomingMessageSchema = mod.union([windowsIncomingVisibilitySchema, windowsIncomingViewModelSchema]);
      apiSchema = mod.object({
        "request-data": requestDataSchema,
        "extension-message-get-privacy-dashboard-data": extensionMessageGetPrivacyDashboardDataSchema,
        "get-privacy-dashboard-data": getPrivacyDashboardDataSchema.optional(),
        "search-message": searchSchema.optional(),
        "breakage-report": breakageReportSchema,
        "set-list": setListOptionsSchema.optional(),
        "windows-incoming-message": windowsIncomingMessageSchema.optional(),
        "locale-settings": localeSettingsSchema.optional(),
        "refresh-alias-response": refreshAliasResponseSchema.optional(),
        exe: extensionMessageSetListOptionsSchema.optional(),
        "fire-button": fireButtonDataSchema.optional(),
        "feature-settings": remoteFeatureSettingsSchema.optional(),
        "set-protection": setProtectionParamsSchema.optional()
      });
    }
  });

  // shared/js/browser/common.js
  function setupMutationObserver(callback) {
    const bufferHeight = 200;
    let lastHeight;
    const mutationObserver = new MutationObserver(() => {
      const contentHeight = getContentHeight();
      if (!contentHeight)
        return;
      const height = Math.min(window.screen.height - bufferHeight, contentHeight);
      if (lastHeight === height)
        return;
      lastHeight = height;
      callback(height);
    });
    const config = { childList: true, attributes: true, subtree: true };
    mutationObserver.observe(window.document, config);
  }
  function swapThemeTo(theme) {
    document.body.classList.remove(`body--theme-${oppositeTheme[theme]}`);
    document.body.classList.add(`body--theme-${theme}`);
  }
  function updateTheme() {
    if (explicitlySetTheme) {
      swapThemeTo(explicitlySetTheme);
    } else {
      swapThemeTo(detectedTheme);
    }
  }
  function setupColorScheme() {
    const query = window.matchMedia("(prefers-color-scheme: dark)");
    if (query?.matches) {
      detectedTheme = DARK_THEME;
    }
    if (query.addEventListener) {
      query?.addEventListener("change", (event) => {
        detectedTheme = event.matches ? DARK_THEME : LIGHT_THEME;
        updateTheme();
      });
    } else if ("addListener" in query) {
      query.addListener((event) => {
        detectedTheme = event.matches ? DARK_THEME : LIGHT_THEME;
        updateTheme();
      });
    }
    updateTheme();
    return (theme = "") => {
      theme = theme.trim().toLowerCase();
      if (theme === LIGHT_THEME || theme === DARK_THEME) {
        explicitlySetTheme = theme;
      } else {
        explicitlySetTheme = "";
      }
      updateTheme();
    };
  }
  function assert(condition, message = "") {
    if (!condition) {
      if (!message) {
        throw new Error("invariant");
      }
      throw new Error(message);
    }
  }
  var getContentHeight, DARK_THEME, LIGHT_THEME, explicitlySetTheme, detectedTheme, oppositeTheme, Msg, SetListsMessage, SubmitBrokenSiteReportMessage, UpdatePermissionMessage, CloseMessage, CheckBrokenSiteReportHandledMessage, RefreshEmailAliasMessage, OpenOptionsMessage, SearchMessage, OpenSettingsMessages, BurnMessage, FetchBurnOptions, SetBurnDefaultOption;
  var init_common = __esm({
    "shared/js/browser/common.js"() {
      "use strict";
      getContentHeight = () => {
        const $openSubview = window.document.querySelector("#popup-container.sliding-subview--open > section:last-child > div");
        const $rootSubview = window.document.querySelector("#popup-container.sliding-subview--root > section:first-child > div");
        return ($openSubview || $rootSubview)?.scrollHeight;
      };
      DARK_THEME = "dark";
      LIGHT_THEME = "light";
      explicitlySetTheme = "";
      detectedTheme = LIGHT_THEME;
      oppositeTheme = {
        [LIGHT_THEME]: DARK_THEME,
        [DARK_THEME]: LIGHT_THEME
      };
      Msg = class {
        toJSON() {
          return {
            ...this,
            kind: this.constructor.name
          };
        }
      };
      SetListsMessage = class extends Msg {
        /**
         * @param {object} params
         * @param {Array<{ list: "allowlisted" | "denylisted", domain: string, value: boolean}>} params.lists
         * @param {import('../../../schema/__generated__/schema.types').EventOrigin} params.eventOrigin
         */
        constructor(params) {
          super();
          this.lists = params.lists;
          this.eventOrigin = params.eventOrigin;
        }
      };
      SubmitBrokenSiteReportMessage = class extends Msg {
        /**
         * @param {object} params
         * @param {string} params.category
         * @param {string} params.description
         */
        constructor(params) {
          super();
          this.category = params.category;
          this.description = params.description;
        }
      };
      UpdatePermissionMessage = class extends Msg {
        /**
         * @param {object} params
         * @param {string} params.id
         * @param {string} params.value
         */
        constructor(params) {
          super();
          this.id = params.id;
          this.value = params.value;
        }
      };
      CloseMessage = class extends Msg {
      };
      CheckBrokenSiteReportHandledMessage = class extends Msg {
      };
      RefreshEmailAliasMessage = class extends Msg {
      };
      OpenOptionsMessage = class extends Msg {
      };
      SearchMessage = class extends Msg {
        /**
         * @param {object} params
         * @param {string} params.term
         */
        constructor(params) {
          super();
          this.term = params.term;
        }
      };
      OpenSettingsMessages = class extends Msg {
        /**
         * @param {object} params
         * @param {'cpm'} params.target
         */
        constructor(params) {
          super();
          this.target = params.target;
        }
      };
      BurnMessage = class extends Msg {
        constructor(opts) {
          super();
          Object.assign(this, opts);
        }
      };
      FetchBurnOptions = class extends Msg {
      };
      SetBurnDefaultOption = class extends Msg {
        constructor(name) {
          super();
          this.defaultOption = name;
        }
      };
    }
  });

  // shared/js/ui/models/mixins/normalize-company-name.mjs
  function normalizeCompanyName(companyName) {
    return (companyName || "").toLowerCase().replace(/\.[a-z]+$/i, "").replace(/[^a-z0-9]/g, "");
  }
  function removeTLD(entityName) {
    return entityName.replace(/\.[a-z]+$/i, "");
  }
  var init_normalize_company_name = __esm({
    "shared/js/ui/models/mixins/normalize-company-name.mjs"() {
      "use strict";
    }
  });

  // shared/js/browser/utils/protections.mjs
  var Protections;
  var init_protections = __esm({
    "shared/js/browser/utils/protections.mjs"() {
      "use strict";
      Protections = class _Protections {
        /**
         * @param {boolean} unprotectedTemporary
         * @param {string[]} enabledFeatures
         * @param {boolean} allowlisted
         * @param {boolean} denylisted
         */
        constructor(unprotectedTemporary, enabledFeatures, allowlisted = false, denylisted = false) {
          this.unprotectedTemporary = unprotectedTemporary;
          this.enabledFeatures = enabledFeatures;
          this.allowlisted = allowlisted;
          this.denylisted = denylisted;
        }
        static default() {
          return new _Protections(false, ["contentBlocking"], false, false);
        }
      };
    }
  });

  // shared/js/browser/utils/request-details.mjs
  function createRequestDetails(requests, installedSurrogates) {
    const output2 = new RequestDetails(installedSurrogates);
    for (const request of requests) {
      output2.all.addRequest(request);
      if ("blocked" in request.state) {
        output2.blocked.addRequest(request);
      }
      if ("allowed" in request.state) {
        const reason = request.state.allowed.reason;
        if (reason in output2.allowed) {
          output2.allowed[request.state.allowed.reason].addRequest(request);
        }
      }
    }
    return output2;
  }
  var createTabData, AggregatedCompanyResponseData, states, RequestDetails, AggregateCompanyData, TrackerUrl;
  var init_request_details = __esm({
    "shared/js/browser/utils/request-details.mjs"() {
      "use strict";
      init_normalize_company_name();
      init_schema_parsers();
      init_protections();
      createTabData = (tabUrl, upgradedHttps4, protections4, rawRequestData) => {
        let domain;
        try {
          domain = new URL(tabUrl).hostname.replace(/^www\./, "");
        } catch (e3) {
          domain = "unknown";
        }
        return {
          id: void 0,
          url: tabUrl,
          status: "complete",
          upgradedHttps: upgradedHttps4,
          specialDomainName: void 0,
          domain,
          protections: protections4,
          locale: null,
          requestDetails: createRequestDetails(rawRequestData.requests, rawRequestData.installedSurrogates || []),
          parentEntity: void 0,
          permissions: void 0,
          cookiePromptManagementStatus: void 0,
          ctaScreens: void 0,
          search: void 0,
          emailProtection: void 0,
          isPendingUpdates: void 0,
          certificate: void 0,
          platformLimitations: void 0,
          error: void 0
        };
      };
      AggregatedCompanyResponseData = class {
        constructor() {
          /** @type {number} */
          __publicField(this, "entitiesCount", 0);
          /** @type {number} */
          __publicField(this, "requestCount", 0);
          /** @type {Record<string, AggregateCompanyData>} */
          __publicField(this, "entities", {});
        }
        /**
         * @param {import('../../../../schema/__generated__/schema.types.js').DetectedRequest} request
         */
        addRequest(request) {
          let hostname;
          try {
            hostname = new URL(request.url).hostname;
          } catch (e3) {
            hostname = request.url;
          }
          let displayName;
          const urlHostname = hostname.replace(/^www\./, "");
          if (request.entityName) {
            if (request.entityName === request.eTLDplus1) {
              displayName = request.eTLDplus1;
            } else {
              displayName = removeTLD(request.entityName);
            }
          } else {
            displayName = request.eTLDplus1 || request.url;
          }
          if (!this.entities[displayName]) {
            this.entities[displayName] = new AggregateCompanyData(request.ownerName, displayName, request.prevalence ?? 0);
          }
          this.entities[displayName].addUrl(urlHostname, request.category);
          this.entitiesCount = Object.keys(this.entities).length;
          this.requestCount += 1;
        }
        /**
         * Returns a list of AggregateCompanyData sorted by the entity prevalence
         * @returns {AggregateCompanyData[]}
         */
        sortedByPrevalence() {
          return [...Object.values(this.entities)].sort((a3, b3) => b3.prevalence - a3.prevalence);
        }
      };
      states = /** @type {const} */
      {
        /* 01 */
        protectionsOn: "protectionsOn",
        /* 02 */
        protectionsOn_blocked: "protectionsOn_blocked",
        /* 03 */
        protectionsOn_blocked_allowedTrackers: "protectionsOn_blocked_allowedTrackers",
        /* 04 */
        protectionsOn_blocked_allowedNonTrackers: "protectionsOn_blocked_allowedNonTrackers",
        /* 05 */
        protectionsOn_blocked_allowedTrackers_allowedNonTrackers: "protectionsOn_blocked_allowedTrackers_allowedNonTrackers",
        /* 06 */
        protectionsOn_allowedTrackers: "protectionsOn_allowedTrackers",
        /* 07 */
        protectionsOn_allowedNonTrackers: "protectionsOn_allowedNonTrackers",
        /* 08 */
        protectionsOn_allowedTrackers_allowedNonTrackers: "protectionsOn_allowedTrackers_allowedNonTrackers",
        /* 09 */
        protectionsOff: "protectionsOff",
        /* 010 */
        protectionsOff_allowedTrackers: "protectionsOff_allowedTrackers",
        /* 011 */
        protectionsOff_allowedNonTrackers: "protectionsOff_allowedNonTrackers",
        /* 012 */
        protectionsOff_allowedTrackers_allowedNonTrackers: "protectionsOff_allowedTrackers_allowedNonTrackers"
      };
      RequestDetails = class {
        /**
         * @param {string[]} surrogates - any installed surrogates, just the domains
         */
        constructor(surrogates) {
          __publicField(this, "surrogates");
          __publicField(this, "all", new AggregatedCompanyResponseData());
          __publicField(this, "blocked", new AggregatedCompanyResponseData());
          __publicField(this, "allowed", {
            adClickAttribution: new AggregatedCompanyResponseData(),
            ownedByFirstParty: new AggregatedCompanyResponseData(),
            ruleException: new AggregatedCompanyResponseData(),
            protectionDisabled: new AggregatedCompanyResponseData(),
            otherThirdPartyRequest: new AggregatedCompanyResponseData()
          });
          this.surrogates = surrogates;
        }
        /**
         * Loop over every seen entity
         * @param {(entity: AggregateCompanyData) => void} fn
         */
        forEachEntity(fn) {
          for (const entity of Object.values(this.all.entities)) {
            fn(entity);
          }
        }
        /**
         * @returns {number}
         */
        blockedCount() {
          return this.blocked.entitiesCount;
        }
        /**
         * The number of entities observed that had 'special' requests.
         *
         * 'special' means that a request was classified as a tracker, but we didn't block it
         * for any given reason. Note: This list excludes 'non-special' requests such as 3rd party
         * requests not classified as trackers
         *
         * @returns {number}
         */
        allowedSpecialCount() {
          return this.allowed.adClickAttribution.entitiesCount + this.allowed.ownedByFirstParty.entitiesCount + this.allowed.ruleException.entitiesCount + this.allowed.protectionDisabled.entitiesCount;
        }
        /**
         * The number of entities observed that had 'non-special' requests.
         *
         * 'non-special' means a request that was observed, but it was *not* classified as a tracker
         *
         * @returns {number}
         */
        allowedNonSpecialCount() {
          return this.allowed.otherThirdPartyRequest.entitiesCount;
        }
        /**
         * Create a list of company names, excluding any 'unknown' ones.
         * @returns {string[]}
         */
        blockedCompanyNames() {
          const output2 = [];
          for (const entity of Object.values(this.blocked.entities)) {
            if (entity.name === "unknown")
              continue;
            output2.push(entity);
          }
          return output2.sort((a3, b3) => b3.prevalence - a3.prevalence).map((entity) => entity.displayName);
        }
        /**
         * @param {boolean} protectionsEnabled
         * @param {(keyof states & string)[]} states
         */
        matches(protectionsEnabled, states2) {
          const curr = this.state(protectionsEnabled);
          return states2.includes(curr);
        }
        /**
         * From the available request data, determine the global 'state' of the Request Data
         * @param {boolean} protectionsEnabled
         * @return {keyof states & string}
         */
        state(protectionsEnabled) {
          if (!protectionsEnabled) {
            if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
              return states.protectionsOff_allowedTrackers_allowedNonTrackers;
            }
            if (this.allowedNonSpecialCount() > 0) {
              return states.protectionsOff_allowedNonTrackers;
            }
            if (this.allowedSpecialCount() > 0) {
              return states.protectionsOff_allowedTrackers;
            }
            return states.protectionsOff;
          } else {
            if (this.blockedCount() > 0) {
              if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
                return states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers;
              }
              if (this.allowedSpecialCount() > 0) {
                return states.protectionsOn_blocked_allowedTrackers;
              }
              if (this.allowedNonSpecialCount() > 0) {
                return states.protectionsOn_blocked_allowedNonTrackers;
              }
              return states.protectionsOn_blocked;
            } else {
              if (this.allowedSpecialCount() > 0 && this.allowedNonSpecialCount() > 0) {
                return states.protectionsOn_allowedTrackers_allowedNonTrackers;
              }
              if (this.allowedSpecialCount() > 0) {
                return states.protectionsOn_allowedTrackers;
              }
              if (this.allowedNonSpecialCount() > 0) {
                return states.protectionsOn_allowedNonTrackers;
              }
            }
            return states.protectionsOn;
          }
        }
      };
      AggregateCompanyData = class {
        /**
         * @param {string|undefined} name
         * @param {string} displayName
         * @param {number} prevalence
         */
        constructor(name, displayName, prevalence) {
          this.name = name;
          this.displayName = displayName;
          this.prevalence = prevalence;
          this.normalizedName = normalizeCompanyName(displayName);
          this.urls = {};
        }
        /**
         * @param {string} url
         * @param {string} [category]
         */
        addUrl(url, category) {
          this.urls[url] = new TrackerUrl(url, category);
        }
      };
      TrackerUrl = class {
        /**
         * @param {string} url
         * @param {string} [category]
         */
        constructor(url, category) {
          this.url = url;
          this.category = category;
        }
      };
    }
  });

  // shared/js/browser/browser-communication.js
  var browser_communication_exports = {};
  __export(browser_communication_exports, {
    backgroundMessage: () => backgroundMessage,
    doBurn: () => doBurn,
    fetch: () => fetch,
    getBackgroundTabData: () => getBackgroundTabData,
    getPrivacyDashboardData: () => getPrivacyDashboardData,
    openOptions: () => openOptions,
    refreshAlias: () => refreshAlias,
    search: () => search,
    setLists: () => setLists,
    setup: () => setup,
    submitBrokenSiteReport: () => submitBrokenSiteReport
  });
  function setup() {
    setupColorScheme();
  }
  async function fetch(message) {
    if (message instanceof CheckBrokenSiteReportHandledMessage) {
      return false;
    }
    if (message instanceof SubmitBrokenSiteReportMessage) {
      return submitBrokenSiteReport(message);
    }
    if (message instanceof SetListsMessage) {
      return setLists(message);
    }
    if (message instanceof SearchMessage) {
      return search(message);
    }
    if (message instanceof RefreshEmailAliasMessage) {
      return refreshAlias();
    }
    if (message instanceof OpenOptionsMessage) {
      return openOptions();
    }
    if (message instanceof BurnMessage) {
      return doBurn(message);
    }
    if (message instanceof FetchBurnOptions) {
      return toExtensionMessage("getBurnOptions");
    }
    if (message instanceof SetBurnDefaultOption) {
      return toExtensionMessage("setBurnDefaultOption", message);
    }
    return new Promise((resolve) => {
      window.chrome.runtime.sendMessage(message, (result) => {
        resolve(result);
      });
    });
  }
  function toExtensionMessage(name, data) {
    const outgoing = {
      messageType: name,
      options: data
    };
    return new Promise((resolve) => {
      window.chrome.runtime.sendMessage(outgoing, (result) => {
        if (window.chrome.runtime.lastError) {
          console.error("window.chrome.runtime.lastError", window.chrome.runtime.lastError);
        }
        resolve(result);
      });
    });
  }
  async function submitBrokenSiteReport(report2) {
    const parsedInput = breakageReportRequestSchema.parse(report2);
    toExtensionMessage("submitBrokenSiteReport", parsedInput);
  }
  async function setLists(options) {
    const parsedInput = setListOptionsSchema.parse(options);
    return toExtensionMessage("setLists", parsedInput);
  }
  async function refreshAlias() {
    const result = await toExtensionMessage("refreshAlias");
    return refreshAliasResponseSchema.parse(result);
  }
  async function search(options) {
    return toExtensionMessage("search", options);
  }
  async function openOptions() {
    return toExtensionMessage("openOptions");
  }
  async function doBurn(message) {
    const browsingDataPermissions = {
      permissions: ["browsingData"]
    };
    const permissionRequestGranted = await new Promise((resolve) => chrome.permissions.request(browsingDataPermissions, resolve));
    if (!permissionRequestGranted) {
      throw new Error("Permission not granted");
    }
    return toExtensionMessage("doBurn", message);
  }
  async function getPrivacyDashboardData(tabId) {
    return toExtensionMessage("getPrivacyDashboardData", { tabId });
  }
  function backgroundMessage(_channel) {
    channel = _channel;
    window.chrome.runtime.onMessage.addListener((req, sender) => {
      if (sender.id !== window.chrome.runtime.id) {
        return;
      }
      if (req.updateTabData)
        channel.send("updateTabData");
      if (req.didResetTrackersData)
        channel.send("updateTabData");
      if (req.closePopup)
        window.close();
    });
  }
  async function getBackgroundTabData() {
    const tabIdParam = new URL(document.location.href).searchParams.get("tabId");
    const isNumeric = tabIdParam && !Number.isNaN(Number(tabIdParam));
    const tabId = isNumeric ? Number(tabIdParam) : null;
    const resp = await getPrivacyDashboardData(tabId);
    const parsedMessageData = getPrivacyDashboardDataSchema.safeParse(resp);
    if (parsedMessageData.success === true) {
      const { tab, emailProtectionUserData, requestData, fireButton } = parsedMessageData.data;
      const { upgradedHttps: upgradedHttps4, url, parentEntity: parentEntity4, specialDomainName, id, localeSettings } = tab;
      const protections5 = new Protections(
        tab.protections.unprotectedTemporary,
        tab.protections.enabledFeatures,
        tab.protections.allowlisted,
        tab.protections.denylisted
      );
      return {
        tab: {
          ...createTabData(url, upgradedHttps4, protections5, requestData),
          id,
          // if the extension sends this value, then use it as-is. Otherwise, the default of 'en' will take effect
          locale: localeSettings?.locale,
          search: {},
          emailProtection: {},
          ctaScreens: {},
          parentEntity: parentEntity4,
          specialDomainName
        },
        emailProtectionUserData,
        fireButton
      };
    }
    if (!window.__playwright) {
      console.log("\u{1F64F} getBackgroundTabData \u274C", parsedMessageData.error, resp);
    }
    const protections4 = {
      allowlisted: false,
      denylisted: false,
      enabledFeatures: ["contentBlocking"],
      unprotectedTemporary: false
    };
    return {
      tab: {
        ...createTabData("unknown", false, protections4, { requests: [] }),
        error: parsedMessageData.error.message,
        search: {},
        ctaScreens: {}
      }
    };
  }
  var channel;
  var init_browser_communication = __esm({
    "shared/js/browser/browser-communication.js"() {
      "use strict";
      init_schema_parsers();
      init_common();
      init_request_details();
      init_protections();
    }
  });

  // node_modules/tiny-invariant/dist/esm/tiny-invariant.js
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    var provided = typeof message === "function" ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }
  var isProduction, prefix;
  var init_tiny_invariant = __esm({
    "node_modules/tiny-invariant/dist/esm/tiny-invariant.js"() {
      isProduction = false;
      prefix = "Invariant failed";
    }
  });

  // node_modules/@material/ripple/util.js
  function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) {
      forceRefresh = false;
    }
    var CSS2 = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;
    if (typeof supportsCssVariables_ === "boolean" && !forceRefresh) {
      return supportsCssVariables_;
    }
    var supportsFunctionPresent = CSS2 && typeof CSS2.supports === "function";
    if (!supportsFunctionPresent) {
      return false;
    }
    var explicitlySupportsCssVars = CSS2.supports("--css-vars", "yes");
    var weAreFeatureDetectingSafari10plus = CSS2.supports("(--css-vars: yes)") && CSS2.supports("color", "#00000000");
    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
    if (!forceRefresh) {
      supportsCssVariables_ = supportsCssVars;
    }
    return supportsCssVars;
  }
  function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) {
      return { x: 0, y: 0 };
    }
    var x2 = pageOffset.x, y3 = pageOffset.y;
    var documentX = x2 + clientRect.left;
    var documentY = y3 + clientRect.top;
    var normalizedX;
    var normalizedY;
    if (evt.type === "touchstart") {
      var touchEvent = evt;
      normalizedX = touchEvent.changedTouches[0].pageX - documentX;
      normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    } else {
      var mouseEvent = evt;
      normalizedX = mouseEvent.pageX - documentX;
      normalizedY = mouseEvent.pageY - documentY;
    }
    return { x: normalizedX, y: normalizedY };
  }
  var supportsCssVariables_;
  var init_util = __esm({
    "node_modules/@material/ripple/util.js"() {
    }
  });

  // node_modules/@material/ripple/adapter.js
  var init_adapter = __esm({
    "node_modules/@material/ripple/adapter.js"() {
    }
  });

  // node_modules/tslib/tslib.es6.js
  function __extends(d3, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d3, b3);
    function __() {
      this.constructor = d3;
    }
    d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  }
  function __values(o3) {
    var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
    if (m3)
      return m3.call(o3);
    if (o3 && typeof o3.length === "number")
      return {
        next: function() {
          if (o3 && i3 >= o3.length)
            o3 = void 0;
          return { value: o3 && o3[i3++], done: !o3 };
        }
      };
    throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o3, n2) {
    var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
    if (!m3)
      return o3;
    var i3 = m3.call(o3), r3, ar = [], e3;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r3 = i3.next()).done)
        ar.push(r3.value);
    } catch (error2) {
      e3 = { error: error2 };
    } finally {
      try {
        if (r3 && !r3.done && (m3 = i3["return"]))
          m3.call(i3);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
        if (ar || !(i3 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i3);
          ar[i3] = from[i3];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  var extendStatics, __assign;
  var init_tslib_es6 = __esm({
    "node_modules/tslib/tslib.es6.js"() {
      extendStatics = function(d3, b3) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
          d4.__proto__ = b4;
        } || function(d4, b4) {
          for (var p3 in b4)
            if (Object.prototype.hasOwnProperty.call(b4, p3))
              d4[p3] = b4[p3];
        };
        return extendStatics(d3, b3);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t4) {
          for (var s3, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
            s3 = arguments[i3];
            for (var p3 in s3)
              if (Object.prototype.hasOwnProperty.call(s3, p3))
                t4[p3] = s3[p3];
          }
          return t4;
        };
        return __assign.apply(this, arguments);
      };
    }
  });

  // node_modules/@material/base/foundation.js
  var MDCFoundation;
  var init_foundation = __esm({
    "node_modules/@material/base/foundation.js"() {
      MDCFoundation = /** @class */
      function() {
        function MDCFoundation2(adapter) {
          if (adapter === void 0) {
            adapter = {};
          }
          this.adapter = adapter;
        }
        Object.defineProperty(MDCFoundation2, "cssClasses", {
          get: function() {
            return {};
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCFoundation2, "strings", {
          get: function() {
            return {};
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCFoundation2, "numbers", {
          get: function() {
            return {};
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCFoundation2, "defaultAdapter", {
          get: function() {
            return {};
          },
          enumerable: false,
          configurable: true
        });
        MDCFoundation2.prototype.init = function() {
        };
        MDCFoundation2.prototype.destroy = function() {
        };
        return MDCFoundation2;
      }();
    }
  });

  // node_modules/@material/base/component.js
  var MDCComponent;
  var init_component = __esm({
    "node_modules/@material/base/component.js"() {
      init_tslib_es6();
      init_foundation();
      MDCComponent = /** @class */
      function() {
        function MDCComponent2(root, foundation) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          this.root = root;
          this.initialize.apply(this, __spreadArray([], __read(args)));
          this.foundation = foundation === void 0 ? this.getDefaultFoundation() : foundation;
          this.foundation.init();
          this.initialSyncWithDOM();
        }
        MDCComponent2.attachTo = function(root) {
          return new MDCComponent2(root, new MDCFoundation({}));
        };
        MDCComponent2.prototype.initialize = function() {
          var _args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
          }
        };
        MDCComponent2.prototype.getDefaultFoundation = function() {
          throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class");
        };
        MDCComponent2.prototype.initialSyncWithDOM = function() {
        };
        MDCComponent2.prototype.destroy = function() {
          this.foundation.destroy();
        };
        MDCComponent2.prototype.listen = function(evtType, handler, options) {
          this.root.addEventListener(evtType, handler, options);
        };
        MDCComponent2.prototype.unlisten = function(evtType, handler, options) {
          this.root.removeEventListener(evtType, handler, options);
        };
        MDCComponent2.prototype.emit = function(evtType, evtData, shouldBubble) {
          if (shouldBubble === void 0) {
            shouldBubble = false;
          }
          var evt;
          if (typeof CustomEvent === "function") {
            evt = new CustomEvent(evtType, {
              bubbles: shouldBubble,
              detail: evtData
            });
          } else {
            evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
          }
          this.root.dispatchEvent(evt);
        };
        return MDCComponent2;
      }();
    }
  });

  // node_modules/@material/dom/events.js
  function applyPassive(globalObj) {
    if (globalObj === void 0) {
      globalObj = window;
    }
    return supportsPassiveOption(globalObj) ? { passive: true } : false;
  }
  function supportsPassiveOption(globalObj) {
    if (globalObj === void 0) {
      globalObj = window;
    }
    var passiveSupported = false;
    try {
      var options = {
        // This function will be called when the browser
        // attempts to access the passive property.
        get passive() {
          passiveSupported = true;
          return false;
        }
      };
      var handler = function() {
      };
      globalObj.document.addEventListener("test", handler, options);
      globalObj.document.removeEventListener("test", handler, options);
    } catch (err) {
      passiveSupported = false;
    }
    return passiveSupported;
  }
  var init_events2 = __esm({
    "node_modules/@material/dom/events.js"() {
    }
  });

  // node_modules/@material/dom/ponyfill.js
  function matches(element, selector) {
    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
  }
  var init_ponyfill = __esm({
    "node_modules/@material/dom/ponyfill.js"() {
    }
  });

  // node_modules/@material/ripple/constants.js
  var cssClasses, strings, numbers;
  var init_constants = __esm({
    "node_modules/@material/ripple/constants.js"() {
      cssClasses = {
        // Ripple is a special case where the "root" component is really a "mixin" of sorts,
        // given that it's an 'upgrade' to an existing component. That being said it is the root
        // CSS class that all other CSS classes derive from.
        BG_FOCUSED: "mdc-ripple-upgraded--background-focused",
        FG_ACTIVATION: "mdc-ripple-upgraded--foreground-activation",
        FG_DEACTIVATION: "mdc-ripple-upgraded--foreground-deactivation",
        ROOT: "mdc-ripple-upgraded",
        UNBOUNDED: "mdc-ripple-upgraded--unbounded"
      };
      strings = {
        VAR_FG_SCALE: "--mdc-ripple-fg-scale",
        VAR_FG_SIZE: "--mdc-ripple-fg-size",
        VAR_FG_TRANSLATE_END: "--mdc-ripple-fg-translate-end",
        VAR_FG_TRANSLATE_START: "--mdc-ripple-fg-translate-start",
        VAR_LEFT: "--mdc-ripple-left",
        VAR_TOP: "--mdc-ripple-top"
      };
      numbers = {
        DEACTIVATION_TIMEOUT_MS: 225,
        FG_DEACTIVATION_MS: 150,
        INITIAL_ORIGIN_SCALE: 0.6,
        PADDING: 10,
        TAP_DELAY_MS: 300
        // Delay between touch and simulated mouse events on touch devices
      };
    }
  });

  // node_modules/@material/ripple/foundation.js
  var ACTIVATION_EVENT_TYPES, POINTER_DEACTIVATION_EVENT_TYPES, activatedTargets, MDCRippleFoundation;
  var init_foundation2 = __esm({
    "node_modules/@material/ripple/foundation.js"() {
      init_tslib_es6();
      init_foundation();
      init_constants();
      init_util();
      ACTIVATION_EVENT_TYPES = [
        "touchstart",
        "pointerdown",
        "mousedown",
        "keydown"
      ];
      POINTER_DEACTIVATION_EVENT_TYPES = [
        "touchend",
        "pointerup",
        "mouseup",
        "contextmenu"
      ];
      activatedTargets = [];
      MDCRippleFoundation = /** @class */
      function(_super) {
        __extends(MDCRippleFoundation2, _super);
        function MDCRippleFoundation2(adapter) {
          var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation2.defaultAdapter), adapter)) || this;
          _this.activationAnimationHasEnded = false;
          _this.activationTimer = 0;
          _this.fgDeactivationRemovalTimer = 0;
          _this.fgScale = "0";
          _this.frame = { width: 0, height: 0 };
          _this.initialSize = 0;
          _this.layoutFrame = 0;
          _this.maxRadius = 0;
          _this.unboundedCoords = { left: 0, top: 0 };
          _this.activationState = _this.defaultActivationState();
          _this.activationTimerCallback = function() {
            _this.activationAnimationHasEnded = true;
            _this.runDeactivationUXLogicIfReady();
          };
          _this.activateHandler = function(e3) {
            _this.activateImpl(e3);
          };
          _this.deactivateHandler = function() {
            _this.deactivateImpl();
          };
          _this.focusHandler = function() {
            _this.handleFocus();
          };
          _this.blurHandler = function() {
            _this.handleBlur();
          };
          _this.resizeHandler = function() {
            _this.layout();
          };
          return _this;
        }
        Object.defineProperty(MDCRippleFoundation2, "cssClasses", {
          get: function() {
            return cssClasses;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCRippleFoundation2, "strings", {
          get: function() {
            return strings;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCRippleFoundation2, "numbers", {
          get: function() {
            return numbers;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(MDCRippleFoundation2, "defaultAdapter", {
          get: function() {
            return {
              addClass: function() {
                return void 0;
              },
              browserSupportsCssVars: function() {
                return true;
              },
              computeBoundingRect: function() {
                return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
              },
              containsEventTarget: function() {
                return true;
              },
              deregisterDocumentInteractionHandler: function() {
                return void 0;
              },
              deregisterInteractionHandler: function() {
                return void 0;
              },
              deregisterResizeHandler: function() {
                return void 0;
              },
              getWindowPageOffset: function() {
                return { x: 0, y: 0 };
              },
              isSurfaceActive: function() {
                return true;
              },
              isSurfaceDisabled: function() {
                return true;
              },
              isUnbounded: function() {
                return true;
              },
              registerDocumentInteractionHandler: function() {
                return void 0;
              },
              registerInteractionHandler: function() {
                return void 0;
              },
              registerResizeHandler: function() {
                return void 0;
              },
              removeClass: function() {
                return void 0;
              },
              updateCssVariable: function() {
                return void 0;
              }
            };
          },
          enumerable: false,
          configurable: true
        });
        MDCRippleFoundation2.prototype.init = function() {
          var _this = this;
          var supportsPressRipple = this.supportsPressRipple();
          this.registerRootHandlers(supportsPressRipple);
          if (supportsPressRipple) {
            var _a2 = MDCRippleFoundation2.cssClasses, ROOT_1 = _a2.ROOT, UNBOUNDED_1 = _a2.UNBOUNDED;
            requestAnimationFrame(function() {
              _this.adapter.addClass(ROOT_1);
              if (_this.adapter.isUnbounded()) {
                _this.adapter.addClass(UNBOUNDED_1);
                _this.layoutInternal();
              }
            });
          }
        };
        MDCRippleFoundation2.prototype.destroy = function() {
          var _this = this;
          if (this.supportsPressRipple()) {
            if (this.activationTimer) {
              clearTimeout(this.activationTimer);
              this.activationTimer = 0;
              this.adapter.removeClass(MDCRippleFoundation2.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer) {
              clearTimeout(this.fgDeactivationRemovalTimer);
              this.fgDeactivationRemovalTimer = 0;
              this.adapter.removeClass(MDCRippleFoundation2.cssClasses.FG_DEACTIVATION);
            }
            var _a2 = MDCRippleFoundation2.cssClasses, ROOT_2 = _a2.ROOT, UNBOUNDED_2 = _a2.UNBOUNDED;
            requestAnimationFrame(function() {
              _this.adapter.removeClass(ROOT_2);
              _this.adapter.removeClass(UNBOUNDED_2);
              _this.removeCssVars();
            });
          }
          this.deregisterRootHandlers();
          this.deregisterDeactivationHandlers();
        };
        MDCRippleFoundation2.prototype.activate = function(evt) {
          this.activateImpl(evt);
        };
        MDCRippleFoundation2.prototype.deactivate = function() {
          this.deactivateImpl();
        };
        MDCRippleFoundation2.prototype.layout = function() {
          var _this = this;
          if (this.layoutFrame) {
            cancelAnimationFrame(this.layoutFrame);
          }
          this.layoutFrame = requestAnimationFrame(function() {
            _this.layoutInternal();
            _this.layoutFrame = 0;
          });
        };
        MDCRippleFoundation2.prototype.setUnbounded = function(unbounded) {
          var UNBOUNDED = MDCRippleFoundation2.cssClasses.UNBOUNDED;
          if (unbounded) {
            this.adapter.addClass(UNBOUNDED);
          } else {
            this.adapter.removeClass(UNBOUNDED);
          }
        };
        MDCRippleFoundation2.prototype.handleFocus = function() {
          var _this = this;
          requestAnimationFrame(function() {
            return _this.adapter.addClass(MDCRippleFoundation2.cssClasses.BG_FOCUSED);
          });
        };
        MDCRippleFoundation2.prototype.handleBlur = function() {
          var _this = this;
          requestAnimationFrame(function() {
            return _this.adapter.removeClass(MDCRippleFoundation2.cssClasses.BG_FOCUSED);
          });
        };
        MDCRippleFoundation2.prototype.supportsPressRipple = function() {
          return this.adapter.browserSupportsCssVars();
        };
        MDCRippleFoundation2.prototype.defaultActivationState = function() {
          return {
            activationEvent: void 0,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false
          };
        };
        MDCRippleFoundation2.prototype.registerRootHandlers = function(supportsPressRipple) {
          var e_1, _a2;
          if (supportsPressRipple) {
            try {
              for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                this.adapter.registerInteractionHandler(evtType, this.activateHandler);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a2 = ACTIVATION_EVENT_TYPES_1.return))
                  _a2.call(ACTIVATION_EVENT_TYPES_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            if (this.adapter.isUnbounded()) {
              this.adapter.registerResizeHandler(this.resizeHandler);
            }
          }
          this.adapter.registerInteractionHandler("focus", this.focusHandler);
          this.adapter.registerInteractionHandler("blur", this.blurHandler);
        };
        MDCRippleFoundation2.prototype.registerDeactivationHandlers = function(evt) {
          var e_2, _a2;
          if (evt.type === "keydown") {
            this.adapter.registerInteractionHandler("keyup", this.deactivateHandler);
          } else {
            try {
              for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a2 = POINTER_DEACTIVATION_EVENT_TYPES_1.return))
                  _a2.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }
        };
        MDCRippleFoundation2.prototype.deregisterRootHandlers = function() {
          var e_3, _a2;
          try {
            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
              var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
              this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a2 = ACTIVATION_EVENT_TYPES_2.return))
                _a2.call(ACTIVATION_EVENT_TYPES_2);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
          this.adapter.deregisterInteractionHandler("focus", this.focusHandler);
          this.adapter.deregisterInteractionHandler("blur", this.blurHandler);
          if (this.adapter.isUnbounded()) {
            this.adapter.deregisterResizeHandler(this.resizeHandler);
          }
        };
        MDCRippleFoundation2.prototype.deregisterDeactivationHandlers = function() {
          var e_4, _a2;
          this.adapter.deregisterInteractionHandler("keyup", this.deactivateHandler);
          try {
            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
              var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
              this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a2 = POINTER_DEACTIVATION_EVENT_TYPES_2.return))
                _a2.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
            } finally {
              if (e_4)
                throw e_4.error;
            }
          }
        };
        MDCRippleFoundation2.prototype.removeCssVars = function() {
          var _this = this;
          var rippleStrings = MDCRippleFoundation2.strings;
          var keys = Object.keys(rippleStrings);
          keys.forEach(function(key) {
            if (key.indexOf("VAR_") === 0) {
              _this.adapter.updateCssVariable(rippleStrings[key], null);
            }
          });
        };
        MDCRippleFoundation2.prototype.activateImpl = function(evt) {
          var _this = this;
          if (this.adapter.isSurfaceDisabled()) {
            return;
          }
          var activationState = this.activationState;
          if (activationState.isActivated) {
            return;
          }
          var previousActivationEvent = this.previousActivationEvent;
          var isSameInteraction = previousActivationEvent && evt !== void 0 && previousActivationEvent.type !== evt.type;
          if (isSameInteraction) {
            return;
          }
          activationState.isActivated = true;
          activationState.isProgrammatic = evt === void 0;
          activationState.activationEvent = evt;
          activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== void 0 && (evt.type === "mousedown" || evt.type === "touchstart" || evt.type === "pointerdown");
          var hasActivatedChild = evt !== void 0 && activatedTargets.length > 0 && activatedTargets.some(function(target) {
            return _this.adapter.containsEventTarget(target);
          });
          if (hasActivatedChild) {
            this.resetActivationState();
            return;
          }
          if (evt !== void 0) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers(evt);
          }
          activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
          if (activationState.wasElementMadeActive) {
            this.animateActivation();
          }
          requestAnimationFrame(function() {
            activatedTargets = [];
            if (!activationState.wasElementMadeActive && evt !== void 0 && (evt.key === " " || evt.keyCode === 32)) {
              activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
              if (activationState.wasElementMadeActive) {
                _this.animateActivation();
              }
            }
            if (!activationState.wasElementMadeActive) {
              _this.activationState = _this.defaultActivationState();
            }
          });
        };
        MDCRippleFoundation2.prototype.checkElementMadeActive = function(evt) {
          return evt !== void 0 && evt.type === "keydown" ? this.adapter.isSurfaceActive() : true;
        };
        MDCRippleFoundation2.prototype.animateActivation = function() {
          var _this = this;
          var _a2 = MDCRippleFoundation2.strings, VAR_FG_TRANSLATE_START = _a2.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a2.VAR_FG_TRANSLATE_END;
          var _b = MDCRippleFoundation2.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
          var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation2.numbers.DEACTIVATION_TIMEOUT_MS;
          this.layoutInternal();
          var translateStart = "";
          var translateEnd = "";
          if (!this.adapter.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
          }
          this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
          this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
          clearTimeout(this.activationTimer);
          clearTimeout(this.fgDeactivationRemovalTimer);
          this.rmBoundedActivationClasses();
          this.adapter.removeClass(FG_DEACTIVATION);
          this.adapter.computeBoundingRect();
          this.adapter.addClass(FG_ACTIVATION);
          this.activationTimer = setTimeout(function() {
            _this.activationTimerCallback();
          }, DEACTIVATION_TIMEOUT_MS);
        };
        MDCRippleFoundation2.prototype.getFgTranslationCoordinates = function() {
          var _a2 = this.activationState, activationEvent = _a2.activationEvent, wasActivatedByPointer = _a2.wasActivatedByPointer;
          var startPoint;
          if (wasActivatedByPointer) {
            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
          } else {
            startPoint = {
              x: this.frame.width / 2,
              y: this.frame.height / 2
            };
          }
          startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2
          };
          var endPoint = {
            x: this.frame.width / 2 - this.initialSize / 2,
            y: this.frame.height / 2 - this.initialSize / 2
          };
          return { startPoint, endPoint };
        };
        MDCRippleFoundation2.prototype.runDeactivationUXLogicIfReady = function() {
          var _this = this;
          var FG_DEACTIVATION = MDCRippleFoundation2.cssClasses.FG_DEACTIVATION;
          var _a2 = this.activationState, hasDeactivationUXRun = _a2.hasDeactivationUXRun, isActivated = _a2.isActivated;
          var activationHasEnded = hasDeactivationUXRun || !isActivated;
          if (activationHasEnded && this.activationAnimationHasEnded) {
            this.rmBoundedActivationClasses();
            this.adapter.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer = setTimeout(function() {
              _this.adapter.removeClass(FG_DEACTIVATION);
            }, numbers.FG_DEACTIVATION_MS);
          }
        };
        MDCRippleFoundation2.prototype.rmBoundedActivationClasses = function() {
          var FG_ACTIVATION = MDCRippleFoundation2.cssClasses.FG_ACTIVATION;
          this.adapter.removeClass(FG_ACTIVATION);
          this.activationAnimationHasEnded = false;
          this.adapter.computeBoundingRect();
        };
        MDCRippleFoundation2.prototype.resetActivationState = function() {
          var _this = this;
          this.previousActivationEvent = this.activationState.activationEvent;
          this.activationState = this.defaultActivationState();
          setTimeout(function() {
            return _this.previousActivationEvent = void 0;
          }, MDCRippleFoundation2.numbers.TAP_DELAY_MS);
        };
        MDCRippleFoundation2.prototype.deactivateImpl = function() {
          var _this = this;
          var activationState = this.activationState;
          if (!activationState.isActivated) {
            return;
          }
          var state = __assign({}, activationState);
          if (activationState.isProgrammatic) {
            requestAnimationFrame(function() {
              _this.animateDeactivation(state);
            });
            this.resetActivationState();
          } else {
            this.deregisterDeactivationHandlers();
            requestAnimationFrame(function() {
              _this.activationState.hasDeactivationUXRun = true;
              _this.animateDeactivation(state);
              _this.resetActivationState();
            });
          }
        };
        MDCRippleFoundation2.prototype.animateDeactivation = function(_a2) {
          var wasActivatedByPointer = _a2.wasActivatedByPointer, wasElementMadeActive = _a2.wasElementMadeActive;
          if (wasActivatedByPointer || wasElementMadeActive) {
            this.runDeactivationUXLogicIfReady();
          }
        };
        MDCRippleFoundation2.prototype.layoutInternal = function() {
          var _this = this;
          this.frame = this.adapter.computeBoundingRect();
          var maxDim = Math.max(this.frame.height, this.frame.width);
          var getBoundedRadius = function() {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
            return hypotenuse + MDCRippleFoundation2.numbers.PADDING;
          };
          this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
          var initialSize = Math.floor(maxDim * MDCRippleFoundation2.numbers.INITIAL_ORIGIN_SCALE);
          if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
            this.initialSize = initialSize - 1;
          } else {
            this.initialSize = initialSize;
          }
          this.fgScale = "" + this.maxRadius / this.initialSize;
          this.updateLayoutCssVars();
        };
        MDCRippleFoundation2.prototype.updateLayoutCssVars = function() {
          var _a2 = MDCRippleFoundation2.strings, VAR_FG_SIZE = _a2.VAR_FG_SIZE, VAR_LEFT = _a2.VAR_LEFT, VAR_TOP = _a2.VAR_TOP, VAR_FG_SCALE = _a2.VAR_FG_SCALE;
          this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
          this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
          if (this.adapter.isUnbounded()) {
            this.unboundedCoords = {
              left: Math.round(this.frame.width / 2 - this.initialSize / 2),
              top: Math.round(this.frame.height / 2 - this.initialSize / 2)
            };
            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
          }
        };
        return MDCRippleFoundation2;
      }(MDCFoundation);
    }
  });

  // node_modules/@material/ripple/component.js
  var MDCRipple;
  var init_component2 = __esm({
    "node_modules/@material/ripple/component.js"() {
      init_tslib_es6();
      init_component();
      init_events2();
      init_ponyfill();
      init_foundation2();
      init_util();
      MDCRipple = /** @class */
      function(_super) {
        __extends(MDCRipple2, _super);
        function MDCRipple2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.disabled = false;
          return _this;
        }
        MDCRipple2.attachTo = function(root, opts) {
          if (opts === void 0) {
            opts = {
              isUnbounded: void 0
            };
          }
          var ripple = new MDCRipple2(root);
          if (opts.isUnbounded !== void 0) {
            ripple.unbounded = opts.isUnbounded;
          }
          return ripple;
        };
        MDCRipple2.createAdapter = function(instance2) {
          return {
            addClass: function(className) {
              return instance2.root.classList.add(className);
            },
            browserSupportsCssVars: function() {
              return supportsCssVariables(window);
            },
            computeBoundingRect: function() {
              return instance2.root.getBoundingClientRect();
            },
            containsEventTarget: function(target) {
              return instance2.root.contains(target);
            },
            deregisterDocumentInteractionHandler: function(evtType, handler) {
              return document.documentElement.removeEventListener(evtType, handler, applyPassive());
            },
            deregisterInteractionHandler: function(evtType, handler) {
              return instance2.root.removeEventListener(evtType, handler, applyPassive());
            },
            deregisterResizeHandler: function(handler) {
              return window.removeEventListener("resize", handler);
            },
            getWindowPageOffset: function() {
              return { x: window.pageXOffset, y: window.pageYOffset };
            },
            isSurfaceActive: function() {
              return matches(instance2.root, ":active");
            },
            isSurfaceDisabled: function() {
              return Boolean(instance2.disabled);
            },
            isUnbounded: function() {
              return Boolean(instance2.unbounded);
            },
            registerDocumentInteractionHandler: function(evtType, handler) {
              return document.documentElement.addEventListener(evtType, handler, applyPassive());
            },
            registerInteractionHandler: function(evtType, handler) {
              return instance2.root.addEventListener(evtType, handler, applyPassive());
            },
            registerResizeHandler: function(handler) {
              return window.addEventListener("resize", handler);
            },
            removeClass: function(className) {
              return instance2.root.classList.remove(className);
            },
            updateCssVariable: function(varName, value) {
              return instance2.root.style.setProperty(varName, value);
            }
          };
        };
        Object.defineProperty(MDCRipple2.prototype, "unbounded", {
          get: function() {
            return Boolean(this.isUnbounded);
          },
          set: function(unbounded) {
            this.isUnbounded = Boolean(unbounded);
            this.setUnbounded();
          },
          enumerable: false,
          configurable: true
        });
        MDCRipple2.prototype.activate = function() {
          this.foundation.activate();
        };
        MDCRipple2.prototype.deactivate = function() {
          this.foundation.deactivate();
        };
        MDCRipple2.prototype.layout = function() {
          this.foundation.layout();
        };
        MDCRipple2.prototype.getDefaultFoundation = function() {
          return new MDCRippleFoundation(MDCRipple2.createAdapter(this));
        };
        MDCRipple2.prototype.initialSyncWithDOM = function() {
          var root = this.root;
          this.isUnbounded = "mdcRippleIsUnbounded" in root.dataset;
        };
        MDCRipple2.prototype.setUnbounded = function() {
          this.foundation.setUnbounded(Boolean(this.isUnbounded));
        };
        return MDCRipple2;
      }(MDCComponent);
    }
  });

  // node_modules/@material/ripple/types.js
  var init_types = __esm({
    "node_modules/@material/ripple/types.js"() {
    }
  });

  // node_modules/@material/ripple/index.js
  var init_ripple = __esm({
    "node_modules/@material/ripple/index.js"() {
      init_adapter();
      init_component2();
      init_constants();
      init_foundation2();
      init_types();
    }
  });

  // shared/js/ui/views/utils/utils.js
  function setupMaterialDesignRipple(parent, ...selectors) {
    const cleanups = [];
    selectors.forEach((selector) => {
      const $matches = parent.querySelectorAll(selector);
      $matches.forEach(($el) => {
        if (seen.has($el)) {
          return;
        }
        seen.add($el);
        $el.classList.add("material-design-ripple");
        const instance2 = MDCRipple.attachTo($el);
        instance2.listen("click", function(e3) {
          if (e3.target instanceof HTMLElement) {
            e3.target.closest?.("a")?.blur();
          }
        });
        cleanups.push(() => instance2.destroy());
      });
    });
    return cleanups;
  }
  function setupBlurOnLongPress() {
    let pressedTime = 0;
    const hasPointerEvents = "PointerEvent" in window || window.navigator && "msPointerEnabled" in window.navigator;
    const isTouch = "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    const mouseDown = hasPointerEvents ? "pointerdown" : isTouch ? "touchstart" : "mousedown";
    const mouseUp = hasPointerEvents ? "pointerup" : isTouch ? "touchend" : "mouseup";
    document.addEventListener(mouseDown, () => {
      pressedTime = 0;
    });
    document.addEventListener(mouseUp, (event) => {
      const now = Date.now();
      const delta = (now - pressedTime) / 1e3;
      const target = event.target;
      if (delta > 0.5 && target instanceof HTMLElement) {
        const trigger = target.closest("a,button");
        if (trigger instanceof HTMLElement) {
          if (seen.has(trigger) || seenSwitch.has(trigger)) {
            trigger?.blur();
          }
        }
      }
    });
  }
  function setupGlobalOpenerListener(cb) {
    document.addEventListener("click", (e3) => {
      const targetElem = e3.target;
      if (targetElem instanceof HTMLAnchorElement) {
        if (targetElem.target === "_blank" && targetElem.origin) {
          e3.preventDefault();
          cb(targetElem.href);
        }
      }
    });
  }
  var seen, seenSwitch;
  var init_utils = __esm({
    "shared/js/ui/views/utils/utils.js"() {
      "use strict";
      init_ripple();
      seen = /* @__PURE__ */ new WeakSet();
      seenSwitch = /* @__PURE__ */ new WeakSet();
    }
  });

  // shared/js/browser/macos-communication.js
  var macos_communication_exports = {};
  __export(macos_communication_exports, {
    backgroundMessage: () => backgroundMessage2,
    fetch: () => fetch2,
    firstRenderComplete: () => firstRenderComplete,
    getBackgroundTabData: () => getBackgroundTabData2,
    onChangeConsentManaged: () => onChangeConsentManaged,
    onChangeLocale: () => onChangeLocale,
    onChangeProtectionStatus: () => onChangeProtectionStatus,
    onChangeRequestData: () => onChangeRequestData,
    privacyDashboardOpenSettings: () => privacyDashboardOpenSettings,
    privacyDashboardOpenUrlInNewTab: () => privacyDashboardOpenUrlInNewTab,
    privacyDashboardSetSize: () => privacyDashboardSetSize,
    privacyDashboardSubmitBrokenSiteReport: () => privacyDashboardSubmitBrokenSiteReport,
    setup: () => setup2,
    setupShared: () => setupShared
  });
  function onChangeRequestData(tabUrl, rawRequestData) {
    const requestData = requestDataSchema.safeParse(rawRequestData);
    if (!protections)
      throw new Error("protections status not set");
    if (!requestData.success) {
      console.error("could not parse incoming request data from `onChangeRequestData`");
      console.log(requestData.error);
      return;
    }
    trackerBlockingData = createTabData(tabUrl, upgradedHttps, protections, requestData.data);
    resolveInitialRender();
  }
  function onChangeProtectionStatus(protectionsStatus) {
    const parsed = protectionsStatusSchema.safeParse(protectionsStatus);
    if (!parsed.success) {
      console.error("could not parse incoming protection status from onChangeProtectionStatus");
      console.error(parsed.error);
      return;
    }
    protections = parsed.data;
    resolveInitialRender();
  }
  function onChangeLocale(payload) {
    const parsed = localeSettingsSchema.safeParse(payload);
    if (!parsed.success) {
      console.error("could not parse incoming data from onChangeLocale");
      console.error(parsed.error);
      return;
    }
    locale = parsed.data.locale;
    channel2?.send("updateTabData");
  }
  function onChangeConsentManaged(payload) {
    const parsed = cookiePromptManagementStatusSchema.safeParse(payload);
    if (!parsed.success) {
      console.error("could not parse incoming data from onChangeConsentManaged");
      console.error(parsed.error);
      return;
    }
    Object.assign(cookiePromptManagementStatus, parsed.data);
    channel2?.send("updateTabData");
  }
  async function fetch2(message) {
    if (message instanceof SubmitBrokenSiteReportMessage) {
      privacyDashboardSubmitBrokenSiteReport({
        category: message.category,
        description: message.description
      });
      return;
    }
    if (message instanceof SetListsMessage) {
      for (const listItem of message.lists) {
        const { list, value } = listItem;
        if (list !== "allowlisted") {
          if (!window.__playwright)
            console.warn("only `allowlisted` is currently supported on macos");
          continue;
        }
        const isProtected = value === false;
        invariant(window.webkit?.messageHandlers?.privacyDashboardSetProtection, "webkit.messageHandlers required");
        window.webkit.messageHandlers.privacyDashboardSetProtection.postMessage({
          isProtected,
          eventOrigin: message.eventOrigin
        });
      }
    }
    if (message instanceof OpenSettingsMessages) {
      privacyDashboardOpenSettings({
        target: message.target
      });
      return;
    }
    if (message instanceof UpdatePermissionMessage) {
      invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
      window.webkit.messageHandlers.privacyDashboardSetPermission.postMessage({
        permission: message.id,
        value: message.value
      });
    }
  }
  function privacyDashboardOpenUrlInNewTab(args) {
    invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
    window.webkit.messageHandlers.privacyDashboardOpenUrlInNewTab.postMessage({
      url: args.url
    });
  }
  function privacyDashboardOpenSettings(args) {
    invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
    window.webkit.messageHandlers.privacyDashboardOpenSettings.postMessage({
      target: args.target
    });
  }
  function privacyDashboardSubmitBrokenSiteReport(report2) {
    invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
    window.webkit.messageHandlers.privacyDashboardSubmitBrokenSiteReport.postMessage({
      category: report2.category,
      description: report2.description
    });
  }
  function privacyDashboardSetSize(payload) {
    if (!isIOS()) {
      invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
      window.webkit.messageHandlers.privacyDashboardSetSize.postMessage(payload);
    }
  }
  function setupShared() {
    window.onChangeRequestData = onChangeRequestData;
    window.onChangeAllowedPermissions = function(data) {
      permissionsData = data;
      channel2?.send("updateTabData");
    };
    window.onChangeUpgradedHttps = function(data) {
      upgradedHttps = data;
      if (trackerBlockingData)
        trackerBlockingData.upgradedHttps = upgradedHttps;
      resolveInitialRender();
    };
    window.onChangeProtectionStatus = onChangeProtectionStatus;
    window.onChangeLocale = onChangeLocale;
    window.onChangeCertificateData = function(data) {
      certificateData = data.secCertificateViewModels;
      channel2?.send("updateTabData");
    };
    window.onIsPendingUpdates = function(data) {
      isPendingUpdates = data;
      channel2?.send("updateTabData");
    };
    window.onChangeParentEntity = function(data) {
      parentEntity = data;
      channel2?.send("updateTabData");
    };
    window.onChangeConsentManaged = onChangeConsentManaged;
    setupGlobalOpenerListener((href) => {
      privacyDashboardOpenUrlInNewTab({
        url: href
      });
    });
  }
  function setup2() {
    setupColorScheme();
    setupShared();
    setupMutationObserver((height) => {
      privacyDashboardSetSize({ height });
    });
  }
  function firstRenderComplete() {
    const height = getContentHeight();
    if (typeof height === "number") {
      privacyDashboardSetSize({ height });
    }
  }
  var channel2, backgroundMessage2, getBackgroundTabDataPromises, trackerBlockingData, permissionsData, certificateData, upgradedHttps, protections, isPendingUpdates, parentEntity, cookiePromptManagementStatus, locale, combineSources, resolveInitialRender, getBackgroundTabData2;
  var init_macos_communication = __esm({
    "shared/js/browser/macos-communication.js"() {
      "use strict";
      init_tiny_invariant();
      init_schema_parsers();
      init_environment_check();
      init_utils();
      init_common();
      init_request_details();
      channel2 = null;
      backgroundMessage2 = (backgroundModel) => {
        channel2 = backgroundModel;
      };
      getBackgroundTabDataPromises = [];
      cookiePromptManagementStatus = {};
      combineSources = () => ({
        tab: Object.assign(
          {},
          trackerBlockingData || {},
          {
            isPendingUpdates,
            parentEntity,
            cookiePromptManagementStatus,
            platformLimitations: true,
            locale
          },
          permissionsData ? { permissions: permissionsData } : {},
          certificateData ? { certificate: certificateData } : {}
        )
      });
      resolveInitialRender = function() {
        const isUpgradedHttpsSet = typeof upgradedHttps === "boolean";
        const isIsProtectedSet = typeof protections !== "undefined";
        const isTrackerBlockingDataSet = typeof trackerBlockingData === "object";
        const isLocaleSet = typeof locale === "string";
        if (!isLocaleSet || !isUpgradedHttpsSet || !isIsProtectedSet || !isTrackerBlockingDataSet) {
          return;
        }
        getBackgroundTabDataPromises.forEach((resolve) => resolve(combineSources()));
        channel2?.send("updateTabData");
      };
      getBackgroundTabData2 = () => {
        return new Promise((resolve) => {
          if (trackerBlockingData) {
            resolve(combineSources());
            return;
          }
          getBackgroundTabDataPromises.push(resolve);
        });
      };
    }
  });

  // shared/js/browser/ios-communication.js
  var ios_communication_exports = {};
  __export(ios_communication_exports, {
    backgroundMessage: () => backgroundMessage2,
    fetch: () => fetch3,
    getBackgroundTabData: () => getBackgroundTabData2,
    privacyDashboardClose: () => privacyDashboardClose,
    privacyDashboardShowReportBrokenSite: () => privacyDashboardShowReportBrokenSite,
    setup: () => setup3
  });
  function setup3() {
    const setColorScheme = setupColorScheme();
    window.onChangeTheme = function(themeName) {
      setColorScheme(themeName);
    };
    window.history.replaceState({}, "", window.location.href);
    setupShared();
  }
  function privacyDashboardClose(args) {
    invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
    window.webkit.messageHandlers.privacyDashboardClose.postMessage(args);
  }
  function privacyDashboardShowReportBrokenSite(args) {
    invariant(window.webkit?.messageHandlers, "webkit.messageHandlers required");
    window.webkit.messageHandlers.privacyDashboardShowReportBrokenSite.postMessage(args);
  }
  async function fetch3(message) {
    if (message instanceof CloseMessage) {
      privacyDashboardClose({});
      return;
    }
    if (message instanceof CheckBrokenSiteReportHandledMessage) {
      privacyDashboardShowReportBrokenSite({});
      return true;
    }
    return fetch2(message);
  }
  var init_ios_communication = __esm({
    "shared/js/browser/ios-communication.js"() {
      "use strict";
      init_tiny_invariant();
      init_common();
      init_macos_communication();
    }
  });

  // shared/js/browser/android-communication.js
  var android_communication_exports = {};
  __export(android_communication_exports, {
    PrivacyDashboardJavascriptInterface: () => PrivacyDashboardJavascriptInterface,
    backgroundMessage: () => backgroundMessage3,
    fetch: () => fetch4,
    getBackgroundTabData: () => getBackgroundTabData3,
    onChangeConsentManaged: () => onChangeConsentManaged2,
    onChangeFeatureSettings: () => onChangeFeatureSettings,
    onChangeLocale: () => onChangeLocale2,
    onChangeProtectionStatus: () => onChangeProtectionStatus2,
    onChangeRequestData: () => onChangeRequestData2,
    setup: () => setup4
  });
  function onChangeRequestData2(tabUrl, rawRequestData) {
    const requestData = requestDataSchema.safeParse(rawRequestData);
    if (!protections2) {
      console.error("protections status not set");
      return;
    }
    if (!requestData.success) {
      console.error("could not parse incoming request data from `onChangeRequestData`");
      console.log(requestData.error);
      return;
    }
    trackerBlockingData2 = createTabData(tabUrl, upgradedHttps2, protections2, requestData.data);
    resolveInitialRender2();
  }
  function onChangeProtectionStatus2(protectionsStatus) {
    const parsed = protectionsStatusSchema.safeParse(protectionsStatus);
    if (!parsed.success) {
      console.error("could not parse incoming protection status from onChangeProtectionStatus");
      console.error(parsed.error);
      return;
    }
    protections2 = parsed.data;
    resolveInitialRender2();
  }
  function onChangeLocale2(payload) {
    const parsed = localeSettingsSchema.safeParse(payload);
    if (!parsed.success) {
      console.error("could not parse incoming protection status from onChangeLocale");
      console.error(parsed.error);
      return;
    }
    locale2 = parsed.data.locale;
    channel3?.send("updateTabData", { via: "onChangeLocale" });
  }
  function onChangeFeatureSettings(payload) {
    const parsed = remoteFeatureSettingsSchema.safeParse(payload);
    if (!parsed.success) {
      console.error("could not parse incoming protection status from onChangeFeatureSettings");
      console.error(parsed.error);
      return;
    }
    featureSettings = parsed.data;
    channel3?.send("updateTabData", { via: "onChangeFeatureSettings" });
  }
  function onChangeConsentManaged2(payload) {
    const parsed = cookiePromptManagementStatusSchema.safeParse(payload);
    if (!parsed.success) {
      console.error("could not parse incoming data from onChangeConsentManaged");
      console.error(parsed.error);
      return;
    }
    Object.assign(cookiePromptManagementStatus2, parsed.data);
    channel3?.send("updateTabData");
  }
  async function fetchAndroid(message) {
    if (message instanceof SetListsMessage) {
      for (const listItem of message.lists) {
        const { list, value } = listItem;
        if (list !== "allowlisted") {
          if (!window.__playwright)
            console.warn("only `allowlisted` is currently supported on android");
          continue;
        }
        const isProtected = value === false;
        privacyDashboardApi.toggleAllowlist(isProtected);
      }
    }
    if (message instanceof CloseMessage) {
      privacyDashboardApi.close();
    }
    if (message instanceof CheckBrokenSiteReportHandledMessage) {
      privacyDashboardApi.showBreakageForm();
      return true;
    }
    if (message instanceof OpenSettingsMessages) {
      privacyDashboardApi.openSettings({
        target: message.target
      });
    }
  }
  function setup4() {
    const setColorScheme = setupColorScheme();
    window.onChangeTheme = function(themeName) {
      setColorScheme(themeName);
    };
    window.onChangeProtectionStatus = onChangeProtectionStatus2;
    window.onChangeLocale = onChangeLocale2;
    window.onChangeRequestData = onChangeRequestData2;
    window.onChangeConsentManaged = onChangeConsentManaged2;
    window.onChangeFeatureSettings = onChangeFeatureSettings;
    window.onChangeAllowedPermissions = function(data) {
      permissionsData2 = data;
      channel3?.send("updateTabData", { via: "onChangeAllowedPermissions" });
    };
    window.onChangeUpgradedHttps = function(data) {
      upgradedHttps2 = data;
      if (trackerBlockingData2)
        trackerBlockingData2.upgradedHttps = upgradedHttps2;
      resolveInitialRender2();
    };
    window.onChangeCertificateData = function(data) {
      certificateData2 = data.secCertificateViewModels;
      channel3?.send("updateTabData", { via: "onChangeCertificateData" });
    };
    window.onIsPendingUpdates = function(data) {
      isPendingUpdates2 = data;
      channel3?.send("updateTabData", { via: "onIsPendingUpdates" });
    };
    window.onChangeParentEntity = function(data) {
      parentEntity2 = data;
      channel3?.send("updateTabData", { via: "onChangeParentEntity" });
    };
    privacyDashboardApi = new PrivacyDashboardJavascriptInterface();
    setupBlurOnLongPress();
    setupGlobalOpenerListener((href) => {
      privacyDashboardApi.openInNewTab({
        url: href
      });
    });
  }
  var channel3, backgroundMessage3, getBackgroundTabDataPromises2, trackerBlockingData2, permissionsData2, certificateData2, upgradedHttps2, protections2, isPendingUpdates2, parentEntity2, cookiePromptManagementStatus2, locale2, featureSettings, combineSources2, resolveInitialRender2, PrivacyDashboardJavascriptInterface, privacyDashboardApi, getBackgroundTabDataAndroid, getBackgroundTabData3, fetch4;
  var init_android_communication = __esm({
    "shared/js/browser/android-communication.js"() {
      "use strict";
      init_schema_parsers();
      init_utils();
      init_common();
      init_request_details();
      channel3 = null;
      backgroundMessage3 = (backgroundModel) => {
        channel3 = backgroundModel;
      };
      getBackgroundTabDataPromises2 = [];
      cookiePromptManagementStatus2 = {};
      combineSources2 = () => ({
        tab: Object.assign(
          {},
          trackerBlockingData2 || {},
          {
            isPendingUpdates: isPendingUpdates2,
            parentEntity: parentEntity2,
            cookiePromptManagementStatus: cookiePromptManagementStatus2,
            locale: locale2
          },
          permissionsData2 ? { permissions: permissionsData2 } : {},
          certificateData2 ? { certificate: certificateData2 } : {}
        ),
        featureSettings
      });
      resolveInitialRender2 = function() {
        const isUpgradedHttpsSet = typeof upgradedHttps2 === "boolean";
        const isIsProtectedSet = typeof protections2 !== "undefined";
        const isTrackerBlockingDataSet = typeof trackerBlockingData2 === "object";
        const isLocaleSet = typeof locale2 === "string";
        if (!isLocaleSet || !isUpgradedHttpsSet || !isIsProtectedSet || !isTrackerBlockingDataSet) {
          return;
        }
        getBackgroundTabDataPromises2.forEach((resolve) => resolve(combineSources2()));
        channel3?.send("updateTabData", { via: "resolveInitialRender" });
      };
      PrivacyDashboardJavascriptInterface = class {
        /**
         * @param {boolean} isProtected - note: this will be sent as valid JSON, eg: `"true"` or `"false"`
         *
         * Add the current domain to the 'allowlist'
         *
         * ```js
         * window.PrivacyDashboard.toggleAllowlist("true")
         * ```
         *
         * Remove the current domain from the 'allowlist'
         *
         * ```js
         * window.PrivacyDashboard.toggleAllowlist("false")
         * ```
         */
        toggleAllowlist(isProtected) {
          window.PrivacyDashboard.toggleAllowlist(isProtected);
        }
        /**
         * Shows the native breakage form, instead of using the one
         * embedded in the Privacy Dashboard
         * @example
         * ```
         * window.PrivacyDashboard.showBreakageForm()
         * ```
         */
        showBreakageForm() {
          window.PrivacyDashboard.showBreakageForm();
        }
        /**
         * @example
         * ```
         * window.PrivacyDashboard.close()
         * ```
         */
        close() {
          window.PrivacyDashboard.close();
        }
        /**
         * {@inheritDoc common.openInNewTab}
         * @type {import("./common.js").openInNewTab}
         *
         * ```js
         * const payload = JSON.stringify({
         *     "url": "https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/"
         * });
         * window.PrivacyDashboard.openInNewTab(payload)
         * ```
         */
        openInNewTab(payload) {
          window.PrivacyDashboard.openInNewTab(JSON.stringify(payload));
        }
        /**
         * {@inheritDoc common.openSettings}
         * @type {import("./common.js").openSettings}
         * @example
         * ```js
         * const payload = JSON.stringify({
         *     "target": "cpm"
         * });
         * window.PrivacyDashboard.openSettings(payload)
         * ```
         */
        openSettings(payload) {
          window.PrivacyDashboard.openSettings(JSON.stringify(payload));
        }
      };
      getBackgroundTabDataAndroid = () => {
        return new Promise((resolve) => {
          if (trackerBlockingData2) {
            resolve(combineSources2());
            return;
          }
          getBackgroundTabDataPromises2.push(resolve);
        });
      };
      getBackgroundTabData3 = new Proxy(getBackgroundTabDataAndroid, {
        apply(target, thisArg, argArray) {
          return Reflect.apply(target, thisArg, argArray);
        }
      });
      fetch4 = new Proxy(fetchAndroid, {
        apply(target, thisArg, argArray) {
          return Reflect.apply(target, thisArg, argArray);
        }
      });
    }
  });

  // shared/js/browser/windows-communication.js
  var windows_communication_exports = {};
  __export(windows_communication_exports, {
    OpenInNewTab: () => OpenInNewTab,
    OpenSettings: () => OpenSettings,
    SetSize: () => SetSize,
    SubmitBrokenSiteReport: () => SubmitBrokenSiteReport,
    backgroundMessage: () => backgroundMessage4,
    fetch: () => fetch5,
    firstRenderComplete: () => firstRenderComplete2,
    getBackgroundTabData: () => getBackgroundTabData4,
    handleIncomingMessage: () => handleIncomingMessage,
    setup: () => setup5
  });
  function handleViewModelUpdate(viewModel) {
    upgradedHttps3 = viewModel.upgradedHttps;
    parentEntity3 = viewModel.parentEntity || {};
    permissionsData3 = viewModel.permissions || [];
    certificateData3 = viewModel.certificates || [];
    protections3 = viewModel.protections;
    trackerBlockingData3 = createTabData(viewModel.tabUrl, upgradedHttps3, viewModel.protections, viewModel.rawRequestData);
    trackerBlockingData3.cookiePromptManagementStatus = viewModel.cookiePromptManagementStatus;
    if (trackerBlockingData3)
      trackerBlockingData3.upgradedHttps = upgradedHttps3;
    resolveInitialRender3();
  }
  function windowsPostMessage(name, data) {
    assert(typeof window.chrome.webview?.postMessage === "function");
    window.chrome.webview.postMessage({
      Feature: "PrivacyDashboard",
      Name: name,
      Data: data
    });
  }
  async function fetch5(message) {
    if (message instanceof SubmitBrokenSiteReportMessage) {
      SubmitBrokenSiteReport({
        category: message.category,
        description: message.description
      });
      return;
    }
    if (message instanceof OpenSettingsMessages) {
      OpenSettings({
        target: message.target
      });
      return;
    }
    if (message instanceof SetListsMessage) {
      for (const listItem of message.lists) {
        const { list, value } = listItem;
        if (list !== "allowlisted") {
          if (!window.__playwright)
            console.warn("only `allowlisted` is currently supported on windows");
          continue;
        }
        const isProtected = value === false;
        const eventOrigin = message.eventOrigin;
        if (isProtected) {
          windowsPostMessage("RemoveFromAllowListCommand", { eventOrigin });
        } else {
          windowsPostMessage("AddToAllowListCommand", { eventOrigin });
        }
      }
    }
    if (message instanceof UpdatePermissionMessage) {
      windowsPostMessage("SetPermissionCommand", {
        permission: message.id,
        value: message.value
      });
    }
  }
  function SubmitBrokenSiteReport(report2) {
    windowsPostMessage("SubmitBrokenSiteReport", {
      category: report2.category,
      description: report2.description
    });
  }
  function OpenInNewTab(args) {
    windowsPostMessage("OpenInNewTab", {
      url: args.url
    });
  }
  function SetSize(payload) {
    windowsPostMessage("SetSize", payload);
  }
  function OpenSettings(args) {
    windowsPostMessage("OpenSettings", args);
  }
  function handleIncomingMessage(message) {
    const parsed = eventShape.safeParse(message);
    if (!parsed.success) {
      console.error("cannot handle incoming message from event data", message);
      console.error(parsed.error);
      return;
    }
    switch (parsed.data.Name) {
      case "VisibilityChanged": {
        if (parsed.data.Data.isVisible === false) {
          document.body.innerHTML = "";
        }
        break;
      }
      case "ViewModelUpdated": {
        handleViewModelUpdate(parsed.data.Data);
      }
    }
  }
  function setup5() {
    if (!window.chrome.webview) {
      console.error("window.chrome.webview not available");
      return;
    }
    setupColorScheme();
    assert(typeof window.chrome.webview?.addEventListener === "function", "window.chrome.webview.addEventListener is required");
    window.chrome.webview.addEventListener("message", (event) => {
      handleIncomingMessage(event.data);
    });
    setupMutationObserver((height) => {
      SetSize({ height });
    });
    setupGlobalOpenerListener((href) => {
      OpenInNewTab({
        url: href
      });
    });
  }
  function firstRenderComplete2() {
    const height = getContentHeight();
    if (typeof height === "number") {
      SetSize({ height });
    }
  }
  var channel4, backgroundMessage4, getBackgroundTabDataPromises3, trackerBlockingData3, permissionsData3, certificateData3, upgradedHttps3, protections3, isPendingUpdates3, parentEntity3, combineSources3, resolveInitialRender3, getBackgroundTabData4, eventShape;
  var init_windows_communication = __esm({
    "shared/js/browser/windows-communication.js"() {
      "use strict";
      init_lib();
      init_schema_parsers();
      init_utils();
      init_common();
      init_request_details();
      channel4 = null;
      backgroundMessage4 = (backgroundModel) => {
        channel4 = backgroundModel;
      };
      getBackgroundTabDataPromises3 = [];
      combineSources3 = () => ({
        tab: Object.assign(
          {},
          trackerBlockingData3 || {},
          {
            isPendingUpdates: isPendingUpdates3,
            parentEntity: parentEntity3
          },
          permissionsData3 ? { permissions: permissionsData3 } : {},
          certificateData3 ? { certificate: certificateData3 } : {}
        )
      });
      resolveInitialRender3 = function() {
        const isUpgradedHttpsSet = typeof upgradedHttps3 === "boolean";
        const isIsProtectedSet = typeof protections3 !== "undefined";
        const isTrackerBlockingDataSet = typeof trackerBlockingData3 === "object";
        if (!isUpgradedHttpsSet || !isIsProtectedSet || !isTrackerBlockingDataSet) {
          return;
        }
        getBackgroundTabDataPromises3.forEach((resolve) => resolve(combineSources3()));
        channel4?.send("updateTabData");
      };
      getBackgroundTabData4 = () => {
        return new Promise((resolve) => {
          if (trackerBlockingData3) {
            resolve(combineSources3());
            return;
          }
          getBackgroundTabDataPromises3.push(resolve);
        });
      };
      eventShape = mod.discriminatedUnion("Name", [windowsIncomingViewModelSchema, windowsIncomingVisibilitySchema]);
    }
  });

  // shared/js/browser/utils/communication-mocks.mjs
  var init_communication_mocks = __esm({
    "shared/js/browser/utils/communication-mocks.mjs"() {
      "use strict";
    }
  });

  // shared/js/browser/communication.js
  var defaultComms, platform, communication_default;
  var init_communication = __esm({
    "shared/js/browser/communication.js"() {
      "use strict";
      init_environment_check();
      init_browser_communication();
      init_ios_communication();
      init_android_communication();
      init_windows_communication();
      init_macos_communication();
      init_communication_mocks();
      platform = {
        name: "browser"
      };
      if (isIOS()) {
        defaultComms = ios_communication_exports;
        platform.name = "ios";
      } else if (isBrowser()) {
        defaultComms = browser_communication_exports;
        platform.name = "browser";
      } else if (isAndroid()) {
        defaultComms = android_communication_exports;
        platform.name = "android";
      } else if (isWindows()) {
        defaultComms = windows_communication_exports;
        platform.name = "windows";
      } else if (isMacos()) {
        defaultComms = macos_communication_exports;
        platform.name = "macos";
      }
      if (!defaultComms)
        throw new Error("unsupported environment");
      defaultComms.setup();
      communication_default = defaultComms;
    }
  });

  // shared/js/ui/base/model.js
  function BaseModel(attrs) {
    import_jquery2.default.extend(this, attrs);
    if (!this.modelName || typeof this.modelName !== "string") {
      throw new Error("cannot init model without `modelName` property");
    } else {
      this.store = store_exports;
      this.store.register(this.modelName);
    }
  }
  var import_jquery2, baseModelMethods, model_default;
  var init_model = __esm({
    "shared/js/ui/base/model.js"() {
      "use strict";
      import_jquery2 = __toESM(require_jquery());
      init_communication();
      init_mixins();
      init_store();
      baseModelMethods = {
        /**
         * Setter method for modifying attributes
         * on the model. Since the attributes
         * are directly accessible + mutable on the object
         * itself, you don't *have* to use the set method.
         *
         * However, the benefit of using the set method
         * is that changes are broadcast out via store
         * to any UI components that might want to observe
         * changes and update their state.
         *
         * @param {string | object} attr
         * @param {*} val
         * @api public
         * @this {any}
         */
        set: function(attr, val) {
          if (typeof attr === "object") {
            for (const key in attr) {
              this.set(key, attr[key], val);
            }
            return;
          }
          const lastValue = this[attr] || null;
          this[attr] = val;
          if (val) {
            val = JSON.parse(JSON.stringify(val));
          }
          this.store.publish({
            notifierName: this.modelName,
            change: { attribute: attr, value: val, lastValue },
            attributes: this._toJSON()
          });
        },
        /**
         * Convenience method for code clarity
         * so we can explicitly call clear()
         * instead of doing null sets.
         * Using .clear() broadcasts the change
         * out to the rest of the app via this.set()
         * which calls this.store.publish()
         */
        clear: function(attr) {
          this.set(attr, null);
        },
        /**
         * Destroy any of this model's bound events
         * and remove its reducer from store so
         * there is no memeory footprint left.
         * Mostly used when view.destroy() is called.
         */
        destroy: function() {
          this.unbindEvents();
          this.store.remove(this.modelName);
        },
        /**
         * Fetch data from background
         * this.model.fetch({'messageName': messageValue}).then((response) ..
         **/
        fetch: function(message) {
          return communication_default.fetch(message);
        },
        /**
         * Send a user action
         * Broadcasts an action to other UI components
         * via notification store
         * @param action {string}
         * @param data - could be a jquery event or other data is optional
         */
        send: function(action, data) {
          if (!action)
            throw new Error("model.send() requires an action argument");
          data = data || null;
          if (data) {
            data = JSON.parse(JSON.stringify(data));
          }
          this.store.publish({
            notifierName: this.modelName,
            action,
            data,
            attributes: this._toJSON()
          });
        },
        /**
         * Private method for turning `this` into a
         * JSON object before sending to application store.
         * Basically just weeds out properties that
         * are functions.
         */
        _toJSON: function() {
          const attributes = Object.assign({}, Object.getPrototypeOf(this), this);
          if (attributes.store)
            delete attributes.store;
          return JSON.parse(JSON.stringify(attributes));
        }
      };
      BaseModel.prototype = import_jquery2.default.extend({}, events_exports, baseModelMethods);
      model_default = BaseModel;
    }
  });

  // shared/js/ui/models/email-protection.js
  function EmailProtectionModel(attrs) {
    attrs = attrs || {};
    if (!("emailProtectionUserData" in attrs)) {
      throw new Error("`emailProtectionUserData` is required for EmailProtectionModel");
    }
    model_default.call(this, attrs);
    this._setup();
  }
  var import_jquery3, email_protection_default;
  var init_email_protection = __esm({
    "shared/js/ui/models/email-protection.js"() {
      "use strict";
      import_jquery3 = __toESM(require_jquery());
      init_lib();
      init_model();
      init_common();
      EmailProtectionModel.prototype = import_jquery3.default.extend({}, model_default.prototype, {
        modelName: "emailProtection",
        /**
         * @type {UserData | null}
         */
        emailProtectionUserData: null,
        /**
         * A state enum the UI can use to decide what to render.
         *
         * 'unknown' - this means we don't have sufficient data to determine the current state
         * 'idle' - this means we are able to provide an alias, but nothing is currently happening
         * 'added' - this is a temporary state that is entered into following use of the alias.
         *
         * @type {"unknown" | "idle" | "added"}
         */
        state: "unknown",
        /**
         * From the initial data, decide what the first state should be
         * @private
         */
        _setup() {
          if (this.emailProtectionUserData?.nextAlias) {
            this.state = "idle";
          }
        },
        /**
         * @this {import('./site.js').LocalThis}
         * @returns {*}
         */
        refreshAlias: function() {
          return this.fetch(new RefreshEmailAliasMessage()).then((resp) => {
            const response = mod.object({
              privateAddress: mod.string().optional()
            });
            const parsed = response.safeParse(resp);
            if (!parsed.success) {
              console.warn("response did not contain a valid private address", resp);
              this.emailProtectionUserData.nextAlias = null;
            } else {
              this.emailProtectionUserData.nextAlias = parsed.data.privateAddress;
            }
          });
        }
      });
      email_protection_default = EmailProtectionModel;
    }
  });

  // node_modules/hyperscript-attribute-to-property/index.js
  var require_hyperscript_attribute_to_property = __commonJS({
    "node_modules/hyperscript-attribute-to-property/index.js"(exports, module) {
      module.exports = attributeToProperty;
      var transform = {
        "class": "className",
        "for": "htmlFor",
        "http-equiv": "httpEquiv"
      };
      function attributeToProperty(h3) {
        return function(tagName, attrs, children) {
          for (var attr in attrs) {
            if (attr in transform) {
              attrs[transform[attr]] = attrs[attr];
              delete attrs[attr];
            }
          }
          return h3(tagName, attrs, children);
        };
      }
    }
  });

  // node_modules/hyperx/index.js
  var require_hyperx = __commonJS({
    "node_modules/hyperx/index.js"(exports, module) {
      var attrToProp = require_hyperscript_attribute_to_property();
      var VAR = 0;
      var TEXT = 1;
      var OPEN = 2;
      var CLOSE = 3;
      var ATTR = 4;
      var ATTR_KEY = 5;
      var ATTR_KEY_W = 6;
      var ATTR_VALUE_W = 7;
      var ATTR_VALUE = 8;
      var ATTR_VALUE_SQ = 9;
      var ATTR_VALUE_DQ = 10;
      var ATTR_EQ = 11;
      var ATTR_BREAK = 12;
      var COMMENT = 13;
      module.exports = function(h3, opts) {
        if (!opts)
          opts = {};
        var concat = opts.concat || function(a3, b3) {
          return String(a3) + String(b3);
        };
        if (opts.attrToProp !== false) {
          h3 = attrToProp(h3);
        }
        return function(strings2) {
          var state = TEXT, reg = "";
          var arglen = arguments.length;
          var parts = [];
          for (var i3 = 0; i3 < strings2.length; i3++) {
            if (i3 < arglen - 1) {
              var arg = arguments[i3 + 1];
              var p3 = parse2(strings2[i3]);
              var xstate = state;
              if (xstate === ATTR_VALUE_DQ)
                xstate = ATTR_VALUE;
              if (xstate === ATTR_VALUE_SQ)
                xstate = ATTR_VALUE;
              if (xstate === ATTR_VALUE_W)
                xstate = ATTR_VALUE;
              if (xstate === ATTR)
                xstate = ATTR_KEY;
              if (xstate === OPEN) {
                if (reg === "/") {
                  p3.push([OPEN, "/", arg]);
                  reg = "";
                } else {
                  p3.push([OPEN, arg]);
                }
              } else if (xstate === COMMENT && opts.comments) {
                reg += String(arg);
              } else if (xstate !== COMMENT) {
                p3.push([VAR, xstate, arg]);
              }
              parts.push.apply(parts, p3);
            } else
              parts.push.apply(parts, parse2(strings2[i3]));
          }
          var tree = [null, {}, []];
          var stack = [[tree, -1]];
          for (var i3 = 0; i3 < parts.length; i3++) {
            var cur = stack[stack.length - 1][0];
            var p3 = parts[i3], s3 = p3[0];
            if (s3 === OPEN && /^\//.test(p3[1])) {
              var ix = stack[stack.length - 1][1];
              if (stack.length > 1) {
                stack.pop();
                stack[stack.length - 1][0][2][ix] = h3(
                  cur[0],
                  cur[1],
                  cur[2].length ? cur[2] : void 0
                );
              }
            } else if (s3 === OPEN) {
              var c3 = [p3[1], {}, []];
              cur[2].push(c3);
              stack.push([c3, cur[2].length - 1]);
            } else if (s3 === ATTR_KEY || s3 === VAR && p3[1] === ATTR_KEY) {
              var key = "";
              var copyKey;
              for (; i3 < parts.length; i3++) {
                if (parts[i3][0] === ATTR_KEY) {
                  key = concat(key, parts[i3][1]);
                } else if (parts[i3][0] === VAR && parts[i3][1] === ATTR_KEY) {
                  if (typeof parts[i3][2] === "object" && !key) {
                    for (copyKey in parts[i3][2]) {
                      if (parts[i3][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {
                        cur[1][copyKey] = parts[i3][2][copyKey];
                      }
                    }
                  } else {
                    key = concat(key, parts[i3][2]);
                  }
                } else
                  break;
              }
              if (parts[i3][0] === ATTR_EQ)
                i3++;
              var j3 = i3;
              for (; i3 < parts.length; i3++) {
                if (parts[i3][0] === ATTR_VALUE || parts[i3][0] === ATTR_KEY) {
                  if (!cur[1][key])
                    cur[1][key] = strfn(parts[i3][1]);
                  else
                    parts[i3][1] === "" || (cur[1][key] = concat(cur[1][key], parts[i3][1]));
                } else if (parts[i3][0] === VAR && (parts[i3][1] === ATTR_VALUE || parts[i3][1] === ATTR_KEY)) {
                  if (!cur[1][key])
                    cur[1][key] = strfn(parts[i3][2]);
                  else
                    parts[i3][2] === "" || (cur[1][key] = concat(cur[1][key], parts[i3][2]));
                } else {
                  if (key.length && !cur[1][key] && i3 === j3 && (parts[i3][0] === CLOSE || parts[i3][0] === ATTR_BREAK)) {
                    cur[1][key] = key.toLowerCase();
                  }
                  if (parts[i3][0] === CLOSE) {
                    i3--;
                  }
                  break;
                }
              }
            } else if (s3 === ATTR_KEY) {
              cur[1][p3[1]] = true;
            } else if (s3 === VAR && p3[1] === ATTR_KEY) {
              cur[1][p3[2]] = true;
            } else if (s3 === CLOSE) {
              if (selfClosing(cur[0]) && stack.length) {
                var ix = stack[stack.length - 1][1];
                stack.pop();
                stack[stack.length - 1][0][2][ix] = h3(
                  cur[0],
                  cur[1],
                  cur[2].length ? cur[2] : void 0
                );
              }
            } else if (s3 === VAR && p3[1] === TEXT) {
              if (p3[2] === void 0 || p3[2] === null)
                p3[2] = "";
              else if (!p3[2])
                p3[2] = concat("", p3[2]);
              if (Array.isArray(p3[2][0])) {
                cur[2].push.apply(cur[2], p3[2]);
              } else {
                cur[2].push(p3[2]);
              }
            } else if (s3 === TEXT) {
              cur[2].push(p3[1]);
            } else if (s3 === ATTR_EQ || s3 === ATTR_BREAK) {
            } else {
              throw new Error("unhandled: " + s3);
            }
          }
          if (tree[2].length > 1 && /^\s*$/.test(tree[2][0])) {
            tree[2].shift();
          }
          if (tree[2].length > 2 || tree[2].length === 2 && /\S/.test(tree[2][1])) {
            if (opts.createFragment)
              return opts.createFragment(tree[2]);
            throw new Error(
              "multiple root elements must be wrapped in an enclosing tag"
            );
          }
          if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === "string" && Array.isArray(tree[2][0][2])) {
            tree[2][0] = h3(tree[2][0][0], tree[2][0][1], tree[2][0][2]);
          }
          return tree[2][0];
          function parse2(str) {
            var res = [];
            if (state === ATTR_VALUE_W)
              state = ATTR;
            for (var i4 = 0; i4 < str.length; i4++) {
              var c4 = str.charAt(i4);
              if (state === TEXT && c4 === "<") {
                if (reg.length)
                  res.push([TEXT, reg]);
                reg = "";
                state = OPEN;
              } else if (c4 === ">" && !quot(state) && state !== COMMENT) {
                if (state === OPEN && reg.length) {
                  res.push([OPEN, reg]);
                } else if (state === ATTR_KEY) {
                  res.push([ATTR_KEY, reg]);
                } else if (state === ATTR_VALUE && reg.length) {
                  res.push([ATTR_VALUE, reg]);
                }
                res.push([CLOSE]);
                reg = "";
                state = TEXT;
              } else if (state === COMMENT && /-$/.test(reg) && c4 === "-") {
                if (opts.comments) {
                  res.push([ATTR_VALUE, reg.substr(0, reg.length - 1)]);
                }
                reg = "";
                state = TEXT;
              } else if (state === OPEN && /^!--$/.test(reg)) {
                if (opts.comments) {
                  res.push([OPEN, reg], [ATTR_KEY, "comment"], [ATTR_EQ]);
                }
                reg = c4;
                state = COMMENT;
              } else if (state === TEXT || state === COMMENT) {
                reg += c4;
              } else if (state === OPEN && c4 === "/" && reg.length) {
              } else if (state === OPEN && /\s/.test(c4)) {
                if (reg.length) {
                  res.push([OPEN, reg]);
                }
                reg = "";
                state = ATTR;
              } else if (state === OPEN) {
                reg += c4;
              } else if (state === ATTR && /[^\s"'=/]/.test(c4)) {
                state = ATTR_KEY;
                reg = c4;
              } else if (state === ATTR && /\s/.test(c4)) {
                if (reg.length)
                  res.push([ATTR_KEY, reg]);
                res.push([ATTR_BREAK]);
              } else if (state === ATTR_KEY && /\s/.test(c4)) {
                res.push([ATTR_KEY, reg]);
                reg = "";
                state = ATTR_KEY_W;
              } else if (state === ATTR_KEY && c4 === "=") {
                res.push([ATTR_KEY, reg], [ATTR_EQ]);
                reg = "";
                state = ATTR_VALUE_W;
              } else if (state === ATTR_KEY) {
                reg += c4;
              } else if ((state === ATTR_KEY_W || state === ATTR) && c4 === "=") {
                res.push([ATTR_EQ]);
                state = ATTR_VALUE_W;
              } else if ((state === ATTR_KEY_W || state === ATTR) && !/\s/.test(c4)) {
                res.push([ATTR_BREAK]);
                if (/[\w-]/.test(c4)) {
                  reg += c4;
                  state = ATTR_KEY;
                } else
                  state = ATTR;
              } else if (state === ATTR_VALUE_W && c4 === '"') {
                state = ATTR_VALUE_DQ;
              } else if (state === ATTR_VALUE_W && c4 === "'") {
                state = ATTR_VALUE_SQ;
              } else if (state === ATTR_VALUE_DQ && c4 === '"') {
                res.push([ATTR_VALUE, reg], [ATTR_BREAK]);
                reg = "";
                state = ATTR;
              } else if (state === ATTR_VALUE_SQ && c4 === "'") {
                res.push([ATTR_VALUE, reg], [ATTR_BREAK]);
                reg = "";
                state = ATTR;
              } else if (state === ATTR_VALUE_W && !/\s/.test(c4)) {
                state = ATTR_VALUE;
                i4--;
              } else if (state === ATTR_VALUE && /\s/.test(c4)) {
                res.push([ATTR_VALUE, reg], [ATTR_BREAK]);
                reg = "";
                state = ATTR;
              } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ) {
                reg += c4;
              }
            }
            if (state === TEXT && reg.length) {
              res.push([TEXT, reg]);
              reg = "";
            } else if (state === ATTR_VALUE && reg.length) {
              res.push([ATTR_VALUE, reg]);
              reg = "";
            } else if (state === ATTR_VALUE_DQ && reg.length) {
              res.push([ATTR_VALUE, reg]);
              reg = "";
            } else if (state === ATTR_VALUE_SQ && reg.length) {
              res.push([ATTR_VALUE, reg]);
              reg = "";
            } else if (state === ATTR_KEY) {
              res.push([ATTR_KEY, reg]);
              reg = "";
            }
            return res;
          }
        };
        function strfn(x2) {
          if (typeof x2 === "function")
            return x2;
          else if (typeof x2 === "string")
            return x2;
          else if (x2 && typeof x2 === "object")
            return x2;
          else if (x2 === null || x2 === void 0)
            return x2;
          else
            return concat("", x2);
        }
      };
      function quot(state) {
        return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ;
      }
      var closeRE = RegExp("^(" + [
        "area",
        "base",
        "basefont",
        "bgsound",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr",
        "!--",
        // SVG TAGS
        "animate",
        "animateTransform",
        "circle",
        "cursor",
        "desc",
        "ellipse",
        "feBlend",
        "feColorMatrix",
        "feComposite",
        "feConvolveMatrix",
        "feDiffuseLighting",
        "feDisplacementMap",
        "feDistantLight",
        "feFlood",
        "feFuncA",
        "feFuncB",
        "feFuncG",
        "feFuncR",
        "feGaussianBlur",
        "feImage",
        "feMergeNode",
        "feMorphology",
        "feOffset",
        "fePointLight",
        "feSpecularLighting",
        "feSpotLight",
        "feTile",
        "feTurbulence",
        "font-face-format",
        "font-face-name",
        "font-face-uri",
        "glyph",
        "glyphRef",
        "hkern",
        "image",
        "line",
        "missing-glyph",
        "mpath",
        "path",
        "polygon",
        "polyline",
        "rect",
        "set",
        "stop",
        "tref",
        "use",
        "view",
        "vkern"
      ].join("|") + ")(?:[.#][a-zA-Z0-9\x7F-\uFFFF_:-]+)*$");
      function selfClosing(tag) {
        return closeRE.test(tag);
      }
    }
  });

  // node_modules/nanohtml/lib/append-child.js
  var require_append_child = __commonJS({
    "node_modules/nanohtml/lib/append-child.js"(exports, module) {
      "use strict";
      var trailingNewlineRegex = /\n[\s]+$/;
      var leadingNewlineRegex = /^\n[\s]+/;
      var trailingSpaceRegex = /[\s]+$/;
      var leadingSpaceRegex = /^[\s]+/;
      var multiSpaceRegex = /[\n\s]+/g;
      var TEXT_TAGS = [
        "a",
        "abbr",
        "b",
        "bdi",
        "bdo",
        "br",
        "cite",
        "data",
        "dfn",
        "em",
        "i",
        "kbd",
        "mark",
        "q",
        "rp",
        "rt",
        "rtc",
        "ruby",
        "s",
        "amp",
        "small",
        "span",
        "strong",
        "sub",
        "sup",
        "time",
        "u",
        "var",
        "wbr"
      ];
      var VERBATIM_TAGS = [
        "code",
        "pre",
        "textarea"
      ];
      module.exports = function appendChild(el, childs) {
        if (!Array.isArray(childs))
          return;
        var nodeName = el.nodeName.toLowerCase();
        var hadText = false;
        var value, leader;
        for (var i3 = 0, len = childs.length; i3 < len; i3++) {
          var node = childs[i3];
          if (Array.isArray(node)) {
            appendChild(el, node);
            continue;
          }
          if (typeof node === "number" || typeof node === "boolean" || typeof node === "function" || node instanceof Date || node instanceof RegExp) {
            node = node.toString();
          }
          var lastChild = el.childNodes[el.childNodes.length - 1];
          if (typeof node === "string") {
            hadText = true;
            if (lastChild && lastChild.nodeName === "#text") {
              lastChild.nodeValue += node;
            } else {
              node = el.ownerDocument.createTextNode(node);
              el.appendChild(node);
              lastChild = node;
            }
            if (i3 === len - 1) {
              hadText = false;
              if (TEXT_TAGS.indexOf(nodeName) === -1 && VERBATIM_TAGS.indexOf(nodeName) === -1) {
                value = lastChild.nodeValue.replace(leadingNewlineRegex, "").replace(trailingSpaceRegex, "").replace(trailingNewlineRegex, "").replace(multiSpaceRegex, " ");
                if (value === "") {
                  el.removeChild(lastChild);
                } else {
                  lastChild.nodeValue = value;
                }
              } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
                leader = i3 === 0 ? "" : " ";
                value = lastChild.nodeValue.replace(leadingNewlineRegex, leader).replace(leadingSpaceRegex, " ").replace(trailingSpaceRegex, "").replace(trailingNewlineRegex, "").replace(multiSpaceRegex, " ");
                lastChild.nodeValue = value;
              }
            }
          } else if (node && node.nodeType) {
            if (hadText) {
              hadText = false;
              if (TEXT_TAGS.indexOf(nodeName) === -1 && VERBATIM_TAGS.indexOf(nodeName) === -1) {
                value = lastChild.nodeValue.replace(leadingNewlineRegex, "").replace(trailingNewlineRegex, " ").replace(multiSpaceRegex, " ");
                if (value === "") {
                  el.removeChild(lastChild);
                } else {
                  lastChild.nodeValue = value;
                }
              } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {
                value = lastChild.nodeValue.replace(leadingSpaceRegex, " ").replace(leadingNewlineRegex, "").replace(trailingNewlineRegex, " ").replace(multiSpaceRegex, " ");
                lastChild.nodeValue = value;
              }
            }
            var _nodeName = node.nodeName;
            if (_nodeName)
              nodeName = _nodeName.toLowerCase();
            el.appendChild(node);
          }
        }
      };
    }
  });

  // node_modules/nanohtml/lib/svg-tags.js
  var require_svg_tags = __commonJS({
    "node_modules/nanohtml/lib/svg-tags.js"(exports, module) {
      "use strict";
      module.exports = [
        "svg",
        "altGlyph",
        "altGlyphDef",
        "altGlyphItem",
        "animate",
        "animateColor",
        "animateMotion",
        "animateTransform",
        "circle",
        "clipPath",
        "color-profile",
        "cursor",
        "defs",
        "desc",
        "ellipse",
        "feBlend",
        "feColorMatrix",
        "feComponentTransfer",
        "feComposite",
        "feConvolveMatrix",
        "feDiffuseLighting",
        "feDisplacementMap",
        "feDistantLight",
        "feFlood",
        "feFuncA",
        "feFuncB",
        "feFuncG",
        "feFuncR",
        "feGaussianBlur",
        "feImage",
        "feMerge",
        "feMergeNode",
        "feMorphology",
        "feOffset",
        "fePointLight",
        "feSpecularLighting",
        "feSpotLight",
        "feTile",
        "feTurbulence",
        "filter",
        "font",
        "font-face",
        "font-face-format",
        "font-face-name",
        "font-face-src",
        "font-face-uri",
        "foreignObject",
        "g",
        "glyph",
        "glyphRef",
        "hkern",
        "image",
        "line",
        "linearGradient",
        "marker",
        "mask",
        "metadata",
        "missing-glyph",
        "mpath",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "set",
        "stop",
        "switch",
        "symbol",
        "text",
        "textPath",
        "title",
        "tref",
        "tspan",
        "use",
        "view",
        "vkern"
      ];
    }
  });

  // node_modules/nanohtml/lib/bool-props.js
  var require_bool_props = __commonJS({
    "node_modules/nanohtml/lib/bool-props.js"(exports, module) {
      "use strict";
      module.exports = [
        "async",
        "autofocus",
        "autoplay",
        "checked",
        "controls",
        "default",
        "defaultchecked",
        "defer",
        "disabled",
        "formnovalidate",
        "hidden",
        "ismap",
        "loop",
        "multiple",
        "muted",
        "novalidate",
        "open",
        "playsinline",
        "readonly",
        "required",
        "reversed",
        "selected"
      ];
    }
  });

  // node_modules/nanohtml/lib/direct-props.js
  var require_direct_props = __commonJS({
    "node_modules/nanohtml/lib/direct-props.js"(exports, module) {
      "use strict";
      module.exports = [
        "indeterminate"
      ];
    }
  });

  // node_modules/nanohtml/lib/dom.js
  var require_dom = __commonJS({
    "node_modules/nanohtml/lib/dom.js"(exports, module) {
      "use strict";
      var hyperx = require_hyperx();
      var appendChild = require_append_child();
      var SVG_TAGS = require_svg_tags();
      var BOOL_PROPS = require_bool_props();
      var DIRECT_PROPS = require_direct_props();
      var SVGNS = "http://www.w3.org/2000/svg";
      var XLINKNS = "http://www.w3.org/1999/xlink";
      var COMMENT_TAG = "!--";
      module.exports = function(document2) {
        function nanoHtmlCreateElement(tag, props, children) {
          var el;
          if (SVG_TAGS.indexOf(tag) !== -1) {
            props.namespace = SVGNS;
          }
          var ns2 = false;
          if (props.namespace) {
            ns2 = props.namespace;
            delete props.namespace;
          }
          var isCustomElement = false;
          if (props.is) {
            isCustomElement = props.is;
            delete props.is;
          }
          if (ns2) {
            if (isCustomElement) {
              el = document2.createElementNS(ns2, tag, { is: isCustomElement });
            } else {
              el = document2.createElementNS(ns2, tag);
            }
          } else if (tag === COMMENT_TAG) {
            return document2.createComment(props.comment);
          } else if (isCustomElement) {
            el = document2.createElement(tag, { is: isCustomElement });
          } else {
            el = document2.createElement(tag);
          }
          for (var p3 in props) {
            if (props.hasOwnProperty(p3)) {
              var key = p3.toLowerCase();
              var val = props[p3];
              if (key === "classname") {
                key = "class";
                p3 = "class";
              }
              if (p3 === "htmlFor") {
                p3 = "for";
              }
              if (BOOL_PROPS.indexOf(key) !== -1) {
                if (String(val) === "true")
                  val = key;
                else if (String(val) === "false")
                  continue;
              }
              if (key.slice(0, 2) === "on" || DIRECT_PROPS.indexOf(key) !== -1) {
                el[p3] = val;
              } else {
                if (ns2) {
                  if (p3 === "xlink:href") {
                    el.setAttributeNS(XLINKNS, p3, val);
                  } else if (/^xmlns($|:)/i.test(p3)) {
                  } else {
                    el.setAttributeNS(null, p3, val);
                  }
                } else {
                  el.setAttribute(p3, val);
                }
              }
            }
          }
          appendChild(el, children);
          return el;
        }
        function createFragment(nodes) {
          var fragment = document2.createDocumentFragment();
          for (var i3 = 0; i3 < nodes.length; i3++) {
            if (nodes[i3] == null)
              continue;
            if (Array.isArray(nodes[i3])) {
              fragment.appendChild(createFragment(nodes[i3]));
            } else {
              if (typeof nodes[i3] === "string")
                nodes[i3] = document2.createTextNode(nodes[i3]);
              fragment.appendChild(nodes[i3]);
            }
          }
          return fragment;
        }
        var exports2 = hyperx(nanoHtmlCreateElement, {
          comments: true,
          createFragment
        });
        exports2.default = exports2;
        exports2.createComment = nanoHtmlCreateElement;
        return exports2;
      };
    }
  });

  // node_modules/nanohtml/lib/browser.js
  var require_browser = __commonJS({
    "node_modules/nanohtml/lib/browser.js"(exports, module) {
      module.exports = require_dom()(document);
    }
  });

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  var init_typeof = __esm({
    "node_modules/@babel/runtime/helpers/esm/typeof.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/classCallCheck.js
  function _classCallCheck(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var init_classCallCheck = __esm({
    "node_modules/@babel/runtime/helpers/esm/classCallCheck.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  var init_createClass = __esm({
    "node_modules/@babel/runtime/helpers/esm/createClass.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  var init_assertThisInitialized = __esm({
    "node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o3, p3) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o4, p4) {
      o4.__proto__ = p4;
      return o4;
    };
    return _setPrototypeOf(o3, p3);
  }
  var init_setPrototypeOf = __esm({
    "node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/inherits.js
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  var init_inherits = __esm({
    "node_modules/@babel/runtime/helpers/esm/inherits.js"() {
      init_setPrototypeOf();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  var init_possibleConstructorReturn = __esm({
    "node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"() {
      init_typeof();
      init_assertThisInitialized();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
  function _getPrototypeOf(o3) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf(o3);
  }
  var init_getPrototypeOf = __esm({
    "node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var init_defineProperty = __esm({
    "node_modules/@babel/runtime/helpers/esm/defineProperty.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(arr2) {
    if (Array.isArray(arr2))
      return arr2;
  }
  var init_arrayWithHoles = __esm({
    "node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  var init_iterableToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/iterableToArray.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr2, len) {
    if (len == null || len > arr2.length)
      len = arr2.length;
    for (var i3 = 0, arr22 = new Array(len); i3 < len; i3++) {
      arr22[i3] = arr2[i3];
    }
    return arr22;
  }
  var init_arrayLikeToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray(o3, minLen);
    var n2 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n2 === "Object" && o3.constructor)
      n2 = o3.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o3);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o3, minLen);
  }
  var init_unsupportedIterableToArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"() {
      init_arrayLikeToArray();
    }
  });

  // node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var init_nonIterableRest = __esm({
    "node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/toArray.js
  function _toArray(arr2) {
    return _arrayWithHoles(arr2) || _iterableToArray(arr2) || _unsupportedIterableToArray(arr2) || _nonIterableRest();
  }
  var init_toArray = __esm({
    "node_modules/@babel/runtime/helpers/esm/toArray.js"() {
      init_arrayWithHoles();
      init_iterableToArray();
      init_unsupportedIterableToArray();
      init_nonIterableRest();
    }
  });

  // node_modules/i18next/dist/esm/i18next.js
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function defer() {
    var res;
    var rej;
    var promise = new Promise(function(resolve, reject) {
      res = resolve;
      rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
  }
  function makeString(object) {
    if (object == null)
      return "";
    return "" + object;
  }
  function copy(a3, s3, t4) {
    a3.forEach(function(m3) {
      if (s3[m3])
        t4[m3] = s3[m3];
    });
  }
  function getLastOfPath(object, path, Empty) {
    function cleanKey(key2) {
      return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
    }
    function canNotTraverseDeeper() {
      return !object || typeof object === "string";
    }
    var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
    while (stack.length > 1) {
      if (canNotTraverseDeeper())
        return {};
      var key = cleanKey(stack.shift());
      if (!object[key] && Empty)
        object[key] = new Empty();
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        object = object[key];
      } else {
        object = {};
      }
    }
    if (canNotTraverseDeeper())
      return {};
    return {
      obj: object,
      k: cleanKey(stack.shift())
    };
  }
  function setPath(object, path, newValue) {
    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k3 = _getLastOfPath.k;
    obj[k3] = newValue;
  }
  function pushPath(object, path, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k3 = _getLastOfPath2.k;
    obj[k3] = obj[k3] || [];
    if (concat)
      obj[k3] = obj[k3].concat(newValue);
    if (!concat)
      obj[k3].push(newValue);
  }
  function getPath(object, path) {
    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k3 = _getLastOfPath3.k;
    if (!obj)
      return void 0;
    return obj[k3];
  }
  function getPathWithDefaults(data, defaultData, key) {
    var value = getPath(data, key);
    if (value !== void 0) {
      return value;
    }
    return getPath(defaultData, key);
  }
  function deepExtend(target, source, overwrite) {
    for (var prop in source) {
      if (prop !== "__proto__" && prop !== "constructor") {
        if (prop in target) {
          if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
            if (overwrite)
              target[prop] = source[prop];
          } else {
            deepExtend(target[prop], source[prop], overwrite);
          }
        } else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  }
  function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  function escape(data) {
    if (typeof data === "string") {
      return data.replace(/[&<>"'\/]/g, function(s3) {
        return _entityMap[s3];
      });
    }
    return data;
  }
  function looksLikeObjectPath(key, nsSeparator, keySeparator) {
    nsSeparator = nsSeparator || "";
    keySeparator = keySeparator || "";
    var possibleChars = chars.filter(function(c3) {
      return nsSeparator.indexOf(c3) < 0 && keySeparator.indexOf(c3) < 0;
    });
    if (possibleChars.length === 0)
      return true;
    var r3 = new RegExp("(".concat(possibleChars.map(function(c3) {
      return c3 === "?" ? "\\?" : c3;
    }).join("|"), ")"));
    var matched = !r3.test(key);
    if (!matched) {
      var ki = key.indexOf(keySeparator);
      if (ki > 0 && !r3.test(key.substring(0, ki))) {
        matched = true;
      }
    }
    return matched;
  }
  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$1(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function deepFind(obj, path) {
    var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
    if (!obj)
      return void 0;
    if (obj[path])
      return obj[path];
    var paths = path.split(keySeparator);
    var current = obj;
    for (var i3 = 0; i3 < paths.length; ++i3) {
      if (!current)
        return void 0;
      if (typeof current[paths[i3]] === "string" && i3 + 1 < paths.length) {
        return void 0;
      }
      if (current[paths[i3]] === void 0) {
        var j3 = 2;
        var p3 = paths.slice(i3, i3 + j3).join(keySeparator);
        var mix = current[p3];
        while (mix === void 0 && paths.length > i3 + j3) {
          j3++;
          p3 = paths.slice(i3, i3 + j3).join(keySeparator);
          mix = current[p3];
        }
        if (mix === void 0)
          return void 0;
        if (mix === null)
          return null;
        if (path.endsWith(p3)) {
          if (typeof mix === "string")
            return mix;
          if (p3 && typeof mix[p3] === "string")
            return mix[p3];
        }
        var joinedPath = paths.slice(i3 + j3).join(keySeparator);
        if (joinedPath)
          return deepFind(mix, joinedPath, keySeparator);
        return void 0;
      }
      current = current[paths[i3]];
    }
    return current;
  }
  function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$1(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  function createRules() {
    var rules = {};
    sets.forEach(function(set) {
      set.lngs.forEach(function(l3) {
        rules[l3] = {
          numbers: set.nr,
          plurals: _rulesPluralsTypes[set.fc]
        };
      });
    });
    return rules;
  }
  function ownKeys$3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$3(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function ownKeys$4(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$4(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function parseFormatStr(formatStr) {
    var formatName = formatStr.toLowerCase().trim();
    var formatOptions = {};
    if (formatStr.indexOf("(") > -1) {
      var p3 = formatStr.split("(");
      formatName = p3[0].toLowerCase().trim();
      var optStr = p3[1].substring(0, p3[1].length - 1);
      if (formatName === "currency" && optStr.indexOf(":") < 0) {
        if (!formatOptions.currency)
          formatOptions.currency = optStr.trim();
      } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
        if (!formatOptions.range)
          formatOptions.range = optStr.trim();
      } else {
        var opts = optStr.split(";");
        opts.forEach(function(opt) {
          if (!opt)
            return;
          var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
          var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          if (!formatOptions[key.trim()])
            formatOptions[key.trim()] = val;
          if (val === "false")
            formatOptions[key.trim()] = false;
          if (val === "true")
            formatOptions[key.trim()] = true;
          if (!isNaN(val))
            formatOptions[key.trim()] = parseInt(val, 10);
        });
      }
    }
    return {
      formatName,
      formatOptions
    };
  }
  function ownKeys$5(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$5(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$2() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function removePending(q2, name) {
    if (q2.pending[name] !== void 0) {
      delete q2.pending[name];
      q2.pendingCount--;
    }
  }
  function get() {
    return {
      debug: false,
      initImmediate: true,
      ns: ["translation"],
      defaultNS: ["translation"],
      fallbackLng: ["dev"],
      fallbackNS: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: "all",
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: ".",
      nsSeparator: ":",
      pluralSeparator: "_",
      contextSeparator: "_",
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: "fallback",
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: true,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: function handle2(args) {
        var ret = {};
        if (_typeof(args[1]) === "object")
          ret = args[1];
        if (typeof args[1] === "string")
          ret.defaultValue = args[1];
        if (typeof args[2] === "string")
          ret.tDescription = args[2];
        if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
          var options = args[3] || args[2];
          Object.keys(options).forEach(function(key) {
            ret[key] = options[key];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: function format(value, _format, lng, options) {
          return value;
        },
        prefix: "{{",
        suffix: "}}",
        formatSeparator: ",",
        unescapePrefix: "-",
        nestingPrefix: "$t(",
        nestingSuffix: ")",
        nestingOptionsSeparator: ",",
        maxReplaces: 1e3,
        skipOnVariables: true
      }
    };
  }
  function transformOptions(options) {
    if (typeof options.ns === "string")
      options.ns = [options.ns];
    if (typeof options.fallbackLng === "string")
      options.fallbackLng = [options.fallbackLng];
    if (typeof options.fallbackNS === "string")
      options.fallbackNS = [options.fallbackNS];
    if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
      options.supportedLngs = options.supportedLngs.concat(["cimode"]);
    }
    return options;
  }
  function ownKeys$6(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$6(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _createSuper$3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _isNativeReflectConstruct$3() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function noop() {
  }
  function bindMemberFunctions(inst) {
    var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
    mems.forEach(function(mem) {
      if (typeof inst[mem] === "function") {
        inst[mem] = inst[mem].bind(inst);
      }
    });
  }
  var consoleLogger, Logger, baseLogger, EventEmitter, _entityMap, isIE10, chars, ResourceStore, postProcessor, checkedLoadedFor, Translator, LanguageUtil, sets, _rulesPluralsTypes, deprecatedJsonVersions, suffixesOrder, PluralResolver, Interpolator, Formatter, Connector, I18n, instance, createInstance, init, loadResources, reloadResources, use, changeLanguage, getFixedT, t, exists, setDefaultNamespace, hasLoadedNamespace, loadNamespaces, loadLanguages, i18next_default;
  var init_i18next = __esm({
    "node_modules/i18next/dist/esm/i18next.js"() {
      init_typeof();
      init_classCallCheck();
      init_createClass();
      init_assertThisInitialized();
      init_inherits();
      init_possibleConstructorReturn();
      init_getPrototypeOf();
      init_defineProperty();
      init_toArray();
      consoleLogger = {
        type: "logger",
        log: function log(args) {
          this.output("log", args);
        },
        warn: function warn(args) {
          this.output("warn", args);
        },
        error: function error(args) {
          this.output("error", args);
        },
        output: function output(type, args) {
          if (console && console[type])
            console[type].apply(console, args);
        }
      };
      Logger = function() {
        function Logger2(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, Logger2);
          this.init(concreteLogger, options);
        }
        _createClass(Logger2, [{
          key: "init",
          value: function init2(concreteLogger) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            this.prefix = options.prefix || "i18next:";
            this.logger = concreteLogger || consoleLogger;
            this.options = options;
            this.debug = options.debug;
          }
        }, {
          key: "setDebug",
          value: function setDebug(bool) {
            this.debug = bool;
          }
        }, {
          key: "log",
          value: function log2() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return this.forward(args, "log", "", true);
          }
        }, {
          key: "warn",
          value: function warn2() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return this.forward(args, "warn", "", true);
          }
        }, {
          key: "error",
          value: function error2() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            return this.forward(args, "error", "");
          }
        }, {
          key: "deprecate",
          value: function deprecate() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }
            return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
          }
        }, {
          key: "forward",
          value: function forward(args, lvl, prefix2, debugOnly) {
            if (debugOnly && !this.debug)
              return null;
            if (typeof args[0] === "string")
              args[0] = "".concat(prefix2).concat(this.prefix, " ").concat(args[0]);
            return this.logger[lvl](args);
          }
        }, {
          key: "create",
          value: function create2(moduleName) {
            return new Logger2(this.logger, _objectSpread(_objectSpread({}, {
              prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
            }), this.options));
          }
        }]);
        return Logger2;
      }();
      baseLogger = new Logger();
      EventEmitter = function() {
        function EventEmitter3() {
          _classCallCheck(this, EventEmitter3);
          this.observers = {};
        }
        _createClass(EventEmitter3, [{
          key: "on",
          value: function on(events, listener) {
            var _this = this;
            events.split(" ").forEach(function(event) {
              _this.observers[event] = _this.observers[event] || [];
              _this.observers[event].push(listener);
            });
            return this;
          }
        }, {
          key: "off",
          value: function off(event, listener) {
            if (!this.observers[event])
              return;
            if (!listener) {
              delete this.observers[event];
              return;
            }
            this.observers[event] = this.observers[event].filter(function(l3) {
              return l3 !== listener;
            });
          }
        }, {
          key: "emit",
          value: function emit(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (this.observers[event]) {
              var cloned = [].concat(this.observers[event]);
              cloned.forEach(function(observer) {
                observer.apply(void 0, args);
              });
            }
            if (this.observers["*"]) {
              var _cloned = [].concat(this.observers["*"]);
              _cloned.forEach(function(observer) {
                observer.apply(observer, [event].concat(args));
              });
            }
          }
        }]);
        return EventEmitter3;
      }();
      _entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
      };
      isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
      chars = [" ", ",", "?", "!", ";"];
      ResourceStore = function(_EventEmitter) {
        _inherits(ResourceStore2, _EventEmitter);
        var _super = _createSuper(ResourceStore2);
        function ResourceStore2(data) {
          var _this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
            ns: ["translation"],
            defaultNS: "translation"
          };
          _classCallCheck(this, ResourceStore2);
          _this = _super.call(this);
          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }
          _this.data = data || {};
          _this.options = options;
          if (_this.options.keySeparator === void 0) {
            _this.options.keySeparator = ".";
          }
          if (_this.options.ignoreJSONStructure === void 0) {
            _this.options.ignoreJSONStructure = true;
          }
          return _this;
        }
        _createClass(ResourceStore2, [{
          key: "addNamespaces",
          value: function addNamespaces(ns2) {
            if (this.options.ns.indexOf(ns2) < 0) {
              this.options.ns.push(ns2);
            }
          }
        }, {
          key: "removeNamespaces",
          value: function removeNamespaces(ns2) {
            var index = this.options.ns.indexOf(ns2);
            if (index > -1) {
              this.options.ns.splice(index, 1);
            }
          }
        }, {
          key: "getResource",
          value: function getResource(lng, ns2, key) {
            var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
            var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
            var ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
            var path = [lng, ns2];
            if (key && typeof key !== "string")
              path = path.concat(key);
            if (key && typeof key === "string")
              path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf(".") > -1) {
              path = lng.split(".");
            }
            var result = getPath(this.data, path);
            if (result || !ignoreJSONStructure || typeof key !== "string")
              return result;
            return deepFind(this.data && this.data[lng] && this.data[lng][ns2], key, keySeparator);
          }
        }, {
          key: "addResource",
          value: function addResource(lng, ns2, key, value) {
            var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
              silent: false
            };
            var keySeparator = this.options.keySeparator;
            if (keySeparator === void 0)
              keySeparator = ".";
            var path = [lng, ns2];
            if (key)
              path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf(".") > -1) {
              path = lng.split(".");
              value = ns2;
              ns2 = path[1];
            }
            this.addNamespaces(ns2);
            setPath(this.data, path, value);
            if (!options.silent)
              this.emit("added", lng, ns2, key, value);
          }
        }, {
          key: "addResources",
          value: function addResources(lng, ns2, resources) {
            var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
              silent: false
            };
            for (var m3 in resources) {
              if (typeof resources[m3] === "string" || Object.prototype.toString.apply(resources[m3]) === "[object Array]")
                this.addResource(lng, ns2, m3, resources[m3], {
                  silent: true
                });
            }
            if (!options.silent)
              this.emit("added", lng, ns2, resources);
          }
        }, {
          key: "addResourceBundle",
          value: function addResourceBundle(lng, ns2, resources, deep, overwrite) {
            var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
              silent: false
            };
            var path = [lng, ns2];
            if (lng.indexOf(".") > -1) {
              path = lng.split(".");
              deep = resources;
              resources = ns2;
              ns2 = path[1];
            }
            this.addNamespaces(ns2);
            var pack = getPath(this.data, path) || {};
            if (deep) {
              deepExtend(pack, resources, overwrite);
            } else {
              pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
            }
            setPath(this.data, path, pack);
            if (!options.silent)
              this.emit("added", lng, ns2, resources);
          }
        }, {
          key: "removeResourceBundle",
          value: function removeResourceBundle(lng, ns2) {
            if (this.hasResourceBundle(lng, ns2)) {
              delete this.data[lng][ns2];
            }
            this.removeNamespaces(ns2);
            this.emit("removed", lng, ns2);
          }
        }, {
          key: "hasResourceBundle",
          value: function hasResourceBundle(lng, ns2) {
            return this.getResource(lng, ns2) !== void 0;
          }
        }, {
          key: "getResourceBundle",
          value: function getResourceBundle(lng, ns2) {
            if (!ns2)
              ns2 = this.options.defaultNS;
            if (this.options.compatibilityAPI === "v1")
              return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns2));
            return this.getResource(lng, ns2);
          }
        }, {
          key: "getDataByLanguage",
          value: function getDataByLanguage(lng) {
            return this.data[lng];
          }
        }, {
          key: "hasLanguageSomeTranslations",
          value: function hasLanguageSomeTranslations(lng) {
            var data = this.getDataByLanguage(lng);
            var n2 = data && Object.keys(data) || [];
            return !!n2.find(function(v3) {
              return data[v3] && Object.keys(data[v3]).length > 0;
            });
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return this.data;
          }
        }]);
        return ResourceStore2;
      }(EventEmitter);
      postProcessor = {
        processors: {},
        addPostProcessor: function addPostProcessor(module) {
          this.processors[module.name] = module;
        },
        handle: function handle(processors, value, key, options, translator) {
          var _this = this;
          processors.forEach(function(processor) {
            if (_this.processors[processor])
              value = _this.processors[processor].process(value, key, options, translator);
          });
          return value;
        }
      };
      checkedLoadedFor = {};
      Translator = function(_EventEmitter) {
        _inherits(Translator2, _EventEmitter);
        var _super = _createSuper$1(Translator2);
        function Translator2(services) {
          var _this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, Translator2);
          _this = _super.call(this);
          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }
          copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
          _this.options = options;
          if (_this.options.keySeparator === void 0) {
            _this.options.keySeparator = ".";
          }
          _this.logger = baseLogger.create("translator");
          return _this;
        }
        _createClass(Translator2, [{
          key: "changeLanguage",
          value: function changeLanguage2(lng) {
            if (lng)
              this.language = lng;
          }
        }, {
          key: "exists",
          value: function exists2(key) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              interpolation: {}
            };
            if (key === void 0 || key === null) {
              return false;
            }
            var resolved = this.resolve(key, options);
            return resolved && resolved.res !== void 0;
          }
        }, {
          key: "extractFromKey",
          value: function extractFromKey(key, options) {
            var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
            if (nsSeparator === void 0)
              nsSeparator = ":";
            var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
            var namespaces = options.ns || this.options.defaultNS || [];
            var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
            var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
            if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
              var m3 = key.match(this.interpolator.nestingRegexp);
              if (m3 && m3.length > 0) {
                return {
                  key,
                  namespaces
                };
              }
              var parts = key.split(nsSeparator);
              if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
                namespaces = parts.shift();
              key = parts.join(keySeparator);
            }
            if (typeof namespaces === "string")
              namespaces = [namespaces];
            return {
              key,
              namespaces
            };
          }
        }, {
          key: "translate",
          value: function translate(keys, options, lastKey) {
            var _this2 = this;
            if (_typeof(options) !== "object" && this.options.overloadTranslationOptionHandler) {
              options = this.options.overloadTranslationOptionHandler(arguments);
            }
            if (!options)
              options = {};
            if (keys === void 0 || keys === null)
              return "";
            if (!Array.isArray(keys))
              keys = [String(keys)];
            var returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
            var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
            var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
            var namespace = namespaces[namespaces.length - 1];
            var lng = options.lng || this.language;
            var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
            if (lng && lng.toLowerCase() === "cimode") {
              if (appendNamespaceToCIMode) {
                var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                if (returnDetails) {
                  resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
                  return resolved;
                }
                return "".concat(namespace).concat(nsSeparator).concat(key);
              }
              if (returnDetails) {
                resolved.res = key;
                return resolved;
              }
              return key;
            }
            var resolved = this.resolve(keys, options);
            var res = resolved && resolved.res;
            var resUsedKey = resolved && resolved.usedKey || key;
            var resExactUsedKey = resolved && resolved.exactUsedKey || key;
            var resType = Object.prototype.toString.apply(res);
            var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
            var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
            var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
            var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
            if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
              if (!options.returnObjects && !this.options.returnObjects) {
                if (!this.options.returnedObjectHandler) {
                  this.logger.warn("accessing an object - but returnObjects options is not enabled!");
                }
                var r3 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
                  ns: namespaces
                })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
                if (returnDetails) {
                  resolved.res = r3;
                  return resolved;
                }
                return r3;
              }
              if (keySeparator) {
                var resTypeIsArray = resType === "[object Array]";
                var copy2 = resTypeIsArray ? [] : {};
                var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                for (var m3 in res) {
                  if (Object.prototype.hasOwnProperty.call(res, m3)) {
                    var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m3);
                    copy2[m3] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                      joinArrays: false,
                      ns: namespaces
                    }));
                    if (copy2[m3] === deepKey)
                      copy2[m3] = res[m3];
                  }
                }
                res = copy2;
              }
            } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
              res = res.join(joinArrays);
              if (res)
                res = this.extendTranslation(res, keys, options, lastKey);
            } else {
              var usedDefault = false;
              var usedKey = false;
              var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
              var hasDefaultValue = Translator2.hasDefaultValue(options);
              var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
              var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
              if (!this.isValidLookup(res) && hasDefaultValue) {
                usedDefault = true;
                res = defaultValue;
              }
              if (!this.isValidLookup(res)) {
                usedKey = true;
                res = key;
              }
              var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
              var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
              var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
              if (usedKey || usedDefault || updateMissing) {
                this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
                if (keySeparator) {
                  var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
                    keySeparator: false
                  }));
                  if (fk && fk.res)
                    this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
                }
                var lngs = [];
                var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
                  for (var i3 = 0; i3 < fallbackLngs.length; i3++) {
                    lngs.push(fallbackLngs[i3]);
                  }
                } else if (this.options.saveMissingTo === "all") {
                  lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                } else {
                  lngs.push(options.lng || this.language);
                }
                var send = function send2(l3, k3, specificDefaultValue) {
                  var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
                  if (_this2.options.missingKeyHandler) {
                    _this2.options.missingKeyHandler(l3, namespace, k3, defaultForMissing, updateMissing, options);
                  } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                    _this2.backendConnector.saveMissing(l3, namespace, k3, defaultForMissing, updateMissing, options);
                  }
                  _this2.emit("missingKey", l3, namespace, k3, res);
                };
                if (this.options.saveMissing) {
                  if (this.options.saveMissingPlurals && needsPluralHandling) {
                    lngs.forEach(function(language) {
                      _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {
                        send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                      });
                    });
                  } else {
                    send(lngs, key, defaultValue);
                  }
                }
              }
              res = this.extendTranslation(res, keys, options, resolved, lastKey);
              if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
                res = "".concat(namespace, ":").concat(key);
              if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
                if (this.options.compatibilityAPI !== "v1") {
                  res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
                } else {
                  res = this.options.parseMissingKeyHandler(res);
                }
              }
            }
            if (returnDetails) {
              resolved.res = res;
              return resolved;
            }
            return res;
          }
        }, {
          key: "extendTranslation",
          value: function extendTranslation(res, key, options, resolved, lastKey) {
            var _this3 = this;
            if (this.i18nFormat && this.i18nFormat.parse) {
              res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                resolved
              });
            } else if (!options.skipInterpolation) {
              if (options.interpolation)
                this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
                  interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
                }));
              var skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
              var nestBef;
              if (skipOnVariables) {
                var nb = res.match(this.interpolator.nestingRegexp);
                nestBef = nb && nb.length;
              }
              var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
              if (this.options.interpolation.defaultVariables)
                data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
              res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
              if (skipOnVariables) {
                var na = res.match(this.interpolator.nestingRegexp);
                var nestAft = na && na.length;
                if (nestBef < nestAft)
                  options.nest = false;
              }
              if (options.nest !== false)
                res = this.interpolator.nest(res, function() {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  if (lastKey && lastKey[0] === args[0] && !options.context) {
                    _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                    return null;
                  }
                  return _this3.translate.apply(_this3, args.concat([key]));
                }, options);
              if (options.interpolation)
                this.interpolator.reset();
            }
            var postProcess = options.postProcess || this.options.postProcess;
            var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
            if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
              res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
                i18nResolved: resolved
              }, options) : options, this);
            }
            return res;
          }
        }, {
          key: "resolve",
          value: function resolve(keys) {
            var _this4 = this;
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var found;
            var usedKey;
            var exactUsedKey;
            var usedLng;
            var usedNS;
            if (typeof keys === "string")
              keys = [keys];
            keys.forEach(function(k3) {
              if (_this4.isValidLookup(found))
                return;
              var extracted = _this4.extractFromKey(k3, options);
              var key = extracted.key;
              usedKey = key;
              var namespaces = extracted.namespaces;
              if (_this4.options.fallbackNS)
                namespaces = namespaces.concat(_this4.options.fallbackNS);
              var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
              var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
              var needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
              var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
              namespaces.forEach(function(ns2) {
                if (_this4.isValidLookup(found))
                  return;
                usedNS = ns2;
                if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns2)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                  checkedLoadedFor["".concat(codes[0], "-").concat(ns2)] = true;
                  _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                }
                codes.forEach(function(code) {
                  if (_this4.isValidLookup(found))
                    return;
                  usedLng = code;
                  var finalKeys = [key];
                  if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                    _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns2, options);
                  } else {
                    var pluralSuffix;
                    if (needsPluralHandling)
                      pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                    var zeroSuffix = "_zero";
                    if (needsPluralHandling) {
                      finalKeys.push(key + pluralSuffix);
                      if (needsZeroSuffixLookup) {
                        finalKeys.push(key + zeroSuffix);
                      }
                    }
                    if (needsContextHandling) {
                      var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                      finalKeys.push(contextKey);
                      if (needsPluralHandling) {
                        finalKeys.push(contextKey + pluralSuffix);
                        if (needsZeroSuffixLookup) {
                          finalKeys.push(contextKey + zeroSuffix);
                        }
                      }
                    }
                  }
                  var possibleKey;
                  while (possibleKey = finalKeys.pop()) {
                    if (!_this4.isValidLookup(found)) {
                      exactUsedKey = possibleKey;
                      found = _this4.getResource(code, ns2, possibleKey, options);
                    }
                  }
                });
              });
            });
            return {
              res: found,
              usedKey,
              exactUsedKey,
              usedLng,
              usedNS
            };
          }
        }, {
          key: "isValidLookup",
          value: function isValidLookup(res) {
            return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
          }
        }, {
          key: "getResource",
          value: function getResource(code, ns2, key) {
            var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
            if (this.i18nFormat && this.i18nFormat.getResource)
              return this.i18nFormat.getResource(code, ns2, key, options);
            return this.resourceStore.getResource(code, ns2, key, options);
          }
        }], [{
          key: "hasDefaultValue",
          value: function hasDefaultValue(options) {
            var prefix2 = "defaultValue";
            for (var option in options) {
              if (Object.prototype.hasOwnProperty.call(options, option) && prefix2 === option.substring(0, prefix2.length) && void 0 !== options[option]) {
                return true;
              }
            }
            return false;
          }
        }]);
        return Translator2;
      }(EventEmitter);
      LanguageUtil = function() {
        function LanguageUtil2(options) {
          _classCallCheck(this, LanguageUtil2);
          this.options = options;
          this.supportedLngs = this.options.supportedLngs || false;
          this.logger = baseLogger.create("languageUtils");
        }
        _createClass(LanguageUtil2, [{
          key: "getScriptPartFromCode",
          value: function getScriptPartFromCode(code) {
            if (!code || code.indexOf("-") < 0)
              return null;
            var p3 = code.split("-");
            if (p3.length === 2)
              return null;
            p3.pop();
            if (p3[p3.length - 1].toLowerCase() === "x")
              return null;
            return this.formatLanguageCode(p3.join("-"));
          }
        }, {
          key: "getLanguagePartFromCode",
          value: function getLanguagePartFromCode(code) {
            if (!code || code.indexOf("-") < 0)
              return code;
            var p3 = code.split("-");
            return this.formatLanguageCode(p3[0]);
          }
        }, {
          key: "formatLanguageCode",
          value: function formatLanguageCode(code) {
            if (typeof code === "string" && code.indexOf("-") > -1) {
              var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
              var p3 = code.split("-");
              if (this.options.lowerCaseLng) {
                p3 = p3.map(function(part) {
                  return part.toLowerCase();
                });
              } else if (p3.length === 2) {
                p3[0] = p3[0].toLowerCase();
                p3[1] = p3[1].toUpperCase();
                if (specialCases.indexOf(p3[1].toLowerCase()) > -1)
                  p3[1] = capitalize(p3[1].toLowerCase());
              } else if (p3.length === 3) {
                p3[0] = p3[0].toLowerCase();
                if (p3[1].length === 2)
                  p3[1] = p3[1].toUpperCase();
                if (p3[0] !== "sgn" && p3[2].length === 2)
                  p3[2] = p3[2].toUpperCase();
                if (specialCases.indexOf(p3[1].toLowerCase()) > -1)
                  p3[1] = capitalize(p3[1].toLowerCase());
                if (specialCases.indexOf(p3[2].toLowerCase()) > -1)
                  p3[2] = capitalize(p3[2].toLowerCase());
              }
              return p3.join("-");
            }
            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
          }
        }, {
          key: "isSupportedCode",
          value: function isSupportedCode(code) {
            if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
              code = this.getLanguagePartFromCode(code);
            }
            return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
          }
        }, {
          key: "getBestMatchFromCodes",
          value: function getBestMatchFromCodes(codes) {
            var _this = this;
            if (!codes)
              return null;
            var found;
            codes.forEach(function(code) {
              if (found)
                return;
              var cleanedLng = _this.formatLanguageCode(code);
              if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng))
                found = cleanedLng;
            });
            if (!found && this.options.supportedLngs) {
              codes.forEach(function(code) {
                if (found)
                  return;
                var lngOnly = _this.getLanguagePartFromCode(code);
                if (_this.isSupportedCode(lngOnly))
                  return found = lngOnly;
                found = _this.options.supportedLngs.find(function(supportedLng) {
                  if (supportedLng.indexOf(lngOnly) === 0)
                    return supportedLng;
                });
              });
            }
            if (!found)
              found = this.getFallbackCodes(this.options.fallbackLng)[0];
            return found;
          }
        }, {
          key: "getFallbackCodes",
          value: function getFallbackCodes(fallbacks, code) {
            if (!fallbacks)
              return [];
            if (typeof fallbacks === "function")
              fallbacks = fallbacks(code);
            if (typeof fallbacks === "string")
              fallbacks = [fallbacks];
            if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
              return fallbacks;
            if (!code)
              return fallbacks["default"] || [];
            var found = fallbacks[code];
            if (!found)
              found = fallbacks[this.getScriptPartFromCode(code)];
            if (!found)
              found = fallbacks[this.formatLanguageCode(code)];
            if (!found)
              found = fallbacks[this.getLanguagePartFromCode(code)];
            if (!found)
              found = fallbacks["default"];
            return found || [];
          }
        }, {
          key: "toResolveHierarchy",
          value: function toResolveHierarchy(code, fallbackCode) {
            var _this2 = this;
            var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
            var codes = [];
            var addCode = function addCode2(c3) {
              if (!c3)
                return;
              if (_this2.isSupportedCode(c3)) {
                codes.push(c3);
              } else {
                _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c3));
              }
            };
            if (typeof code === "string" && code.indexOf("-") > -1) {
              if (this.options.load !== "languageOnly")
                addCode(this.formatLanguageCode(code));
              if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
                addCode(this.getScriptPartFromCode(code));
              if (this.options.load !== "currentOnly")
                addCode(this.getLanguagePartFromCode(code));
            } else if (typeof code === "string") {
              addCode(this.formatLanguageCode(code));
            }
            fallbackCodes.forEach(function(fc) {
              if (codes.indexOf(fc) < 0)
                addCode(_this2.formatLanguageCode(fc));
            });
            return codes;
          }
        }]);
        return LanguageUtil2;
      }();
      sets = [{
        lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
        nr: [1, 2],
        fc: 1
      }, {
        lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
        nr: [1, 2],
        fc: 2
      }, {
        lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
        nr: [1],
        fc: 3
      }, {
        lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
        nr: [1, 2, 5],
        fc: 4
      }, {
        lngs: ["ar"],
        nr: [0, 1, 2, 3, 11, 100],
        fc: 5
      }, {
        lngs: ["cs", "sk"],
        nr: [1, 2, 5],
        fc: 6
      }, {
        lngs: ["csb", "pl"],
        nr: [1, 2, 5],
        fc: 7
      }, {
        lngs: ["cy"],
        nr: [1, 2, 3, 8],
        fc: 8
      }, {
        lngs: ["fr"],
        nr: [1, 2],
        fc: 9
      }, {
        lngs: ["ga"],
        nr: [1, 2, 3, 7, 11],
        fc: 10
      }, {
        lngs: ["gd"],
        nr: [1, 2, 3, 20],
        fc: 11
      }, {
        lngs: ["is"],
        nr: [1, 2],
        fc: 12
      }, {
        lngs: ["jv"],
        nr: [0, 1],
        fc: 13
      }, {
        lngs: ["kw"],
        nr: [1, 2, 3, 4],
        fc: 14
      }, {
        lngs: ["lt"],
        nr: [1, 2, 10],
        fc: 15
      }, {
        lngs: ["lv"],
        nr: [1, 2, 0],
        fc: 16
      }, {
        lngs: ["mk"],
        nr: [1, 2],
        fc: 17
      }, {
        lngs: ["mnk"],
        nr: [0, 1, 2],
        fc: 18
      }, {
        lngs: ["mt"],
        nr: [1, 2, 11, 20],
        fc: 19
      }, {
        lngs: ["or"],
        nr: [2, 1],
        fc: 2
      }, {
        lngs: ["ro"],
        nr: [1, 2, 20],
        fc: 20
      }, {
        lngs: ["sl"],
        nr: [5, 1, 2, 3],
        fc: 21
      }, {
        lngs: ["he", "iw"],
        nr: [1, 2, 20, 21],
        fc: 22
      }];
      _rulesPluralsTypes = {
        1: function _(n2) {
          return Number(n2 > 1);
        },
        2: function _2(n2) {
          return Number(n2 != 1);
        },
        3: function _3(n2) {
          return 0;
        },
        4: function _4(n2) {
          return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
        },
        5: function _5(n2) {
          return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : n2 == 2 ? 2 : n2 % 100 >= 3 && n2 % 100 <= 10 ? 3 : n2 % 100 >= 11 ? 4 : 5);
        },
        6: function _6(n2) {
          return Number(n2 == 1 ? 0 : n2 >= 2 && n2 <= 4 ? 1 : 2);
        },
        7: function _7(n2) {
          return Number(n2 == 1 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
        },
        8: function _8(n2) {
          return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 != 8 && n2 != 11 ? 2 : 3);
        },
        9: function _9(n2) {
          return Number(n2 >= 2);
        },
        10: function _10(n2) {
          return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 < 7 ? 2 : n2 < 11 ? 3 : 4);
        },
        11: function _11(n2) {
          return Number(n2 == 1 || n2 == 11 ? 0 : n2 == 2 || n2 == 12 ? 1 : n2 > 2 && n2 < 20 ? 2 : 3);
        },
        12: function _12(n2) {
          return Number(n2 % 10 != 1 || n2 % 100 == 11);
        },
        13: function _13(n2) {
          return Number(n2 !== 0);
        },
        14: function _14(n2) {
          return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 == 3 ? 2 : 3);
        },
        15: function _15(n2) {
          return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
        },
        16: function _16(n2) {
          return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 !== 0 ? 1 : 2);
        },
        17: function _17(n2) {
          return Number(n2 == 1 || n2 % 10 == 1 && n2 % 100 != 11 ? 0 : 1);
        },
        18: function _18(n2) {
          return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : 2);
        },
        19: function _19(n2) {
          return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 1 && n2 % 100 < 11 ? 1 : n2 % 100 > 10 && n2 % 100 < 20 ? 2 : 3);
        },
        20: function _20(n2) {
          return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 0 && n2 % 100 < 20 ? 1 : 2);
        },
        21: function _21(n2) {
          return Number(n2 % 100 == 1 ? 1 : n2 % 100 == 2 ? 2 : n2 % 100 == 3 || n2 % 100 == 4 ? 3 : 0);
        },
        22: function _22(n2) {
          return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : (n2 < 0 || n2 > 10) && n2 % 10 == 0 ? 2 : 3);
        }
      };
      deprecatedJsonVersions = ["v1", "v2", "v3"];
      suffixesOrder = {
        zero: 0,
        one: 1,
        two: 2,
        few: 3,
        many: 4,
        other: 5
      };
      PluralResolver = function() {
        function PluralResolver2(languageUtils) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, PluralResolver2);
          this.languageUtils = languageUtils;
          this.options = options;
          this.logger = baseLogger.create("pluralResolver");
          if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
            this.options.compatibilityJSON = "v3";
            this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
          }
          this.rules = createRules();
        }
        _createClass(PluralResolver2, [{
          key: "addRule",
          value: function addRule(lng, obj) {
            this.rules[lng] = obj;
          }
        }, {
          key: "getRule",
          value: function getRule(code) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (this.shouldUseIntlApi()) {
              try {
                return new Intl.PluralRules(code, {
                  type: options.ordinal ? "ordinal" : "cardinal"
                });
              } catch (_unused) {
                return;
              }
            }
            return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
          }
        }, {
          key: "needsPlural",
          value: function needsPlural(code) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var rule = this.getRule(code, options);
            if (this.shouldUseIntlApi()) {
              return rule && rule.resolvedOptions().pluralCategories.length > 1;
            }
            return rule && rule.numbers.length > 1;
          }
        }, {
          key: "getPluralFormsOfKey",
          value: function getPluralFormsOfKey(code, key) {
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            return this.getSuffixes(code, options).map(function(suffix) {
              return "".concat(key).concat(suffix);
            });
          }
        }, {
          key: "getSuffixes",
          value: function getSuffixes(code) {
            var _this = this;
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var rule = this.getRule(code, options);
            if (!rule) {
              return [];
            }
            if (this.shouldUseIntlApi()) {
              return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
                return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
              }).map(function(pluralCategory) {
                return "".concat(_this.options.prepend).concat(pluralCategory);
              });
            }
            return rule.numbers.map(function(number) {
              return _this.getSuffix(code, number, options);
            });
          }
        }, {
          key: "getSuffix",
          value: function getSuffix(code, count) {
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            var rule = this.getRule(code, options);
            if (rule) {
              if (this.shouldUseIntlApi()) {
                return "".concat(this.options.prepend).concat(rule.select(count));
              }
              return this.getSuffixRetroCompatible(rule, count);
            }
            this.logger.warn("no plural rule found for: ".concat(code));
            return "";
          }
        }, {
          key: "getSuffixRetroCompatible",
          value: function getSuffixRetroCompatible(rule, count) {
            var _this2 = this;
            var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
            var suffix = rule.numbers[idx];
            if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
              if (suffix === 2) {
                suffix = "plural";
              } else if (suffix === 1) {
                suffix = "";
              }
            }
            var returnSuffix = function returnSuffix2() {
              return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
            };
            if (this.options.compatibilityJSON === "v1") {
              if (suffix === 1)
                return "";
              if (typeof suffix === "number")
                return "_plural_".concat(suffix.toString());
              return returnSuffix();
            } else if (this.options.compatibilityJSON === "v2") {
              return returnSuffix();
            } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
              return returnSuffix();
            }
            return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
          }
        }, {
          key: "shouldUseIntlApi",
          value: function shouldUseIntlApi() {
            return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
          }
        }]);
        return PluralResolver2;
      }();
      Interpolator = function() {
        function Interpolator2() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Interpolator2);
          this.logger = baseLogger.create("interpolator");
          this.options = options;
          this.format = options.interpolation && options.interpolation.format || function(value) {
            return value;
          };
          this.init(options);
        }
        _createClass(Interpolator2, [{
          key: "init",
          value: function init2() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            if (!options.interpolation)
              options.interpolation = {
                escapeValue: true
              };
            var iOpts = options.interpolation;
            this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
            this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
            this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
            this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
            this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
            this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
            this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
            this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
            this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
            this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
            this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
            this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
            this.resetRegExp();
          }
        }, {
          key: "reset",
          value: function reset() {
            if (this.options)
              this.init(this.options);
          }
        }, {
          key: "resetRegExp",
          value: function resetRegExp() {
            var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
            this.regexp = new RegExp(regexpStr, "g");
            var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
            this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
            var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
            this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
          }
        }, {
          key: "interpolate",
          value: function interpolate(str, data, lng, options) {
            var _this = this;
            var match;
            var value;
            var replaces;
            var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
            function regexSafe(val) {
              return val.replace(/\$/g, "$$$$");
            }
            var handleFormat = function handleFormat2(key) {
              if (key.indexOf(_this.formatSeparator) < 0) {
                var path = getPathWithDefaults(data, defaultData, key);
                return _this.alwaysFormat ? _this.format(path, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                  interpolationkey: key
                })) : path;
              }
              var p3 = key.split(_this.formatSeparator);
              var k3 = p3.shift().trim();
              var f3 = p3.join(_this.formatSeparator).trim();
              return _this.format(getPathWithDefaults(data, defaultData, k3), f3, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                interpolationkey: k3
              }));
            };
            this.resetRegExp();
            var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
            var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
            var todos = [{
              regex: this.regexpUnescape,
              safeValue: function safeValue(val) {
                return regexSafe(val);
              }
            }, {
              regex: this.regexp,
              safeValue: function safeValue(val) {
                return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
              }
            }];
            todos.forEach(function(todo) {
              replaces = 0;
              while (match = todo.regex.exec(str)) {
                var matchedVar = match[1].trim();
                value = handleFormat(matchedVar);
                if (value === void 0) {
                  if (typeof missingInterpolationHandler === "function") {
                    var temp = missingInterpolationHandler(str, match, options);
                    value = typeof temp === "string" ? temp : "";
                  } else if (options && options.hasOwnProperty(matchedVar)) {
                    value = "";
                  } else if (skipOnVariables) {
                    value = match[0];
                    continue;
                  } else {
                    _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
                    value = "";
                  }
                } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
                  value = makeString(value);
                }
                var safeValue = todo.safeValue(value);
                str = str.replace(match[0], safeValue);
                if (skipOnVariables) {
                  todo.regex.lastIndex += value.length;
                  todo.regex.lastIndex -= match[0].length;
                } else {
                  todo.regex.lastIndex = 0;
                }
                replaces++;
                if (replaces >= _this.maxReplaces) {
                  break;
                }
              }
            });
            return str;
          }
        }, {
          key: "nest",
          value: function nest(str, fc) {
            var _this2 = this;
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            var match;
            var value;
            var clonedOptions = _objectSpread$3({}, options);
            clonedOptions.applyPostProcessor = false;
            delete clonedOptions.defaultValue;
            function handleHasOptions(key, inheritedOptions) {
              var sep = this.nestingOptionsSeparator;
              if (key.indexOf(sep) < 0)
                return key;
              var c3 = key.split(new RegExp("".concat(sep, "[ ]*{")));
              var optionsString = "{".concat(c3[1]);
              key = c3[0];
              optionsString = this.interpolate(optionsString, clonedOptions);
              optionsString = optionsString.replace(/'/g, '"');
              try {
                clonedOptions = JSON.parse(optionsString);
                if (inheritedOptions)
                  clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
              } catch (e3) {
                this.logger.warn("failed parsing options string in nesting for key ".concat(key), e3);
                return "".concat(key).concat(sep).concat(optionsString);
              }
              delete clonedOptions.defaultValue;
              return key;
            }
            while (match = this.nestingRegexp.exec(str)) {
              var formatters = [];
              var doReduce = false;
              if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
                var r3 = match[1].split(this.formatSeparator).map(function(elem) {
                  return elem.trim();
                });
                match[1] = r3.shift();
                formatters = r3;
                doReduce = true;
              }
              value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
              if (value && match[0] === str && typeof value !== "string")
                return value;
              if (typeof value !== "string")
                value = makeString(value);
              if (!value) {
                this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                value = "";
              }
              if (doReduce) {
                value = formatters.reduce(function(v3, f3) {
                  return _this2.format(v3, f3, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                    interpolationkey: match[1].trim()
                  }));
                }, value.trim());
              }
              str = str.replace(match[0], value);
              this.regexp.lastIndex = 0;
            }
            return str;
          }
        }]);
        return Interpolator2;
      }();
      Formatter = function() {
        function Formatter2() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Formatter2);
          this.logger = baseLogger.create("formatter");
          this.options = options;
          this.formats = {
            number: function number(val, lng, options2) {
              return new Intl.NumberFormat(lng, options2).format(val);
            },
            currency: function currency(val, lng, options2) {
              return new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options2), {}, {
                style: "currency"
              })).format(val);
            },
            datetime: function datetime(val, lng, options2) {
              return new Intl.DateTimeFormat(lng, _objectSpread$4({}, options2)).format(val);
            },
            relativetime: function relativetime(val, lng, options2) {
              return new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options2)).format(val, options2.range || "day");
            },
            list: function list(val, lng, options2) {
              return new Intl.ListFormat(lng, _objectSpread$4({}, options2)).format(val);
            }
          };
          this.init(options);
        }
        _createClass(Formatter2, [{
          key: "init",
          value: function init2(services) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              interpolation: {}
            };
            var iOpts = options.interpolation;
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
          }
        }, {
          key: "add",
          value: function add2(name, fc) {
            this.formats[name.toLowerCase().trim()] = fc;
          }
        }, {
          key: "format",
          value: function format(value, _format, lng, options) {
            var _this = this;
            var formats = _format.split(this.formatSeparator);
            var result = formats.reduce(function(mem, f3) {
              var _parseFormatStr = parseFormatStr(f3), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
              if (_this.formats[formatName]) {
                var formatted = mem;
                try {
                  var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                  var l3 = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                  formatted = _this.formats[formatName](mem, l3, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
                } catch (error2) {
                  _this.logger.warn(error2);
                }
                return formatted;
              } else {
                _this.logger.warn("there was no format function for ".concat(formatName));
              }
              return mem;
            }, value);
            return result;
          }
        }]);
        return Formatter2;
      }();
      Connector = function(_EventEmitter) {
        _inherits(Connector2, _EventEmitter);
        var _super = _createSuper$2(Connector2);
        function Connector2(backend, store, services) {
          var _this;
          var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          _classCallCheck(this, Connector2);
          _this = _super.call(this);
          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }
          _this.backend = backend;
          _this.store = store;
          _this.services = services;
          _this.languageUtils = services.languageUtils;
          _this.options = options;
          _this.logger = baseLogger.create("backendConnector");
          _this.waitingReads = [];
          _this.maxParallelReads = options.maxParallelReads || 10;
          _this.readingCalls = 0;
          _this.state = {};
          _this.queue = [];
          if (_this.backend && _this.backend.init) {
            _this.backend.init(services, options.backend, options);
          }
          return _this;
        }
        _createClass(Connector2, [{
          key: "queueLoad",
          value: function queueLoad(languages, namespaces, options, callback) {
            var _this2 = this;
            var toLoad = {};
            var pending = {};
            var toLoadLanguages = {};
            var toLoadNamespaces = {};
            languages.forEach(function(lng) {
              var hasAllNamespaces = true;
              namespaces.forEach(function(ns2) {
                var name = "".concat(lng, "|").concat(ns2);
                if (!options.reload && _this2.store.hasResourceBundle(lng, ns2)) {
                  _this2.state[name] = 2;
                } else if (_this2.state[name] < 0)
                  ;
                else if (_this2.state[name] === 1) {
                  if (pending[name] === void 0)
                    pending[name] = true;
                } else {
                  _this2.state[name] = 1;
                  hasAllNamespaces = false;
                  if (pending[name] === void 0)
                    pending[name] = true;
                  if (toLoad[name] === void 0)
                    toLoad[name] = true;
                  if (toLoadNamespaces[ns2] === void 0)
                    toLoadNamespaces[ns2] = true;
                }
              });
              if (!hasAllNamespaces)
                toLoadLanguages[lng] = true;
            });
            if (Object.keys(toLoad).length || Object.keys(pending).length) {
              this.queue.push({
                pending,
                pendingCount: Object.keys(pending).length,
                loaded: {},
                errors: [],
                callback
              });
            }
            return {
              toLoad: Object.keys(toLoad),
              pending: Object.keys(pending),
              toLoadLanguages: Object.keys(toLoadLanguages),
              toLoadNamespaces: Object.keys(toLoadNamespaces)
            };
          }
        }, {
          key: "loaded",
          value: function loaded(name, err, data) {
            var s3 = name.split("|");
            var lng = s3[0];
            var ns2 = s3[1];
            if (err)
              this.emit("failedLoading", lng, ns2, err);
            if (data) {
              this.store.addResourceBundle(lng, ns2, data);
            }
            this.state[name] = err ? -1 : 2;
            var loaded2 = {};
            this.queue.forEach(function(q2) {
              pushPath(q2.loaded, [lng], ns2);
              removePending(q2, name);
              if (err)
                q2.errors.push(err);
              if (q2.pendingCount === 0 && !q2.done) {
                Object.keys(q2.loaded).forEach(function(l3) {
                  if (!loaded2[l3])
                    loaded2[l3] = {};
                  var loadedKeys = q2.loaded[l3];
                  if (loadedKeys.length) {
                    loadedKeys.forEach(function(ns3) {
                      if (loaded2[l3][ns3] === void 0)
                        loaded2[l3][ns3] = true;
                    });
                  }
                });
                q2.done = true;
                if (q2.errors.length) {
                  q2.callback(q2.errors);
                } else {
                  q2.callback();
                }
              }
            });
            this.emit("loaded", loaded2);
            this.queue = this.queue.filter(function(q2) {
              return !q2.done;
            });
          }
        }, {
          key: "read",
          value: function read(lng, ns2, fcName) {
            var _this3 = this;
            var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 350;
            var callback = arguments.length > 5 ? arguments[5] : void 0;
            if (!lng.length)
              return callback(null, {});
            if (this.readingCalls >= this.maxParallelReads) {
              this.waitingReads.push({
                lng,
                ns: ns2,
                fcName,
                tried,
                wait,
                callback
              });
              return;
            }
            this.readingCalls++;
            return this.backend[fcName](lng, ns2, function(err, data) {
              if (err && data && tried < 5) {
                setTimeout(function() {
                  _this3.read.call(_this3, lng, ns2, fcName, tried + 1, wait * 2, callback);
                }, wait);
                return;
              }
              _this3.readingCalls--;
              if (_this3.waitingReads.length > 0) {
                var next = _this3.waitingReads.shift();
                _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
              }
              callback(err, data);
            });
          }
        }, {
          key: "prepareLoading",
          value: function prepareLoading(languages, namespaces) {
            var _this4 = this;
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            var callback = arguments.length > 3 ? arguments[3] : void 0;
            if (!this.backend) {
              this.logger.warn("No backend was added via i18next.use. Will not load resources.");
              return callback && callback();
            }
            if (typeof languages === "string")
              languages = this.languageUtils.toResolveHierarchy(languages);
            if (typeof namespaces === "string")
              namespaces = [namespaces];
            var toLoad = this.queueLoad(languages, namespaces, options, callback);
            if (!toLoad.toLoad.length) {
              if (!toLoad.pending.length)
                callback();
              return null;
            }
            toLoad.toLoad.forEach(function(name) {
              _this4.loadOne(name);
            });
          }
        }, {
          key: "load",
          value: function load(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, {}, callback);
          }
        }, {
          key: "reload",
          value: function reload(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, {
              reload: true
            }, callback);
          }
        }, {
          key: "loadOne",
          value: function loadOne(name) {
            var _this5 = this;
            var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
            var s3 = name.split("|");
            var lng = s3[0];
            var ns2 = s3[1];
            this.read(lng, ns2, "read", void 0, void 0, function(err, data) {
              if (err)
                _this5.logger.warn("".concat(prefix2, "loading namespace ").concat(ns2, " for language ").concat(lng, " failed"), err);
              if (!err && data)
                _this5.logger.log("".concat(prefix2, "loaded namespace ").concat(ns2, " for language ").concat(lng), data);
              _this5.loaded(name, err, data);
            });
          }
        }, {
          key: "saveMissing",
          value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
            var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
            if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
              this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
              return;
            }
            if (key === void 0 || key === null || key === "")
              return;
            if (this.backend && this.backend.create) {
              this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
                isUpdate
              }));
            }
            if (!languages || !languages[0])
              return;
            this.store.addResource(languages[0], namespace, key, fallbackValue);
          }
        }]);
        return Connector2;
      }(EventEmitter);
      I18n = function(_EventEmitter) {
        _inherits(I18n2, _EventEmitter);
        var _super = _createSuper$3(I18n2);
        function I18n2() {
          var _this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : void 0;
          _classCallCheck(this, I18n2);
          _this = _super.call(this);
          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }
          _this.options = transformOptions(options);
          _this.services = {};
          _this.logger = baseLogger;
          _this.modules = {
            external: []
          };
          bindMemberFunctions(_assertThisInitialized(_this));
          if (callback && !_this.isInitialized && !options.isClone) {
            if (!_this.options.initImmediate) {
              _this.init(options, callback);
              return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
            }
            setTimeout(function() {
              _this.init(options, callback);
            }, 0);
          }
          return _this;
        }
        _createClass(I18n2, [{
          key: "init",
          value: function init2() {
            var _this2 = this;
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var callback = arguments.length > 1 ? arguments[1] : void 0;
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            if (!options.defaultNS && options.ns) {
              if (typeof options.ns === "string") {
                options.defaultNS = options.ns;
              } else if (options.ns.indexOf("translation") < 0) {
                options.defaultNS = options.ns[0];
              }
            }
            var defOpts = get();
            this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));
            if (this.options.compatibilityAPI !== "v1") {
              this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
            }
            if (options.keySeparator !== void 0) {
              this.options.userDefinedKeySeparator = options.keySeparator;
            }
            if (options.nsSeparator !== void 0) {
              this.options.userDefinedNsSeparator = options.nsSeparator;
            }
            function createClassOnDemand(ClassOrObject) {
              if (!ClassOrObject)
                return null;
              if (typeof ClassOrObject === "function")
                return new ClassOrObject();
              return ClassOrObject;
            }
            if (!this.options.isClone) {
              if (this.modules.logger) {
                baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
              } else {
                baseLogger.init(null, this.options);
              }
              var formatter;
              if (this.modules.formatter) {
                formatter = this.modules.formatter;
              } else if (typeof Intl !== "undefined") {
                formatter = Formatter;
              }
              var lu = new LanguageUtil(this.options);
              this.store = new ResourceStore(this.options.resources, this.options);
              var s3 = this.services;
              s3.logger = baseLogger;
              s3.resourceStore = this.store;
              s3.languageUtils = lu;
              s3.pluralResolver = new PluralResolver(lu, {
                prepend: this.options.pluralSeparator,
                compatibilityJSON: this.options.compatibilityJSON,
                simplifyPluralSuffix: this.options.simplifyPluralSuffix
              });
              if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
                s3.formatter = createClassOnDemand(formatter);
                s3.formatter.init(s3, this.options);
                this.options.interpolation.format = s3.formatter.format.bind(s3.formatter);
              }
              s3.interpolator = new Interpolator(this.options);
              s3.utils = {
                hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
              };
              s3.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s3.resourceStore, s3, this.options);
              s3.backendConnector.on("*", function(event) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                _this2.emit.apply(_this2, [event].concat(args));
              });
              if (this.modules.languageDetector) {
                s3.languageDetector = createClassOnDemand(this.modules.languageDetector);
                s3.languageDetector.init(s3, this.options.detection, this.options);
              }
              if (this.modules.i18nFormat) {
                s3.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                if (s3.i18nFormat.init)
                  s3.i18nFormat.init(this);
              }
              this.translator = new Translator(this.services, this.options);
              this.translator.on("*", function(event) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                _this2.emit.apply(_this2, [event].concat(args));
              });
              this.modules.external.forEach(function(m3) {
                if (m3.init)
                  m3.init(_this2);
              });
            }
            this.format = this.options.interpolation.format;
            if (!callback)
              callback = noop;
            if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
              var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
              if (codes.length > 0 && codes[0] !== "dev")
                this.options.lng = codes[0];
            }
            if (!this.services.languageDetector && !this.options.lng) {
              this.logger.warn("init: no languageDetector is used and no lng is defined");
            }
            var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
            storeApi.forEach(function(fcName) {
              _this2[fcName] = function() {
                var _this2$store;
                return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
              };
            });
            var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
            storeApiChained.forEach(function(fcName) {
              _this2[fcName] = function() {
                var _this2$store2;
                (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
                return _this2;
              };
            });
            var deferred = defer();
            var load = function load2() {
              var finish = function finish2(err, t4) {
                if (_this2.isInitialized && !_this2.initializedStoreOnce)
                  _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
                _this2.isInitialized = true;
                if (!_this2.options.isClone)
                  _this2.logger.log("initialized", _this2.options);
                _this2.emit("initialized", _this2.options);
                deferred.resolve(t4);
                callback(err, t4);
              };
              if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized)
                return finish(null, _this2.t.bind(_this2));
              _this2.changeLanguage(_this2.options.lng, finish);
            };
            if (this.options.resources || !this.options.initImmediate) {
              load();
            } else {
              setTimeout(load, 0);
            }
            return deferred;
          }
        }, {
          key: "loadResources",
          value: function loadResources2(language) {
            var _this3 = this;
            var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
            var usedCallback = callback;
            var usedLng = typeof language === "string" ? language : this.language;
            if (typeof language === "function")
              usedCallback = language;
            if (!this.options.resources || this.options.partialBundledLanguages) {
              if (usedLng && usedLng.toLowerCase() === "cimode")
                return usedCallback();
              var toLoad = [];
              var append = function append2(lng) {
                if (!lng)
                  return;
                var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                lngs.forEach(function(l3) {
                  if (toLoad.indexOf(l3) < 0)
                    toLoad.push(l3);
                });
              };
              if (!usedLng) {
                var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                fallbacks.forEach(function(l3) {
                  return append(l3);
                });
              } else {
                append(usedLng);
              }
              if (this.options.preload) {
                this.options.preload.forEach(function(l3) {
                  return append(l3);
                });
              }
              this.services.backendConnector.load(toLoad, this.options.ns, function(e3) {
                if (!e3 && !_this3.resolvedLanguage && _this3.language)
                  _this3.setResolvedLanguage(_this3.language);
                usedCallback(e3);
              });
            } else {
              usedCallback(null);
            }
          }
        }, {
          key: "reloadResources",
          value: function reloadResources2(lngs, ns2, callback) {
            var deferred = defer();
            if (!lngs)
              lngs = this.languages;
            if (!ns2)
              ns2 = this.options.ns;
            if (!callback)
              callback = noop;
            this.services.backendConnector.reload(lngs, ns2, function(err) {
              deferred.resolve();
              callback(err);
            });
            return deferred;
          }
        }, {
          key: "use",
          value: function use2(module) {
            if (!module)
              throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
            if (!module.type)
              throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
            if (module.type === "backend") {
              this.modules.backend = module;
            }
            if (module.type === "logger" || module.log && module.warn && module.error) {
              this.modules.logger = module;
            }
            if (module.type === "languageDetector") {
              this.modules.languageDetector = module;
            }
            if (module.type === "i18nFormat") {
              this.modules.i18nFormat = module;
            }
            if (module.type === "postProcessor") {
              postProcessor.addPostProcessor(module);
            }
            if (module.type === "formatter") {
              this.modules.formatter = module;
            }
            if (module.type === "3rdParty") {
              this.modules.external.push(module);
            }
            return this;
          }
        }, {
          key: "setResolvedLanguage",
          value: function setResolvedLanguage(l3) {
            if (!l3 || !this.languages)
              return;
            if (["cimode", "dev"].indexOf(l3) > -1)
              return;
            for (var li = 0; li < this.languages.length; li++) {
              var lngInLngs = this.languages[li];
              if (["cimode", "dev"].indexOf(lngInLngs) > -1)
                continue;
              if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
                this.resolvedLanguage = lngInLngs;
                break;
              }
            }
          }
        }, {
          key: "changeLanguage",
          value: function changeLanguage2(lng, callback) {
            var _this4 = this;
            this.isLanguageChangingTo = lng;
            var deferred = defer();
            this.emit("languageChanging", lng);
            var setLngProps = function setLngProps2(l3) {
              _this4.language = l3;
              _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l3);
              _this4.resolvedLanguage = void 0;
              _this4.setResolvedLanguage(l3);
            };
            var done = function done2(err, l3) {
              if (l3) {
                setLngProps(l3);
                _this4.translator.changeLanguage(l3);
                _this4.isLanguageChangingTo = void 0;
                _this4.emit("languageChanged", l3);
                _this4.logger.log("languageChanged", l3);
              } else {
                _this4.isLanguageChangingTo = void 0;
              }
              deferred.resolve(function() {
                return _this4.t.apply(_this4, arguments);
              });
              if (callback)
                callback(err, function() {
                  return _this4.t.apply(_this4, arguments);
                });
            };
            var setLng = function setLng2(lngs) {
              if (!lng && !lngs && _this4.services.languageDetector)
                lngs = [];
              var l3 = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
              if (l3) {
                if (!_this4.language) {
                  setLngProps(l3);
                }
                if (!_this4.translator.language)
                  _this4.translator.changeLanguage(l3);
                if (_this4.services.languageDetector)
                  _this4.services.languageDetector.cacheUserLanguage(l3);
              }
              _this4.loadResources(l3, function(err) {
                done(err, l3);
              });
            };
            if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
              setLng(this.services.languageDetector.detect());
            } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
              this.services.languageDetector.detect(setLng);
            } else {
              setLng(lng);
            }
            return deferred;
          }
        }, {
          key: "getFixedT",
          value: function getFixedT2(lng, ns2, keyPrefix) {
            var _this5 = this;
            var fixedT = function fixedT2(key, opts) {
              var options;
              if (_typeof(opts) !== "object") {
                for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                  rest[_key3 - 2] = arguments[_key3];
                }
                options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
              } else {
                options = _objectSpread$6({}, opts);
              }
              options.lng = options.lng || fixedT2.lng;
              options.lngs = options.lngs || fixedT2.lngs;
              options.ns = options.ns || fixedT2.ns;
              var keySeparator = _this5.options.keySeparator || ".";
              var resultKey = keyPrefix ? "".concat(keyPrefix).concat(keySeparator).concat(key) : key;
              return _this5.t(resultKey, options);
            };
            if (typeof lng === "string") {
              fixedT.lng = lng;
            } else {
              fixedT.lngs = lng;
            }
            fixedT.ns = ns2;
            fixedT.keyPrefix = keyPrefix;
            return fixedT;
          }
        }, {
          key: "t",
          value: function t4() {
            var _this$translator;
            return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
          }
        }, {
          key: "exists",
          value: function exists2() {
            var _this$translator2;
            return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
          }
        }, {
          key: "setDefaultNamespace",
          value: function setDefaultNamespace2(ns2) {
            this.options.defaultNS = ns2;
          }
        }, {
          key: "hasLoadedNamespace",
          value: function hasLoadedNamespace2(ns2) {
            var _this6 = this;
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (!this.isInitialized) {
              this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
              return false;
            }
            if (!this.languages || !this.languages.length) {
              this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
              return false;
            }
            var lng = this.resolvedLanguage || this.languages[0];
            var fallbackLng = this.options ? this.options.fallbackLng : false;
            var lastLng = this.languages[this.languages.length - 1];
            if (lng.toLowerCase() === "cimode")
              return true;
            var loadNotPending = function loadNotPending2(l3, n2) {
              var loadState = _this6.services.backendConnector.state["".concat(l3, "|").concat(n2)];
              return loadState === -1 || loadState === 2;
            };
            if (options.precheck) {
              var preResult = options.precheck(this, loadNotPending);
              if (preResult !== void 0)
                return preResult;
            }
            if (this.hasResourceBundle(lng, ns2))
              return true;
            if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)
              return true;
            if (loadNotPending(lng, ns2) && (!fallbackLng || loadNotPending(lastLng, ns2)))
              return true;
            return false;
          }
        }, {
          key: "loadNamespaces",
          value: function loadNamespaces2(ns2, callback) {
            var _this7 = this;
            var deferred = defer();
            if (!this.options.ns) {
              callback && callback();
              return Promise.resolve();
            }
            if (typeof ns2 === "string")
              ns2 = [ns2];
            ns2.forEach(function(n2) {
              if (_this7.options.ns.indexOf(n2) < 0)
                _this7.options.ns.push(n2);
            });
            this.loadResources(function(err) {
              deferred.resolve();
              if (callback)
                callback(err);
            });
            return deferred;
          }
        }, {
          key: "loadLanguages",
          value: function loadLanguages2(lngs, callback) {
            var deferred = defer();
            if (typeof lngs === "string")
              lngs = [lngs];
            var preloaded = this.options.preload || [];
            var newLngs = lngs.filter(function(lng) {
              return preloaded.indexOf(lng) < 0;
            });
            if (!newLngs.length) {
              if (callback)
                callback();
              return Promise.resolve();
            }
            this.options.preload = preloaded.concat(newLngs);
            this.loadResources(function(err) {
              deferred.resolve();
              if (callback)
                callback(err);
            });
            return deferred;
          }
        }, {
          key: "dir",
          value: function dir(lng) {
            if (!lng)
              lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
            if (!lng)
              return "rtl";
            var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
            return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
          }
        }, {
          key: "cloneInstance",
          value: function cloneInstance() {
            var _this8 = this;
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
            var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
              isClone: true
            });
            var clone = new I18n2(mergedOptions);
            var membersToCopy = ["store", "services", "language"];
            membersToCopy.forEach(function(m3) {
              clone[m3] = _this8[m3];
            });
            clone.services = _objectSpread$6({}, this.services);
            clone.services.utils = {
              hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
            };
            clone.translator = new Translator(clone.services, clone.options);
            clone.translator.on("*", function(event) {
              for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                args[_key4 - 1] = arguments[_key4];
              }
              clone.emit.apply(clone, [event].concat(args));
            });
            clone.init(mergedOptions, callback);
            clone.translator.options = clone.options;
            clone.translator.backendConnector.services.utils = {
              hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
            };
            return clone;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              options: this.options,
              store: this.store,
              language: this.language,
              languages: this.languages,
              resolvedLanguage: this.resolvedLanguage
            };
          }
        }]);
        return I18n2;
      }(EventEmitter);
      _defineProperty(I18n, "createInstance", function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : void 0;
        return new I18n(options, callback);
      });
      instance = I18n.createInstance();
      instance.createInstance = I18n.createInstance;
      createInstance = instance.createInstance;
      init = instance.init;
      loadResources = instance.loadResources;
      reloadResources = instance.reloadResources;
      use = instance.use;
      changeLanguage = instance.changeLanguage;
      getFixedT = instance.getFixedT;
      t = instance.t;
      exists = instance.exists;
      setDefaultNamespace = instance.setDefaultNamespace;
      hasLoadedNamespace = instance.hasLoadedNamespace;
      loadNamespaces = instance.loadNamespaces;
      loadLanguages = instance.loadLanguages;
      i18next_default = instance;
    }
  });

  // node_modules/i18next-icu/dist/es/utils.js
  function getLastOfPath2(object, path, Empty) {
    function cleanKey(key2) {
      return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
    }
    function canNotTraverseDeeper() {
      return !object || typeof object === "string";
    }
    var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
    while (stack.length > 1) {
      if (canNotTraverseDeeper())
        return {};
      var key = cleanKey(stack.shift());
      if (!object[key] && Empty)
        object[key] = new Empty();
      object = object[key];
    }
    if (canNotTraverseDeeper())
      return {};
    return {
      obj: object,
      k: cleanKey(stack.shift())
    };
  }
  function setPath2(object, path, newValue) {
    var _getLastOfPath = getLastOfPath2(object, path, Object), obj = _getLastOfPath.obj, k3 = _getLastOfPath.k;
    obj[k3] = newValue;
  }
  function getPath2(object, path) {
    var _getLastOfPath3 = getLastOfPath2(object, path), obj = _getLastOfPath3.obj, k3 = _getLastOfPath3.k;
    if (!obj)
      return void 0;
    return obj[k3];
  }
  function defaults(obj) {
    each.call(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0)
            obj[prop] = source[prop];
        }
      }
    });
    return obj;
  }
  var arr, each, slice;
  var init_utils2 = __esm({
    "node_modules/i18next-icu/dist/es/utils.js"() {
      arr = [];
      each = arr.forEach;
      slice = arr.slice;
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/error.js
  var ErrorKind;
  var init_error = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/error.js"() {
      (function(ErrorKind2) {
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
        ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
        ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
        ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
        ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
        ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
        ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
      })(ErrorKind || (ErrorKind = {}));
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/types.js
  function isLiteralElement(el) {
    return el.type === TYPE.literal;
  }
  function isArgumentElement(el) {
    return el.type === TYPE.argument;
  }
  function isNumberElement(el) {
    return el.type === TYPE.number;
  }
  function isDateElement(el) {
    return el.type === TYPE.date;
  }
  function isTimeElement(el) {
    return el.type === TYPE.time;
  }
  function isSelectElement(el) {
    return el.type === TYPE.select;
  }
  function isPluralElement(el) {
    return el.type === TYPE.plural;
  }
  function isPoundElement(el) {
    return el.type === TYPE.pound;
  }
  function isTagElement(el) {
    return el.type === TYPE.tag;
  }
  function isNumberSkeleton(el) {
    return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
  }
  function isDateTimeSkeleton(el) {
    return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
  }
  var TYPE, SKELETON_TYPE;
  var init_types2 = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/types.js"() {
      (function(TYPE2) {
        TYPE2[TYPE2["literal"] = 0] = "literal";
        TYPE2[TYPE2["argument"] = 1] = "argument";
        TYPE2[TYPE2["number"] = 2] = "number";
        TYPE2[TYPE2["date"] = 3] = "date";
        TYPE2[TYPE2["time"] = 4] = "time";
        TYPE2[TYPE2["select"] = 5] = "select";
        TYPE2[TYPE2["plural"] = 6] = "plural";
        TYPE2[TYPE2["pound"] = 7] = "pound";
        TYPE2[TYPE2["tag"] = 8] = "tag";
      })(TYPE || (TYPE = {}));
      (function(SKELETON_TYPE2) {
        SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
        SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
      })(SKELETON_TYPE || (SKELETON_TYPE = {}));
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
  var SPACE_SEPARATOR_REGEX;
  var init_regex_generated = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js"() {
      SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
  function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function(match) {
      var len = match.length;
      switch (match[0]) {
        case "G":
          result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
          break;
        case "y":
          result.year = len === 2 ? "2-digit" : "numeric";
          break;
        case "Y":
        case "u":
        case "U":
        case "r":
          throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
        case "q":
        case "Q":
          throw new RangeError("`q/Q` (quarter) patterns are not supported");
        case "M":
        case "L":
          result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
          break;
        case "w":
        case "W":
          throw new RangeError("`w/W` (week) patterns are not supported");
        case "d":
          result.day = ["numeric", "2-digit"][len - 1];
          break;
        case "D":
        case "F":
        case "g":
          throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
        case "E":
          result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
          break;
        case "e":
          if (len < 4) {
            throw new RangeError("`e..eee` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "c":
          if (len < 4) {
            throw new RangeError("`c..ccc` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "a":
          result.hour12 = true;
          break;
        case "b":
        case "B":
          throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
        case "h":
          result.hourCycle = "h12";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "H":
          result.hourCycle = "h23";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "K":
          result.hourCycle = "h11";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "k":
          result.hourCycle = "h24";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "j":
        case "J":
        case "C":
          throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
        case "m":
          result.minute = ["numeric", "2-digit"][len - 1];
          break;
        case "s":
          result.second = ["numeric", "2-digit"][len - 1];
          break;
        case "S":
        case "A":
          throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
        case "z":
          result.timeZoneName = len < 4 ? "short" : "long";
          break;
        case "Z":
        case "O":
        case "v":
        case "V":
        case "X":
        case "x":
          throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
      }
      return "";
    });
    return result;
  }
  var DATE_TIME_REGEX;
  var init_date_time = __esm({
    "node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js"() {
      DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
  var WHITE_SPACE_REGEX;
  var init_regex_generated2 = __esm({
    "node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js"() {
      WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/lib/number.js
  function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
      throw new Error("Number skeleton cannot be empty");
    }
    var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x2) {
      return x2.length > 0;
    });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
      var stringToken = stringTokens_1[_i];
      var stemAndOptions = stringToken.split("/");
      if (stemAndOptions.length === 0) {
        throw new Error("Invalid number skeleton");
      }
      var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
      for (var _a2 = 0, options_1 = options; _a2 < options_1.length; _a2++) {
        var option = options_1[_a2];
        if (option.length === 0) {
          throw new Error("Invalid number skeleton");
        }
      }
      tokens.push({ stem, options });
    }
    return tokens;
  }
  function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, "");
  }
  function parseSignificantPrecision(str) {
    var result = {};
    if (str[str.length - 1] === "r") {
      result.roundingPriority = "morePrecision";
    } else if (str[str.length - 1] === "s") {
      result.roundingPriority = "lessPrecision";
    }
    str.replace(SIGNIFICANT_PRECISION_REGEX, function(_24, g1, g22) {
      if (typeof g22 !== "string") {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length;
      } else if (g22 === "+") {
        result.minimumSignificantDigits = g1.length;
      } else if (g1[0] === "#") {
        result.maximumSignificantDigits = g1.length;
      } else {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length + (typeof g22 === "string" ? g22.length : 0);
      }
      return "";
    });
    return result;
  }
  function parseSign(str) {
    switch (str) {
      case "sign-auto":
        return {
          signDisplay: "auto"
        };
      case "sign-accounting":
      case "()":
        return {
          currencySign: "accounting"
        };
      case "sign-always":
      case "+!":
        return {
          signDisplay: "always"
        };
      case "sign-accounting-always":
      case "()!":
        return {
          signDisplay: "always",
          currencySign: "accounting"
        };
      case "sign-except-zero":
      case "+?":
        return {
          signDisplay: "exceptZero"
        };
      case "sign-accounting-except-zero":
      case "()?":
        return {
          signDisplay: "exceptZero",
          currencySign: "accounting"
        };
      case "sign-never":
      case "+_":
        return {
          signDisplay: "never"
        };
    }
  }
  function parseConciseScientificAndEngineeringStem(stem) {
    var result;
    if (stem[0] === "E" && stem[1] === "E") {
      result = {
        notation: "engineering"
      };
      stem = stem.slice(2);
    } else if (stem[0] === "E") {
      result = {
        notation: "scientific"
      };
      stem = stem.slice(1);
    }
    if (result) {
      var signDisplay = stem.slice(0, 2);
      if (signDisplay === "+!") {
        result.signDisplay = "always";
        stem = stem.slice(2);
      } else if (signDisplay === "+?") {
        result.signDisplay = "exceptZero";
        stem = stem.slice(2);
      }
      if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
        throw new Error("Malformed concise eng/scientific notation");
      }
      result.minimumIntegerDigits = stem.length;
    }
    return result;
  }
  function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
      return signOpts;
    }
    return result;
  }
  function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token = tokens_1[_i];
      switch (token.stem) {
        case "percent":
        case "%":
          result.style = "percent";
          continue;
        case "%x100":
          result.style = "percent";
          result.scale = 100;
          continue;
        case "currency":
          result.style = "currency";
          result.currency = token.options[0];
          continue;
        case "group-off":
        case ",_":
          result.useGrouping = false;
          continue;
        case "precision-integer":
        case ".":
          result.maximumFractionDigits = 0;
          continue;
        case "measure-unit":
        case "unit":
          result.style = "unit";
          result.unit = icuUnitToEcma(token.options[0]);
          continue;
        case "compact-short":
        case "K":
          result.notation = "compact";
          result.compactDisplay = "short";
          continue;
        case "compact-long":
        case "KK":
          result.notation = "compact";
          result.compactDisplay = "long";
          continue;
        case "scientific":
          result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
            return __assign(__assign({}, all), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "engineering":
          result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
            return __assign(__assign({}, all), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "notation-simple":
          result.notation = "standard";
          continue;
        case "unit-width-narrow":
          result.currencyDisplay = "narrowSymbol";
          result.unitDisplay = "narrow";
          continue;
        case "unit-width-short":
          result.currencyDisplay = "code";
          result.unitDisplay = "short";
          continue;
        case "unit-width-full-name":
          result.currencyDisplay = "name";
          result.unitDisplay = "long";
          continue;
        case "unit-width-iso-code":
          result.currencyDisplay = "symbol";
          continue;
        case "scale":
          result.scale = parseFloat(token.options[0]);
          continue;
        case "integer-width":
          if (token.options.length > 1) {
            throw new RangeError("integer-width stems only accept a single optional option");
          }
          token.options[0].replace(INTEGER_WIDTH_REGEX, function(_24, g1, g22, g3, g4, g5) {
            if (g1) {
              result.minimumIntegerDigits = g22.length;
            } else if (g3 && g4) {
              throw new Error("We currently do not support maximum integer digits");
            } else if (g5) {
              throw new Error("We currently do not support exact integer digits");
            }
            return "";
          });
          continue;
      }
      if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
        result.minimumIntegerDigits = token.stem.length;
        continue;
      }
      if (FRACTION_PRECISION_REGEX.test(token.stem)) {
        if (token.options.length > 1) {
          throw new RangeError("Fraction-precision stems only accept a single optional option");
        }
        token.stem.replace(FRACTION_PRECISION_REGEX, function(_24, g1, g22, g3, g4, g5) {
          if (g22 === "*") {
            result.minimumFractionDigits = g1.length;
          } else if (g3 && g3[0] === "#") {
            result.maximumFractionDigits = g3.length;
          } else if (g4 && g5) {
            result.minimumFractionDigits = g4.length;
            result.maximumFractionDigits = g4.length + g5.length;
          } else {
            result.minimumFractionDigits = g1.length;
            result.maximumFractionDigits = g1.length;
          }
          return "";
        });
        var opt = token.options[0];
        if (opt === "w") {
          result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
        } else if (opt) {
          result = __assign(__assign({}, result), parseSignificantPrecision(opt));
        }
        continue;
      }
      if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
        result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
        continue;
      }
      var signOpts = parseSign(token.stem);
      if (signOpts) {
        result = __assign(__assign({}, result), signOpts);
      }
      var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
      if (conciseScientificAndEngineeringOpts) {
        result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
      }
    }
    return result;
  }
  var FRACTION_PRECISION_REGEX, SIGNIFICANT_PRECISION_REGEX, INTEGER_WIDTH_REGEX, CONCISE_INTEGER_WIDTH_REGEX;
  var init_number = __esm({
    "node_modules/@formatjs/icu-skeleton-parser/lib/number.js"() {
      init_tslib_es6();
      init_regex_generated2();
      FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
      SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
      INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
      CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/lib/index.js
  var init_lib2 = __esm({
    "node_modules/@formatjs/icu-skeleton-parser/lib/index.js"() {
      init_date_time();
      init_number();
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
  var timeData;
  var init_time_data_generated = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js"() {
      timeData = {
        "AX": [
          "H"
        ],
        "BQ": [
          "H"
        ],
        "CP": [
          "H"
        ],
        "CZ": [
          "H"
        ],
        "DK": [
          "H"
        ],
        "FI": [
          "H"
        ],
        "ID": [
          "H"
        ],
        "IS": [
          "H"
        ],
        "ML": [
          "H"
        ],
        "NE": [
          "H"
        ],
        "RU": [
          "H"
        ],
        "SE": [
          "H"
        ],
        "SJ": [
          "H"
        ],
        "SK": [
          "H"
        ],
        "AS": [
          "h",
          "H"
        ],
        "BT": [
          "h",
          "H"
        ],
        "DJ": [
          "h",
          "H"
        ],
        "ER": [
          "h",
          "H"
        ],
        "GH": [
          "h",
          "H"
        ],
        "IN": [
          "h",
          "H"
        ],
        "LS": [
          "h",
          "H"
        ],
        "PG": [
          "h",
          "H"
        ],
        "PW": [
          "h",
          "H"
        ],
        "SO": [
          "h",
          "H"
        ],
        "TO": [
          "h",
          "H"
        ],
        "VU": [
          "h",
          "H"
        ],
        "WS": [
          "h",
          "H"
        ],
        "001": [
          "H",
          "h"
        ],
        "AL": [
          "h",
          "H",
          "hB"
        ],
        "TD": [
          "h",
          "H",
          "hB"
        ],
        "ca-ES": [
          "H",
          "h",
          "hB"
        ],
        "CF": [
          "H",
          "h",
          "hB"
        ],
        "CM": [
          "H",
          "h",
          "hB"
        ],
        "fr-CA": [
          "H",
          "h",
          "hB"
        ],
        "gl-ES": [
          "H",
          "h",
          "hB"
        ],
        "it-CH": [
          "H",
          "h",
          "hB"
        ],
        "it-IT": [
          "H",
          "h",
          "hB"
        ],
        "LU": [
          "H",
          "h",
          "hB"
        ],
        "NP": [
          "H",
          "h",
          "hB"
        ],
        "PF": [
          "H",
          "h",
          "hB"
        ],
        "SC": [
          "H",
          "h",
          "hB"
        ],
        "SM": [
          "H",
          "h",
          "hB"
        ],
        "SN": [
          "H",
          "h",
          "hB"
        ],
        "TF": [
          "H",
          "h",
          "hB"
        ],
        "VA": [
          "H",
          "h",
          "hB"
        ],
        "CY": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "GR": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "CO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "DO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KP": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "NA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "VE": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "AC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "AI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "BW": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "BZ": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "DG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "FK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GB": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IM": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IO": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "JE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "LT": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MS": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NF": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NR": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NU": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "PN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SH": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "TA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "ZA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "af-ZA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "AR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CL": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CU": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "EA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-BO": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-BR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-EC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-ES": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-GQ": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-PE": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "GT": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "HN": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "IC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KG": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KM": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "LK": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MX": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "NI": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "PY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "SV": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "UY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "JP": [
          "H",
          "h",
          "K"
        ],
        "AD": [
          "H",
          "hB"
        ],
        "AM": [
          "H",
          "hB"
        ],
        "AO": [
          "H",
          "hB"
        ],
        "AT": [
          "H",
          "hB"
        ],
        "AW": [
          "H",
          "hB"
        ],
        "BE": [
          "H",
          "hB"
        ],
        "BF": [
          "H",
          "hB"
        ],
        "BJ": [
          "H",
          "hB"
        ],
        "BL": [
          "H",
          "hB"
        ],
        "BR": [
          "H",
          "hB"
        ],
        "CG": [
          "H",
          "hB"
        ],
        "CI": [
          "H",
          "hB"
        ],
        "CV": [
          "H",
          "hB"
        ],
        "DE": [
          "H",
          "hB"
        ],
        "EE": [
          "H",
          "hB"
        ],
        "FR": [
          "H",
          "hB"
        ],
        "GA": [
          "H",
          "hB"
        ],
        "GF": [
          "H",
          "hB"
        ],
        "GN": [
          "H",
          "hB"
        ],
        "GP": [
          "H",
          "hB"
        ],
        "GW": [
          "H",
          "hB"
        ],
        "HR": [
          "H",
          "hB"
        ],
        "IL": [
          "H",
          "hB"
        ],
        "IT": [
          "H",
          "hB"
        ],
        "KZ": [
          "H",
          "hB"
        ],
        "MC": [
          "H",
          "hB"
        ],
        "MD": [
          "H",
          "hB"
        ],
        "MF": [
          "H",
          "hB"
        ],
        "MQ": [
          "H",
          "hB"
        ],
        "MZ": [
          "H",
          "hB"
        ],
        "NC": [
          "H",
          "hB"
        ],
        "NL": [
          "H",
          "hB"
        ],
        "PM": [
          "H",
          "hB"
        ],
        "PT": [
          "H",
          "hB"
        ],
        "RE": [
          "H",
          "hB"
        ],
        "RO": [
          "H",
          "hB"
        ],
        "SI": [
          "H",
          "hB"
        ],
        "SR": [
          "H",
          "hB"
        ],
        "ST": [
          "H",
          "hB"
        ],
        "TG": [
          "H",
          "hB"
        ],
        "TR": [
          "H",
          "hB"
        ],
        "WF": [
          "H",
          "hB"
        ],
        "YT": [
          "H",
          "hB"
        ],
        "BD": [
          "h",
          "hB",
          "H"
        ],
        "PK": [
          "h",
          "hB",
          "H"
        ],
        "AZ": [
          "H",
          "hB",
          "h"
        ],
        "BA": [
          "H",
          "hB",
          "h"
        ],
        "BG": [
          "H",
          "hB",
          "h"
        ],
        "CH": [
          "H",
          "hB",
          "h"
        ],
        "GE": [
          "H",
          "hB",
          "h"
        ],
        "LI": [
          "H",
          "hB",
          "h"
        ],
        "ME": [
          "H",
          "hB",
          "h"
        ],
        "RS": [
          "H",
          "hB",
          "h"
        ],
        "UA": [
          "H",
          "hB",
          "h"
        ],
        "UZ": [
          "H",
          "hB",
          "h"
        ],
        "XK": [
          "H",
          "hB",
          "h"
        ],
        "AG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "AU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "CA": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "DM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "en-001": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FJ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GD": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "JM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KN": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LR": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MH": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MP": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MW": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "NZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SL": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TT": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "UM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "US": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "ZM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BO": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "EC": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "ES": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "GQ": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "PE": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "AE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "ar-001": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "BH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "DZ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EG": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "HK": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "IQ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "JO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "KW": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "LB": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "LY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MR": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "OM": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PS": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "QA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SD": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "TN": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "YE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "AF": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "LA": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "CN": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "LV": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "TL": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "zu-ZA": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "CD": [
          "hB",
          "H"
        ],
        "IR": [
          "hB",
          "H"
        ],
        "hi-IN": [
          "hB",
          "h",
          "H"
        ],
        "kn-IN": [
          "hB",
          "h",
          "H"
        ],
        "ml-IN": [
          "hB",
          "h",
          "H"
        ],
        "te-IN": [
          "hB",
          "h",
          "H"
        ],
        "KH": [
          "hB",
          "h",
          "H",
          "hb"
        ],
        "ta-IN": [
          "hB",
          "h",
          "hb",
          "H"
        ],
        "BN": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "MY": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "ET": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "gu-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "mr-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "pa-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "TW": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "KE": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "MM": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "TZ": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "UG": [
          "hB",
          "hb",
          "H",
          "h"
        ]
      };
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
  function getBestPattern(skeleton, locale3) {
    var skeletonCopy = "";
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
      var patternChar = skeleton.charAt(patternPos);
      if (patternChar === "j") {
        var extraLength = 0;
        while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
          extraLength++;
          patternPos++;
        }
        var hourLen = 1 + (extraLength & 1);
        var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
        var dayPeriodChar = "a";
        var hourChar = getDefaultHourSymbolFromLocale(locale3);
        if (hourChar == "H" || hourChar == "k") {
          dayPeriodLen = 0;
        }
        while (dayPeriodLen-- > 0) {
          skeletonCopy += dayPeriodChar;
        }
        while (hourLen-- > 0) {
          skeletonCopy = hourChar + skeletonCopy;
        }
      } else if (patternChar === "J") {
        skeletonCopy += "H";
      } else {
        skeletonCopy += patternChar;
      }
    }
    return skeletonCopy;
  }
  function getDefaultHourSymbolFromLocale(locale3) {
    var hourCycle = locale3.hourCycle;
    if (hourCycle === void 0 && // @ts-ignore hourCycle(s) is not identified yet
    locale3.hourCycles && // @ts-ignore
    locale3.hourCycles.length) {
      hourCycle = locale3.hourCycles[0];
    }
    if (hourCycle) {
      switch (hourCycle) {
        case "h24":
          return "k";
        case "h23":
          return "H";
        case "h12":
          return "h";
        case "h11":
          return "K";
        default:
          throw new Error("Invalid hourCycle");
      }
    }
    var languageTag = locale3.language;
    var regionTag;
    if (languageTag !== "root") {
      regionTag = locale3.maximize().region;
    }
    var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
    return hourCycles[0];
  }
  var init_date_time_pattern_generator = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js"() {
      init_time_data_generated();
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
  function createLocation(start, end) {
    return { start, end };
  }
  function RE(s3, flag) {
    return new RegExp(s3, flag);
  }
  function _isAlpha(codepoint) {
    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
  }
  function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47;
  }
  function _isPotentialElementNameChar(c3) {
    return c3 === 45 || c3 === 46 || c3 >= 48 && c3 <= 57 || c3 === 95 || c3 >= 97 && c3 <= 122 || c3 >= 65 && c3 <= 90 || c3 == 183 || c3 >= 192 && c3 <= 214 || c3 >= 216 && c3 <= 246 || c3 >= 248 && c3 <= 893 || c3 >= 895 && c3 <= 8191 || c3 >= 8204 && c3 <= 8205 || c3 >= 8255 && c3 <= 8256 || c3 >= 8304 && c3 <= 8591 || c3 >= 11264 && c3 <= 12271 || c3 >= 12289 && c3 <= 55295 || c3 >= 63744 && c3 <= 64975 || c3 >= 65008 && c3 <= 65533 || c3 >= 65536 && c3 <= 983039;
  }
  function _isWhiteSpace(c3) {
    return c3 >= 9 && c3 <= 13 || c3 === 32 || c3 === 133 || c3 >= 8206 && c3 <= 8207 || c3 === 8232 || c3 === 8233;
  }
  function _isPatternSyntax(c3) {
    return c3 >= 33 && c3 <= 35 || c3 === 36 || c3 >= 37 && c3 <= 39 || c3 === 40 || c3 === 41 || c3 === 42 || c3 === 43 || c3 === 44 || c3 === 45 || c3 >= 46 && c3 <= 47 || c3 >= 58 && c3 <= 59 || c3 >= 60 && c3 <= 62 || c3 >= 63 && c3 <= 64 || c3 === 91 || c3 === 92 || c3 === 93 || c3 === 94 || c3 === 96 || c3 === 123 || c3 === 124 || c3 === 125 || c3 === 126 || c3 === 161 || c3 >= 162 && c3 <= 165 || c3 === 166 || c3 === 167 || c3 === 169 || c3 === 171 || c3 === 172 || c3 === 174 || c3 === 176 || c3 === 177 || c3 === 182 || c3 === 187 || c3 === 191 || c3 === 215 || c3 === 247 || c3 >= 8208 && c3 <= 8213 || c3 >= 8214 && c3 <= 8215 || c3 === 8216 || c3 === 8217 || c3 === 8218 || c3 >= 8219 && c3 <= 8220 || c3 === 8221 || c3 === 8222 || c3 === 8223 || c3 >= 8224 && c3 <= 8231 || c3 >= 8240 && c3 <= 8248 || c3 === 8249 || c3 === 8250 || c3 >= 8251 && c3 <= 8254 || c3 >= 8257 && c3 <= 8259 || c3 === 8260 || c3 === 8261 || c3 === 8262 || c3 >= 8263 && c3 <= 8273 || c3 === 8274 || c3 === 8275 || c3 >= 8277 && c3 <= 8286 || c3 >= 8592 && c3 <= 8596 || c3 >= 8597 && c3 <= 8601 || c3 >= 8602 && c3 <= 8603 || c3 >= 8604 && c3 <= 8607 || c3 === 8608 || c3 >= 8609 && c3 <= 8610 || c3 === 8611 || c3 >= 8612 && c3 <= 8613 || c3 === 8614 || c3 >= 8615 && c3 <= 8621 || c3 === 8622 || c3 >= 8623 && c3 <= 8653 || c3 >= 8654 && c3 <= 8655 || c3 >= 8656 && c3 <= 8657 || c3 === 8658 || c3 === 8659 || c3 === 8660 || c3 >= 8661 && c3 <= 8691 || c3 >= 8692 && c3 <= 8959 || c3 >= 8960 && c3 <= 8967 || c3 === 8968 || c3 === 8969 || c3 === 8970 || c3 === 8971 || c3 >= 8972 && c3 <= 8991 || c3 >= 8992 && c3 <= 8993 || c3 >= 8994 && c3 <= 9e3 || c3 === 9001 || c3 === 9002 || c3 >= 9003 && c3 <= 9083 || c3 === 9084 || c3 >= 9085 && c3 <= 9114 || c3 >= 9115 && c3 <= 9139 || c3 >= 9140 && c3 <= 9179 || c3 >= 9180 && c3 <= 9185 || c3 >= 9186 && c3 <= 9254 || c3 >= 9255 && c3 <= 9279 || c3 >= 9280 && c3 <= 9290 || c3 >= 9291 && c3 <= 9311 || c3 >= 9472 && c3 <= 9654 || c3 === 9655 || c3 >= 9656 && c3 <= 9664 || c3 === 9665 || c3 >= 9666 && c3 <= 9719 || c3 >= 9720 && c3 <= 9727 || c3 >= 9728 && c3 <= 9838 || c3 === 9839 || c3 >= 9840 && c3 <= 10087 || c3 === 10088 || c3 === 10089 || c3 === 10090 || c3 === 10091 || c3 === 10092 || c3 === 10093 || c3 === 10094 || c3 === 10095 || c3 === 10096 || c3 === 10097 || c3 === 10098 || c3 === 10099 || c3 === 10100 || c3 === 10101 || c3 >= 10132 && c3 <= 10175 || c3 >= 10176 && c3 <= 10180 || c3 === 10181 || c3 === 10182 || c3 >= 10183 && c3 <= 10213 || c3 === 10214 || c3 === 10215 || c3 === 10216 || c3 === 10217 || c3 === 10218 || c3 === 10219 || c3 === 10220 || c3 === 10221 || c3 === 10222 || c3 === 10223 || c3 >= 10224 && c3 <= 10239 || c3 >= 10240 && c3 <= 10495 || c3 >= 10496 && c3 <= 10626 || c3 === 10627 || c3 === 10628 || c3 === 10629 || c3 === 10630 || c3 === 10631 || c3 === 10632 || c3 === 10633 || c3 === 10634 || c3 === 10635 || c3 === 10636 || c3 === 10637 || c3 === 10638 || c3 === 10639 || c3 === 10640 || c3 === 10641 || c3 === 10642 || c3 === 10643 || c3 === 10644 || c3 === 10645 || c3 === 10646 || c3 === 10647 || c3 === 10648 || c3 >= 10649 && c3 <= 10711 || c3 === 10712 || c3 === 10713 || c3 === 10714 || c3 === 10715 || c3 >= 10716 && c3 <= 10747 || c3 === 10748 || c3 === 10749 || c3 >= 10750 && c3 <= 11007 || c3 >= 11008 && c3 <= 11055 || c3 >= 11056 && c3 <= 11076 || c3 >= 11077 && c3 <= 11078 || c3 >= 11079 && c3 <= 11084 || c3 >= 11085 && c3 <= 11123 || c3 >= 11124 && c3 <= 11125 || c3 >= 11126 && c3 <= 11157 || c3 === 11158 || c3 >= 11159 && c3 <= 11263 || c3 >= 11776 && c3 <= 11777 || c3 === 11778 || c3 === 11779 || c3 === 11780 || c3 === 11781 || c3 >= 11782 && c3 <= 11784 || c3 === 11785 || c3 === 11786 || c3 === 11787 || c3 === 11788 || c3 === 11789 || c3 >= 11790 && c3 <= 11798 || c3 === 11799 || c3 >= 11800 && c3 <= 11801 || c3 === 11802 || c3 === 11803 || c3 === 11804 || c3 === 11805 || c3 >= 11806 && c3 <= 11807 || c3 === 11808 || c3 === 11809 || c3 === 11810 || c3 === 11811 || c3 === 11812 || c3 === 11813 || c3 === 11814 || c3 === 11815 || c3 === 11816 || c3 === 11817 || c3 >= 11818 && c3 <= 11822 || c3 === 11823 || c3 >= 11824 && c3 <= 11833 || c3 >= 11834 && c3 <= 11835 || c3 >= 11836 && c3 <= 11839 || c3 === 11840 || c3 === 11841 || c3 === 11842 || c3 >= 11843 && c3 <= 11855 || c3 >= 11856 && c3 <= 11857 || c3 === 11858 || c3 >= 11859 && c3 <= 11903 || c3 >= 12289 && c3 <= 12291 || c3 === 12296 || c3 === 12297 || c3 === 12298 || c3 === 12299 || c3 === 12300 || c3 === 12301 || c3 === 12302 || c3 === 12303 || c3 === 12304 || c3 === 12305 || c3 >= 12306 && c3 <= 12307 || c3 === 12308 || c3 === 12309 || c3 === 12310 || c3 === 12311 || c3 === 12312 || c3 === 12313 || c3 === 12314 || c3 === 12315 || c3 === 12316 || c3 === 12317 || c3 >= 12318 && c3 <= 12319 || c3 === 12320 || c3 === 12336 || c3 === 64830 || c3 === 64831 || c3 >= 65093 && c3 <= 65094;
  }
  var _a, SPACE_SEPARATOR_START_REGEX, SPACE_SEPARATOR_END_REGEX, hasNativeStartsWith, hasNativeFromCodePoint, hasNativeFromEntries, hasNativeCodePointAt, hasTrimStart, hasTrimEnd, hasNativeIsSafeInteger, isSafeInteger, REGEX_SUPPORTS_U_AND_Y, re, startsWith, fromCodePoint, fromEntries, codePointAt, trimStart, trimEnd, matchIdentifierAtIndex, IDENTIFIER_PREFIX_RE_1, Parser;
  var init_parser = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/parser.js"() {
      init_tslib_es6();
      init_error();
      init_types2();
      init_regex_generated();
      init_lib2();
      init_date_time_pattern_generator();
      SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
      SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
      hasNativeStartsWith = !!String.prototype.startsWith;
      hasNativeFromCodePoint = !!String.fromCodePoint;
      hasNativeFromEntries = !!Object.fromEntries;
      hasNativeCodePointAt = !!String.prototype.codePointAt;
      hasTrimStart = !!String.prototype.trimStart;
      hasTrimEnd = !!String.prototype.trimEnd;
      hasNativeIsSafeInteger = !!Number.isSafeInteger;
      isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n2) {
        return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2 && Math.abs(n2) <= 9007199254740991;
      };
      REGEX_SUPPORTS_U_AND_Y = true;
      try {
        re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
      } catch (_24) {
        REGEX_SUPPORTS_U_AND_Y = false;
      }
      startsWith = hasNativeStartsWith ? (
        // Native
        function startsWith2(s3, search2, position) {
          return s3.startsWith(search2, position);
        }
      ) : (
        // For IE11
        function startsWith3(s3, search2, position) {
          return s3.slice(position, position + search2.length) === search2;
        }
      );
      fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : (
        // IE11
        function fromCodePoint2() {
          var codePoints = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            codePoints[_i] = arguments[_i];
          }
          var elements = "";
          var length = codePoints.length;
          var i3 = 0;
          var code;
          while (length > i3) {
            code = codePoints[i3++];
            if (code > 1114111)
              throw RangeError(code + " is not a valid code point");
            elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
          }
          return elements;
        }
      );
      fromEntries = // native
      hasNativeFromEntries ? Object.fromEntries : (
        // Ponyfill
        function fromEntries2(entries) {
          var obj = {};
          for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var _a2 = entries_1[_i], k3 = _a2[0], v3 = _a2[1];
            obj[k3] = v3;
          }
          return obj;
        }
      );
      codePointAt = hasNativeCodePointAt ? (
        // Native
        function codePointAt2(s3, index) {
          return s3.codePointAt(index);
        }
      ) : (
        // IE 11
        function codePointAt3(s3, index) {
          var size = s3.length;
          if (index < 0 || index >= size) {
            return void 0;
          }
          var first = s3.charCodeAt(index);
          var second;
          return first < 55296 || first > 56319 || index + 1 === size || (second = s3.charCodeAt(index + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
        }
      );
      trimStart = hasTrimStart ? (
        // Native
        function trimStart2(s3) {
          return s3.trimStart();
        }
      ) : (
        // Ponyfill
        function trimStart3(s3) {
          return s3.replace(SPACE_SEPARATOR_START_REGEX, "");
        }
      );
      trimEnd = hasTrimEnd ? (
        // Native
        function trimEnd2(s3) {
          return s3.trimEnd();
        }
      ) : (
        // Ponyfill
        function trimEnd3(s3) {
          return s3.replace(SPACE_SEPARATOR_END_REGEX, "");
        }
      );
      if (REGEX_SUPPORTS_U_AND_Y) {
        IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index) {
          var _a2;
          IDENTIFIER_PREFIX_RE_1.lastIndex = index;
          var match = IDENTIFIER_PREFIX_RE_1.exec(s3);
          return (_a2 = match[1]) !== null && _a2 !== void 0 ? _a2 : "";
        };
      } else {
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index) {
          var match = [];
          while (true) {
            var c3 = codePointAt(s3, index);
            if (c3 === void 0 || _isWhiteSpace(c3) || _isPatternSyntax(c3)) {
              break;
            }
            match.push(c3);
            index += c3 >= 65536 ? 2 : 1;
          }
          return fromCodePoint.apply(void 0, match);
        };
      }
      Parser = /** @class */
      function() {
        function Parser2(message, options) {
          if (options === void 0) {
            options = {};
          }
          this.message = message;
          this.position = { offset: 0, line: 1, column: 1 };
          this.ignoreTag = !!options.ignoreTag;
          this.locale = options.locale;
          this.requiresOtherClause = !!options.requiresOtherClause;
          this.shouldParseSkeletons = !!options.shouldParseSkeletons;
        }
        Parser2.prototype.parse = function() {
          if (this.offset() !== 0) {
            throw Error("parser can only be used once");
          }
          return this.parseMessage(0, "", false);
        };
        Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
          var elements = [];
          while (!this.isEOF()) {
            var char = this.char();
            if (char === 123) {
              var result = this.parseArgument(nestingLevel, expectingCloseTag);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else if (char === 125 && nestingLevel > 0) {
              break;
            } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
              var position = this.clonePosition();
              this.bump();
              elements.push({
                type: TYPE.pound,
                location: createLocation(position, this.clonePosition())
              });
            } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
              if (expectingCloseTag) {
                break;
              } else {
                return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
              }
            } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
              var result = this.parseTag(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else {
              var result = this.parseLiteral(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            }
          }
          return { val: elements, err: null };
        };
        Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
          var startPosition = this.clonePosition();
          this.bump();
          var tagName = this.parseTagName();
          this.bumpSpace();
          if (this.bumpIf("/>")) {
            return {
              val: {
                type: TYPE.literal,
                value: "<".concat(tagName, "/>"),
                location: createLocation(startPosition, this.clonePosition())
              },
              err: null
            };
          } else if (this.bumpIf(">")) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) {
              return childrenResult;
            }
            var children = childrenResult.val;
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf("</")) {
              if (this.isEOF() || !_isAlpha(this.char())) {
                return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
              }
              var closingTagNameStartPosition = this.clonePosition();
              var closingTagName = this.parseTagName();
              if (tagName !== closingTagName) {
                return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
              }
              this.bumpSpace();
              if (!this.bumpIf(">")) {
                return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
              }
              return {
                val: {
                  type: TYPE.tag,
                  value: tagName,
                  children,
                  location: createLocation(startPosition, this.clonePosition())
                },
                err: null
              };
            } else {
              return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
            }
          } else {
            return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
          }
        };
        Parser2.prototype.parseTagName = function() {
          var startOffset = this.offset();
          this.bump();
          while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
          }
          return this.message.slice(startOffset, this.offset());
        };
        Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
          var start = this.clonePosition();
          var value = "";
          while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
              value += parseQuoteResult;
              continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
              value += parseUnquotedResult;
              continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
              value += parseLeftAngleResult;
              continue;
            }
            break;
          }
          var location2 = createLocation(start, this.clonePosition());
          return {
            val: { type: TYPE.literal, value, location: location2 },
            err: null
          };
        };
        Parser2.prototype.tryParseLeftAngleBracket = function() {
          if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || // If at the opening tag or closing tag position, bail.
          !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump();
            return "<";
          }
          return null;
        };
        Parser2.prototype.tryParseQuote = function(parentArgType) {
          if (this.isEOF() || this.char() !== 39) {
            return null;
          }
          switch (this.peek()) {
            case 39:
              this.bump();
              this.bump();
              return "'";
            case 123:
            case 60:
            case 62:
            case 125:
              break;
            case 35:
              if (parentArgType === "plural" || parentArgType === "selectordinal") {
                break;
              }
              return null;
            default:
              return null;
          }
          this.bump();
          var codePoints = [this.char()];
          this.bump();
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39) {
              if (this.peek() === 39) {
                codePoints.push(39);
                this.bump();
              } else {
                this.bump();
                break;
              }
            } else {
              codePoints.push(ch);
            }
            this.bump();
          }
          return fromCodePoint.apply(void 0, codePoints);
        };
        Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
          if (this.isEOF()) {
            return null;
          }
          var ch = this.char();
          if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
            return null;
          } else {
            this.bump();
            return fromCodePoint(ch);
          }
        };
        Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
          var openingBracePosition = this.clonePosition();
          this.bump();
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          if (this.char() === 125) {
            this.bump();
            return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
          var value = this.parseIdentifierIfPossible().value;
          if (!value) {
            return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          switch (this.char()) {
            case 125: {
              this.bump();
              return {
                val: {
                  type: TYPE.argument,
                  // value does not include the opening and closing braces.
                  value,
                  location: createLocation(openingBracePosition, this.clonePosition())
                },
                err: null
              };
            }
            case 44: {
              this.bump();
              this.bumpSpace();
              if (this.isEOF()) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
              }
              return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            }
            default:
              return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
          }
        };
        Parser2.prototype.parseIdentifierIfPossible = function() {
          var startingPosition = this.clonePosition();
          var startOffset = this.offset();
          var value = matchIdentifierAtIndex(this.message, startOffset);
          var endOffset = startOffset + value.length;
          this.bumpTo(endOffset);
          var endPosition = this.clonePosition();
          var location2 = createLocation(startingPosition, endPosition);
          return { value, location: location2 };
        };
        Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
          var _a2;
          var typeStartPosition = this.clonePosition();
          var argType = this.parseIdentifierIfPossible().value;
          var typeEndPosition = this.clonePosition();
          switch (argType) {
            case "":
              return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case "number":
            case "date":
            case "time": {
              this.bumpSpace();
              var styleAndLocation = null;
              if (this.bumpIf(",")) {
                this.bumpSpace();
                var styleStartPosition = this.clonePosition();
                var result = this.parseSimpleArgStyleIfPossible();
                if (result.err) {
                  return result;
                }
                var style = trimEnd(result.val);
                if (style.length === 0) {
                  return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                }
                var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                styleAndLocation = { style, styleLocation };
              }
              var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_1 = createLocation(openingBracePosition, this.clonePosition());
              if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
                var skeleton = trimStart(styleAndLocation.style.slice(2));
                if (argType === "number") {
                  var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                  if (result.err) {
                    return result;
                  }
                  return {
                    val: { type: TYPE.number, value, location: location_1, style: result.val },
                    err: null
                  };
                } else {
                  if (skeleton.length === 0) {
                    return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                  }
                  var dateTimePattern = skeleton;
                  if (this.locale) {
                    dateTimePattern = getBestPattern(skeleton, this.locale);
                  }
                  var style = {
                    type: SKELETON_TYPE.dateTime,
                    pattern: dateTimePattern,
                    location: styleAndLocation.styleLocation,
                    parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
                  };
                  var type = argType === "date" ? TYPE.date : TYPE.time;
                  return {
                    val: { type, value, location: location_1, style },
                    err: null
                  };
                }
              }
              return {
                val: {
                  type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
                  value,
                  location: location_1,
                  style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
                },
                err: null
              };
            }
            case "plural":
            case "selectordinal":
            case "select": {
              var typeEndPosition_1 = this.clonePosition();
              this.bumpSpace();
              if (!this.bumpIf(",")) {
                return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
              }
              this.bumpSpace();
              var identifierAndLocation = this.parseIdentifierIfPossible();
              var pluralOffset = 0;
              if (argType !== "select" && identifierAndLocation.value === "offset") {
                if (!this.bumpIf(":")) {
                  return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                }
                this.bumpSpace();
                var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                if (result.err) {
                  return result;
                }
                this.bumpSpace();
                identifierAndLocation = this.parseIdentifierIfPossible();
                pluralOffset = result.val;
              }
              var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
              if (optionsResult.err) {
                return optionsResult;
              }
              var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_2 = createLocation(openingBracePosition, this.clonePosition());
              if (argType === "select") {
                return {
                  val: {
                    type: TYPE.select,
                    value,
                    options: fromEntries(optionsResult.val),
                    location: location_2
                  },
                  err: null
                };
              } else {
                return {
                  val: {
                    type: TYPE.plural,
                    value,
                    options: fromEntries(optionsResult.val),
                    offset: pluralOffset,
                    pluralType: argType === "plural" ? "cardinal" : "ordinal",
                    location: location_2
                  },
                  err: null
                };
              }
            }
            default:
              return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
          }
        };
        Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
          if (this.isEOF() || this.char() !== 125) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          this.bump();
          return { val: true, err: null };
        };
        Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
          var nestedBraces = 0;
          var startPosition = this.clonePosition();
          while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
              case 39: {
                this.bump();
                var apostrophePosition = this.clonePosition();
                if (!this.bumpUntil("'")) {
                  return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                }
                this.bump();
                break;
              }
              case 123: {
                nestedBraces += 1;
                this.bump();
                break;
              }
              case 125: {
                if (nestedBraces > 0) {
                  nestedBraces -= 1;
                } else {
                  return {
                    val: this.message.slice(startPosition.offset, this.offset()),
                    err: null
                  };
                }
                break;
              }
              default:
                this.bump();
                break;
            }
          }
          return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null
          };
        };
        Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
          var tokens = [];
          try {
            tokens = parseNumberSkeletonFromString(skeleton);
          } catch (e3) {
            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
          }
          return {
            val: {
              type: SKELETON_TYPE.number,
              tokens,
              location: location2,
              parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
            },
            err: null
          };
        };
        Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
          var _a2;
          var hasOtherClause = false;
          var options = [];
          var parsedSelectors = /* @__PURE__ */ new Set();
          var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
          while (true) {
            if (selector.length === 0) {
              var startPosition = this.clonePosition();
              if (parentArgType !== "select" && this.bumpIf("=")) {
                var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                if (result.err) {
                  return result;
                }
                selectorLocation = createLocation(startPosition, this.clonePosition());
                selector = this.message.slice(startPosition.offset, this.offset());
              } else {
                break;
              }
            }
            if (parsedSelectors.has(selector)) {
              return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            }
            if (selector === "other") {
              hasOtherClause = true;
            }
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf("{")) {
              return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) {
              return fragmentResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
              return argCloseResult;
            }
            options.push([
              selector,
              {
                value: fragmentResult.val,
                location: createLocation(openingBracePosition, this.clonePosition())
              }
            ]);
            parsedSelectors.add(selector);
            this.bumpSpace();
            _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
          }
          if (options.length === 0) {
            return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
          }
          if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          return { val: options, err: null };
        };
        Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
          var sign = 1;
          var startingPosition = this.clonePosition();
          if (this.bumpIf("+")) {
          } else if (this.bumpIf("-")) {
            sign = -1;
          }
          var hasDigits = false;
          var decimal = 0;
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 && ch <= 57) {
              hasDigits = true;
              decimal = decimal * 10 + (ch - 48);
              this.bump();
            } else {
              break;
            }
          }
          var location2 = createLocation(startingPosition, this.clonePosition());
          if (!hasDigits) {
            return this.error(expectNumberError, location2);
          }
          decimal *= sign;
          if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location2);
          }
          return { val: decimal, err: null };
        };
        Parser2.prototype.offset = function() {
          return this.position.offset;
        };
        Parser2.prototype.isEOF = function() {
          return this.offset() === this.message.length;
        };
        Parser2.prototype.clonePosition = function() {
          return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column
          };
        };
        Parser2.prototype.char = function() {
          var offset2 = this.position.offset;
          if (offset2 >= this.message.length) {
            throw Error("out of bound");
          }
          var code = codePointAt(this.message, offset2);
          if (code === void 0) {
            throw Error("Offset ".concat(offset2, " is at invalid UTF-16 code unit boundary"));
          }
          return code;
        };
        Parser2.prototype.error = function(kind, location2) {
          return {
            val: null,
            err: {
              kind,
              message: this.message,
              location: location2
            }
          };
        };
        Parser2.prototype.bump = function() {
          if (this.isEOF()) {
            return;
          }
          var code = this.char();
          if (code === 10) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
          } else {
            this.position.column += 1;
            this.position.offset += code < 65536 ? 1 : 2;
          }
        };
        Parser2.prototype.bumpIf = function(prefix2) {
          if (startsWith(this.message, prefix2, this.offset())) {
            for (var i3 = 0; i3 < prefix2.length; i3++) {
              this.bump();
            }
            return true;
          }
          return false;
        };
        Parser2.prototype.bumpUntil = function(pattern) {
          var currentOffset = this.offset();
          var index = this.message.indexOf(pattern, currentOffset);
          if (index >= 0) {
            this.bumpTo(index);
            return true;
          } else {
            this.bumpTo(this.message.length);
            return false;
          }
        };
        Parser2.prototype.bumpTo = function(targetOffset) {
          if (this.offset() > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
          }
          targetOffset = Math.min(targetOffset, this.message.length);
          while (true) {
            var offset2 = this.offset();
            if (offset2 === targetOffset) {
              break;
            }
            if (offset2 > targetOffset) {
              throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
            }
            this.bump();
            if (this.isEOF()) {
              break;
            }
          }
        };
        Parser2.prototype.bumpSpace = function() {
          while (!this.isEOF() && _isWhiteSpace(this.char())) {
            this.bump();
          }
        };
        Parser2.prototype.peek = function() {
          if (this.isEOF()) {
            return null;
          }
          var code = this.char();
          var offset2 = this.offset();
          var nextCode = this.message.charCodeAt(offset2 + (code >= 65536 ? 2 : 1));
          return nextCode !== null && nextCode !== void 0 ? nextCode : null;
        };
        return Parser2;
      }();
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/lib/index.js
  function pruneLocation(els) {
    els.forEach(function(el) {
      delete el.location;
      if (isSelectElement(el) || isPluralElement(el)) {
        for (var k3 in el.options) {
          delete el.options[k3].location;
          pruneLocation(el.options[k3].value);
        }
      } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
        delete el.style.location;
      } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
        delete el.style.location;
      } else if (isTagElement(el)) {
        pruneLocation(el.children);
      }
    });
  }
  function parse(message, opts) {
    if (opts === void 0) {
      opts = {};
    }
    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new Parser(message, opts).parse();
    if (result.err) {
      var error2 = SyntaxError(ErrorKind[result.err.kind]);
      error2.location = result.err.location;
      error2.originalMessage = result.err.message;
      throw error2;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
      pruneLocation(result.val);
    }
    return result.val;
  }
  var init_lib3 = __esm({
    "node_modules/@formatjs/icu-messageformat-parser/lib/index.js"() {
      init_tslib_es6();
      init_error();
      init_parser();
      init_types2();
      init_types2();
    }
  });

  // node_modules/@formatjs/fast-memoize/lib/index.js
  function memoize(fn, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn, {
      cache,
      serializer
    });
  }
  function isPrimitive(value) {
    return value == null || typeof value === "number" || typeof value === "boolean";
  }
  function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn.call(this, arg);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn.apply(this, args);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
  }
  function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
  }
  function strategyVariadic(fn, options) {
    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
  }
  function strategyMonadic(fn, options) {
    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
  }
  function ObjectWithoutPrototypeCache() {
    this.cache = /* @__PURE__ */ Object.create(null);
  }
  var serializerDefault, cacheDefault, strategies;
  var init_lib4 = __esm({
    "node_modules/@formatjs/fast-memoize/lib/index.js"() {
      serializerDefault = function() {
        return JSON.stringify(arguments);
      };
      ObjectWithoutPrototypeCache.prototype.get = function(key) {
        return this.cache[key];
      };
      ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
        this.cache[key] = value;
      };
      cacheDefault = {
        create: function create() {
          return new ObjectWithoutPrototypeCache();
        }
      };
      strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic
      };
    }
  });

  // node_modules/intl-messageformat/lib/src/error.js
  var ErrorCode, FormatError, InvalidValueError, InvalidValueTypeError, MissingValueError;
  var init_error2 = __esm({
    "node_modules/intl-messageformat/lib/src/error.js"() {
      init_tslib_es6();
      (function(ErrorCode2) {
        ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
        ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
        ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
      })(ErrorCode || (ErrorCode = {}));
      FormatError = /** @class */
      function(_super) {
        __extends(FormatError2, _super);
        function FormatError2(msg, code, originalMessage) {
          var _this = _super.call(this, msg) || this;
          _this.code = code;
          _this.originalMessage = originalMessage;
          return _this;
        }
        FormatError2.prototype.toString = function() {
          return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
        };
        return FormatError2;
      }(Error);
      InvalidValueError = /** @class */
      function(_super) {
        __extends(InvalidValueError2, _super);
        function InvalidValueError2(variableId, value, options, originalMessage) {
          return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueError2;
      }(FormatError);
      InvalidValueTypeError = /** @class */
      function(_super) {
        __extends(InvalidValueTypeError2, _super);
        function InvalidValueTypeError2(value, type, originalMessage) {
          return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueTypeError2;
      }(FormatError);
      MissingValueError = /** @class */
      function(_super) {
        __extends(MissingValueError2, _super);
        function MissingValueError2(variableId, originalMessage) {
          return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
        }
        return MissingValueError2;
      }(FormatError);
    }
  });

  // node_modules/intl-messageformat/lib/src/formatters.js
  function mergeLiteral(parts) {
    if (parts.length < 2) {
      return parts;
    }
    return parts.reduce(function(all, part) {
      var lastPart = all[all.length - 1];
      if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
        all.push(part);
      } else {
        lastPart.value += part.value;
      }
      return all;
    }, []);
  }
  function isFormatXMLElementFn(el) {
    return typeof el === "function";
  }
  function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
    if (els.length === 1 && isLiteralElement(els[0])) {
      return [
        {
          type: PART_TYPE.literal,
          value: els[0].value
        }
      ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el = els_1[_i];
      if (isLiteralElement(el)) {
        result.push({
          type: PART_TYPE.literal,
          value: el.value
        });
        continue;
      }
      if (isPoundElement(el)) {
        if (typeof currentPluralValue === "number") {
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getNumberFormat(locales).format(currentPluralValue)
          });
        }
        continue;
      }
      var varName = el.value;
      if (!(values && varName in values)) {
        throw new MissingValueError(varName, originalMessage);
      }
      var value = values[varName];
      if (isArgumentElement(el)) {
        if (!value || typeof value === "string" || typeof value === "number") {
          value = typeof value === "string" || typeof value === "number" ? String(value) : "";
        }
        result.push({
          type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value
        });
        continue;
      }
      if (isDateElement(el)) {
        var style = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style).format(value)
        });
        continue;
      }
      if (isTimeElement(el)) {
        var style = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style).format(value)
        });
        continue;
      }
      if (isNumberElement(el)) {
        var style = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
        if (style && style.scale) {
          value = value * (style.scale || 1);
        }
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales, style).format(value)
        });
        continue;
      }
      if (isTagElement(el)) {
        var children = el.children, value_1 = el.value;
        var formatFn = values[value_1];
        if (!isFormatXMLElementFn(formatFn)) {
          throw new InvalidValueTypeError(value_1, "function", originalMessage);
        }
        var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
        var chunks = formatFn(parts.map(function(p3) {
          return p3.value;
        }));
        if (!Array.isArray(chunks)) {
          chunks = [chunks];
        }
        result.push.apply(result, chunks.map(function(c3) {
          return {
            type: typeof c3 === "string" ? PART_TYPE.literal : PART_TYPE.object,
            value: c3
          };
        }));
      }
      if (isSelectElement(el)) {
        var opt = el.options[value] || el.options.other;
        if (!opt) {
          throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
        continue;
      }
      if (isPluralElement(el)) {
        var opt = el.options["=".concat(value)];
        if (!opt) {
          if (!Intl.PluralRules) {
            throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
          }
          var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
          opt = el.options[rule] || el.options.other;
        }
        if (!opt) {
          throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
        continue;
      }
    }
    return mergeLiteral(result);
  }
  var PART_TYPE;
  var init_formatters = __esm({
    "node_modules/intl-messageformat/lib/src/formatters.js"() {
      init_lib3();
      init_error2();
      (function(PART_TYPE2) {
        PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
        PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
      })(PART_TYPE || (PART_TYPE = {}));
    }
  });

  // node_modules/intl-messageformat/lib/src/core.js
  function mergeConfig(c1, c22) {
    if (!c22) {
      return c1;
    }
    return __assign(__assign(__assign({}, c1 || {}), c22 || {}), Object.keys(c1).reduce(function(all, k3) {
      all[k3] = __assign(__assign({}, c1[k3]), c22[k3] || {});
      return all;
    }, {}));
  }
  function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
      return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function(all, k3) {
      all[k3] = mergeConfig(defaultConfig[k3], configs[k3]);
      return all;
    }, __assign({}, defaultConfig));
  }
  function createFastMemoizeCache(store) {
    return {
      create: function() {
        return {
          get: function(key) {
            return store[key];
          },
          set: function(key, value) {
            store[key] = value;
          }
        };
      }
    };
  }
  function createDefaultFormatters(cache) {
    if (cache === void 0) {
      cache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
    }
    return {
      getNumberFormat: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.NumberFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.number),
        strategy: strategies.variadic
      }),
      getDateTimeFormat: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.DateTimeFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.dateTime),
        strategy: strategies.variadic
      }),
      getPluralRules: memoize(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.PluralRules).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.pluralRules),
        strategy: strategies.variadic
      })
    };
  }
  var IntlMessageFormat;
  var init_core = __esm({
    "node_modules/intl-messageformat/lib/src/core.js"() {
      init_tslib_es6();
      init_lib3();
      init_lib4();
      init_formatters();
      IntlMessageFormat = /** @class */
      function() {
        function IntlMessageFormat2(message, locales, overrideFormats, opts) {
          var _this = this;
          if (locales === void 0) {
            locales = IntlMessageFormat2.defaultLocale;
          }
          this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {}
          };
          this.format = function(values) {
            var parts = _this.formatToParts(values);
            if (parts.length === 1) {
              return parts[0].value;
            }
            var result = parts.reduce(function(all, part) {
              if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
                all.push(part.value);
              } else {
                all[all.length - 1] += part.value;
              }
              return all;
            }, []);
            if (result.length <= 1) {
              return result[0] || "";
            }
            return result;
          };
          this.formatToParts = function(values) {
            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
          };
          this.resolvedOptions = function() {
            return {
              locale: _this.resolvedLocale.toString()
            };
          };
          this.getAst = function() {
            return _this.ast;
          };
          this.locales = locales;
          this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
          if (typeof message === "string") {
            this.message = message;
            if (!IntlMessageFormat2.__parse) {
              throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
            }
            this.ast = IntlMessageFormat2.__parse(message, {
              ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
              locale: this.resolvedLocale
            });
          } else {
            this.ast = message;
          }
          if (!Array.isArray(this.ast)) {
            throw new TypeError("A message must be provided as a String or AST.");
          }
          this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
          this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
          get: function() {
            if (!IntlMessageFormat2.memoizedDefaultLocale) {
              IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat2.memoizedDefaultLocale;
          },
          enumerable: false,
          configurable: true
        });
        IntlMessageFormat2.memoizedDefaultLocale = null;
        IntlMessageFormat2.resolveLocale = function(locales) {
          var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
          if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
          }
          return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
        };
        IntlMessageFormat2.__parse = parse;
        IntlMessageFormat2.formats = {
          number: {
            integer: {
              maximumFractionDigits: 0
            },
            currency: {
              style: "currency"
            },
            percent: {
              style: "percent"
            }
          },
          date: {
            short: {
              month: "numeric",
              day: "numeric",
              year: "2-digit"
            },
            medium: {
              month: "short",
              day: "numeric",
              year: "numeric"
            },
            long: {
              month: "long",
              day: "numeric",
              year: "numeric"
            },
            full: {
              weekday: "long",
              month: "long",
              day: "numeric",
              year: "numeric"
            }
          },
          time: {
            short: {
              hour: "numeric",
              minute: "numeric"
            },
            medium: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric"
            },
            long: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            },
            full: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            }
          }
        };
        return IntlMessageFormat2;
      }();
    }
  });

  // node_modules/intl-messageformat/lib/index.js
  var lib_default;
  var init_lib5 = __esm({
    "node_modules/intl-messageformat/lib/index.js"() {
      init_core();
      init_formatters();
      init_core();
      init_error2();
      lib_default = IntlMessageFormat;
    }
  });

  // node_modules/i18next-icu/dist/es/index.js
  function ownKeys2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck2(instance2, Constructor) {
    if (!(instance2 instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  function getDefaults() {
    return {
      memoize: true,
      memoizeFallback: false,
      bindI18n: "",
      bindI18nStore: "",
      parseErrorHandler: function parseErrorHandler(err, key, res, options) {
        return res;
      }
    };
  }
  var ICU, es_default;
  var init_es = __esm({
    "node_modules/i18next-icu/dist/es/index.js"() {
      init_utils2();
      init_lib5();
      ICU = /* @__PURE__ */ function() {
        function ICU2(options) {
          _classCallCheck2(this, ICU2);
          this.type = "i18nFormat";
          this.mem = {};
          this.init(null, options);
        }
        _createClass2(ICU2, [{
          key: "init",
          value: function init2(i18next, options) {
            var _this = this;
            var i18nextOptions = i18next && i18next.options && i18next.options.i18nFormat || {};
            this.options = defaults(i18nextOptions, options, this.options || {}, getDefaults());
            this.formats = this.options.formats;
            if (i18next) {
              var _this$options = this.options, bindI18n = _this$options.bindI18n, bindI18nStore = _this$options.bindI18nStore, memoize2 = _this$options.memoize;
              i18next.IntlMessageFormat = lib_default;
              i18next.ICU = this;
              if (memoize2) {
                if (bindI18n) {
                  i18next.on(bindI18n, function() {
                    return _this.clearCache();
                  });
                }
                if (bindI18nStore) {
                  i18next.store.on(bindI18nStore, function() {
                    return _this.clearCache();
                  });
                }
              }
            }
          }
        }, {
          key: "addUserDefinedFormats",
          value: function addUserDefinedFormats(formats) {
            this.formats = this.formats ? _objectSpread2(_objectSpread2({}, this.formats), formats) : formats;
          }
        }, {
          key: "parse",
          value: function parse2(res, options, lng, ns2, key, info) {
            var hadSuccessfulLookup = info && info.resolved && info.resolved.res;
            var memKey = this.options.memoize && "".concat(lng, ".").concat(ns2, ".").concat(key.replace(/\./g, "###"));
            var fc;
            if (this.options.memoize) {
              fc = getPath2(this.mem, memKey);
            }
            try {
              if (!fc) {
                fc = new lib_default(res, lng, this.formats, {
                  ignoreTag: true
                });
                if (this.options.memoize && (this.options.memoizeFallback || !info || hadSuccessfulLookup))
                  setPath2(this.mem, memKey, fc);
              }
              return fc.format(options);
            } catch (err) {
              return this.options.parseErrorHandler(err, key, res, options);
            }
          }
        }, {
          key: "addLookupKeys",
          value: function addLookupKeys(finalKeys, _key, _code, _ns, _options) {
            return finalKeys;
          }
        }, {
          key: "clearCache",
          value: function clearCache() {
            this.mem = {};
          }
        }]);
        return ICU2;
      }();
      ICU.type = "i18nFormat";
      es_default = ICU;
    }
  });

  // require-globify-shim:../../../locales/*/*.json
  var __default;
  var init__ = __esm({
    "require-globify-shim:../../../locales/*/*.json"() {
      __default = { bg: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u041A\u0440\u0438\u043F\u0442\u0438\u0440\u0430\u043D\u0435", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "\u041F\u043E\u0434\u043F\u0438\u0441\u0432\u0430\u043D\u0435", note: "When the cryptographic key can be used to sign data" }, verify: { title: "\u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430", note: "When the cryptographic key can be used to verify data" }, derive: { title: "\u0418\u0437\u0432\u043B\u0438\u0447\u0430\u043D\u0435", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0430\u043D\u0435", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "\u0420\u0430\u0437\u0430\u0440\u0445\u0438\u0432\u0438\u0440\u0430\u043D\u0435", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043D", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0441\u0442\u0438 \u0437\u0430 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430 \u0437\u0430 \u0441\u0438\u0433\u0443\u0440\u043D\u043E\u0441\u0442", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "\u041E\u0431\u0449\u043E\u043F\u0440\u0438\u0435\u0442\u043E \u0438\u043C\u0435", note: "The Common Name for an SSL certificate" }, publicKey: { title: "\u041F\u0443\u0431\u043B\u0438\u0447\u0435\u043D \u043A\u043B\u044E\u0447", note: "The Public Key for an SSL certificate" }, algorithm: { title: "\u0410\u043B\u0433\u043E\u0440\u0438\u0442\u044A\u043C", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "\u0420\u0430\u0437\u043C\u0435\u0440 \u043D\u0430 \u043A\u043B\u044E\u0447\u0430", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "\u0423\u043F\u043E\u0442\u0440\u0435\u0431\u0430", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "\u0420\u0435\u0437\u044E\u043C\u0435", note: "Header for summary of connection details" }, permanent: { title: "\u041F\u043E\u0441\u0442\u043E\u044F\u043D\u0435\u043D", note: "Whether certificate is permanent" }, effectiveSize: { title: "\u0415\u0444\u0435\u043A\u0442\u0438\u0432\u0435\u043D \u0440\u0430\u0437\u043C\u0435\u0440", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "\u041D\u0435 \u0435 \u043D\u0430\u043C\u0435\u0440\u0435\u043D \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442 \u0437\u0430 {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "\u0422\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430 \u043D\u0435\u043A\u0440\u0438\u043F\u0442\u0438\u0440\u0430\u043D\u0430 \u0432\u0440\u044A\u0437\u043A\u0430. \u0412\u044A\u0437\u043C\u043E\u0436\u043D\u043E \u0435 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438 \u0434\u0430 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u0432\u0438\u0436\u0434\u0430\u0442 \u0434\u0435\u0439\u043D\u043E\u0441\u0442\u0442\u0430 \u0412\u0438 \u0438\u043B\u0438 \u0434\u0430 \u043F\u0440\u0438\u0445\u0432\u0430\u0449\u0430\u0442 \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u0430 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F, \u043A\u043E\u044F\u0442\u043E \u0438\u0437\u043F\u0440\u0430\u0449\u0430\u0442\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "\u041D\u0430\u0434\u0433\u0440\u0430\u0434\u0438\u0445\u043C\u0435 \u0432\u0440\u044A\u0437\u043A\u0430\u0442\u0430 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0437\u0430 \u0434\u0430 \u0437\u0430\u0449\u0438\u0442\u0438\u043C \u0438\u0437\u043F\u0440\u0430\u0449\u0430\u043D\u0430\u0442\u0430 \u043E\u0442 \u0412\u0430\u0441 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u043F\u043E \u0432\u0440\u0435\u043C\u0435 \u043D\u0430 \u043F\u0440\u0435\u043D\u043E\u0441\u0430.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "\u0422\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430 \u043A\u0440\u0438\u043F\u0442\u0438\u0440\u0430\u043D\u0430 \u0432\u0440\u044A\u0437\u043A\u0430, \u043A\u043E\u044F\u0442\u043E \u043D\u0435 \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0432\u0430 \u043D\u0430 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438 \u0434\u0430 \u0432\u0438\u0436\u0434\u0430\u0442 \u0434\u0435\u0439\u043D\u043E\u0441\u0442\u0442\u0430 \u0412\u0438 \u0438\u043B\u0438 \u0434\u0430 \u043F\u0440\u0438\u0445\u0432\u0430\u0449\u0430\u0442 \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u0430 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F, \u043A\u043E\u044F\u0442\u043E \u0438\u0437\u043F\u0440\u0430\u0449\u0430\u0442\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "\u0417\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u043D\u0430 \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u043E\u0441\u0442\u0442\u0430 \u043D\u0435 \u0441\u0430 \u043D\u0430\u043B\u0438\u0447\u043D\u0438 \u0437\u0430 \u0441\u043F\u0435\u0446\u0438\u0430\u043B\u043D\u0438 \u0438\u043B\u0438 \u043B\u043E\u043A\u0430\u043B\u043D\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0438.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\u0425\u0430\u0440\u0435\u0441\u0432\u0430 \u043B\u0438 \u0412\u0438 \u0434\u0430 \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430\u0442\u0435 DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "\u0421\u043F\u043E\u0434\u0435\u043B\u0435\u0442\u0435 \u0442\u043E\u0432\u0430 \u0441 \u0412\u0430\u0448\u0435\u0442\u043E \u0441\u0435\u043C\u0435\u0439\u0441\u0442\u0432\u043E \u0438 \u043F\u0440\u0438\u044F\u0442\u0435\u043B\u0438", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "\u0420\u0430\u0437\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0435\u043D\u0438\u0435 \u043D\u0430 DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "\u041E\u043C\u0440\u044A\u0437\u043D\u0430 \u043B\u0438 \u0412\u0438 \u0438\u043C\u0435\u0439\u043B\u0438\u0442\u0435 \u0434\u0430 \u0431\u044A\u0434\u0430\u0442 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0438?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0430\u0439\u0442\u0435 \u0441\u0435 \u0437\u0430 \u0437\u0430\u0449\u0438\u0442\u0430 \u043D\u0430 \u0438\u043C\u0435\u0439\u043B\u0438 \u043D\u0430 DuckDuckGo \u0437\u0430 \u0412\u0430\u0448\u0435\u0442\u043E \u0440\u0430\u0437\u0448\u0438\u0440\u0435\u043D\u0438\u0435 \u0441\u0435\u0433\u0430!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435 \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 \u0434\u0430\u043D\u043D\u0438\u0442\u0435", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 \u0434\u0430\u043D\u043D\u0438", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "\u0421\u0430\u043C\u043E \u0437\u0430 \u0442\u0435\u043A\u0443\u0449\u0438\u044F \u0441\u0430\u0439\u0442", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u044F \u0447\u0430\u0441", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 24 \u0447\u0430\u0441\u0430", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 7 \u0434\u043D\u0438", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 4 \u0441\u0435\u0434\u043C\u0438\u0446\u0438", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "\u041F\u0440\u0435\u0437 \u0446\u044F\u043B\u043E\u0442\u043E \u0432\u0440\u0435\u043C\u0435", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {\u0435\u0434\u0438\u043D \u0447\u0430\u0441} day {24 \u0447\u0430\u0441\u0430} week {\u0435\u0434\u043D\u0430 \u0441\u0435\u0434\u043C\u0438\u0446\u0430} month {4 \u0441\u0435\u0434\u043C\u0438\u0446\u0438} other {\u0412\u0441\u0438\u0447\u043A\u0438}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> \u0440\u0430\u0437\u0434\u0435\u043B \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0442\u0430 \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?} other {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> \u0440\u0430\u0437\u0434\u0435\u043B\u0430 \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0442\u0430 \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> \u0440\u0430\u0437\u0434\u0435\u043B \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?} other {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> \u0440\u0430\u0437\u0434\u0435\u043B\u0430 \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0442\u0430 \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>{durationDesc}</b> \u043E\u0442 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> {openTabs, plural, =1 {\u0440\u0430\u0437\u0434\u0435\u043B} other {\u0440\u0430\u0437\u0434\u0435\u043B\u0430}} \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0446\u044F\u043B\u0430\u0442\u0430</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044F \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 ({cookies} {cookies, plural, =1 {\u0441\u0430\u0439\u0442} other {\u0441\u0430\u0439\u0442\u0430}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs}</b> {openTabs, plural, =1 {\u0440\u0430\u0437\u0434\u0435\u043B} other {\u0440\u0430\u0437\u0434\u0435\u043B\u0430}} \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438</b> \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 ({cookies} {cookies, plural, =1 {\u0441\u0430\u0439\u0442\u0430} other {\u0441\u0430\u0439\u0442\u0430}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0446\u044F\u043B\u0430\u0442\u0430</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044F \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435 ({cookies} \u0441\u0430\u0439\u0442)?} other {\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0446\u044F\u043B\u0430\u0442\u0430</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044F \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435 ({cookies} \u0441\u0430\u0439\u0442\u0430)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438</b> \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 ({cookies} \u0441\u0430\u0439\u0442)?} other {\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438</b> \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 ({cookies} \u0441\u0430\u0439\u0442\u0430)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs} \u0440\u0430\u0437\u0434\u0435\u043B {site}</b> \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?} other {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs} \u0440\u0430\u0437\u0434\u0435\u043B\u0430 {site}</b> \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs} \u0440\u0430\u0437\u0434\u0435\u043B {site}</b> \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?} other {\u0417\u0430\u0442\u0432\u0430\u0440\u044F\u043D\u0435 \u043D\u0430 <b>{openTabs} \u0440\u0430\u0437\u0434\u0435\u043B\u0430 {site}</b> \u0438 \u0438\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0446\u044F\u043B\u0430\u0442\u0430 \u0438\u0441\u0442\u043E\u0440\u0438\u044F \u043D\u0430 \u0441\u044A\u0440\u0444\u0438\u0440\u0430\u043D\u0435 \u0438 \u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043D\u0435 \u043D\u0430 <b>\u0432\u0441\u0438\u0447\u043A\u0438 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0437\u0430 {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} \u0437\u0430\u043A\u0430\u0447\u0435\u043D</b> \u0440\u0430\u0437\u0434\u0435\u043B \u0449\u0435 \u0431\u044A\u0434\u0435 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0430\u043D.} other {<b>{tabs} \u0437\u0430\u043A\u0430\u0447\u0435\u043D\u0438</b> \u0440\u0430\u0437\u0434\u0435\u043B\u0430 \u0449\u0435 \u0431\u044A\u0434\u0430\u0442 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0430\u043D\u0438.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "\u042F\u0441\u043D\u043E", note: "Button text to start data clearing." }, cancel: { title: "\u041E\u0442\u043C\u0435\u043D\u0438", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "\u0417\u0430 \u0434\u0430 \u0438\u0437\u0447\u0438\u0441\u0442\u0438\u0442\u0435 \u0438 \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0442\u0430, \u0438\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u043F\u0435\u0440\u0438\u043E\u0434 \u043E\u0442 \u0432\u0440\u0435\u043C\u0435.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "\u041A\u0430\u043C\u0435\u0440\u0430", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "\u041C\u0438\u043A\u0440\u043E\u0444\u043E\u043D", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "\u041C\u0435\u0441\u0442\u043E\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "\u0418\u0437\u0441\u043A\u0430\u0447\u0430\u0449\u0438 \u043F\u0440\u043E\u0437\u043E\u0440\u0446\u0438", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "\u041F\u0438\u0442\u0430\u0439 \u0432\u0441\u0435\u043A\u0438 \u043F\u044A\u0442", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "\u0423\u0432\u0435\u0434\u043E\u043C\u0438 \u043C\u0435", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "\u0412\u0438\u043D\u0430\u0433\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u043E", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "\u0412\u0438\u043D\u0430\u0433\u0438 \u043E\u0442\u043A\u0430\u0437\u0430\u043D\u043E", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "\u0418\u0437\u043F\u0440\u0430\u0449\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0430\u043D\u043E\u043D\u0438\u043C\u0435\u043D \u0434\u043E\u043A\u043B\u0430\u0434 \u0437\u0430 \u043D\u0435\u0440\u0430\u0431\u043E\u0442\u0435\u0449 \u0441\u0430\u0439\u0442 \u043D\u0438 \u043F\u043E\u043C\u0430\u0433\u0430 \u0434\u0430 \u043F\u043E\u0434\u043E\u0431\u0440\u0438\u043C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0442\u043E.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "\u041E\u043F\u0438\u0448\u0435\u0442\u0435 \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u0430", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "\u0421\u0430\u0439\u0442\u044A\u0442 \u0431\u043B\u043E\u043A\u0438\u0440\u0430 \u0438\u043B\u0438 \u043D\u0435 \u0441\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430", note: "User is reporting this page because the page didn't load" }, layout: { title: "\u041E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u0435\u0442\u043E \u043D\u0430 \u0441\u0430\u0439\u0442\u0430 \u043D\u0435 \u0435 \u043A\u0430\u043A\u0442\u043E \u0442\u0440\u044F\u0431\u0432\u0430", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "\u0421\u0430\u0439\u0442\u044A\u0442 \u0441\u044A\u0434\u044A\u0440\u0436\u0430 \u0433\u043E\u043B\u0435\u043C\u0438 \u043F\u0440\u0430\u0437\u043D\u0438 \u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0430", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "\u0412\u0438\u0434\u0435\u043E\u0442\u043E \u043D\u0435 \u0441\u0435 \u0432\u044A\u0437\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0436\u0434\u0430 \u0438\u043B\u0438 \u0437\u0430\u0440\u0435\u0436\u0434\u0430", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0442\u0430 \u043D\u0435 \u0441\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442", note: "User is reporting this page because one or more images did not load" }, comments: { title: "\u041A\u043E\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0442\u0435, \u043E\u0442\u0437\u0438\u0432\u0438\u0442\u0435 \u0438\u043B\u0438 \u0447\u0430\u0442\u043E\u0432\u0435\u0442\u0435 \u043D\u0435 \u0441\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442", note: "User is reporting this page because one or more comments did not load" }, content: { title: "\u041B\u0438\u043F\u0441\u0432\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430\u043D\u0438\u0435", note: "User is reporting this page because some other type of content did not load" }, links: { title: "\u0412\u0440\u044A\u0437\u043A\u0438\u0442\u0435 \u0438\u043B\u0438 \u0431\u0443\u0442\u043E\u043D\u0438\u0442\u0435 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u044F\u0442", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "\u041D\u0435 \u043C\u043E\u0433\u0430 \u0434\u0430 \u0432\u043B\u044F\u0437\u0430/\u0434\u0430 \u0441\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0430\u043C", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "\u041D\u0435 \u043C\u043E\u0433\u0430 \u0434\u0430 \u043F\u043B\u0430\u0442\u044F, \u0434\u0430 \u0437\u0430\u0432\u044A\u0440\u0448\u0430 \u043F\u043E\u043A\u0443\u043F\u043A\u0430\u0442\u0430 \u0438\u043B\u0438 \u0434\u0430 \u043F\u0430\u0437\u0430\u0440\u0443\u0432\u0430\u043C", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "\u041F\u0440\u043E\u0431\u043B\u0435\u043C \u0441 \u0431\u0440\u0430\u0443\u0437\u044A\u0440\u0430 \u0438\u043B\u0438 \u0434\u0440\u0443\u0433\u043E \u0440\u0430\u0437\u0448\u0438\u0440\u0435\u043D\u0438\u0435 \u043D\u0430 \u0431\u0440\u0430\u0443\u0437\u044A\u0440\u0430", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "\u0421\u0430\u0439\u0442\u044A\u0442 \u0438\u0441\u043A\u0430 \u0434\u0430 \u0434\u0435\u0430\u043A\u0442\u0438\u0432\u0438\u0440\u0430\u043C \u0438\u043D\u0441\u0442\u0440\u0443\u043C\u0435\u043D\u0442\u0430 \u0437\u0430 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u0435 \u043D\u0430 \u0440\u0435\u043A\u043B\u0430\u043C\u0438", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "\u041D\u0435\u0449\u043E \u0434\u0440\u0443\u0433\u043E", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "\u0421\u043F\u043E\u0434\u0435\u043B\u0435\u0442\u0435 \u043F\u043E\u0432\u0435\u0447\u0435 \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0441\u0442\u0438 (\u043F\u043E \u0438\u0437\u0431\u043E\u0440):{bullet}\u041A\u0430\u043A\u0432\u043E \u0441\u0435 \u0441\u043B\u0443\u0447\u0438?{bullet}\u041A\u0430\u043A\u0432\u043E \u0442\u0440\u044F\u0431\u0432\u0430\u0448\u0435 \u0434\u0430 \u0441\u0435 \u0441\u043B\u0443\u0447\u0438?{bullet}\u0418\u0437\u043A\u043B\u044E\u0447\u0432\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u043F\u043E\u043C\u043E\u0433\u043D\u0430 \u043B\u0438?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "\u0418\u0437\u043F\u0440\u0430\u0449\u0430\u043D\u0435 \u043D\u0430 \u0434\u043E\u043A\u043B\u0430\u0434", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "\u0414\u043E\u043A\u043B\u0430\u0434\u0438\u0442\u0435, \u0438\u0437\u043F\u0440\u0430\u0449\u0430\u043D\u0438 \u0434\u043E DuckDuckGo, \u0432\u043A\u043B\u044E\u0447\u0432\u0430\u0442 \u0441\u0430\u043C\u043E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u0442\u0430, \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u0430 \u0437\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430 \u0441 \u0412\u0430\u0448\u0438\u0442\u0435 \u043E\u0442\u0437\u0438\u0432\u0438.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "\u0411\u043B\u0430\u0433\u043E\u0434\u0430\u0440\u0438\u043C \u0412\u0438!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "\u0412\u0430\u0448\u0438\u044F\u0442 \u0434\u043E\u043A\u043B\u0430\u0434 \u0449\u0435 \u043F\u043E\u043C\u043E\u0433\u043D\u0435 \u0437\u0430 \u043F\u043E\u0434\u043E\u0431\u0440\u044F\u0432\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u043D\u0430\u0448\u0438\u0442\u0435 \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u0438 \u0438 \u0438\u0437\u0436\u0438\u0432\u044F\u0432\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u043E\u0441\u0442\u0430\u043D\u0430\u043B\u0438\u0442\u0435 \u043F\u043E\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043B\u0438.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "\u0422\u0440\u0430\u043A\u0435\u0440\u0438", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "\u0410\u043A\u0442\u0443\u0430\u043B\u0438\u0437\u0438\u0440\u0430\u043D\u0435 \u043D\u0430 \u0441\u043F\u0438\u0441\u044A\u043A\u0430 \u0437\u0430 \u0437\u0430\u0449\u0438\u0442\u0430", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "\u0417\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u0437\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0441\u0430 <b>\u0412\u041A\u041B\u042E\u0427\u0415\u041D\u0418</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "\u0417\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u0437\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0441\u0430 <b>\u0418\u0417\u041A\u041B\u042E\u0427\u0415\u041D\u0418</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "\u0418\u0437\u043A\u043B\u044E\u0447\u0438\u0445\u043C\u0435 \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u043D\u0430 \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u043E\u0441\u0442\u0442\u0430, \u0437\u0430\u0449\u043E\u0442\u043E \u0438\u0437\u0433\u043B\u0435\u0436\u0434\u0430, \u0447\u0435 \u043F\u0440\u0435\u0447\u0430\u0442 \u043D\u0430 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "\u041F\u0440\u0435\u043F\u043E\u0440\u044A\u0447\u0432\u0430\u043C\u0435 \u0434\u0430 \u0434\u0435\u0430\u043A\u0442\u0438\u0432\u0438\u0440\u0430\u0442\u0435 \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u043D\u0430 \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u043E\u0441\u0442\u0442\u0430 \u0437\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442, \u0437\u0430 \u0434\u0430 \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u0435 \u0441\u0440\u0438\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0430.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>\u0422\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u043D\u0435 \u0435 \u0437\u0430\u0449\u0438\u0442\u0435\u043D</b> \u0438 \u043C\u043E\u0436\u0435 \u0434\u0430 \u043A\u043E\u043C\u043F\u0440\u043E\u043C\u0435\u0442\u0438\u0440\u0430 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u0442\u0430, \u043A\u043E\u044F\u0442\u043E \u0438\u0437\u043F\u0440\u0430\u0449\u0430\u0442\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u043E \u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438 \u043D\u0430 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438, \u0442\u044A\u0439 \u043A\u0430\u0442\u043E \u0441\u0430 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0430\u043D\u0438 \u043A\u0430\u0442\u043E \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435. \u0410\u043A\u043E \u0431\u044A\u0434\u0430\u0442 \u0437\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u0430\u0434\u0435\u043D\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u0442\u0435 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u045D \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0442 \u0434\u0430 \u0412\u0438 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "\u041D\u044F\u043C\u0430 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u043E \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435 \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430. \u0410\u043A\u043E \u0431\u044A\u0434\u0430\u0442 \u0437\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u0430\u0434\u0435\u043D\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u0442\u0435 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u045D \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0442 \u0434\u0430 \u0412\u0438 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "\u041D\u0435 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "\u041D\u0435 \u043E\u0442\u043A\u0440\u0438\u0445\u043C\u0435 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438, \u043A\u043E\u0438\u0442\u043E \u0434\u0430 \u0441\u0435 \u043E\u043F\u0438\u0442\u0432\u0430\u0442 \u0434\u0430 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "\u0417\u0430 \u0434\u0430 \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u043C \u0441\u0440\u0438\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0430, \u043D\u0435 \u0441\u043C\u0435 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043B\u0438 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 \u0434\u0440\u0443\u0433\u0438 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "\u041D\u044F\u043C\u0430 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u043E \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435 \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435, \u0442\u044A\u0439 \u043A\u0430\u0442\u043E \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u0437\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0441\u0430 \u0438\u0437\u043A\u043B\u044E\u0447\u0435\u043D\u0438. \u0410\u043A\u043E \u0431\u044A\u0434\u0430\u0442 \u0437\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u0430\u0434\u0435\u043D\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u0442\u0435 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u045D \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0442 \u0434\u0430 \u0412\u0438 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "\u0413\u0435\u043D\u0435\u0440\u0438\u0440\u0430\u043D\u0435 \u043D\u0430 \u043B\u0438\u0447\u0435\u043D Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "\u041A\u043E\u043F\u0438\u0440\u0430\u043D \u0432 \u043A\u043B\u0438\u043F\u0431\u043E\u0440\u0434\u0430!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "\u0423\u0435\u0431\u0441\u0430\u0439\u0442\u044A\u0442 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0438 \u0441\u043F\u043E\u0440\u0435\u0434 \u043E\u0447\u0430\u043A\u0432\u0430\u043D\u0438\u044F\u0442\u0430?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "\u0423\u0435\u0431\u0441\u0430\u0439\u0442\u044A\u0442 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0438?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "\u041F\u043E\u0434\u0430\u0432\u0430\u043D\u0435 \u043D\u0430 \u0441\u0438\u0433\u043D\u0430\u043B \u0437\u0430 \u043F\u043E\u0432\u0440\u0435\u0434\u0435\u043D \u0441\u0430\u0439\u0442", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "\u0418\u0437\u043A\u043B\u044E\u0447\u0432\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u043C\u043E\u0436\u0435 \u0434\u0430 \u043F\u043E\u043C\u043E\u0433\u043D\u0435.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "\u0421\u0430\u0439\u0442\u044A\u0442 \u043F\u0440\u043E\u0434\u044A\u043B\u0436\u0430\u0432\u0430 \u0434\u0430 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0438?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "\u0412\u0437\u0435\u043C\u0435\u0442\u0435 \u043F\u0440\u0435\u0434\u043F\u0430\u0437\u043D\u0438 \u043C\u0435\u0440\u043A\u0438", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>\u0422\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0435 \u0441\u043E\u0431\u0441\u0442\u0432\u0435\u043D\u043E\u0441\u0442 \u043D\u0430 {companyDisplayName}</b> \u2013 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u043A\u043E\u044F\u0442\u043E \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0432\u0430 \u043C\u0440\u0435\u0436\u0430 \u043E\u0442 \u0442\u0440\u0430\u043A\u0435\u0440\u0438 \u0432 {companyPrevalence}% \u043E\u0442 \u0432\u043E\u0434\u0435\u0449\u0438\u0442\u0435 \u0443\u0435\u0431\u0441\u0430\u0439\u0442\u043E\u0432\u0435. \u0423\u0441\u043F\u044F\u0445\u043C\u0435 \u0434\u0430 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043C\u0435 \u043D\u044F\u043A\u043E\u0438 \u043E\u0442 \u0442\u0435\u0445\u043D\u0438\u0442\u0435 \u0437\u0430\u044F\u0432\u043A\u0438 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.} other {<b>\u0422\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0435 \u0441\u043E\u0431\u0441\u0442\u0432\u0435\u043D\u043E\u0441\u0442 \u043D\u0430 {companyDisplayName}</b> \u2013 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u043A\u043E\u044F\u0442\u043E \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0432\u0430 \u043C\u0440\u0435\u0436\u0430 \u043E\u0442 \u0442\u0440\u0430\u043A\u0435\u0440\u0438 \u0432 {companyPrevalence}% \u043E\u0442 \u0432\u043E\u0434\u0435\u0449\u0438\u0442\u0435 \u0443\u0435\u0431\u0441\u0430\u0439\u0442\u043E\u0432\u0435. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0437\u0430 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 \u043D\u044F\u043A\u043E\u043B\u043A\u043E \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438.} =2 {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b> \u0438 <b>{secondCompany}</b>.} =3 {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b> \u0438 <b>{thirdCompany}</b>.} =4 {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> \u0438 <b>{fourthCompany}</b> .} =5 {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0438 <b>\u043E\u0449\u0435 1 \u0434\u0440\u0443\u0433\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F</b>.} one {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b>.} other {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u0442\u043E \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0438 \u043E\u0449\u0435 <b>{othersCount} \u0434\u0440\u0443\u0433\u0438 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438</b>.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "\u0411\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435 \u0441\u0430 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043D\u0438", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "\u0418\u0437\u0441\u043A\u0430\u0447\u0430\u0449\u0438\u044F\u0442 \u043F\u0440\u043E\u0437\u043E\u0440\u0435\u0446 \u0437\u0430 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438 \u0435 \u0441\u043A\u0440\u0438\u0442", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "\u0423\u0441\u043F\u044F\u0445\u043C\u0435 \u0441\u0430\u043C\u043E \u0434\u0430 \u0441\u043A\u0440\u0438\u0435\u043C \u0438\u0437\u0441\u043A\u0430\u0447\u0430\u0449\u0438\u044F \u043F\u0440\u043E\u0437\u043E\u0440\u0435\u0446 \u0437\u0430 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435 \u043D\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442, \u0442\u044A\u0439 \u043A\u0430\u0442\u043E \u043D\u0435 \u0431\u044F\u0445\u0430 \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u0435\u043D\u0438 \u043E\u043F\u0446\u0438\u0438 \u0437\u0430 \u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0430 \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0438\u0442\u0430\u043D\u0438\u044F\u0442\u0430 \u0437\u0430 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435. \u041E\u0441\u0442\u0430\u043D\u0430\u043B\u0438\u0442\u0435 \u043D\u0438 \u0437\u0430\u0449\u0438\u0442\u0438 \u0441\u0440\u0435\u0449\u0443 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u0432 \u043C\u0440\u0435\u0436\u0430\u0442\u0430 \u0432\u0441\u0435 \u043E\u0449\u0435 \u0441\u0430 \u0432 \u0441\u0438\u043B\u0430.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0445\u043C\u0435 \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0438\u0442\u0430\u043D\u0438\u044F\u0442\u0430 \u0412\u0438 \u0437\u0430 \u0431\u0438\u0441\u043A\u0432\u0438\u0442\u043A\u0438\u0442\u0435, \u0437\u0430 \u0434\u0430 \u0443\u0432\u0435\u043B\u0438\u0447\u0438\u043C \u043F\u043E\u0432\u0435\u0440\u0438\u0442\u0435\u043B\u043D\u043E\u0441\u0442\u0442\u0430, \u0438 \u0437\u0430\u0442\u0432\u043E\u0440\u0438\u0445\u043C\u0435 \u0438\u0437\u0441\u043A\u0430\u0447\u0430\u0449\u0438\u044F \u043F\u0440\u043E\u0437\u043E\u0440\u0435\u0446.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "\u0414\u0435\u0430\u043A\u0442\u0438\u0432\u0438\u0440\u0430\u043D\u0435 \u0432 \u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "\u0412\u0440\u044A\u0437\u043A\u0430\u0442\u0430 \u0435 \u043A\u0440\u0438\u043F\u0442\u0438\u0440\u0430\u043D\u0430", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "\u0412\u0440\u044A\u0437\u043A\u0430\u0442\u0430 \u043D\u0435 \u0435 \u043A\u0440\u0438\u043F\u0442\u0438\u0440\u0430\u043D\u0430", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u043E \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435 \u043D\u0430 \u0437\u0430\u044F\u0432\u043A\u0438", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "\u041D\u044F\u043C\u0430 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "\u041D\u044F\u043C\u0430 \u043E\u0442\u043A\u0440\u0438\u0442\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438", note: "todo" }, thirdPartiesNoneFound: { title: "\u041D\u0435 \u0441\u0430 \u043D\u0430\u043C\u0435\u0440\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} \u0435 \u0441\u043E\u0431\u0441\u0442\u0432\u0435\u043D\u0438\u043A \u043D\u0430 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 \u0438 \u043D\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0435\u043D\u0438\u0442\u0435 \u0442\u0440\u0430\u043A\u0435\u0440\u0438, \u043A\u043E\u0438\u0442\u043E \u0441\u0435 \u043D\u0430\u043C\u0438\u0440\u0430\u0442 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0437\u0430\u0442\u043E\u0432\u0430 \u043D\u0435 \u0433\u0438 \u0431\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "\u041D\u0435 \u043E\u0442\u043A\u0440\u0438\u0445\u043C\u0435 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438, \u043A\u043E\u0438\u0442\u043E \u0434\u0430 \u0441\u0435 \u043E\u043F\u0438\u0442\u0432\u0430\u0442 \u0434\u0430 \u0437\u0430\u0440\u0435\u0436\u0434\u0430\u0442 \u0437\u0430\u044F\u0432\u043A\u0438 \u0441 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "\u0422\u0440\u0430\u043A\u0435\u0440\u0438\u0442\u0435 \u0441\u0435 \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430\u0442 \u043E\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438\u0442\u0435 \u0437\u0430 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430\u043D\u0435. \u041E\u0442\u043A\u0440\u0438\u0445\u043C\u0435, \u0447\u0435 \u0442\u0435\u0437\u0438 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 \u0441\u043B\u0435\u0434\u044F\u0442 \u0412\u0430\u0448\u0430\u0442\u0430 \u0434\u0435\u0439\u043D\u043E\u0441\u0442 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "\u0422\u0440\u0430\u043A\u0435\u0440\u0438\u0442\u0435 \u0441\u0435 \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430\u0442 \u043E\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438\u0442\u0435 \u0437\u0430 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430\u043D\u0435. \u0411\u043B\u043E\u043A\u0438\u0440\u0430\u0445\u043C\u0435 \u0442\u0435\u0437\u0438 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438, \u043A\u043E\u0438\u0442\u043E \u0441\u043B\u0435\u0434\u044F\u0442 \u0412\u0430\u0448\u0430\u0442\u0430 \u0434\u0435\u0439\u043D\u043E\u0441\u0442 \u043D\u0430 \u0442\u0430\u0437\u0438 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "\u041F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u0449\u0430\u0442\u0430 \u043C\u0440\u0435\u0436\u0430 \u0435 \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u0430", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "\u0414\u043E\u043C\u0435\u0439\u043D\u0438 \u043D\u0430 \u0442\u0440\u0430\u043A\u0435\u0440\u0438 \u0437\u0430 {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 \u043E\u0442\u043A\u0440\u0438\u0442\u0438 \u0442\u0440\u0430\u043A\u0435\u0440\u0438", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "\u0422\u0440\u0430\u043A\u0435\u0440\u0438, \u043F\u0440\u0438\u0442\u0435\u0436\u0430\u0432\u0430\u043D\u0438 \u043E\u0442 \u0442\u043E\u0437\u0438 \u0441\u0430\u0439\u0442 (\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u043D \u0435 {trackerCount} \u0442\u0440\u0430\u043A\u0435\u0440 \u043D\u0430 {domain}} other {\u0411\u043B\u043E\u043A\u0438\u0440\u0430\u043D\u0438 \u0441\u0430 {trackerCount} \u0442\u0440\u0430\u043A\u0435\u0440\u0430 \u043D\u0430 {domain}}}} other {{trackerCount, plural, one {\u041E\u0442\u043A\u0440\u0438\u0442 \u0435 {trackerCount} \u0442\u0440\u0430\u043A\u0435\u0440 \u043D\u0430 {domain}} other {\u041E\u0442\u043A\u0440\u0438\u0442\u0438 \u0441\u0430 {trackerCount} \u0442\u0440\u0430\u043A\u0435\u0440\u0430 \u043D\u0430 {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "\u041C\u043E\u043B\u044F, \u0438\u043C\u0430\u0439\u0442\u0435 \u043F\u0440\u0435\u0434\u0432\u0438\u0434, \u0447\u0435 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u0442\u0430 \u043D\u0430 \u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u0430\u0442\u0430 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u043D\u0430\u043C\u0430\u043B\u044F\u0442 \u0441\u043F\u043E\u0441\u043E\u0431\u043D\u043E\u0441\u0442\u0442\u0430 \u043D\u0438 \u0434\u0430 \u043E\u0442\u043A\u0440\u0438\u0432\u0430\u043C\u0435 \u0432\u0441\u0438\u0447\u043A\u0438 \u0437\u0430\u044F\u0432\u043A\u0438.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "\u041E\u0442\u043D\u043E\u0441\u043D\u043E \u043D\u0430\u0448\u0438\u0442\u0435 \u0437\u0430\u0449\u0438\u0442\u0438 \u0441\u0440\u0435\u0449\u0443 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u0432 \u043C\u0440\u0435\u0436\u0430\u0442\u0430", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "\u041A\u0430\u043A\u0432\u043E \u0432\u043B\u0438\u044F\u043D\u0438\u0435 \u043E\u043A\u0430\u0437\u0432\u0430\u0442 \u043D\u0430\u0448\u0438\u0442\u0435 \u0440\u0435\u043A\u043B\u0430\u043C\u0438 \u043F\u0440\u0438 \u0442\u044A\u0440\u0441\u0435\u043D\u0435 \u0432\u044A\u0440\u0445\u0443 \u043D\u0430\u0448\u0438\u0442\u0435 \u0437\u0430\u0449\u0438\u0442\u0438", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u044F \u0434\u043E\u043C\u0435\u0439\u043D, \u0437\u0430\u0449\u043E\u0442\u043E \u043D\u0430\u0441\u043A\u043E\u0440\u043E \u0441\u0442\u0435 \u0449\u0440\u0430\u043A\u043D\u0430\u043B\u0438 \u0432\u044A\u0440\u0445\u0443 \u0440\u0435\u043A\u043B\u0430\u043C\u0430 \u043D\u0430 {domain} \u0432 DuckDuckGo. \u0422\u0435\u0437\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043F\u043E\u043C\u0430\u0433\u0430\u0442 \u0437\u0430 \u043E\u0446\u0435\u043D\u043A\u0430 \u043D\u0430 \u0435\u0444\u0435\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u0442\u0430 \u043D\u0430 \u0440\u0435\u043A\u043B\u0430\u043C\u0430\u0442\u0430. \u0420\u0435\u043A\u043B\u0430\u043C\u0438\u0442\u0435 \u0432 DuckDuckGo \u043D\u0435 \u0441\u0430 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430\u0449\u0438.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438, \u0437\u0430 \u0434\u0430 \u0441\u0435 \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438 \u0441\u0440\u0438\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0430.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438, \u0437\u0430\u0449\u043E\u0442\u043E \u0441\u0430 \u0441\u0432\u044A\u0440\u0437\u0430\u043D\u0438 \u0441 [{domain}].", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0441\u044A\u0449\u043E \u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438." }, sectionHeadingProtectionsDisabled: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438, \u0437\u0430\u0449\u043E\u0442\u043E \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435 \u0441\u0430 \u0438\u0437\u043A\u043B\u044E\u0447\u0435\u043D\u0438.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438 \u043D\u0430 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438. \u0410\u043A\u043E \u0431\u044A\u0434\u0430\u0442 \u0437\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u0430\u0434\u0435\u043D\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u0442\u0435 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u045D \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0442 \u0434\u0430 \u0412\u0438 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430, \u0432\u044A\u043F\u0440\u0435\u043A\u0438 \u0447\u0435 \u043E\u0441\u0442\u0430\u043D\u0430\u043B\u0438\u0442\u0435 \u043D\u0438 \u0437\u0430\u0449\u0438\u0442\u0438 \u0441\u0440\u0435\u0449\u0443 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u0432 \u043C\u0440\u0435\u0436\u0430\u0442\u0430 \u0432\u0441\u0435 \u043E\u0449\u0435 \u0441\u0435 \u043F\u0440\u0438\u043B\u0430\u0433\u0430\u0442.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "\u0417\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0441\u0430 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0441\u043B\u0435\u0434\u043D\u0438\u0442\u0435 \u0434\u043E\u043C\u0435\u0439\u043D\u0438 \u043D\u0430 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438. \u0410\u043A\u043E \u0431\u044A\u0434\u0430\u0442 \u0437\u0430\u0440\u0435\u0434\u0435\u043D\u0438 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u0430\u0434\u0435\u043D\u0430 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F, \u0442\u0435 \u043C\u043E\u0433\u0430\u0442 \u0434\u0430 \u045D \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0442 \u0434\u0430 \u0412\u0438 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0430, \u0432\u044A\u043F\u0440\u0435\u043A\u0438 \u0447\u0435 \u043E\u0441\u0442\u0430\u043D\u0430\u043B\u0438\u0442\u0435 \u043D\u0438 \u0437\u0430\u0449\u0438\u0442\u0438 \u0441\u0440\u0435\u0449\u0443 \u043F\u0440\u043E\u0441\u043B\u0435\u0434\u044F\u0432\u0430\u043D\u0435 \u0432 \u043C\u0440\u0435\u0436\u0430\u0442\u0430 \u0432\u0441\u0435 \u043E\u0449\u0435 \u0441\u0435 \u043F\u0440\u0438\u043B\u0430\u0433\u0430\u0442.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "\u041D\u0435 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0430\u0445\u043C\u0435 \u0437\u0430\u044F\u0432\u043A\u0438 \u043E\u0442 \u0434\u043E\u043C\u0435\u0439\u043D\u0438 \u043D\u0430 \u0442\u0440\u0435\u0442\u0438 \u0441\u0442\u0440\u0430\u043D\u0438.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "\u0410\u043D\u0430\u043B\u0438\u0437", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "\u0420\u0435\u043A\u043B\u0430\u043C\u0430", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "\u0421\u043E\u0446\u0438\u0430\u043B\u043D\u0430 \u043C\u0440\u0435\u0436\u0430", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "\u0414\u043E\u0441\u0442\u0430\u0432\u043A\u0430 \u043D\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430\u043D\u0438\u0435", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "\u0412\u0433\u0440\u0430\u0434\u0435\u043D\u043E \u0441\u044A\u0434\u044A\u0440\u0436\u0430\u043D\u0438\u0435", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "\u0422\u044A\u0440\u0441\u0438 \u0441 DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "\u0422\u044A\u0440\u0441\u0435\u043D\u0435", note: "Aria label for the search button" }, optionsButton: { title: "\u041E\u0449\u0435 \u043E\u043F\u0446\u0438\u0438", note: "Aria label for the for the options button" }, navigationComplete: { title: "\u0413\u043E\u0442\u043E\u0432\u043E", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "\u041E\u0431\u0440\u0430\u0442\u043D\u043E", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "\u0410\u043A\u0442\u0438\u0432\u0438\u0440\u0430\u043D\u0435 \u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0438", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "\u0414\u0435\u0430\u043A\u0442\u0438\u0432\u0438\u0440\u0430\u043D\u0435 \u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0438", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "\u0412\u044A\u0437\u043D\u0438\u043A\u043D\u0430 \u043F\u0440\u043E\u0431\u043B\u0435\u043C \u0438 \u043D\u0435 \u0443\u0441\u043F\u044F\u0445\u043C\u0435 \u0434\u0430 \u0437\u0430\u0440\u0435\u0434\u0438\u043C \u0442\u043E\u0432\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430\u043D\u0438\u0435. \u041E\u043F\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u0430 \u043F\u0440\u0435\u0437\u0430\u0440\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430\u0442\u0430.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, cs: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Za\u0161ifrujte", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Podepi\u0161te", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Ov\u011B\u0159te", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Odvo\u010Fte", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Zabalte", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Rozbalte", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Nezn\xE1m\xE9", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Podrobnosti o\xA0bezpe\u010Dnostn\xEDm certifik\xE1tu", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Obecn\xFD n\xE1zev", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Ve\u0159ejn\xFD kl\xED\u010D", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmus", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Velikost kl\xED\u010De", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Vyu\u017Eit\xED", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Shrnut\xED", note: "Header for summary of connection details" }, permanent: { title: "Trvale", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efektivn\xED velikost", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certifik\xE1t nenalezen", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certifik\xE1t pro dom\xE9nu {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Tahle str\xE1nka pou\u017E\xEDv\xE1 ne\u0161ifrovan\xE9 p\u0159ipojen\xED. T\u0159et\xED strany m\u016F\u017Eou zobrazit tvou aktivitu nebo zachytit citliv\xE9 informace, kter\xE9 na t\xE9hle str\xE1nce zad\xE1v\xE1\u0161.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Aktualizovali jsme p\u0159ipojen\xED na t\xE9hle str\xE1nce, abychom ochr\xE1nili zad\xE1van\xE9 informace.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Tahle str\xE1nka pou\u017E\xEDv\xE1 \u0161ifrovan\xE9 p\u0159ipojen\xED. T\u0159et\xED strany proto nem\u016F\u017Eou zobrazit tvou aktivitu a\xA0zachytit citliv\xE9 informace, kter\xE9 na t\xE9hle str\xE1nce zad\xE1v\xE1\u0161.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Ochrana soukrom\xED nen\xED dostupn\xE1 pro speci\xE1ln\xED str\xE1nky nebo lok\xE1ln\xED str\xE1nky.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Bav\xED t\u011B DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Tak o\xA0n\xE1s \u0159ekni rodin\u011B a\xA0kamar\xE1d\u016Fm.", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "\u0160i\u0159te DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "U\u017E m\xE1\u0161 po krk toho, \u017Ee tvoje e-maily jsou sledovan\xE9?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Tak na nic ne\u010Dekej a\xA0po\u0159i\u010F si k\xA0roz\u0161\xED\u0159en\xED je\u0161t\u011B ochranu e-mail\u016F DuckDuckGo Email Protection!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Zav\u0159\xEDt karty a vymazat data", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Vymazat data", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Jen aktu\xE1ln\xED str\xE1nka", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Posledn\xED hodina", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Posledn\xEDch 24 hodin", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Posledn\xEDch 7 dn\xED", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Posledn\xED 4 t\xFDdny", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Po celou dobu", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {jednu hodinu} day {24 hodin} week {jeden t\xFDden} month {4 t\xFDdny} other {V\u0161e}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Zav\u0159\xEDt <b>{openTabs}</b> kartu a vymazat <b>{durationDesc}</b> historie proch\xE1zen\xED a soubor\u016F cookie?} few {Zav\u0159\xEDt <b>{openTabs}</b> karty a vymazat <b>{durationDesc}</b> historie proch\xE1zen\xED a soubor\u016F cookie?} many {Zav\u0159\xEDt <b>{openTabs}</b> karty a vymazat <b>{durationDesc}</b> historie proch\xE1zen\xED a soubor\u016F cookie?} other {Zav\u0159\xEDt <b>{openTabs}</b> karet a vymazat <b>{durationDesc}</b> historie proch\xE1zen\xED a soubor\u016F cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Zav\u0159\xEDt <b>{openTabs}</b> kartu a vymazat <b>{durationDesc}</b> soubor\u016F cookie?} few {Zav\u0159\xEDt <b>{openTabs}</b> karty a vymazat <b>{durationDesc}</b> soubor\u016F cookie?} many {Zav\u0159\xEDt <b>{openTabs}</b> karty a vymazat <b>{durationDesc}</b> soubor\u016F cookie?} other {Zav\u0159\xEDt <b>{openTabs}</b> karet a vymazat <b>{durationDesc}</b> soubor\u016F cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Vymazat <b>{durationDesc}</b> historie proch\xE1zen\xED a soubor\u016F cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Vymazat <b>{durationDesc}</b> soubor\u016F cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Zav\u0159\xEDt <b>{openTabs}</b> {openTabs, plural, =1 {z\xE1lo\u017Eku} few {z\xE1lo\u017Eky} other {z\xE1lo\u017Eek}} a vymazat <b>ve\u0161kerou</b> historii proch\xE1zen\xED a v\u0161echny soubory cookie ({cookies} {cookies, plural, =1 {str\xE1nka} few {str\xE1nky} other {str\xE1nek}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Zav\u0159\xEDt <b>{openTabs}</b> {openTabs, plural, =1 {z\xE1lo\u017Eku} few {z\xE1lo\u017Eky} other {z\xE1lo\u017Eek}} a vymazat <b>v\u0161echny</b> soubory cookie ({cookies} {cookies, plural, =1 {str\xE1nka} few {str\xE1nky} other {str\xE1nek}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Vymazat <b>ve\u0161kerou</b> historii prohl\xED\u017Een\xED a v\u0161echny soubory cookie ({cookies} str\xE1nka)?} few {Vymazat <b>ve\u0161kerou</b> historii prohl\xED\u017Een\xED a v\u0161echny soubory cookie ({cookies} str\xE1nky)?} many {Vymazat <b>ve\u0161kerou</b> historii prohl\xED\u017Een\xED a v\u0161echny soubory cookie ({cookies} str\xE1nky)?} other {Vymazat <b>ve\u0161kerou</b> historii prohl\xED\u017Een\xED a v\u0161echny soubory cookie ({cookies} str\xE1nek)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Vymazat <b>v\u0161echny</b> soubory cookie ({cookies} str\xE1nka)?} few {Vymazat <b>v\u0161echny</b> soubory cookie ({cookies} str\xE1nky)?} many {Vymazat <b>v\u0161echny</b> soubory cookie ({cookies} str\xE1nky)?} other {Vymazat <b>v\u0161echny</b> soubory cookie ({cookies} str\xE1nek)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Zav\u0159\xEDt <b>{openTabs} kartu {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} few {Zav\u0159\xEDt <b>{openTabs} karty {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} many {Zav\u0159\xEDt <b>{openTabs} karty {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} other {Zav\u0159\xEDt <b>{openTabs} karet {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Zav\u0159\xEDt <b>{openTabs} kartu {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} few {Zav\u0159\xEDt <b>{openTabs} karty {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} many {Zav\u0159\xEDt <b>{openTabs} karty {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?} other {Zav\u0159\xEDt <b>{openTabs} karet {site}</b> a vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Vymazat <b>celou historii prohl\xED\u017Een\xED a soubory cookie ze str\xE1nky {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Vymazat <b>v\u0161echny soubory cookie ze str\xE1nky {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} p\u0159ipnut\xE1</b> karta bude ignorov\xE1na.} few {<b>{tabs} p\u0159ipnut\xE9</b> karty budou ignorov\xE1ny.} many {<b>{tabs} p\u0159ipnut\xE9</b> karty bude ignorov\xE1no.} other {<b>{tabs} p\u0159ipnut\xFDch</b> karet bude ignorov\xE1no.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Vymazat", note: "Button text to start data clearing." }, cancel: { title: "Zru\u0161it", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Pokud chce\u0161 vymazat i historii, vyber \u010Dasov\xE9 obdob\xED.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Fotoapar\xE1t", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Poloha", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Vyskakovac\xED okna", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "V\u017Edycky se pt\xE1t", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Upozornit", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "V\u017Edy povolit", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "V\u017Edy zam\xEDtnout", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anonymn\xED nahl\xE1\u0161en\xED nefunk\u010Dn\xEDho webu n\xE1m pom\xE1h\xE1 aplikaci vylep\u0161ovat.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Popi\u0161te, co se stalo", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Str\xE1nka je zablokovan\xE1 nebo se nena\u010Detla", note: "User is reporting this page because the page didn't load" }, layout: { title: "Str\xE1nka m\xE1 rozbit\xE9 rozvr\u017Een\xED", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Na str\xE1nce jsou velk\xE9 pr\xE1zdn\xE9 oblasti", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video se nena\u010Detlo nebo nep\u0159ehr\xE1lo", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Obr\xE1zky nebyly na\u010Dteny", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Koment\xE1\u0159e, recenze nebo chaty se nena\u010Detly", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Chyb\xED obsah", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Odkazy nebo tla\u010D\xEDtka nefunguj\xED", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nem\u016F\u017Eu se p\u0159ihl\xE1sit/zaregistrovat", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Nem\u016F\u017Eu zaplatit nebo dokon\u010Dit n\xE1kup", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Probl\xE9m s prohl\xED\u017Ee\u010Dem nebo roz\u0161\xED\u0159en\xEDm prohl\xED\u017Ee\u010De", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Str\xE1nka m\u011B po\u017E\xE1dala, a\u0165 p\u0159estanu blokovat reklamy", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "N\u011Bco jin\xE9ho", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Pod\u011Bl se o dal\u0161\xED informace (voliteln\xE9):{bullet}Co se stalo?{bullet}Co se m\u011Blo st\xE1t?{bullet}Pomohlo ti vypnout ochranu?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Poslat zpr\xE1vu", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Hl\xE1\u0161en\xED, kter\xE9 po\u0161le\u0161 DuckDuckGo, obsahuje jenom informace, kter\xE9 n\xE1m pom\u016F\u017Eou vy\u0159e\u0161it tvou zp\u011Btnou vazbu.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "D\u011Bkujeme v\xE1m!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Tvoje hl\xE1\u0161en\xED n\xE1m pom\u016F\u017Ee vylep\u0161ovat na\u0161e slu\u017Eby a\xA0jejich funk\u010Dnost pro ostatn\xED u\u017Eivatele.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Trackery", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Aktualizace seznamu ochrann\xFDch prvk\u016F", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Na tomhle webu je ochrana <b>ZAPNUT\xC1</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Na tomhle webu je ochrana <b>VYPNUT\xC1</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Do\u010Dasn\u011B jsme vypnuli ochranu osobn\xEDch \xFAdaj\u016F, proto\u017Ee se zd\xE1, \u017Ee p\u0159i na\u010D\xEDt\xE1n\xED str\xE1nky zp\u016Fsobuje chyby.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Doporu\u010Dujeme u\xA0tohoto webu vypnout ochranu soukrom\xED, aby p\u0159i na\u010D\xEDt\xE1n\xED str\xE1nky nezp\u016Fsobovala chyby.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Tahle str\xE1nka nen\xED zabezpe\u010Den\xE1</b> a\xA0v\u0161echny informace, kter\xE9 na n\xED zad\xE1\u0161, tak mohou b\xFDt ohro\u017Een\xE9.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "N\xE1sleduj\xEDc\xED po\u017Eadavky na dom\xE9ny t\u0159et\xEDch stran byly zablokov\xE1ny, proto\u017Ee byly identifikov\xE1ny jako po\u017Eadavky se sledov\xE1n\xEDm. Pokud se na\u010Dtou po\u017Eadavky slu\u017Eby, m\u016F\u017Ee jim to umo\u017Enit vytvo\u0159it si tv\u016Fj profil.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "\u017D\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm nebyly na t\xE9hle str\xE1nce zablokovan\xE9. Pokud se na\u010Dtou po\u017Eadavky slu\u017Eby na\u010Dtou, mohou m\xEDt mo\u017Enost vytvo\u0159it si tv\u016Fj profil.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Na t\xE9hle str\xE1nce jsme nezjistili \u017E\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Na t\xE9hle str\xE1nce jsme nena\u0161li \u017E\xE1dn\xE9 slu\u017Eby, kter\xE9 by se sna\u017Eily na\u010D\xEDst po\u017Eadavky se sledov\xE1n\xEDm.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Abychom zabr\xE1nili chyb\xE1m p\u0159i na\u010D\xEDt\xE1n\xED webu, nezablokovali jsme na t\xE9hle str\xE1nce \u017E\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "\u017D\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm nebyly zablokov\xE1ny, proto\u017Ee ochrana je pro tento web vypnut\xE1. Pokud se na\u010Dtou po\u017Eadavky slu\u017Eby, m\u016F\u017Ee jim to umo\u017Enit vytvo\u0159it si tv\u016Fj profil.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Vygenerovat soukromou adresu Duck", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Zkop\xEDrov\xE1no do schr\xE1nky!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Nefunguje web podle o\u010Dek\xE1v\xE1n\xED?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Webov\xE1 str\xE1nka nefunguje?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Nahl\xE1sit nefunk\u010Dn\xED web", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Mo\u017En\xE1 zabere vypnut\xED ochrany.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Str\xE1nka po\u0159\xE1d nefunguje?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Tady to chce opatrnost", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Tuhle str\xE1nku vlastn\xED spole\u010Dnost {companyDisplayName}</b>, kter\xE1 provozuje s\xED\u0165 tracker\u016F na {companyPrevalence}\xA0% nejnav\u0161t\u011Bvovan\u011Bj\u0161\xEDch webov\xFDch str\xE1nek. N\u011Bkter\xE9 z\xA0jejich po\u017Eadavk\u016F se n\xE1m na t\xE9hle str\xE1nce povedlo zablokovat.} other {<b>Tuhle str\xE1nku vlastn\xED spole\u010Dnost {companyDisplayName}</b>, kter\xE1 provozuje s\xED\u0165 tracker\u016F na {companyPrevalence}\xA0% nejnav\u0161t\u011Bvovan\u011Bj\u0161\xEDch webov\xFDch str\xE1nek. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {N\u011Bkter\xFDm spole\u010Dnostem jsme zablokovali na\u010D\xEDt\xE1n\xED po\u017Eadavk\u016F na sledov\xE1n\xED na t\xE9to str\xE1nce.} =2 {Na t\xE9to str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b> a <b>{secondCompany}</b>.} =3 {Na t\xE9to str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b> a\xA0<b>{thirdCompany}</b>.} =4 {Na t\xE9to str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> a\xA0<b>{fourthCompany}</b>.} =5 {Na t\xE9to str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> a\xA0<b>1\xA0dal\u0161\xED</b>.} one {Na t\xE9hle str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>.} few {Na t\xE9hle str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> a\xA0dal\u0161\xEDch (<b>{othersCount}</b>).} many {Na t\xE9hle str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> a\xA0dal\u0161\xEDch (<b>{othersCount}</b>).} other {Na t\xE9hle str\xE1nce jsme zablokovali po\u017Eadavky se sledov\xE1n\xEDm od slu\u017Eby <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> a\xA0dal\u0161\xEDch (<b>{othersCount}</b>).}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "O\xA0cookies je postar\xE1no!", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Skryt\xE9 vyskakovac\xED okno pro souhlas s cookies", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Na tomto webu se n\xE1m povedlo vyskakovac\xED okno ohledn\u011B cookies jen skr\xFDt, proto\u017Ee neobsahovalo \u017E\xE1dn\xE9 mo\u017Enosti pro nastaven\xED p\u0159edvoleb soubor\u016F cookie. Na\u0161e dal\u0161\xED ochrann\xE9 prvky proti sledov\xE1n\xED na webu ale b\u011B\u017E\xED d\xE1l.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Tvoje p\u0159edvolby pro cookies jsme nastavili na co nejvy\u0161\u0161\xED ochranu soukrom\xED a\xA0vyskakovac\xED okno jsme zav\u0159eli.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Zak\xE1zat v nastaven\xED", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "P\u0159ipojen\xED je \u0161ifrovan\xE9", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "P\u0159ipojen\xED nen\xED \u0161ifrovan\xE9", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Na\u010D\xEDt\xE1n\xED po\u017Eadavk\u016F bylo zablokov\xE1no", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nejsou blokov\xE1ny \u017E\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nebyly nalezeny \u017E\xE1dn\xE9 po\u017Eadavky se sledov\xE1n\xEDm", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Na\u010Dteny po\u017Eadavky t\u0159et\xEDch stran", note: "todo" }, thirdPartiesNoneFound: { title: "Nena\u0161li jsme \u017E\xE1dn\xE9 po\u017Eadavky t\u0159et\xEDch stran", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} vlastn\xED tenhle web a\xA0trackery, kter\xE9 jsme na n\u011Bm na\u0161li, tak\u017Ee jsme je nezablokovali.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Na t\xE9hle str\xE1nce jsme nena\u0161li \u017E\xE1dn\xE9 slu\u017Eby, kter\xE9 by se sna\u017Eily na\u010D\xEDst po\u017Eadavky se sledov\xE1n\xEDm.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Trackery umo\u017E\u0148uj\xED r\u016Fzn\xFDm slu\u017Eb\xE1m, aby si vytvo\u0159ily tv\u016Fj profil. Na t\xE9hle str\xE1nce sleduj\xED tvou aktivitu tyhle slu\u017Eby.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Trackery umo\u017E\u0148uj\xED r\u016Fzn\xFDm slu\u017Eb\xE1m, aby si vytvo\u0159ily tv\u016Fj profil. Na t\xE9hle str\xE1nce jsme zablokovali tyhle slu\u017Eby, kter\xE9 sleduj\xED tvou aktivitu.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Nezn\xE1m\xE1 sledovac\xED s\xED\u0165", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Dom\xE9ny tracker\u016F slu\u017Eby {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "\u017D\xE1dn\xE9 trackery nenalezeny", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Trackery vlastn\u011Bn\xE9 t\xEDmhle webem (povolen\xE9)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} zablokovan\xFD tracker v\xA0dom\xE9n\u011B {domain}} few {{trackerCount} zablokovan\xE9 trackery v\xA0dom\xE9n\u011B {domain}} many {{trackerCount} zablokovan\xE9ho trackeru v\xA0dom\xE9n\u011B {domain}} other {{trackerCount} zablokovan\xFDch tracker\u016F v\xA0dom\xE9n\u011B {domain}}}} other {{trackerCount, plural, one {V\xA0dom\xE9n\u011B {domain} jsme na\u0161li {trackerCount} tracker} few {V\xA0dom\xE9n\u011B {domain} jsme na\u0161li {trackerCount} trackery} many {V\xA0dom\xE9n\u011B {domain} jsme na\u0161li {trackerCount} trackeru} other {V\xA0dom\xE9n\u011B {domain} jsme na\u0161li {trackerCount} tracker\u016F}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Upozorn\u011Bn\xED: omezen\xED platformy mohou omezit na\u0161i schopnost detekovat v\u0161echny po\u017Eadavky.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "O\xA0na\u0161ich mechanismech na ochranu proti sledov\xE1n\xED na webu", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Jak na\u0161e reklamy ve vyhled\xE1v\xE1n\xED ovliv\u0148uj\xED na\u0161i ochranu", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Kv\u016Fli ned\xE1vn\xE9mu kliknut\xED na reklamu {domain} na DuckDuckGo se na\u010Detly n\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9ny. Tyhle po\u017Eadavky pom\xE1haj\xED vyhodnocovat \xFA\u010Dinnost reklam. \u017D\xE1dn\xE1 reklama na DuckDuckGo nevytv\xE1\u0159\xED tv\u016Fj profil.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "N\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n se na\u010Detly, aby se zabr\xE1nilo naru\u0161en\xED funk\u010Dnosti webov\xE9 str\xE1nky.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "N\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n se na\u010Detly, proto\u017Ee jsou spojen\xE9 se slu\u017Ebou {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Na\u010Detly se taky n\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n." }, sectionHeadingProtectionsDisabled: { title: "N\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n se na\u010Detly, proto\u017Ee ochrana je vypnut\xE1.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Byly na\u010Dteny n\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n t\u0159et\xEDch stran. Pokud se na\u010Dtou po\u017Eadavky spole\u010Dnosti, m\u016F\u017Ee jim to umo\u017Enit vytvo\u0159it si tv\u016Fj profil, i\xA0kdy\u017E na\u0161e ostatn\xED mechanismy na ochranu proti sledov\xE1n\xED na webu jsou st\xE1le aktivn\xED.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Byly na\u010Dteny n\xE1sleduj\xEDc\xED po\u017Eadavky dom\xE9n t\u0159et\xEDch stran. Pokud se na\u010Dtou po\u017Eadavky spole\u010Dnosti, m\u016F\u017Ee jim to umo\u017Enit vytvo\u0159it si tv\u016Fj profil, i\xA0kdy\u017E na\u0161e ostatn\xED mechanismy na ochranu proti sledov\xE1n\xED na webu jsou st\xE1le aktivn\xED.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Neidentifikovali jsme \u017E\xE1dn\xE9 po\u017Eadavky z\xA0dom\xE9n t\u0159et\xEDch stran.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analytika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklama", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Soci\xE1ln\xED s\xED\u0165", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Doru\u010Den\xED obsahu", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Vlo\u017Een\xFD obsah", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Vyhledat prost\u0159ednictv\xEDm DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Hledat", note: "Aria label for the search button" }, optionsButton: { title: "Dal\u0161\xED mo\u017Enosti", note: "Aria label for the for the options button" }, navigationComplete: { title: "Hotovo", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Zp\u011Bt", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Zapnout ochrann\xE9 prvky", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Vypnout ochrann\xE9 prvky", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "N\u011Bco se pokazilo a\xA0nepoda\u0159ilo se n\xE1m tento obsah na\u010D\xEDst. Zkus str\xE1nku na\u010D\xEDst znovu.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, da: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Krypter", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Log ind", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verificer", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Udled", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Pak", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Pak", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Ukendt", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detaljer om sikkerhedscertifikat", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Almindeligt navn", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Offentlig n\xF8gle", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritme", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "N\xF8glest\xF8rrelse", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Anvendelse", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Resum\xE9", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effektiv st\xF8rrelse", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certifikat ikke fundet", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certifikat for {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Denne side bruger en ukrypteret forbindelse. Tredjeparter kan muligvis se din aktivitet eller opfange f\xF8lsomme oplysninger, som du sender p\xE5 denne side.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Vi har opgraderet forbindelsen p\xE5 denne side for at beskytte de oplysninger, du sender, mens de overf\xF8res.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Denne side bruger en krypteret forbindelse, hvilket forhindrer tredjeparter i at se dine aktiviteter eller opsnappe f\xF8lsomme oplysninger, som du sender p\xE5 denne side.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Beskyttelse af privatlivet er ikke tilg\xE6ngelig for s\xE6rlige sider eller lokale sider.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Kan du lide at bruge DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Hj\xE6lp os med at sprede budskabet til din familie og venner", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Del DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Er du tr\xE6t af, at e-mails bliver sporet?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Tilmeld dig DuckDuckGo Email Protection til din udvidelse nu!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Luk faner og ryd data", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Ryd data", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Kun aktuelt websted", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Sidste time", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Sidste 24 timer", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "De seneste 7 dage", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "De seneste 4 uger", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Altid", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {en time} day {24 timer} week {en uge} month {4 uger} other {Alle}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs}</b> fane og rydde <b>{durationDesc}</b>s browserhistorik og cookies?} other {Vil du lukke <b>{openTabs}</b> faner og rydde <b>{durationDesc}</b>s browserhistorik og cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs}</b> fane og rydde <b>{durationDesc}</b>s cookies?} other {Vil du lukke <b>{openTabs}</b> faner og rydde <b>{durationDesc}</b>s cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Vil du rydde browserhistorik og cookies for de seneste <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Vil du rydde cookies for de seneste <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Luk <b>{openTabs}</b> {openTabs, plural, =1 {fane} other {faner}}, og ryd <b>al</b> browserhistorik og alle cookies ({cookies} {cookies, plural, =1 {websted} other {websteder}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Luk <b>{openTabs}</b> {openTabs, plural, =1 {fane} other {faner}}, og slet <b>alle</b> cookies ({cookies} {cookies, plural, =1 {websted} other {websteder}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Ryd <b>al</b> browserhistorik og cookies ({cookies} websted)?} other {Ryd <b>al</b> browserhistorik og cookies ({cookies} websteder)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Vil du rydde <b>alle</b> cookies ({cookies} websted)?} other {Vil du rydde <b>alle</b> cookies ({cookies} websteder)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs} fane {site}</b> og rydde <b>alle {site}</b> cookies?} other {Vil du lukke <b>{openTabs} faner {site}</b> og rydde <b>alle {site}</b> cookies?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs} fane {site}</b> og rydde <b>alle {site}</b> cookies?} other {Vil du lukke <b>{openTabs} faner {site}</b> og rydde <b>alle {site}</b> cookies?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Vil du rydde al browserhistorik og alle cookies for <b>{site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Vil du rydde alle cookies for <b>{site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} fastgjort</b> fane ignoreres.} other {<b>{tabs} fastgjorte</b> faner ignoreres.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Nulstil", note: "Button text to start data clearing." }, cancel: { title: "Annull\xE9r", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "V\xE6lg en tidsperiode for ogs\xE5 at rydde historikken.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokalisering", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pop op-vinduer", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Sp\xF8rg hver gang", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Underret", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Tillad altid", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Afvis altid", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Hvis du indsender en anonym rapport om en defekt side, hj\xE6lper det os med at forbedre appen.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Beskriv hvad der skete", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Webstedet er blokeret eller blev ikke indl\xE6st", note: "User is reporting this page because the page didn't load" }, layout: { title: "Sidens layout er \xF8delagt", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Siden indeholder store tomme omr\xE5der", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videoen blev ikke afspillet eller indl\xE6st", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Billeder blev ikke indl\xE6st", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentarer, anmeldelser eller chats blev ikke indl\xE6st", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Indhold mangler", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Links eller knapper fungerer ikke", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Kan ikke logge ind/tilmelde", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Kan ikke betale, tjekke ud eller shoppe", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem med browser eller anden browserudvidelse", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Siden bad mig om at deaktivere annonceblokering", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Noget andet", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Del flere detaljer (valgfrit):{bullet}Hvad skete der?{bullet}Hvad burde v\xE6re sket?{bullet}Hjalp det at sl\xE5 beskyttelse fra?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Send rapport", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Rapporter, der sendes til DuckDuckGo, indeholder kun oplysninger, som er n\xF8dvendige for at hj\xE6lpe os med at behandle din feedback.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Tak!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Din rapport vil v\xE6re med til at forbedre vores produkter og g\xF8re oplevelsen bedre for andre brugere.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Trackere", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Opdatering af beskyttelseslisten", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Beskyttelse er <b>SL\xC5ET TIL</b> for dette websted", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Beskyttelse er <b>SL\xC5ET FRA</b> for dette websted", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Vi har midlertidigt deaktiveret beskyttelse af privatlivet, da det ser ud til at p\xE5virke visning af dette websted.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Vi anbefaler, at du deaktiverer beskyttelse af privatlivet for dette websted for at forhindre p\xE5virkning af visning af webstedet.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Dette websted er ikke sikkert</b> og kan l\xE6kke alle oplysninger, du sender p\xE5 denne side.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "F\xF8lgende anmodninger fra tredjepartsdom\xE6ner blev blokeret fra at blive indl\xE6st, fordi de blev identificeret som sporingsanmodninger. Hvis en virksomheds anmodninger indl\xE6ses, kan det give dem mulighed for at profilere dig.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Ingen sporingsanmodninger blev blokeret fra indl\xE6sning p\xE5 denne side. Hvis en virksomheds anmodninger indl\xE6ses, kan det give dem mulighed for at profilere dig.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Vi har ikke identificeret nogen sporingsanmodninger p\xE5 denne side.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Vi har ikke fundet nogen virksomheder, der fors\xF8ger at indl\xE6se sporingsanmodninger p\xE5 denne side.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "For at forhindre p\xE5virkning af visning af webstedet, har vi ikke blokeret nogen virksomheder fra at indl\xE6se sporingsanmodninger p\xE5 denne side.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Ingen sporingsanmodninger blev blokeret fra at blive indl\xE6st, fordi beskyttelse er sl\xE5et fra p\xE5 dette websted. Hvis en virksomheds anmodninger indl\xE6ses, kan det give dem mulighed for at profilere dig.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Opret privat Duck-adresse", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopieret til udklipsholderen!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Fungerer webstedet ikke som forventet?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Virker webstedet ikke?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Rapport\xE9r \xF8delagt websted", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Det kan hj\xE6lpe at sl\xE5 beskyttelserne FRA.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Virkerwebstedet stadig ikke?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Tag forholdsregler", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Dette websted er ejet af {companyDisplayName}</b>, som driver et sporingsnetv\xE6rk p\xE5 tv\xE6rs af {companyPrevalence} % af de mest popul\xE6re websteder. Det lykkedes os at blokere nogle af deres anmodninger p\xE5 denne side.} other {<b>Dette websted er ejet af {companyDisplayName}</b>, som driver et sporingsnetv\xE6rk p\xE5 tv\xE6rs af {companyPrevalence} % af de mest popul\xE6re websteder. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Vi har blokeret nogle virksomheder fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} =2 {Vi blokerede <b>{firstCompany}</b> og <b>{secondCompany}</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} =3 {Vi har blokeret <b>{firstCompany}</b>, <b>{secondCompany}</b> og <b>{thirdCompany}</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} =4 {Vi har blokeret <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> og <b>{fourthCompany}</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} =5 {Vi har blokeret <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> og <b>1 anden</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} one {Vi har blokeret <b>{firstCompany}</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.} other {Vi har blokeret <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> og <b>{othersCount} andre</b> fra at indl\xE6se sporingsanmodninger p\xE5 denne side.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Administrerede cookies", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Pop op-vindue om cookies skjult", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Vi var kun i stand til at skjule pop op-vinduet p\xE5 dette websted, fordi der ikke var nogen muligheder for at administrere cookiepr\xE6ferencer. Vores andre beskyttelser mod sporing g\xE6lder stadig.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Vi har sat dine cookie-indstillinger til at maksimere fortrolighed\xA0og lukket pop op-vinduet.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Deaktiver i indstillinger", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Forbindelsen er krypteret", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Forbindelsen er ikke krypteret", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Anmodninger blokeret fra indl\xE6sning", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Ingen sporingsanmodninger blokeret", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Ingen sporingsanmodninger fundet", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Anmodninger fra tredjeparter", note: "todo" }, thirdPartiesNoneFound: { title: "Ingen anmodninger fra tredjepart fundet", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} ejer dette websted og de kendte trackere, der findes p\xE5 denne side, s\xE5 vi blokerede dem ikke.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Vi har ikke fundet nogen virksomheder, der fors\xF8ger at indl\xE6se sporingsanmodninger p\xE5 denne side.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Trackere hj\xE6lper virksomheder med at profilere dig. Vi har fundet disse virksomheder, der overv\xE5ger din aktivitet p\xE5 denne side.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Trackere hj\xE6lper virksomheder med at profilere dig. Vi har forhindret disse virksomheder i at overv\xE5ge din aktivitet p\xE5 denne side.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tracker-netv\xE6rk ukendt", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Tracker-dom\xE6ner for {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "'{'0'}' tracker fundet", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Trackere ejet af dette websted (tilladt)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} Tracker blokeret p\xE5 {domain}} other {{trackerCount} Trackere blokeret p\xE5 {domain}}}} other {{trackerCount, plural, one {{trackerCount} Tracker fundet p\xE5 {domain}} other {{trackerCount} Trackere fundet p\xE5 {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Bem\xE6rk: Platformsbegr\xE6nsninger kan begr\xE6nse vores evne til at registrere alle anmodninger.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Om vores beskyttelse mod sporing p\xE5 nettet", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "S\xE5dan p\xE5virker vores s\xF8geannoncer vores beskyttelse", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "F\xF8lgende dom\xE6nes anmodninger blev indl\xE6st, fordi der for nylig blev klikket p\xE5 en {domain}-annonce p\xE5 DuckDuckGo. Disse anmodninger hj\xE6lper med at evaluere annoncernes effektivitet. Alle annoncer p\xE5 DuckDuckGo er ikke-profilerende.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "F\xF8lgende dom\xE6nes anmodninger blev indl\xE6st for at forhindre forstyrrelse p\xE5 webstedet.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "F\xF8lgende dom\xE6ners anmodninger blev indl\xE6st, fordi de er knyttet til {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "F\xF8lgende dom\xE6nes anmodninger blev ogs\xE5 indl\xE6st." }, sectionHeadingProtectionsDisabled: { title: "F\xF8lgende dom\xE6ners anmodninger blev indl\xE6st, fordi beskyttelsen er sl\xE5et fra.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "F\xF8lgende anmodninger fra tredjepartsdom\xE6ner blev indl\xE6st. Hvis en virksomheds anmodninger indl\xE6ses, kan det give dem mulighed for at profilere dig, selv om vores andre beskyttelser mod websporing stadig anvendes.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "F\xF8lgende anmodninger fra tredjepartsdom\xE6ner blev indl\xE6st. Hvis en virksomheds anmodninger indl\xE6ses, kan det give dem mulighed for at profilere dig, selv om vores andre beskyttelser mod websporing stadig anvendes.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Vi har ikke fundet nogen anmodninger fra tredjepartsdom\xE6ner.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analysev\xE6rkt\xF8j", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklamer", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sociale netv\xE6rk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Levering af indhold", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Indlejret indhold", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "S\xF8g med DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "S\xF8g", note: "Aria label for the search button" }, optionsButton: { title: "Flere muligheder", note: "Aria label for the for the options button" }, navigationComplete: { title: "F\xE6rdig", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Tilbage", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Aktiv\xE9r beskyttelser", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Deaktiver beskyttelser", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Noget gik galt, og vi kunne ikke indl\xE6se dette indhold. Pr\xF8v at genindl\xE6se siden.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, de: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Entschl\xFCsseln", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Unterzeichnen", note: "When the cryptographic key can be used to sign data" }, verify: { title: "\xDCberpr\xFCfen", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Ableiten", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Packen", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Entpacken", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Unbekannt", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Details zum Sicherheitszertifikat", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Allgemeiner Name", note: "The Common Name for an SSL certificate" }, publicKey: { title: "\xD6ffentlicher Schl\xFCssel", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algorithmus", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Schl\xFCssell\xE4nge", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Verwendung", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Zusammenfassung", note: "Header for summary of connection details" }, permanent: { title: "Dauerhaft", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effektive Gr\xF6\xDFe", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Zertifikat wurde nicht gefunden", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Zertifikat f\xFCr {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Diese Seite verwendet eine unverschl\xFCsselte Verbindung. Dritte k\xF6nnen m\xF6glicherweise deine Aktivit\xE4ten einsehen oder vertrauliche Informationen, die du auf dieser Seite sendest, abfangen.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Wir haben die Verbindung auf dieser Seite verbessert, um die von dir gesendeten Daten w\xE4hrend der \xDCbertragung zu sch\xFCtzen.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Diese Seite verwendet eine verschl\xFCsselte Verbindung, die verhindert, dass Dritte deine Aktivit\xE4ten einsehen oder sensible Informationen abfangen k\xF6nnen, die du auf dieser Seite sendest.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Der Datenschutz ist f\xFCr spezielle Seiten oder lokale Seiten nicht verf\xFCgbar.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Verwendest du DuckDuckGo gerne?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Hilf uns, deine Familie und Freunde zu \xFCberzeugen", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Verbreite DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Bist du es leid, dass E-Mails getrackt werden?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Melde dich jetzt f\xFCr deine Erweiterung f\xFCr DuckDuckGo Email Protection an!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Tabs schlie\xDFen und Daten l\xF6schen", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Daten l\xF6schen", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Nur aktuelle Website", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Letzte Stunde", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Letzte 24 Stunden", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Letzte 7 Tage", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Letzte 4 Wochen", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Alle Zeiten", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {eine Stunde} day {24 Stunden} week {eine Woche} month {4 Wochen} other {Alle}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> Tab schlie\xDFen und <b>{durationDesc}</b> Browserverlauf und Cookies l\xF6schen?} other {<b>{openTabs}</b> Tabs schlie\xDFen und <b>{durationDesc}</b> Browserverlauf und Cookies l\xF6schen?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> Tab schlie\xDFen und <b>{durationDesc}</b> Cookies l\xF6schen?} other {<b>{openTabs}</b> Tabs schlie\xDFen und <b>{durationDesc}</b> Cookies l\xF6schen?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "<b>{durationDesc}</b> Browserverlauf und Cookies l\xF6schen?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "<b>{durationDesc}</b> Cookies l\xF6schen?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Schlie\xDFen Sie <b>{openTabs}</b> {openTabs, plural, =1 {Tab} other {Tabs}} und l\xF6schen Sie <b>alle</b> Browserverl\xE4ufe und Cookies ({cookies} {cookies, plural, =1 {Website} other {Websites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Schlie\xDFen Sie <b>{openTabs}</b> {openTabs, plural, =1 {Tab} other {Tabs}} und l\xF6schen Sie <b>alle</b> Cookies ({cookies} {cookies, plural, =1 {Website} other {Websites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Den <b>gesamten Browserverlauf und alle</b> Cookies l\xF6schen ({cookies} Website)?} other {Den <b>gesamten Browserverlauf und alle</b> Cookies l\xF6schen ({cookies} Websites)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {<b>Alle</b> Cookies l\xF6schen ({cookies} Website)?} other {<b>Alle</b> Cookies l\xF6schen ({cookies} Websites)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> Tab schlie\xDFen und <b>alle {site}</b> Cookies l\xF6schen?} other {<b>{openTabs} {site}</b> Tabs schlie\xDFen und <b>alle {site}</b> Cookies l\xF6schen?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> Tab schlie\xDFen und <b>alle {site}</b> Cookies l\xF6schen?} other {<b>{openTabs} {site}</b> Tabs schlie\xDFen und <b>alle {site}</b> Cookies l\xF6schen?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "<b>Alle {site}</b> Browserverl\xE4ufe und Cookies l\xF6schen?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "<b>Alle {site}</b> Cookies l\xF6schen?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} angeheftetes</b> Tab wird ignoriert.} other {<b>{tabs} angeheftete</b> Tabs werden ignoriert.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "L\xF6schen", note: "Button text to start data clearing." }, cancel: { title: "Abbrechen", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Um auch den Verlauf zu l\xF6schen, w\xE4hlen Sie einen Zeitraum aus.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Standort", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pop-ups", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Jedes Mal fragen", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Benachrichtigen", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Immer erlauben", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Immer ablehnen", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Das Senden eines anonymen Berichts \xFCber fehlerhafte Webseiten hilft uns, die App zu verbessern.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Beschreiben, was passiert ist", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Webseite blockiert oder nicht geladen", note: "User is reporting this page because the page didn't load" }, layout: { title: "Website-Layout fehlerhaft", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Die Webseite enth\xE4lt gro\xDFe leere Fl\xE4chen", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video konnte nicht abgespielt oder geladen werden", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Bilder wurden nicht geladen", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentare, Bewertungen oder Chats konnten nicht geladen werden", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Inhalt fehlt", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Links oder Schaltfl\xE4chen funktionieren nicht", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Anmeldung/Registrierung nicht m\xF6glich", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Bezahlen, Auschecken oder Einkaufen nicht m\xF6glich", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem mit dem Browser oder einer anderen Browsererweiterung", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Webseite hat mich aufgefordert, den Werbeblocker zu deaktivieren", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Etwas anderes", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Weitere Informationen teilen (optional):{bullet}Was ist passiert?{bullet}Was h\xE4tte passieren sollen?{bullet}Hat das Ausschalten der Schutzfunktionen geholfen?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Bericht senden", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Die an DuckDuckGo gesendeten Berichte enthalten nur Informationen, die f\xFCr die Bearbeitung deines Feedbacks erforderlich sind.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Vielen Dank!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Dein Bericht tr\xE4gt dazu bei, unsere Produkte zu verbessern und die Erfahrung f\xFCr andere Menschen zu verbessern.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Tracker", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Schutzliste wird aktualisiert", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Der Schutz ist f\xFCr diese Website <b>AKTIVIERT</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Schutzma\xDFnahmen sind f\xFCr diese Website <b>DEAKTIVIERT</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Wir haben den Datenschutz vor\xFCbergehend deaktiviert, da es den Anschein hat, dass die Seite dadurch gest\xF6rt wird.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Wir empfehlen, den Datenschutz f\xFCr diese Website zu deaktivieren, um zu verhindern, dass die Website besch\xE4digt wird.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Diese Website ist nicht sicher</b> und kann alle Informationen gef\xE4hrden, die du auf dieser Seite sendest.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Das Laden folgender Anfragen von Drittanbieter-Domains wurde blockiert, da sie als Tracking-Anfragen identifiziert wurden. Wenn die Anfragen eines Unternehmens geladen werden, kann ihm dies erm\xF6glichen, ein Profil von dir zu erstellen.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Das Laden von Tracking-Anfragen wurde auf dieser Seite nicht blockiert. Wenn die Anfragen eines Unternehmens geladen werden, kann ihm dies erm\xF6glichen, ein Profil von dir zu erstellen.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Wir haben auf dieser Seite keine Tracking-Anfragen identifiziert.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Wir haben keine Unternehmen gefunden, die versuchen, Tracking-Anfragen auf dieser Seite zu laden.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Um Website-Unterbrechungen zu vermeiden, haben wir keine Unternehmen daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Das Laden von Tracking-Anfragen wurde nicht blockiert, da der Schutz f\xFCr diese Website deaktiviert ist. Wenn die Anfragen eines Unternehmens geladen werden, kann ihm dies erm\xF6glichen, ein Profil von dir zu erstellen.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Private Duck-Adresse generieren", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "In deine Zwischenablage kopiert!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Die Website funktioniert nicht wie erwartet?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Website funktioniert nicht?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Fehlerhafte Seite melden", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Das AUSschalten der Schutzfunktionen k\xF6nnte helfen.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Webseite funktioniert immer noch nicht?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Vorsichtsma\xDFnahmen treffen", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Diese Website ist Eigentum von {companyDisplayName}</b>, das ein Tracker-Netzwerk auf {companyPrevalence}\xA0% der Top-Websites betreibt. Wir konnten einige ihrer Anfragen auf dieser Seite blockieren.} other {<b>Diese Website ist Eigentum von {companyDisplayName}</b>, das ein Tracker-Netzwerk auf {companyPrevalence}\xA0% der Top-Websites betreibt. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Wir haben einige Unternehmen daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} =2 {Wir haben <b>{firstCompany}</b> und <b>{secondCompany}</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} =3 {Wir haben <b>{firstCompany}</b>, <b>{secondCompany}</b> und <b>{thirdCompany}</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} =4 {Wir haben <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> und <b>{fourthCompany}</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} =5 {Wir haben <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> und <b>1 weiteres Unternehmen</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} one {Wir haben <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> und <b>{othersCount} weiteres Unternehmen</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.} other {Wir haben <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> und <b>{othersCount} andere</b> daran gehindert, Tracking-Anfragen auf dieser Seite zu laden.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies verwaltet", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Cookie-Pop-up ausgeblendet", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Wir konnten das Pop-up-Fenster f\xFCr Cookies auf dieser Website nur ausblenden, weil es keine Optionen zur Verwaltung der Cookie-Einstellungen gab. Unsere anderen Web-Tracking-Schutzma\xDFnahmen werden weiterhin angewendet.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Wir haben deine Cookie-Einstellungen so eingestellt, dass deine Privatsph\xE4re maximal gesch\xFCtzt wird, und das Pop-up geschlossen.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "In den Einstellungen deaktivieren", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Die Verbindung ist verschl\xFCsselt", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Verbindung ist nicht verschl\xFCsselt", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Blockierte Anfragen", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Keine Tracking-Anfragen blockiert", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Keine Tracking-Anfragen gefunden", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Anfragen von Drittanbietern geladen", note: "todo" }, thirdPartiesNoneFound: { title: "Keine Anfragen von Drittanbietern gefunden", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} ist Besitzer dieser Website und der bekannten Tracker darauf. Deshalb haben wir das Unternehmen nicht blockiert.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Wir haben keine Unternehmen gefunden, die versuchen, Tracking-Anfragen auf dieser Seite zu laden.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Tracker helfen Unternehmen, ein Profil von dir zu erstellen. Wir haben herausgefunden, dass diese Unternehmen deine Aktivit\xE4ten auf dieser Seite \xFCberwachen.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Tracker helfen Unternehmen, ein Profil von dir zu erstellen. Wir haben diese Unternehmen daran gehindert, deine Aktivit\xE4ten auf dieser Seite zu \xFCberwachen.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tracker-Netzwerk unbekannt", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Tracker-Domains f\xFCr {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 Tracker gefunden", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Tracker, die dieser Website geh\xF6ren (zugelassen)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} Tracker blockiert auf {domain}} other {{trackerCount} Tracker blockiert auf {domain}}}} other {{trackerCount, plural, one {{trackerCount} Tracker gefunden auf {domain}} other {{trackerCount} Tracker gefunden auf {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Bitte beachte, dass wir aufgrund von Plattformbeschr\xE4nkungen m\xF6glicherweise nicht alle Anfragen erkennen k\xF6nnen.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "\xDCber unseren Web-Tracking-Schutz", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Wie sich unsere Suchanzeigen auf unseren Schutz auswirken", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Die Anfragen der folgenden Domain wurden geladen, da k\xFCrzlich eine {domain}-Werbung auf DuckDuckGo angeklickt wurde. Diese Anfragen helfen bei der Bewertung der Effektivit\xE4t von Werbung. Werbung auf DuckDuckGo erstellt keine Profile von dir.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Die Anfragen der folgenden Domain wurden geladen, um eine St\xF6rung der Website zu verhindern.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Die Anforderungen der folgenden Dom\xE4nen wurden geladen, weil sie mit {domain} verbunden sind.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Die Anfragen der folgenden Domain wurden ebenfalls geladen." }, sectionHeadingProtectionsDisabled: { title: "Die Anfragen der folgenden Dom\xE4nen wurden geladen, da der Schutz deaktiviert ist.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Die Anfragen der folgenden Drittanbieter-Domains wurden geladen. Wenn die Anfragen eines Unternehmens geladen werden, kann dies ihnen erlauben, ein Profil von dir zu erstellen, obwohl unsere anderen Schutzma\xDFnahmen f\xFCr das Web-Tracking weiterhin gelten.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Die Anfragen der folgenden Drittanbieter-Domains wurden geladen. Wenn die Anfragen eines Unternehmens geladen werden, kann dies ihnen erlauben, ein Profil von dir zu erstellen, obwohl unsere anderen Schutzma\xDFnahmen f\xFCr das Web-Tracking weiterhin gelten.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Wir haben keine Anfragen von Drittanbieter-Domains identifiziert.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analytik", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Werbung", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Soziales Netzwerk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Lieferung von Inhalten", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Eingebettete Inhalte", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Mit DuckDuckGo suchen", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Suche", note: "Aria label for the search button" }, optionsButton: { title: "Weitere Optionen", note: "Aria label for the for the options button" }, navigationComplete: { title: "Fertig", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Zur\xFCck", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Schutz aktivieren", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Schutz deaktivieren", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Etwas ist schiefgelaufen und wir konnten diesen Inhalt nicht laden. Versuche, die Seite neu zu laden.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, el: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u039A\u03C1\u03C5\u03C0\u03C4\u03BF\u03B3\u03C1\u03AC\u03C6\u03B7\u03C3\u03B7", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "\u03A5\u03C0\u03BF\u03B3\u03C1\u03B1\u03C6\u03AE", note: "When the cryptographic key can be used to sign data" }, verify: { title: "\u0395\u03C0\u03B1\u03BB\u03AE\u03B8\u03B5\u03C5\u03C3\u03B7", note: "When the cryptographic key can be used to verify data" }, derive: { title: "\u03A0\u03B1\u03C1\u03B1\u03B3\u03C9\u03B3\u03AE", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "\u0391\u03BD\u03B1\u03B4\u03AF\u03C0\u03BB\u03C9\u03C3\u03B7", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "\u03A7\u03C9\u03C1\u03AF\u03C2 \u03B1\u03BD\u03B1\u03B4\u03AF\u03C0\u03BB\u03C9\u03C3\u03B7", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "\u0386\u03B3\u03BD\u03C9\u03C3\u03C4\u03BF", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "\u039B\u03B5\u03C0\u03C4\u03BF\u03BC\u03AD\u03C1\u03B5\u03B9\u03B5\u03C2 \u03C0\u03B9\u03C3\u03C4\u03BF\u03C0\u03BF\u03B9\u03B7\u03C4\u03B9\u03BA\u03BF\u03CD \u03B1\u03C3\u03C6\u03B1\u03BB\u03B5\u03AF\u03B1\u03C2", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "\u039A\u03BF\u03B9\u03BD\u03CC \u03CC\u03BD\u03BF\u03BC\u03B1", note: "The Common Name for an SSL certificate" }, publicKey: { title: "\u0394\u03B7\u03BC\u03CC\u03C3\u03B9\u03BF \u03BA\u03BB\u03B5\u03B9\u03B4\u03AF", note: "The Public Key for an SSL certificate" }, algorithm: { title: "\u0391\u03BB\u03B3\u03CC\u03C1\u03B9\u03B8\u03BC\u03BF\u03C2", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "\u039C\u03AD\u03B3\u03B5\u03B8\u03BF\u03C2 \u03BA\u03BB\u03B5\u03B9\u03B4\u03B9\u03BF\u03CD", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "\u03A7\u03C1\u03AE\u03C3\u03B7", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "\u03A0\u03B5\u03C1\u03AF\u03BB\u03B7\u03C8\u03B7", note: "Header for summary of connection details" }, permanent: { title: "\u039C\u03CC\u03BD\u03B9\u03BC\u03BF", note: "Whether certificate is permanent" }, effectiveSize: { title: "\u039C\u03AD\u03B3\u03B5\u03B8\u03BF\u03C2 \u03B9\u03C3\u03C7\u03CD\u03BF\u03C2", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "\u03A4\u03BF \u03C0\u03B9\u03C3\u03C4\u03BF\u03C0\u03BF\u03B9\u03B7\u03C4\u03B9\u03BA\u03CC \u03B4\u03B5\u03BD \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B5", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "\u03A0\u03B9\u03C3\u03C4\u03BF\u03C0\u03BF\u03B9\u03B7\u03C4\u03B9\u03BA\u03CC \u03B3\u03B9\u03B1 {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "\u0397 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE \u03C7\u03C1\u03B7\u03C3\u03B9\u03BC\u03BF\u03C0\u03BF\u03B9\u03B5\u03AF \u03BC\u03B7 \u03BA\u03C1\u03C5\u03C0\u03C4\u03BF\u03B3\u03C1\u03B1\u03C6\u03B7\u03BC\u03AD\u03BD\u03B7 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7. \u03A4\u03C1\u03AF\u03C4\u03B1 \u03BC\u03AD\u03C1\u03B7 \u03B5\u03BD\u03B4\u03AD\u03C7\u03B5\u03C4\u03B1\u03B9 \u03BD\u03B1 \u03BC\u03C0\u03BF\u03C1\u03BF\u03CD\u03BD \u03BD\u03B1 \u03B4\u03BF\u03C5\u03BD \u03C4\u03B7 \u03B4\u03C1\u03B1\u03C3\u03C4\u03B7\u03C1\u03B9\u03CC\u03C4\u03B7\u03C4\u03AC \u03C3\u03B1\u03C2 \u03AE \u03BD\u03B1 \u03C5\u03C0\u03BF\u03BA\u03BB\u03AD\u03C8\u03BF\u03C5\u03BD \u03B5\u03C5\u03B1\u03AF\u03C3\u03B8\u03B7\u03C4\u03B5\u03C2 \u03C0\u03BB\u03B7\u03C1\u03BF\u03C6\u03BF\u03C1\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03C3\u03C4\u03AD\u03BB\u03BD\u03B5\u03C4\u03B5 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "\u0391\u03BD\u03B1\u03B2\u03B1\u03B8\u03BC\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B7 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE \u03B3\u03B9\u03B1 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1 \u03C4\u03C9\u03BD \u03C0\u03BB\u03B7\u03C1\u03BF\u03C6\u03BF\u03C1\u03B9\u03CE\u03BD \u03C0\u03BF\u03C5 \u03C3\u03C4\u03AD\u03BB\u03BD\u03B5\u03C4\u03B5 \u03BA\u03B1\u03C4\u03AC \u03C4\u03B7 \u03BC\u03B5\u03C4\u03B1\u03C6\u03BF\u03C1\u03AC \u03C4\u03BF\u03C5\u03C2.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "\u0397 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE \u03C7\u03C1\u03B7\u03C3\u03B9\u03BC\u03BF\u03C0\u03BF\u03B9\u03B5\u03AF \u03BA\u03C1\u03C5\u03C0\u03C4\u03BF\u03B3\u03C1\u03B1\u03C6\u03B7\u03BC\u03AD\u03BD\u03B7 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7, \u03B7 \u03BF\u03C0\u03BF\u03AF\u03B1 \u03B5\u03BC\u03C0\u03BF\u03B4\u03AF\u03B6\u03B5\u03B9 \u03C4\u03C1\u03AF\u03C4\u03B1 \u03BC\u03AD\u03C1\u03B7 \u03BD\u03B1 \u03B2\u03BB\u03AD\u03C0\u03BF\u03C5\u03BD \u03C4\u03B7 \u03B4\u03C1\u03B1\u03C3\u03C4\u03B7\u03C1\u03B9\u03CC\u03C4\u03B7\u03C4\u03AC \u03C3\u03B1\u03C2 \u03AE \u03BD\u03B1 \u03C5\u03C0\u03BF\u03BA\u03BB\u03AD\u03C0\u03C4\u03BF\u03C5\u03BD \u03B5\u03C5\u03B1\u03AF\u03C3\u03B8\u03B7\u03C4\u03B5\u03C2 \u03C0\u03BB\u03B7\u03C1\u03BF\u03C6\u03BF\u03C1\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03C3\u03C4\u03AD\u03BB\u03BD\u03B5\u03C4\u03B5 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "\u039F\u03B9 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C9\u03C0\u03B9\u03BA\u03CE\u03BD \u03B4\u03B5\u03B4\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD \u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B4\u03B9\u03B1\u03B8\u03AD\u03C3\u03B9\u03BC\u03B5\u03C2 \u03B3\u03B9\u03B1 \u03B5\u03B9\u03B4\u03B9\u03BA\u03AD\u03C2 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B5\u03C2 \u03AE \u03C4\u03BF\u03C0\u03B9\u03BA\u03AD\u03C2 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B5\u03C2.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\u03A3\u03B1\u03C2 \u03B1\u03C1\u03AD\u03C3\u03B5\u03B9 \u03BD\u03B1 \u03C7\u03C1\u03B7\u03C3\u03B9\u03BC\u03BF\u03C0\u03BF\u03B9\u03B5\u03AF\u03C4\u03B5 \u03C4\u03BF DuckDuckGo;", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "\u0392\u03BF\u03B7\u03B8\u03AE\u03C3\u03C4\u03B5 \u03BC\u03B1\u03C2 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B4\u03CE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03B1 \u03BD\u03AD\u03B1 \u03C3\u03C4\u03B7\u03BD \u03BF\u03B9\u03BA\u03BF\u03B3\u03AD\u03BD\u03B5\u03B9\u03B1 \u03BA\u03B1\u03B9 \u03C3\u03C4\u03BF\u03C5\u03C2 \u03C6\u03AF\u03BB\u03BF\u03C5\u03C2 \u03C3\u03B1\u03C2", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "\u0394\u03B9\u03B1\u03B4\u03CE\u03C3\u03C4\u03B5 \u03C4\u03BF DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "\u0388\u03C7\u03B5\u03C4\u03B5 \u03BA\u03BF\u03C5\u03C1\u03B1\u03C3\u03C4\u03B5\u03AF \u03BD\u03B1 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03C4\u03B1 email \u03C3\u03B1\u03C2;", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "\u0395\u03B3\u03B3\u03C1\u03B1\u03C6\u03B5\u03AF\u03C4\u03B5 \u03C4\u03CE\u03C1\u03B1 \u03B3\u03B9\u03B1 \u03C4\u03B7\u03BD \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1 email \u03C4\u03BF\u03C5 DuckDuckGo \u03B3\u03B9\u03B1 \u03C4\u03B7\u03BD \u03B5\u03C0\u03AD\u03BA\u03C4\u03B1\u03C3\u03AE \u03C3\u03B1\u03C2!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "\u039A\u03BB\u03B5\u03AF\u03C3\u03B9\u03BC\u03BF \u03BA\u03B1\u03C1\u03C4\u03B5\u03BB\u03CE\u03BD \u03BA\u03B1\u03B9 \u03B5\u03BA\u03BA\u03B1\u03B8\u03AC\u03C1\u03B9\u03C3\u03B7 \u03B4\u03B5\u03B4\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "\u0395\u03BA\u03BA\u03B1\u03B8\u03AC\u03C1\u03B9\u03C3\u03B7 \u03B4\u03B5\u03B4\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "\u039C\u03CC\u03BD\u03BF \u03BF \u03C4\u03C1\u03AD\u03C7\u03C9\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B1 \u03CE\u03C1\u03B1", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B5\u03C2 24 \u03CE\u03C1\u03B5\u03C2", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B5\u03C2 7 \u03B7\u03BC\u03AD\u03C1\u03B5\u03C2", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B5\u03C2 4 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "\u038C\u03BB\u03BF", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {\u03BC\u03AF\u03B1 \u03CE\u03C1\u03B1} day {24 \u03CE\u03C1\u03B5\u03C2} week {\u03BC\u03AF\u03B1 \u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1} month {4 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2} other {\u038C\u03BB\u03B1}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B1 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03BF\u03CD \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03C9\u03BD cookies;} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B5\u03C2 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03BF\u03CD \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03C9\u03BD cookies;}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B1 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03B1\u03C0\u03CC \u03C4\u03B1 cookies;} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B5\u03C2 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03B1\u03C0\u03CC \u03C4\u03B1 cookies;}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03B1\u03C0\u03CC \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03B1 cookies;", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>{durationDesc}</b> \u03B1\u03C0\u03CC \u03C4\u03B1 cookies;", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03BF</b> \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03B1 cookies ({cookies} {cookies, plural, =1 {site} other {sites}});", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03B1</b> \u03C4\u03B1 cookies ({cookies} {cookies, plural, =1 {site} other {sites}});", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03BF</b> \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03B1 cookies ({cookies} \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2);} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03BF</b> \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03B9 \u03C4\u03B1 cookies ({cookies} \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03B9);}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03B1</b> \u03C4\u03B1 cookies ({cookies} \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2);} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03B1</b> \u03C4\u03B1 cookies ({cookies} \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03B9);}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs} {site}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B1 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03C4\u03B5 <b>\u03CC\u03BB\u03B1 \u03C4\u03B1 cookies \u03C4\u03BF\u03C5 {site}</b>;} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs} {site}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B5\u03C2 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03C4\u03B5 <b>\u03CC\u03BB\u03B1 \u03C4\u03B1 cookies \u03C4\u03BF\u03C5 {site}</b>;}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 \u03C4\u03B7\u03BD \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B1 <b>{openTabs} {site}</b> \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03C4\u03B5 <b>\u03CC\u03BB\u03B1 \u03C4\u03B1 cookies \u03C4\u03BF\u03C5 {site}</b>;} other {\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B5\u03C4\u03B5 <b>{openTabs} {site}</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B5\u03C2 \u03BA\u03B1\u03B9 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03C4\u03B5 <b>\u03CC\u03BB\u03B1 \u03C4\u03B1 cookies \u03C4\u03BF\u03C5 {site}</b>;}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b> \u03CC\u03BB\u03BF \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03C4\u03BF\u03C5 {site}</b> \u03BA\u03B1\u03B9 \u03C4\u03B1 cookies;", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\u0398\u03AD\u03BB\u03B5\u03C4\u03B5 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 <b>\u03CC\u03BB\u03B1 \u03C4\u03B1 cookies \u03C4\u03BF\u03C5 {site}</b>;", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} \u03BA\u03B1\u03C1\u03C6\u03B9\u03C4\u03C3\u03C9\u03BC\u03AD\u03BD\u03B7</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B1 \u03B8\u03B1 \u03B1\u03B3\u03BD\u03BF\u03B7\u03B8\u03B5\u03AF.} other {<b>{tabs} \u03BA\u03B1\u03C1\u03C6\u03B9\u03C4\u03C3\u03C9\u03BC\u03AD\u03BD\u03B5\u03C2</b> \u03BA\u03B1\u03C1\u03C4\u03AD\u03BB\u03B5\u03C2 \u03B8\u03B1 \u03B1\u03B3\u03BD\u03BF\u03B7\u03B8\u03BF\u03CD\u03BD.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "\u0394\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE", note: "Button text to start data clearing." }, cancel: { title: "\u0391\u03BA\u03CD\u03C1\u03C9\u03C3\u03B7", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "\u0393\u03B9\u03B1 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B3\u03C1\u03AC\u03C8\u03B5\u03C4\u03B5 \u03B5\u03C0\u03AF\u03C3\u03B7\u03C2 \u03C4\u03BF \u03B9\u03C3\u03C4\u03BF\u03C1\u03B9\u03BA\u03CC, \u03B5\u03C0\u03B9\u03BB\u03AD\u03BE\u03C4\u03B5 \u03BC\u03B9\u03B1 \u03C7\u03C1\u03BF\u03BD\u03B9\u03BA\u03AE \u03C0\u03B5\u03C1\u03AF\u03BF\u03B4\u03BF.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "\u039A\u03AC\u03BC\u03B5\u03C1\u03B1", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "\u039C\u03B9\u03BA\u03C1\u03CC\u03C6\u03C9\u03BD\u03BF", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "\u0393\u03B5\u03C9\u03B5\u03BD\u03C4\u03BF\u03C0\u03B9\u03C3\u03BC\u03CC\u03C2", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "\u0391\u03BD\u03B1\u03B4\u03C5\u03CC\u03BC\u03B5\u03BD\u03B1", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "\u039D\u03B1 \u03B3\u03AF\u03BD\u03B5\u03C4\u03B1\u03B9 \u03B5\u03C1\u03CE\u03C4\u03B7\u03C3\u03B7 \u03BA\u03AC\u03B8\u03B5 \u03C6\u03BF\u03C1\u03AC", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "\u0395\u03B9\u03B4\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "\u039D\u03B1 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03B5\u03C4\u03B1\u03B9 \u03C0\u03AC\u03BD\u03C4\u03B1", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "\u039D\u03B1 \u03BC\u03B7\u03BD \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03B5\u03C4\u03B1\u03B9 \u03C0\u03BF\u03C4\u03AD", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "\u0397 \u03C5\u03C0\u03BF\u03B2\u03BF\u03BB\u03AE \u03B1\u03BD\u03CE\u03BD\u03C5\u03BC\u03B7\u03C2 \u03B1\u03BD\u03B1\u03C6\u03BF\u03C1\u03AC\u03C2 \u03BC\u03B7 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1\u03C2 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5 \u03BC\u03B1\u03C2 \u03B2\u03BF\u03B7\u03B8\u03AC \u03BD\u03B1 \u03B2\u03B5\u03BB\u03C4\u03B9\u03CE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03B7\u03BD \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AE.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "\u03A0\u03B5\u03C1\u03B9\u03B3\u03C1\u03AC\u03C8\u03C4\u03B5 \u03C4\u03B9 \u03C3\u03C5\u03BD\u03AD\u03B2\u03B7", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "\u039F \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B5 \u03AE \u03B4\u03B5\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B5", note: "User is reporting this page because the page didn't load" }, layout: { title: "\u0397 \u03B4\u03B9\u03AC\u03C4\u03B1\u03BE\u03B7 \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5 \u03B4\u03B5\u03BD \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03B5\u03AF \u03C3\u03C9\u03C3\u03C4\u03AC", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "\u039F \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03C0\u03B5\u03C1\u03B9\u03AD\u03C7\u03B5\u03B9 \u03BC\u03B5\u03B3\u03AC\u03BB\u03BF\u03C5\u03C2 \u03BA\u03B5\u03BD\u03BF\u03CD\u03C2 \u03C7\u03CE\u03C1\u03BF\u03C5\u03C2", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "\u0394\u03B5\u03BD \u03AD\u03B3\u03B9\u03BD\u03B5 \u03B1\u03BD\u03B1\u03C0\u03B1\u03C1\u03B1\u03B3\u03C9\u03B3\u03AE \u03AE \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03C4\u03BF\u03C5 \u03B2\u03AF\u03BD\u03C4\u03B5\u03BF", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "\u039F\u03B9 \u03B5\u03B9\u03BA\u03CC\u03BD\u03B5\u03C2 \u03B4\u03B5\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD", note: "User is reporting this page because one or more images did not load" }, comments: { title: "\u03A4\u03B1 \u03C3\u03C7\u03CC\u03BB\u03B9\u03B1, \u03BF\u03B9 \u03BA\u03C1\u03B9\u03C4\u03B9\u03BA\u03AD\u03C2 \u03AE \u03BF\u03B9 \u03C3\u03C5\u03BD\u03BF\u03BC\u03B9\u03BB\u03AF\u03B5\u03C2 \u03B4\u03B5\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD", note: "User is reporting this page because one or more comments did not load" }, content: { title: "\u03A4\u03BF \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03CC\u03BC\u03B5\u03BD\u03BF \u03BB\u03B5\u03AF\u03C0\u03B5\u03B9", note: "User is reporting this page because some other type of content did not load" }, links: { title: "\u039F\u03B9 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03BC\u03BF\u03B9 \u03AE \u03C4\u03B1 \u03BA\u03BF\u03C5\u03BC\u03C0\u03B9\u03AC \u03B4\u03B5\u03BD \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03BF\u03CD\u03BD", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "\u0394\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B4\u03C5\u03BD\u03B1\u03C4\u03AE \u03B7 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7/\u03B5\u03B3\u03B3\u03C1\u03B1\u03C6\u03AE", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "\u0394\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B4\u03C5\u03BD\u03B1\u03C4\u03AE \u03B7 \u03C0\u03BB\u03B7\u03C1\u03C9\u03BC\u03AE \u03AE \u03B7 \u03BF\u03BB\u03BF\u03BA\u03BB\u03AE\u03C1\u03C9\u03C3\u03B7 \u03BC\u03B9\u03B1\u03C2 \u03B1\u03B3\u03BF\u03C1\u03AC\u03C2", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "\u03A0\u03C1\u03CC\u03B2\u03BB\u03B7\u03BC\u03B1 \u03BC\u03B5 \u03C4\u03BF \u03C0\u03C1\u03CC\u03B3\u03C1\u03B1\u03BC\u03BC\u03B1 \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2 \u03AE \u03AC\u03BB\u03BB\u03BF \u03C0\u03C1\u03CC\u03B2\u03BB\u03B7\u03BC\u03B1 \u03B5\u03C0\u03AD\u03BA\u03C4\u03B1\u03C3\u03B7\u03C2 \u03BC\u03B5 \u03C4\u03BF \u03C0\u03C1\u03CC\u03B3\u03C1\u03B1\u03BC\u03BC\u03B1 \u03C0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "\u039F \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03BC\u03BF\u03C5 \u03B6\u03AE\u03C4\u03B7\u03C3\u03B5 \u03BD\u03B1 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03B9\u03AE\u03C3\u03C9 \u03C4\u03BF \u03C0\u03C1\u03CC\u03B3\u03C1\u03B1\u03BC\u03BC\u03B1 \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03B9\u03C3\u03BC\u03BF\u03CD \u03B4\u03B9\u03B1\u03C6\u03B7\u03BC\u03AF\u03C3\u03B5\u03C9\u03BD", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "\u039A\u03AC\u03C4\u03B9 \u03AC\u03BB\u03BB\u03BF", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "\u039C\u03BF\u03B9\u03C1\u03B1\u03C3\u03C4\u03B5\u03AF\u03C4\u03B5 \u03C0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03B5\u03C2 \u03BB\u03B5\u03C0\u03C4\u03BF\u03BC\u03AD\u03C1\u03B5\u03B9\u03B5\u03C2 (\u03C0\u03C1\u03BF\u03B1\u03B9\u03C1\u03B5\u03C4\u03B9\u03BA\u03CC):{bullet}\u03A4\u03B9 \u03C3\u03C5\u03BD\u03AD\u03B2\u03B7;{bullet}\u03A4\u03B9 \u03B8\u03B1 \u03AD\u03C0\u03C1\u03B5\u03C0\u03B5 \u03BD\u03B1 \u03B5\u03AF\u03C7\u03B5 \u03C3\u03C5\u03BC\u03B2\u03B5\u03AF;{bullet}\u0392\u03BF\u03AE\u03B8\u03B7\u03C3\u03B5 \u03B7 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03C4\u03B7\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2;", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "\u0391\u03C0\u03BF\u03C3\u03C4\u03BF\u03BB\u03AE \u0391\u03BD\u03B1\u03C6\u03BF\u03C1\u03AC\u03C2", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "\u039F\u03B9 \u03B1\u03BD\u03B1\u03C6\u03BF\u03C1\u03AD\u03C2 \u03C0\u03BF\u03C5 \u03B1\u03C0\u03BF\u03C3\u03C4\u03AD\u03BB\u03BB\u03BF\u03BD\u03C4\u03B1\u03B9 \u03C3\u03C4\u03BF DuckDuckGo \u03C0\u03B5\u03C1\u03B9\u03BB\u03B1\u03BC\u03B2\u03AC\u03BD\u03BF\u03C5\u03BD \u03BC\u03CC\u03BD\u03BF \u03C4\u03B9\u03C2 \u03C0\u03BB\u03B7\u03C1\u03BF\u03C6\u03BF\u03C1\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03B1\u03C0\u03B1\u03B9\u03C4\u03BF\u03CD\u03BD\u03C4\u03B1\u03B9 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03BC\u03B1\u03C2 \u03B2\u03BF\u03B7\u03B8\u03AE\u03C3\u03BF\u03C5\u03BD \u03BD\u03B1 \u03B1\u03C0\u03B1\u03BD\u03C4\u03AC\u03BC\u03B5 \u03C3\u03C4\u03B1 \u03C3\u03C7\u03CC\u03BB\u03B9\u03AC \u03C3\u03B1\u03C2.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "\u03A3\u03B5 \u03B5\u03C5\u03C7\u03B1\u03C1\u03B9\u03C3\u03C4\u03CE!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "\u0397 \u03B1\u03BD\u03B1\u03C6\u03BF\u03C1\u03AC \u03C3\u03B1\u03C2 \u03B8\u03B1 \u03BC\u03B1\u03C2 \u03B2\u03BF\u03B7\u03B8\u03AE\u03C3\u03B5\u03B9 \u03C3\u03C4\u03BF \u03BD\u03B1 \u03B2\u03B5\u03BB\u03C4\u03B9\u03CE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03B1 \u03C0\u03C1\u03BF\u03CA\u03CC\u03BD\u03C4\u03B1 \u03BC\u03B1\u03C2 \u03BA\u03B1\u03B9 \u03B8\u03B1 \u03BA\u03B1\u03C4\u03B1\u03C3\u03C4\u03AE\u03C3\u03B5\u03B9 \u03C4\u03B7\u03BD \u03B5\u03BC\u03C0\u03B5\u03B9\u03C1\u03AF\u03B1 \u03BA\u03B1\u03BB\u03CD\u03C4\u03B5\u03C1\u03B7 \u03B3\u03B9\u03B1 \u03AC\u03BB\u03BB\u03B1 \u03AC\u03C4\u03BF\u03BC\u03B1 \u03C0\u03BF\u03C5 \u03C7\u03C1\u03B7\u03C3\u03B9\u03BC\u03BF\u03C0\u03BF\u03B9\u03BF\u03CD\u03BD \u03C4\u03B9\u03C2 \u03C5\u03C0\u03B7\u03C1\u03B5\u03C3\u03AF\u03B5\u03C2 \u03BC\u03B1\u03C2.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "\u0395\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "\u0395\u03BD\u03B7\u03BC\u03AD\u03C1\u03C9\u03C3\u03B7 \u03C4\u03BF\u03C5 \u03BA\u03B1\u03C4\u03B1\u03BB\u03CC\u03B3\u03BF\u03C5 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "\u039F\u03B9 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AD\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2 \u03B5\u03AF\u03BD\u03B1\u03B9 <b>\u0395\u039D\u0395\u03A1\u0393\u0395\u03A3</b> \u03B3\u03B9\u03B1 \u03C4\u03BF\u03BD \u03C3\u03C5\u03B3\u03BA\u03B5\u03BA\u03C1\u03B9\u03BC\u03AD\u03BD\u03BF \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "\u039F\u03B9 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AD\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2 \u03B5\u03AF\u03BD\u03B1\u03B9 <b>\u0391\u039D\u0395\u039D\u0395\u03A1\u0393\u0395\u03A3</b> \u03B3\u03B9\u03B1 \u03C4\u03BF\u03BD \u03C3\u03C5\u03B3\u03BA\u03B5\u03BA\u03C1\u03B9\u03BC\u03AD\u03BD\u03BF \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "\u0391\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03B9\u03AE\u03C3\u03B1\u03BC\u03B5 \u03C0\u03C1\u03BF\u03C3\u03C9\u03C1\u03B9\u03BD\u03AC \u03C4\u03B9\u03C2 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C9\u03C0\u03B9\u03BA\u03CE\u03BD \u03B4\u03B5\u03B4\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD \u03BA\u03B1\u03B8\u03CE\u03C2 \u03C6\u03B1\u03AF\u03BD\u03B5\u03C4\u03B1\u03B9 \u03CC\u03C4\u03B9 \u03B4\u03B9\u03B1\u03BA\u03CC\u03C0\u03C4\u03BF\u03C5\u03BD \u03C4\u03B7 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1 \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "\u03A0\u03C1\u03BF\u03C4\u03B5\u03AF\u03BD\u03BF\u03C5\u03BC\u03B5 \u03BD\u03B1 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03B9\u03AE\u03C3\u03B5\u03C4\u03B5 \u03C4\u03B9\u03C2 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C9\u03C0\u03B9\u03BA\u03CE\u03BD \u03B4\u03B5\u03B4\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD \u03B3\u03B9' \u03B1\u03C5\u03C4\u03CC\u03BD \u03C4\u03BF\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF \u03CE\u03C3\u03C4\u03B5 \u03BD\u03B1 \u03B1\u03C0\u03BF\u03C4\u03C1\u03AD\u03C8\u03B5\u03C4\u03B5 \u03C4\u03B7 \u03B4\u03B9\u03B1\u03BA\u03BF\u03C0\u03AE \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1\u03C2 \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>O \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03B1\u03C5\u03C4\u03CC\u03C2 \u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B1\u03C3\u03C6\u03B1\u03BB\u03AE\u03C2</b> \u03BA\u03B1\u03B9 \u03B5\u03BD\u03B4\u03AD\u03C7\u03B5\u03C4\u03B1\u03B9 \u03BD\u03B1 \u03B8\u03AD\u03C3\u03B5\u03B9 \u03C3\u03B5 \u03BA\u03AF\u03BD\u03B4\u03C5\u03BD\u03BF \u03C4\u03B9\u03C2 \u03C0\u03BB\u03B7\u03C1\u03BF\u03C6\u03BF\u03C1\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03C3\u03C4\u03AD\u03BB\u03BD\u03B5\u03C4\u03B5 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C9\u03BD \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03C9\u03BD \u03C4\u03BF\u03BC\u03AD\u03C9\u03BD \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B5\u03C0\u03B5\u03B9\u03B4\u03AE \u03B1\u03BD\u03B1\u03B3\u03BD\u03C9\u03C1\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03C9\u03C2 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7. \u0395\u03AC\u03BD \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B9\u03B1\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1\u03C2 \u03AD\u03C7\u03BF\u03C5\u03BD \u03C6\u03BF\u03C1\u03C4\u03C9\u03B8\u03B5\u03AF, \u03AF\u03C3\u03C9\u03C2 \u03C4\u03BF\u03C5\u03C2 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03C5\u03BD \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "\u0394\u03B5\u03BD \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B5 \u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE. \u0395\u03AC\u03BD \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B9\u03B1\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1\u03C2 \u03AD\u03C7\u03BF\u03C5\u03BD \u03C6\u03BF\u03C1\u03C4\u03C9\u03B8\u03B5\u03AF, \u03AF\u03C3\u03C9\u03C2 \u03C4\u03BF\u03C5\u03C2 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03C5\u03BD \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "\u0394\u03B5\u03BD \u03B1\u03BD\u03B1\u03B3\u03BD\u03C9\u03C1\u03AF\u03C3\u03B1\u03BC\u03B5 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "\u0394\u03B5\u03BD \u03B2\u03C1\u03AE\u03BA\u03B1\u03BC\u03B5 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03BD\u03B1 \u03C0\u03C1\u03BF\u03C3\u03C0\u03B1\u03B8\u03BF\u03CD\u03BD \u03BD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03C3\u03BF\u03C5\u03BD \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "\u0393\u03B9\u03B1 \u03BD\u03B1 \u03B1\u03C0\u03BF\u03C6\u03CD\u03B3\u03BF\u03C5\u03BC\u03B5 \u03B4\u03B9\u03B1\u03BA\u03BF\u03C0\u03AE \u03C4\u03B7\u03C2 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1\u03C2 \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5, \u03B4\u03B5\u03BD \u03B5\u03BC\u03C0\u03BF\u03B4\u03AF\u03C3\u03B1\u03BC\u03B5 \u03BA\u03B1\u03BC\u03AF\u03B1 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 \u03BD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03C3\u03B5\u03B9 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "\u0394\u03B5\u03BD \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7, \u03BA\u03B1\u03B8\u03CE\u03C2 \u03BF\u03B9 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03B9\u03B7\u03BC\u03AD\u03BD\u03B5\u03C2 \u03B3\u03B9' \u03B1\u03C5\u03C4\u03CC\u03BD \u03C4\u03BF\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF. \u0395\u03AC\u03BD \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B9\u03B1\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1\u03C2 \u03AD\u03C7\u03BF\u03C5\u03BD \u03C6\u03BF\u03C1\u03C4\u03C9\u03B8\u03B5\u03AF, \u03AF\u03C3\u03C9\u03C2 \u03C4\u03BF\u03C5\u03C2 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03C5\u03BD \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "\u0394\u03B7\u03BC\u03B9\u03BF\u03C5\u03C1\u03B3\u03AE\u03C3\u03C4\u03B5 \u03B9\u03B4\u03B9\u03C9\u03C4\u03B9\u03BA\u03AE Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "\u0391\u03BD\u03C4\u03B9\u03B3\u03C1\u03AC\u03C6\u03C4\u03B7\u03BA\u03B5 \u03C3\u03C4\u03BF \u03C0\u03C1\u03CC\u03C7\u03B5\u03B9\u03C1\u03CC \u03C3\u03B1\u03C2!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "\u0394\u03B5\u03BD \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03B5\u03AF \u03BF \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03CC\u03C0\u03C9\u03C2 \u03B1\u03BD\u03B1\u03BC\u03B5\u03BD\u03CC\u03C4\u03B1\u03BD;", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "\u0394\u03B5\u03BD \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03B5\u03AF \u03BF \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2;", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "\u0391\u03BD\u03B1\u03C6\u03BF\u03C1\u03AC \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5 \u03C0\u03BF\u03C5 \u03B4\u03B5\u03BD \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03B5\u03AF", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "\u0397 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03C4\u03B7\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2 \u03BC\u03C0\u03BF\u03C1\u03B5\u03AF \u03BD\u03B1 \u03B2\u03BF\u03B7\u03B8\u03AE\u03C3\u03B5\u03B9.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "\u0395\u03BE\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03B5\u03AF \u03BD\u03B1 \u03BC\u03B7 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03B5\u03AF \u03BF \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2;", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "\u039B\u03AC\u03B2\u03B5\u03C4\u03B5 \u03BC\u03AD\u03C4\u03C1\u03B1 \u03C0\u03C1\u03BF\u03C6\u03CD\u03BB\u03B1\u03BE\u03B7\u03C2", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>\u039F \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03B1\u03C5\u03C4\u03CC\u03C2 \u03B1\u03BD\u03AE\u03BA\u03B5\u03B9 \u03C3\u03C4\u03B7\u03BD \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 {companyDisplayName}</b>, \u03B7 \u03BF\u03C0\u03BF\u03AF\u03B1 \u03B4\u03B9\u03B1\u03C7\u03B5\u03B9\u03C1\u03AF\u03B6\u03B5\u03C4\u03B1\u03B9 \u03AD\u03BD\u03B1 \u03B4\u03AF\u03BA\u03C4\u03C5\u03BF \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03C3\u03B5 \u03C0\u03BF\u03C3\u03BF\u03C3\u03C4\u03CC {companyPrevalence}% \u03C4\u03C9\u03BD \u03BA\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03C9\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03C9\u03BD. \u039A\u03B1\u03C4\u03B1\u03C6\u03AD\u03C1\u03B1\u03BC\u03B5 \u03BD\u03B1 \u03BC\u03C0\u03BB\u03BF\u03BA\u03AC\u03C1\u03BF\u03C5\u03BC\u03B5 \u03BF\u03C1\u03B9\u03C3\u03BC\u03AD\u03BD\u03B1 \u03B1\u03C0\u03CC \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03AC \u03C4\u03BF\u03C5\u03C2 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} other {<b>\u039F \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C2 \u03B1\u03C5\u03C4\u03CC\u03C2 \u03B1\u03BD\u03AE\u03BA\u03B5\u03B9 \u03C3\u03C4\u03B7\u03BD \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 {companyDisplayName}</b>, \u03B7 \u03BF\u03C0\u03BF\u03AF\u03B1 \u03B4\u03B9\u03B1\u03C7\u03B5\u03B9\u03C1\u03AF\u03B6\u03B5\u03C4\u03B1\u03B9 \u03AD\u03BD\u03B1 \u03B4\u03AF\u03BA\u03C4\u03C5\u03BF \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03C3\u03B5 \u03C0\u03BF\u03C3\u03BF\u03C3\u03C4\u03CC {companyPrevalence}% \u03C4\u03C9\u03BD \u03BA\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03C9\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03C9\u03BD. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03BF\u03C1\u03B9\u03C3\u03BC\u03AD\u03BD\u03B5\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03B3\u03B9\u03B1 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03B5 \u03B1\u03C5\u03C4\u03AE \u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1.} =2 {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 <b>{firstCompany}</b> \u03BA\u03B1\u03B9 <b>{secondCompany}</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} =3 {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 <b>{firstCompany}</b>, <b>{secondCompany}</b> \u03BA\u03B1\u03B9 <b>{thirdCompany}</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} =4 {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> \u03BA\u03B1\u03B9 <b>{fourthCompany}</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} =5 {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u03BA\u03B1\u03B9 <b>1 \u03B1\u03BA\u03CC\u03BC\u03B7</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} one {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B7\u03BD \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 <b>{firstCompany}</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.} other {\u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u03BA\u03B1\u03B9 <b>{othersCount} \u03B1\u03BA\u03CC\u03BC\u03B7</b> \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "\u0394\u03B9\u03B1\u03C7\u03B5\u03B9\u03C1\u03B9\u03B6\u03CC\u03BC\u03B5\u03BD\u03B1 cookies", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "\u039A\u03C1\u03C5\u03C6\u03CC \u03B1\u03BD\u03B1\u03B4\u03C5\u03CC\u03BC\u03B5\u03BD\u03BF \u03C0\u03B1\u03C1\u03AC\u03B8\u03C5\u03C1\u03BF cookie", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "\u039C\u03C0\u03BF\u03C1\u03AD\u03C3\u03B1\u03BC\u03B5 \u03BD\u03B1 \u03B1\u03C0\u03BF\u03BA\u03C1\u03CD\u03C8\u03BF\u03C5\u03BC\u03B5 \u03BC\u03CC\u03BD\u03BF \u03C4\u03BF \u03B1\u03BD\u03B1\u03B4\u03C5\u03CC\u03BC\u03B5\u03BD\u03BF \u03C0\u03B1\u03C1\u03AC\u03B8\u03C5\u03C1\u03BF cookie \u03C3\u03C4\u03BF\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF \u03B1\u03C5\u03C4\u03CC\u03BD \u03B5\u03C0\u03B5\u03B9\u03B4\u03AE \u03B4\u03B5\u03BD \u03C0\u03B1\u03C1\u03AD\u03C7\u03BF\u03BD\u03C4\u03B1\u03B9 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AD\u03C2 \u03B3\u03B9\u03B1 \u03B4\u03B9\u03B1\u03C7\u03B5\u03AF\u03C1\u03B9\u03C3\u03B7 \u03C4\u03C9\u03BD \u03C0\u03C1\u03BF\u03C4\u03B9\u03BC\u03AE\u03C3\u03B5\u03C9\u03BD cookie. \u039F\u03B9 \u03AC\u03BB\u03BB\u03B5\u03C2 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B9\u03C3\u03C4\u03BF\u03CD \u03B5\u03BE\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03BD\u03B1 \u03B9\u03C3\u03C7\u03CD\u03BF\u03C5\u03BD.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "\u03A1\u03C5\u03B8\u03BC\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03B9\u03C2 \u03C0\u03C1\u03BF\u03C4\u03B9\u03BC\u03AE\u03C3\u03B5\u03B9\u03C2 \u03C3\u03B1\u03C2 \u03C3\u03C7\u03B5\u03C4\u03B9\u03BA\u03AC \u03BC\u03B5 \u03C4\u03B1 cookie \u03CE\u03C3\u03C4\u03B5 \u03BD\u03B1 \u03BC\u03B5\u03B3\u03B9\u03C3\u03C4\u03BF\u03C0\u03BF\u03B9\u03AE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03BF \u03B1\u03C0\u03CC\u03C1\u03C1\u03B7\u03C4\u03BF \u03BA\u03B1\u03B9 \u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03C4\u03BF \u03B1\u03BD\u03B1\u03B4\u03C5\u03CC\u03BC\u03B5\u03BD\u03BF \u03C0\u03B1\u03C1\u03AC\u03B8\u03C5\u03C1\u03BF.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "\u0391\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03B1\u03C0\u03CC \u03C4\u03B9\u03C2 \u03A1\u03C5\u03B8\u03BC\u03AF\u03C3\u03B5\u03B9\u03C2", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "\u0397 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7 \u03B5\u03AF\u03BD\u03B1\u03B9 \u03BA\u03C1\u03C5\u03C0\u03C4\u03BF\u03B3\u03C1\u03B1\u03C6\u03B7\u03BC\u03AD\u03BD\u03B7", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "\u0397 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7 \u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03BA\u03C1\u03C5\u03C0\u03C4\u03BF\u03B3\u03C1\u03B1\u03C6\u03B7\u03BC\u03AD\u03BD\u03B7", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "\u0391\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C0\u03BF\u03C5 \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03B1\u03C0\u03CC \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "\u0394\u03B5\u03BD \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "\u0394\u03B5\u03BD \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B1\u03BD \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "\u0391\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD \u03C0\u03BF\u03C5 \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD", note: "todo" }, thirdPartiesNoneFound: { title: "\u0394\u03B5\u03BD \u03AD\u03C7\u03BF\u03C5\u03BD \u03B2\u03C1\u03B5\u03B8\u03B5\u03AF \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "\u0397 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 {companyName} \u03B1\u03C0\u03BF\u03C4\u03B5\u03BB\u03B5\u03AF \u03BA\u03AC\u03C4\u03BF\u03C7\u03BF \u03B1\u03C5\u03C4\u03BF\u03CD \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5 \u03BA\u03B1\u03B9 \u03C4\u03C9\u03BD \u03B3\u03BD\u03C9\u03C3\u03C4\u03CE\u03BD \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03CE\u03BD \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03C0\u03BF\u03C5 \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B1\u03BD \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE, \u03B3\u03B9' \u03B1\u03C5\u03C4\u03CC \u03B4\u03B5\u03BD \u03C4\u03B1 \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "\u0394\u03B5\u03BD \u03B2\u03C1\u03AE\u03BA\u03B1\u03BC\u03B5 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03C0\u03BF\u03C5 \u03BD\u03B1 \u03C0\u03C1\u03BF\u03C3\u03C0\u03B1\u03B8\u03BF\u03CD\u03BD \u03BD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03C3\u03BF\u03C5\u03BD \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B5 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 \u03B1\u03C5\u03C4\u03AE.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "\u039F\u03B9 \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B2\u03BF\u03B7\u03B8\u03BF\u03CD\u03BD \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2. \u0392\u03C1\u03AE\u03BA\u03B1\u03BC\u03B5 \u03B1\u03C5\u03C4\u03AD\u03C2 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03BF\u03B9 \u03BF\u03C0\u03BF\u03AF\u03B5\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03C4\u03B7 \u03B4\u03C1\u03B1\u03C3\u03C4\u03B7\u03C1\u03B9\u03CC\u03C4\u03B7\u03C4\u03AC \u03C3\u03B1\u03C2 \u03C3\u03C4\u03B7 \u03C3\u03C5\u03B3\u03BA\u03B5\u03BA\u03C1\u03B9\u03BC\u03AD\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "\u039F\u03B9 \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B2\u03BF\u03B7\u03B8\u03BF\u03CD\u03BD \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2. \u0391\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03B1\u03BC\u03B5 \u03B1\u03C5\u03C4\u03AD\u03C2 \u03C4\u03B9\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B5\u03C2 \u03B1\u03C0\u03CC \u03C4\u03BF \u03BD\u03B1 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03C4\u03B7 \u03B4\u03C1\u03B1\u03C3\u03C4\u03B7\u03C1\u03B9\u03CC\u03C4\u03B7\u03C4\u03AC \u03C3\u03B1\u03C2 \u03C3\u03C4\u03B7 \u03C3\u03C5\u03B3\u03BA\u03B5\u03BA\u03C1\u03B9\u03BC\u03AD\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "\u0386\u03B3\u03BD\u03C9\u03C3\u03C4\u03BF \u03B4\u03AF\u03BA\u03C4\u03C5\u03BF \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "\u03A4\u03BF\u03BC\u03B5\u03AF\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B3\u03B9\u03B1 \u03C4\u03B7\u03BD \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1 {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "\u0392\u03C1\u03AD\u03B8\u03B7\u03BA\u03B1\u03BD 0 \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "\u0395\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03C0\u03BF\u03C5 \u03B1\u03BD\u03AE\u03BA\u03BF\u03C5\u03BD \u03C3\u03B5 \u03B1\u03C5\u03C4\u03CC\u03BD \u03C4\u03BF\u03BD \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF (\u0395\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03BD\u03C4\u03B1\u03B9)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AE \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B1\u03C0\u03BF\u03BA\u03BB\u03B5\u03AF\u03C3\u03C4\u03B7\u03BA\u03B5 \u03C3\u03C4\u03BF {domain}} other {{trackerCount} \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03BC\u03C0\u03BB\u03BF\u03BA\u03B1\u03C1\u03AF\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03C3\u03C4\u03BF {domain}}}} other {{trackerCount, plural, one {{trackerCount} \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AE \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B5 \u03C3\u03C4\u03BF {domain}} other {{trackerCount} \u03B5\u03C6\u03B1\u03C1\u03BC\u03BF\u03B3\u03AD\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B1\u03BD \u03C3\u03C4\u03BF {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "\u03A3\u03B7\u03BC\u03B5\u03AF\u03C9\u03C3\u03B7: \u03BF\u03B9 \u03C0\u03B5\u03C1\u03B9\u03BF\u03C1\u03B9\u03C3\u03BC\u03BF\u03AF \u03C4\u03B7\u03C2 \u03C0\u03BB\u03B1\u03C4\u03C6\u03CC\u03C1\u03BC\u03B1\u03C2 \u03B5\u03BD\u03B4\u03AD\u03C7\u03B5\u03C4\u03B1\u03B9 \u03BD\u03B1 \u03C0\u03B5\u03C1\u03B9\u03BF\u03C1\u03AF\u03C3\u03BF\u03C5\u03BD \u03C4\u03B7\u03BD \u03B9\u03BA\u03B1\u03BD\u03CC\u03C4\u03B7\u03C4\u03AC \u03BC\u03B1\u03C2 \u03B3\u03B9\u03B1 \u03B5\u03BD\u03C4\u03BF\u03C0\u03B9\u03C3\u03BC\u03CC \u03CC\u03BB\u03C9\u03BD \u03C4\u03C9\u03BD \u03B1\u03B9\u03C4\u03B7\u03BC\u03AC\u03C4\u03C9\u03BD.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "\u03A3\u03C7\u03B5\u03C4\u03B9\u03BA\u03AC \u03BC\u03B5 \u03C4\u03B9\u03C2 \u03A0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2 \u03B9\u03C3\u03C4\u03BF\u03CD", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "\u03A0\u03CE\u03C2 \u03B5\u03C0\u03B7\u03C1\u03B5\u03AC\u03B6\u03BF\u03C5\u03BD \u03BF\u03B9 \u03B4\u03B9\u03B1\u03C6\u03B7\u03BC\u03AF\u03C3\u03B5\u03B9\u03C2 \u03B1\u03BD\u03B1\u03B6\u03AE\u03C4\u03B7\u03C3\u03B7\u03C2 \u03C4\u03B9\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03BC\u03B1\u03C2", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03BF\u03C5 \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03BF\u03C5 \u03C4\u03BF\u03BC\u03AD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD \u03B5\u03C0\u03B5\u03B9\u03B4\u03AE \u03AD\u03B3\u03B9\u03BD\u03B5 \u03C0\u03C1\u03CC\u03C3\u03C6\u03B1\u03C4\u03B1 \u03BA\u03BB\u03B9\u03BA \u03C3\u03B5 \u03BC\u03B9\u03B1 \u03B4\u03B9\u03B1\u03C6\u03AE\u03BC\u03B9\u03C3\u03B7 {domain} \u03C3\u03C4\u03BF DuckDuckGo. \u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03B1\u03C5\u03C4\u03AC \u03B2\u03BF\u03B7\u03B8\u03BF\u03CD\u03BD \u03C3\u03C4\u03B7\u03BD \u03B1\u03BE\u03B9\u03BF\u03BB\u03CC\u03B3\u03B7\u03C3\u03B7 \u03C4\u03B7\u03C2 \u03B1\u03C0\u03BF\u03C4\u03B5\u03BB\u03B5\u03C3\u03BC\u03B1\u03C4\u03B9\u03BA\u03CC\u03C4\u03B7\u03C4\u03B1\u03C2 \u03C4\u03C9\u03BD \u03B4\u03B9\u03B1\u03C6\u03B7\u03BC\u03AF\u03C3\u03B5\u03C9\u03BD. \u039A\u03B1\u03BC\u03AF\u03B1 \u03B4\u03B9\u03B1\u03C6\u03AE\u03BC\u03B9\u03C3\u03B7 \u03C3\u03C4\u03BF DuckDuckGo \u03B4\u03B5\u03BD \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03B5\u03AF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03BF\u03C5 \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03BF\u03C5 \u03C4\u03BF\u03BC\u03AD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03B1\u03C0\u03BF\u03C6\u03B5\u03C5\u03C7\u03B8\u03B5\u03AF \u03B7 \u03B4\u03B9\u03B1\u03BA\u03BF\u03C0\u03AE \u03C4\u03B7\u03C2 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1\u03C2 \u03C4\u03BF\u03C5 \u03B9\u03C3\u03C4\u03CC\u03C4\u03BF\u03C0\u03BF\u03C5.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03BF\u03C5 \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03BF\u03C5 \u03C4\u03BF\u03BC\u03AD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD \u03B5\u03C0\u03B5\u03B9\u03B4\u03AE \u03C3\u03C7\u03B5\u03C4\u03AF\u03B6\u03BF\u03BD\u03C4\u03B1\u03B9 \u03BC\u03B5 \u03C4\u03BF {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "\u03A6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD \u03B5\u03C0\u03AF\u03C3\u03B7\u03C2 \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03BF\u03C5 \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03BF\u03C5 \u03C4\u03BF\u03BC\u03AD\u03B1." }, sectionHeadingProtectionsDisabled: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C9\u03BD \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03C9\u03BD \u03C4\u03BF\u03BC\u03AD\u03C9\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD \u03B5\u03C0\u03B5\u03B9\u03B4\u03AE \u03BF\u03B9 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B1\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03B9\u03B7\u03BC\u03AD\u03BD\u03B5\u03C2.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C9\u03BD \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03C9\u03BD \u03C4\u03BF\u03BC\u03AD\u03C9\u03BD \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD. \u0395\u03AC\u03BD \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B9\u03B1\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1\u03C2 \u03AD\u03C7\u03BF\u03C5\u03BD \u03C6\u03BF\u03C1\u03C4\u03C9\u03B8\u03B5\u03AF, \u03AF\u03C3\u03C9\u03C2 \u03C4\u03BF\u03C5\u03C2 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03C5\u03BD \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2, \u03BC\u03BF\u03BB\u03BF\u03BD\u03CC\u03C4\u03B9 \u03B5\u03BE\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03BD\u03B1 \u03B9\u03C3\u03C7\u03CD\u03BF\u03C5\u03BD \u03BF\u03B9 \u03AC\u03BB\u03BB\u03B5\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03BC\u03B1\u03C2 \u03B3\u03B9\u03B1 \u03C4\u03B7\u03BD \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03BF \u03B4\u03B9\u03B1\u03B4\u03AF\u03BA\u03C4\u03C5\u03BF.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "\u03A4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03C4\u03C9\u03BD \u03B1\u03BA\u03CC\u03BB\u03BF\u03C5\u03B8\u03C9\u03BD \u03C4\u03BF\u03BC\u03AD\u03C9\u03BD \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD \u03C6\u03BF\u03C1\u03C4\u03CE\u03B8\u03B7\u03BA\u03B1\u03BD. \u0395\u03AC\u03BD \u03C4\u03B1 \u03B1\u03B9\u03C4\u03AE\u03BC\u03B1\u03C4\u03B1 \u03BC\u03B9\u03B1\u03C2 \u03B5\u03C4\u03B1\u03B9\u03C1\u03B5\u03AF\u03B1\u03C2 \u03AD\u03C7\u03BF\u03C5\u03BD \u03C6\u03BF\u03C1\u03C4\u03C9\u03B8\u03B5\u03AF, \u03AF\u03C3\u03C9\u03C2 \u03C4\u03BF\u03C5\u03C2 \u03B5\u03C0\u03B9\u03C4\u03C1\u03AD\u03C0\u03BF\u03C5\u03BD \u03BD\u03B1 \u03C3\u03BA\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE\u03C3\u03BF\u03C5\u03BD \u03C4\u03BF \u03C0\u03C1\u03BF\u03C6\u03AF\u03BB \u03C3\u03B1\u03C2, \u03BC\u03BF\u03BB\u03BF\u03BD\u03CC\u03C4\u03B9 \u03B5\u03BE\u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD \u03BD\u03B1 \u03B9\u03C3\u03C7\u03CD\u03BF\u03C5\u03BD \u03BF\u03B9 \u03AC\u03BB\u03BB\u03B5\u03C2 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B5\u03C2 \u03BC\u03B1\u03C2 \u03B3\u03B9\u03B1 \u03C4\u03B7\u03BD \u03C0\u03B1\u03C1\u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7 \u03C3\u03C4\u03BF \u03B4\u03B9\u03B1\u03B4\u03AF\u03BA\u03C4\u03C5\u03BF.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "\u0394\u03B5\u03BD \u03B5\u03BD\u03C4\u03BF\u03C0\u03AF\u03C3\u03B1\u03BC\u03B5 \u03BA\u03B1\u03BD\u03AD\u03BD\u03B1 \u03B1\u03AF\u03C4\u03B7\u03BC\u03B1 \u03B1\u03C0\u03CC \u03C4\u03BF\u03BC\u03B5\u03AF\u03C2 \u03C4\u03C1\u03AF\u03C4\u03C9\u03BD \u03BC\u03B5\u03C1\u03CE\u03BD.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "\u0391\u03BD\u03AC\u03BB\u03C5\u03C3\u03B7", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "\u03B4\u03B9\u03B1\u03C6\u03AE\u03BC\u03B9\u03C3\u03B7", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "\u039A\u03BF\u03B9\u03BD\u03C9\u03BD\u03B9\u03BA\u03CC \u03B4\u03AF\u03BA\u03C4\u03C5\u03BF", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "\u03A0\u03B1\u03C1\u03AC\u03B4\u03BF\u03C3\u03B7 \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03BF\u03BC\u03AD\u03BD\u03BF\u03C5", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "\u0395\u03BD\u03C3\u03C9\u03BC\u03B1\u03C4\u03C9\u03BC\u03AD\u03BD\u03BF \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03CC\u03BC\u03B5\u03BD\u03BF", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "\u0391\u03BD\u03B1\u03B6\u03AE\u03C4\u03B7\u03C3\u03B7 DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "\u0391\u03BD\u03B1\u03B6\u03AE\u03C4\u03B7\u03C3\u03B7", note: "Aria label for the search button" }, optionsButton: { title: "\u03A0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03B5\u03C2 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AD\u03C2", note: "Aria label for the for the options button" }, navigationComplete: { title: "\u039F\u03BB\u03BF\u03BA\u03BB\u03B7\u03C1\u03CE\u03B8\u03B7\u03BA\u03B5", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "\u03A0\u03AF\u03C3\u03C9", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "\u0395\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "\u0391\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03C0\u03C1\u03BF\u03C3\u03C4\u03B1\u03C3\u03AF\u03B1\u03C2", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "\u039A\u03AC\u03C4\u03B9 \u03C0\u03AE\u03B3\u03B5 \u03BB\u03AC\u03B8\u03BF\u03C2 \u03BA\u03B1\u03B9 \u03B4\u03B5\u03BD \u03BC\u03C0\u03BF\u03C1\u03AD\u03C3\u03B1\u03BC\u03B5 \u03BD\u03B1 \u03C6\u03BF\u03C1\u03C4\u03CE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03BF \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03CC\u03BC\u03B5\u03BD\u03BF \u03B1\u03C5\u03C4\u03CC. \u03A0\u03C1\u03BF\u03C3\u03C0\u03B1\u03B8\u03AE\u03C3\u03C4\u03B5 \u03BD\u03B1 \u03B5\u03C0\u03B1\u03BD\u03B1\u03BB\u03AC\u03B2\u03B5\u03C4\u03B5 \u03C4\u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03C4\u03B7\u03C2 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1\u03C2.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, en: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Encrypt", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Sign", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verify", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Derive", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Wrap", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Unwrap", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Unknown", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Security Certificate Detail", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Common Name", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Public Key", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algorithm", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Key Size", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Usage", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Summary", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effective Size", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificate not found", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificate for {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "This page is using an unencrypted connection. Third parties may be able to view your activity or intercept sensitive information you send on this page.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "We upgraded the connection on this page to protect information you send while in transit.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "This page uses an encrypted connection, which prevents third parties from viewing your activity or intercepting sensitive information you send on this page.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Privacy Protections are not available for special pages or local pages.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Love using DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Help us spread the word to your family and friends", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Spread DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Tired of emails being tracked?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Sign up for DuckDuckGo Email Protection for your extension now!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Close Tabs and Clear Data", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Clear Data", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Current site only", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Last hour", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Last 24 hours", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Last 7 days", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Last 4 weeks", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "All time", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {one hour} day {24 hours} week {one week} month {4 weeks} other {all} }", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "Close <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>{durationDesc}</b> of browsing history and cookies?", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "Close <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>{durationDesc}</b> of cookies?", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Clear <b>{durationDesc}</b> of browsing history and cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Clear <b>{durationDesc}</b> of cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Close <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>all</b> browsing history and cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Close <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>all</b> cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "Clear <b>all</b> browsing history and cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "Clear <b>all</b> cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "Close <b>{openTabs} {site}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>all {site}</b> cookies?", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "Close <b>{openTabs} {site}</b> {openTabs, plural, =1 {tab} other {tabs}}, and clear <b>all {site}</b> cookies?", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Clear <b>all {site}</b> browsing history and cookies?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Clear <b>all {site}</b> cookies?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "<b>{tabs} pinned</b> {tabs, plural, =1 {tab} other {tabs}} will be ignored.", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Clear", note: "Button text to start data clearing." }, cancel: { title: "Cancel", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "To also clear history, select a time period.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Camera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Microphone", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolocation", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pop-ups", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Ask every time", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Notify", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Always allow", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Always deny", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Submitting an anonymous broken site report helps us improve the app.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Describe what happened", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Site blocked or didn't load", note: "User is reporting this page because the page didn't load" }, layout: { title: "Site layout broken", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Site contains large empty spaces", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video didn\u2019t play or load", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Images didn't load", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Comments, reviews, or chats didn\u2019t load", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Content is missing", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Links or buttons don't work", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Can\u2019t sign in/register", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Can't pay, check out, or shop", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Browser or other browser extension issue", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Site asked me to disable ad blocker", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Something else", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Share more details (optional):{bullet}What happened?{bullet}What should have happened?{bullet}Did turning protections off help?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Send Report", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Reports sent to DuckDuckGo only include info required to help us address your feedback.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Thank you!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Your report will help improve our products and make the experience better for other people.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Updating protection list", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Protections are <b>ON</b> for this site", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Protections are <b>OFF</b> for this site", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "We temporarily turned Privacy Protections off as they appear to be breaking this site.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "We recommend disabling Privacy Protections for this site to prevent the site from breaking.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>This site is not secure</b> and may compromise any information you send on this page.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "The following third-party domains\u2019 requests were blocked from loading because they were identified as tracking requests. If a company's requests are loaded, it can allow them to profile you.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "No tracking requests were blocked from loading on this page. If a company's requests are loaded, it can allow them to profile you.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "We did not identify any tracking requests on this page.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "We didn't find any companies trying to load tracking requests on this page.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "To prevent site breakage, we didn\u2019t block any companies from loading tracking requests on this page.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "No tracking requests were blocked from loading because Protections are turned off for this site. If a company's requests are loaded, it can allow them to profile you.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generate Private Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Copied to your clipboard!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Website not working as expected?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Website not working?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Report broken site", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Turning protections OFF might help.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Site still not working?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Take Precautions", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "<b>This site is owned by {companyDisplayName}</b>, which operates a tracker network across {companyPrevalence}% of the top websites. {blocked, select, true {We were able to block some of their requests on this page.} other {}}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "We blocked {companyCount, plural, =0 {some companies} =1 {<b>{firstCompany}</b>} =2 {<b>{firstCompany}</b> and <b>{secondCompany}</b>} =3 {<b>{firstCompany}</b>, <b>{secondCompany}</b> and <b>{thirdCompany}</b>} =4 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> and <b>{fourthCompany}</b>} =5 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> and <b>1 other</b>} other {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> and <b>{othersCount} others</b>}} from loading tracking requests on this page.", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies Managed", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Cookie Pop-up Hidden", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "We were only able to hide the cookie pop-up on this site because no options were provided to manage cookie preferences. Our other Web Tracking Protections still apply.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "We set your cookie preferences to maximize privacy and closed the pop-up.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Disable in Settings", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Connection Is Encrypted", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Connection Is Not Encrypted", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Requests Blocked from Loading", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "No Tracking Requests Blocked", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "No Tracking Requests Found", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Third-Party Requests Loaded", note: "todo" }, thirdPartiesNoneFound: { title: "No Third-Party Requests Found", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} owns this site and the known trackers found on this page, so we didn't block them.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "We didn't find any companies trying to load tracking requests on this page.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Trackers help companies profile you. We found these companies monitoring your activity on this page.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Trackers help companies profile you. We blocked these companies from monitoring your activity on this page.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tracker network unknown", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Tracker domains for {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 Trackers Found", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Trackers Owned by This Site (Allowed)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{trackerCount} {trackerCount, plural, =1 {Tracker} other {Trackers}} {blocked, select, true {Blocked} other {Found}} on {domain}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Please note: platform limitations may limit our ability to detect all requests.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "About our Web Tracking Protections", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "How our search ads impact our protections", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "The following domain\u2019s requests were loaded because a {domain} ad on DuckDuckGo was recently clicked. These requests help evaluate ad effectiveness. All ads on DuckDuckGo are non-profiling.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "The following domains\u2019 requests were loaded to prevent site breakage.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "The following domains\u2019 requests were loaded because they\u2019re associated with {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "The following domains' requests were also loaded." }, sectionHeadingProtectionsDisabled: { title: "The following domains' requests were loaded because protections are off.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "The following third-party domains\u2019 requests were loaded. If a company's requests are loaded, it can allow them to profile you, though our other web tracking protections still apply.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "The following third-party domains\u2019 requests were loaded. If a company's requests are loaded, it can allow them to profile you, though our other web tracking protections still apply.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "We did not identify any requests from third-party domains.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analytics", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Advertising", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Social Network", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Content Delivery", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Embedded Content", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Search DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Search", note: "Aria label for the search button" }, optionsButton: { title: "More options", note: "Aria label for the for the options button" }, navigationComplete: { title: "Done", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Back", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Enable Protections", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Disable Protections", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Something went wrong, and we couldn't load this content. Try reloading the page.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, es: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Cifrar", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Firmar", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verificar", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Derivar", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Envolver", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Desenvolver", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Desconocido", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detalle del certificado de seguridad", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Nombre com\xFAn", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Clave p\xFAblica", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmo", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Tama\xF1o de la clave", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Uso", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Resumen", note: "Header for summary of connection details" }, permanent: { title: "Permanente", note: "Whether certificate is permanent" }, effectiveSize: { title: "Tama\xF1o efectivo", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "No se ha encontrado el certificado", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificado de {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Esta p\xE1gina utiliza una conexi\xF3n sin cifrar. Es posible que terceros puedan ver tu actividad o interceptar informaci\xF3n confidencial que env\xEDes en esta p\xE1gina.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Hemos mejorado la conexi\xF3n de esta p\xE1gina para proteger la informaci\xF3n que env\xEDas mientras est\xE1s en tr\xE1nsito.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Esta p\xE1gina utiliza una conexi\xF3n cifrada que evita que terceros vean tu actividad o intercepten informaci\xF3n confidencial que env\xEDes en esta p\xE1gina.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Las protecciones de privacidad no est\xE1n disponibles para p\xE1ginas especiales o locales.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\xBFTe encanta usar DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Ay\xFAdanos cont\xE1ndoselo a tu familia y amigos", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Difunde DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "\xBFCansado de que te rastreen los correos electr\xF3nicos?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "\xA1Suscr\xEDbete y recibir\xE1s DuckDuckGo Email Protection para tu extensi\xF3n!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Cerrar pesta\xF1as y borrar datos", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Borrar datos", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Solo sitio actual", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "\xDAltima hora", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "\xDAltimas 24 horas", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "\xDAltimos 7 d\xEDas", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "\xDAltimas 4 semanas", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Siempre", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {una hora} day {24 horas} week {una semana} month {4 semanas} other {Todo}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\xBFCerrar <b>{openTabs}</b> pesta\xF1a y borrar <b>{durationDesc}</b> del historial de navegaci\xF3n y las cookies?} other {\xBFCerrar <b>{openTabs}</b> pesta\xF1as y borrar <b>{durationDesc}</b> del historial de navegaci\xF3n y las cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\xBFCerrar <b>{openTabs}</b> pesta\xF1a y borrar <b>{durationDesc}</b> de las cookies?} other {\xBFCerrar <b>{openTabs}</b> pesta\xF1as y borrar <b>{durationDesc}</b> de las cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\xBFBorrar <b>{durationDesc}</b> del historial de navegaci\xF3n y las cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\xBFBorrar <b>{durationDesc}</b> de las cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\xBFCerrar <b>{openTabs}</b> {openTabs, plural, =1 {pesta\xF1a} other {pesta\xF1as}} y borrar <b>todo</b> el historial de navegaci\xF3n y cookies ({cookies} {cookies, plural, =1 {sitio} other {sitios}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\xBFCerrar <b>{openTabs}</b> {openTabs, plural, =1 {pesta\xF1a} other {pesta\xF1as}} y borrar <b>todas</b> las cookies ({cookies} {cookies, plural, =1 {sitios} other {sitios}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\xBFBorrar <b>todo</b> el historial de navegaci\xF3n y las cookies ({cookies} sitios)?} other {\xBFBorrar <b>todo</b> el historial de navegaci\xF3n y las cookies (sitios de {cookies})?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\xBFBorrar <b>todas</b> las cookies (sitio de {cookies})?} other {\xBFBorrar <b>todas</b> las cookies (sitios de {cookies})?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\xBFCerrar <b>{site} {openTabs}</b> pesta\xF1a y borrar <b>todas las cookies de {site}</b>?} other {\xBFCerrar <b>{site} {openTabs} </b> pesta\xF1as y borrar <b>todas las cookies de {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\xBFCerrar <b>{openTabs} pesta\xF1a de {site}</b> y borrar <b>todas las cookies de {site}</b>?} other {\xBFCerrar <b>{openTabs} pesta\xF1as de {site}</b> y borrar <b>todas las cookies de {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\xBFBorrar <b>todo el historial de navegaci\xF3n y las cookies de {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\xBFBorrar <b>todas las cookies de {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {Se ignorar\xE1 <b>{tabs} pesta\xF1a anclada</b>.} other {Se ignorar\xE1n<b>{tabs} pesta\xF1as ancladas</b>.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Borrar", note: "Button text to start data clearing." }, cancel: { title: "Cancelar", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Para borrar tambi\xE9n el historial, selecciona un periodo de tiempo.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "C\xE1mara", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Micr\xF3fono", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolocalizaci\xF3n", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Ventanas emergentes", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Preguntar cada vez", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Notificar", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Permitir siempre", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Rechazar siempre", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Enviar un informe an\xF3nimo de sitio da\xF1ado nos ayuda a mejorar la aplicaci\xF3n.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Describe qu\xE9 ha pasado", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Sitio bloqueado o no cargado", note: "User is reporting this page because the page didn't load" }, layout: { title: "Dise\xF1o del sitio da\xF1ado", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "El sitio contiene grandes espacios vac\xEDos", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "No se ha reproducido o cargado el v\xEDdeo", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Las im\xE1genes no se cargaron", note: "User is reporting this page because one or more images did not load" }, comments: { title: "No se han cargado comentarios, rese\xF1as o chats", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Falta contenido", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Los enlaces o botones no funcionan", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "No se puede iniciar sesi\xF3n/registrarse", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "No se puede pagar, pasar por caja o comprar", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Incidencia con el navegador u otra extensi\xF3n de navegador", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "El sitio me ha pedido desactivar el bloqueador de anuncios", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Otro problema", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Comparte m\xE1s detalles (opcional):{bullet}\xBFQu\xE9 ha pasado?{bullet}\xBFQu\xE9 \xBFdeber\xEDa haber pasado?{bullet}\xBFAyud\xF3 el hecho dedesactivar las protecciones?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Enviar informe", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Los informes enviados a DuckDuckGo solo incluyen la informaci\xF3n necesaria para ayudarnos a responder a tus comentarios.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "\xA1Gracias!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Tu informe ayudar\xE1 a mejorar nuestros productos y la experiencia para otras personas.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Rastreadores", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Actualizando la lista de protecci\xF3n", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Las protecciones est\xE1n <b>ACTIVADAS</b> para este sitio", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Las protecciones est\xE1n <b>DESACTIVADAS</b> para este sitio", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Hemos desactivado temporalmente las protecciones de privacidad, ya que parece que est\xE1n causando errores en este sitio.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Recomendamos desactivar las protecciones de privacidad para evitar errores en el sitio.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Este sitio no es seguro</b> y puede comprometer cualquier informaci\xF3n que env\xEDes en esta p\xE1gina.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Se ha bloqueado la carga de las siguientes solicitudes de dominios de terceros porque se han identificado como solicitudes con rastreo. Si se cargan las solicitudes de una empresa, se les permite elaborar un perfil tuyo.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "No se ha bloqueado la carga de solicitudes con rastreo en esta p\xE1gina. Si se cargan las solicitudes de una empresa, se les permite elaborar un perfil tuyo.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "No hemos identificado ninguna solicitud con rastreo en esta p\xE1gina.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "No hemos encontrado ninguna empresa que haya intentado cargar solicitudes con rastreo en esta p\xE1gina.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Para evitar interrupciones en el sitio, no bloqueamos la carga de ninguna empresa de solicitudes con rastreo en esta p\xE1gina.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "No se ha bloqueado la carga de solicitudes con rastreo porque las protecciones est\xE1n desactivadas para este sitio. Si se cargan las solicitudes de una empresa, se les permite elaborar un perfil tuyo.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generar Duck Address privada", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "\xA1Copiado en tu portapapeles!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "\xBFEl sitio web no funciona como esperabas?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "\xBFEl sitio web no funciona?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Informar de sitio web da\xF1ado", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Puede que, si desactivas las protecciones, funcione.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "\xBFEl sitio sigue sin funcionar?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Toma precauciones", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Este sitio es propiedad de {companyDisplayName}</b>, que opera una red de rastreadores en el {companyPrevalence} % de los principales sitios web. Hemos podido bloquear algunas de sus solicitudes en esta p\xE1gina.} other {<b>Este sitio es propiedad de {companyDisplayName}</b>, que opera una red de rastreadores en el {companyPrevalence} % de los principales sitios web. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Hemos bloqueado la carga de solicitudes con rastreo de algunas empresas en esta p\xE1gina.} =2 {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b> y <b>{secondCompany}</b> en esta p\xE1gina.} =3 {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b>, <b>{secondCompany}</b> y <b>{thirdCompany}</b> en esta p\xE1gina.} =4 {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> y <b>{fourthCompany}</b> en esta p\xE1gina.} =5 {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> y <b>una empresa m\xE1s</b> en esta p\xE1gina.} one {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b> en esta p\xE1gina.} other {Hemos bloqueado la carga de solicitudes con rastreo de <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> y <b>{othersCount} m\xE1s</b> en esta p\xE1gina.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies gestionadas", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Ventana emergente de cookies oculta", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "En este sitio solo hemos podido ocultar la ventana emergente de cookies porque no se han proporcionado opciones para gestionar las preferencias de cookies. Nuestras otras protecciones de rastreo web siguen en funcionamiento.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Hemos configurado tus preferencias de cookies para maximizar la privacidad y hemos cerrado la ventana emergente.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Desactivar en Ajustes", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "La conexi\xF3n est\xE1 cifrada", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "La conexi\xF3n no est\xE1 cifrada", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Solicitudes cuya carga se ha bloqueado", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "No se han bloqueado solicitudes con rastreo", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "No se han encontrado solicitudes con rastreo", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Solicitudes de terceros cargadas", note: "todo" }, thirdPartiesNoneFound: { title: "No se han encontrado solicitudes de terceros", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} es el propietario de este sitio y de los rastreadores conocidos encontrados en esta p\xE1gina, por lo que no los hemos bloqueado.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "No hemos encontrado ninguna empresa que haya intentado cargar solicitudes con rastreo en esta p\xE1gina.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Los rastreadores ayudan a las empresas a elaborar tu perfil. Hemos encontrado a estas empresas realizando un seguimiento de tu actividad en esta p\xE1gina.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Los rastreadores ayudan a las empresas a elaborar tu perfil. Hemos bloqueado a estas empresas para que no controlen tu actividad en esta p\xE1gina.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Red de rastreadores desconocida", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Dominios de rastreadores de {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 rastreadores encontrados", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Rastreadores propiedad de este sitio (permitidos)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} rastreador bloqueado en {domain}} other {{trackerCount} rastreadores bloqueados en {domain}}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado en {domain}} other {{trackerCount} rastreadores encontrados en {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Ten en cuenta que las limitaciones de la plataforma pueden restringir nuestra capacidad para detectar todas las solicitudes.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Acerca de nuestras protecciones de rastreo en la web", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "C\xF3mo afectan nuestros anuncios de b\xFAsqueda a nuestras protecciones", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Las siguientes solicitudes de dominio se han cargado porque recientemente se ha hecho clic en un anuncio de {domain} en DuckDuckGo. Estas solicitudes ayudan a evaluar la efectividad de los anuncios. Todos los anuncios en DuckDuckGo son del tipo que no permite perfilado.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Se han cargado las siguientes solicitudes de dominio para evitar la interrupci\xF3n del sitio.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Las solicitudes de los siguientes dominios se han cargado porque est\xE1n asociadas a {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Tambi\xE9n se han cargado las siguientes solicitudes de dominios." }, sectionHeadingProtectionsDisabled: { title: "Las solicitudes de los siguientes dominios se han cargado porque las protecciones est\xE1n desactivadas.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Se han cargado las siguientes solicitudes de dominios de terceros. Si se cargan las solicitudes de una empresa, esto puede permitirles elaborar un perfil tuyo, aunque siga aplic\xE1ndose el resto de nuestras protecciones de seguimiento en la web.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Se han cargado las siguientes solicitudes de dominios de terceros. Si se cargan las solicitudes de una empresa, esto puede permitirles elaborar un perfil tuyo, aunque siga aplic\xE1ndose el resto de nuestras protecciones de seguimiento en la web.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "No hemos identificado ninguna solicitud de dominios de terceros.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "An\xE1lisis", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Publicidad", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Red social", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Entrega de contenido", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Contenido incrustado", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Buscar en DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Buscar", note: "Aria label for the search button" }, optionsButton: { title: "M\xE1s opciones", note: "Aria label for the for the options button" }, navigationComplete: { title: "Hecho", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Volver", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Activar protecciones", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Desactivar protecciones", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Se ha producido un error y no hemos podido cargar este contenido. Intenta volver a cargar la p\xE1gina.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, et: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Kr\xFCpteeri", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Logi sisse", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Kinnita", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Tuleta", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Paki", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Paki lahti", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Tundmatu", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Turvasertifikaadi \xFCksikasjad", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "\xDCldine nimi", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Avalik v\xF5ti", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritm", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "V\xF5tme suurus", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Kasutamine", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Kokkuv\xF5te", note: "Header for summary of connection details" }, permanent: { title: "P\xFCsiv", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efektiivne suurus", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Sertifikaati ei leitud", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Domeeni {domain} sertifikaat", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "See leht kasutab kr\xFCptimata \xFChendust. Kolmandad osapooled v\xF5ivad n\xE4ha sinu tegevust v\xF5i kinni p\xFC\xFCda tundlikku teavet, mida sellel lehel saadad.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Me t\xE4iendasime selle lehel kasutatavat \xFChendust, et kaitsta sinu saadetud teavet edastamise ajal.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "See leht kasutab kr\xFCptitud \xFChendust, mis takistab kolmandatel pooltel sinu tegevuse vaatamist v\xF5i sinu sellel lehel saadetud tundliku teabe kinnip\xFC\xFCdmist.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Privaatsuskaitse ei ole spetsiaalsete lehtede ega arvutis asuvate lehtede jaoks saadaval.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Kas sulle meeldib DuckDuckGo kasutamine?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Aita meil seda oma perele ja s\xF5pradele tutvustada", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Levita DuckDuckGo'd", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Kas oled v\xE4sinud sellest, et meile j\xE4lgitakse?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Telli kohe oma laienduse jaoks DuckDuckGo meilikaitse!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Sulge vahekaardid ja kustuta andmed", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Kustuta andmed", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Ainult praegune sait", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Viimane tund", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Viimased 24 tundi", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Viimased 7 p\xE4eva", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Viimased 4 n\xE4dalat", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Kogu aeg", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {\xFChe tunni} day {24 tunni} week {\xFChe n\xE4dala} month {4 n\xE4dala} other {K\xF5ik}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Kas sulgeda <b>{openTabs}</b> vahekaart ning kustutada <b>{durationDesc}</b> sirvimisajalugu ja k\xFCpsised?} other {Kas sulgeda <b>{openTabs}</b> vahekaarti ning kustutada <b>{durationDesc}</b> sirvimisajalugu ja k\xFCpsised?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Kas sulgeda <b>{openTabs}</b> vahekaart ja kustutada <b>{durationDesc}</b> k\xFCpsised?} other {Kas sulgeda <b>{openTabs}</b> vahekaarti ja kustutada <b>{durationDesc}</b> k\xFCpsised?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Kas kustutada <b>{durationDesc}</b> sirvimisajalugu ja k\xFCpsised?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Kas kustutada <b>{durationDesc}</b> k\xFCpsised?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Kas sulgeda <b>{openTabs}</b> {openTabs, plural, =1 {vahekaart} other {vahekaarti}} ning kustutada <b>kogu</b> sirvimisajalugu ja k\xFCpsised ({cookies} {cookies, plural, =1 {saidil} other {saidil}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Kas sulgeda <b>{openTabs}</b> {openTabs, plural, =1 {vahekaart} other {vahekaarti}} ja kustutada <b>k\xF5ik</b> k\xFCpsised ({cookies} {cookies, plural, =1 {saidil} other {saidil}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Kas kustutada <b>kogu</b> sirvimisajalugu ja k\xFCpsised ({cookies} saidil)?} other {Kas kustutada <b>kogu</b> sirvimisajalugu ja k\xFCpsised ({cookies} saidil)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Kas kustutada <b>k\xF5ik</b> k\xFCpsised ({cookies} saidil)?} other {Kas kustutada <b>k\xF5ik</b> k\xFCpsised ({cookies} saidil)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Kas sulgeda <b>{openTabs} {site}</b> vahekaart ja kustutada <b>k\xF5ik saidi {site}</b> k\xFCpsised?} other {Kas sulgeda <b>{openTabs} {site}</b> vahekaarti ja kustutada <b>k\xF5ik saidi {site}</b> k\xFCpsised?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Kas sulgeda <b>{openTabs} {site}</b> vahekaart ja kustutada <b>k\xF5ik saidi {site}</b> k\xFCpsised?} other {Kas sulgeda <b>{openTabs} {site}</b> vahekaarti ja kustutada <b>k\xF5ik saidi {site}</b> k\xFCpsised?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Kas kustutada <b>kogu saidi {site}</b> sirvimisajalugu ja k\xFCpsised?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Kas kustutada <b>k\xF5ik saidi {site}</b> k\xFCpsised?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {Eiratakse <b>{tabs} kinnitatud</b> vahekaarti.} other {Eiratakse <b>{tabs} kinnitatud</b> vahekaarti.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "T\xFChjenda", note: "Button text to start data clearing." }, cancel: { title: "T\xFChista", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Vali ajaloo kustutamiseks periood.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kaamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Asukohatuvastus", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "H\xFCpikaknad", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "K\xFCsi iga kord", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Teavita", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Luba alati", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Keela alati", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anon\xFC\xFCmne katkise saidi aruande esitamine aitab meil rakendust t\xE4iustada.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Kirjelda toimunut", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Sait on blokeeritud v\xF5i seda ei laaditud", note: "User is reporting this page because the page didn't load" }, layout: { title: "Saidi paigutus on katki", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Sait sisaldab suuri t\xFChje alasid", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videot ei esitatud v\xF5i laaditud", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Pilte ei laaditud", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentaare, arvustusi v\xF5i vestlusi ei laaditud", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Sisu puudub", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Lingid v\xF5i nupud ei t\xF6\xF6tanud", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Ei saa sisse logida / registreeruda", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Ei saa maksta, ostu vormistada v\xF5i ostelda", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Brauseri v\xF5i muu brauserilaiendi probleem", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Sait palus mul reklaamiblokeerija keelata", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Midagi muud", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Selgita t\xE4psemalt (vabatahtlik).{bullet}Mis juhtus?{bullet}Mis oleks pidanud juhtuma?{bullet}Kas kaitsefunktsioonide v\xE4ljal\xFClitamine aitas?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Saada aruanne", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "DuckDuckGo\u2019le saadetavad aruanded sisaldavad ainult teavet, mis on vajalik sinu tagasisidega tegelemiseks.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Ait\xE4h!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Sinu teade aitab t\xE4iustada meie tooteid ja parendada teiste inimeste kasutajakogemust.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "J\xE4lgurid", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Kaitseloendi v\xE4rskendamine", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Selle saidi kaitse on <b>SISSE</b> l\xFClitatud", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Selle saidi kaitse on <b>V\xC4LJA</b> l\xFClitatud", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "L\xFClitasime privaatsuskaitse ajutiselt v\xE4lja, sest n\xE4ib, et see h\xE4irib selle saidi t\xF6\xF6d.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Soovitame selle saidi privaatsuskaitse v\xE4lja l\xFClitada, et v\xE4ltida h\xE4ireid selle saidi kasutamisel.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>See sait ei ole turvaline</b> ja v\xF5ib ohustada mis tahes teavet, mida sa sellel lehel saadad.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "J\xE4rgmiste kolmanda poole domeenide taotluste laadimine blokeeriti, sest need tuvastati j\xE4lgimistaotlustena. Kui ettev\xF5tte taotlused laaditakse, v\xF5ib see v\xF5imaldada neil sind profileerida.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Sellel lehel ei blokeeritud \xFChtegi j\xE4lgimistaotluste laadimist. Kui ettev\xF5tte taotlused laaditakse, v\xF5ib see v\xF5imaldada neil sind profileerida.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Me ei tuvastanud sellel lehel \xFChtegi j\xE4lgimistaotlust.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Me ei leidnud \xFChtegi ettev\xF5tet, kes oleks \xFCritanud sellel lehel j\xE4lgimistaotlusi laadida.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Saidi h\xE4irete v\xE4ltimiseks ei blokeerinud me sellel lehel \xFChtegi ettev\xF5tte j\xE4lgimistaotluste laadimist.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "J\xE4lgimistaotluste laadimist ei blokeeritud, sest selle saidi jaoks on kaitsed v\xE4lja l\xFClitatud. Kui ettev\xF5tte taotlused laaditakse, v\xF5ib see v\xF5imaldada neil sind profileerida.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Loo privaatne Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopeeritud sinu l\xF5ikelauale!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Kas veebisait ei t\xF6\xF6ta ootusp\xE4raselt?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Kas veebisait ei t\xF6\xF6ta?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Teata mittetoimivast saidist", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Abi v\xF5ib olla kaitsefunktsioonide v\xE4ljal\xFClitamisest.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Kas sait ei hakka ikka t\xF6\xF6le?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Kasuta ettevaatusabin\xF5usid", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Selle saidi omanik on {companyDisplayName}</b>, mis haldab j\xE4lgimisv\xF5rgustikku {companyPrevalence}%-l populaarsematest veebisaitidest. Suutsime sellel lehel blokeerida m\xF5ned nende p\xE4ringud.} other {<b>Selle saidi omanik on {companyDisplayName}</b>, mis haldab j\xE4lgimisv\xF5rgustikku {companyPrevalence}%-l populaarsematest veebisaitidest. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Me blokeerisime sellel lehel m\xF5ne ettev\xF5tte j\xE4lgimistaotluste laadimise.} =2 {Blokeerisime sellel lehel ettev\xF5tete <b>{firstCompany}</b> ja <b>{secondCompany}</b> j\xE4lgimistaotluste laadimise.} =3 {Blokeerisime sellel lehel ettev\xF5tete <b>{firstCompany}</b>, <b>{secondCompany}</b> ja <b>{thirdCompany}</b> j\xE4lgimistaotluste laadimise.} =4 {Blokeerisime sellel lehel ettev\xF5tete <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> ja <b>{fourthCompany}</b> j\xE4lgimistaotluste laadimise.} =5 {Blokeerisime sellel lehel ettev\xF5tete <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ja <b>veel \xFChe</b> ettev\xF5tte j\xE4lgimistaotluste laadimise.} one {Blokeerisime sellel lehel ettev\xF5tte <b>{firstCompany}</b> j\xE4lgimistaotluste laadimise.} other {Blokeerisime sellele lehel ettev\xF5tete <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ja <b>{othersCount} teiste</b> j\xE4lgimistaotluste laadimise.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Hallatavad k\xFCpsised", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "K\xFCpsiste h\xFCpikaken peidetud", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Me saime sellel saidil k\xFCpsiste h\xFCpikakna ainult peita, sest k\xFCpsise-eelistuste haldamiseks ei antud mingeid valikuid. Meie muud veebij\xE4lgimise kaitsemeetodid toimivad endiselt.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Me seadistasime sinu k\xFCpsiste eelistused maksimeerima privaatsust ja sulgesime h\xFCpikakna.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Keela seadetes", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "\xDChendus on kr\xFCptitud", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "\xDChendus ei ole kr\xFCptitud", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "P\xE4ringute laadimine on blokeeritud", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "\xDChtegi j\xE4lgimistaotlust pole blokeeritud", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "J\xE4lgimistaotlusi ei leitud", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Kolmanda poole p\xE4ringud on laaditud", note: "todo" }, thirdPartiesNoneFound: { title: "Kolmandate poolte p\xE4ringuid ei leitud", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} omab seda saiti ja sellel lehel kasutatavaid teada olevaid j\xE4lgureid, seega me ei blokeerinud neid.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Me ei leidnud \xFChtegi ettev\xF5tet, kes oleks \xFCritanud sellel lehel j\xE4lgimistaotlusi laadida.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "J\xE4lgurid aitavad ettev\xF5tetel sind profileerida. Leidsime, et need ettev\xF5tted j\xE4lgivad sinu tegevust sellel lehel.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "J\xE4lgurid aitavad ettev\xF5tetel sind profileerida. Blokeerisime need ettev\xF5tted, kes j\xE4lgivad sinu tegevust sellel lehel.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tundmatu j\xE4lgimisv\xF5rk", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Ettev\xF5tte {companyName} j\xE4lguri domeenid", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Leiti 0 j\xE4lgurit", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sellele saidile kuuluvad j\xE4lgurid (lubatud)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {Saidil {domain} blokeeriti {trackerCount} j\xE4lgur} other {Saidil {domain} blokeeriti {trackerCount} j\xE4lgurit}}} other {{trackerCount, plural, one {Saidilt {domain} leiti {trackerCount} j\xE4lgur} other {Saidilt {domain} leiti {trackerCount} j\xE4lgurit}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Pane t\xE4hele: platvormi piirangud v\xF5ivad piirata meie v\xF5imet tuvastada k\xF5iki p\xE4ringuid.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Meie veebij\xE4lgimise kaitsete teave", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Kuidas meie otsingu reklaamid meie kaitset m\xF5jutavad?", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "J\xE4rgmise domeeni p\xE4ringud laaditi, sest hiljuti kl\xF5psati DuckDuckGo kaudu ettev\xF5tte {domain} reklaamil. Need p\xE4ringud aitavad hinnata reklaamide t\xF5husust. K\xF5ik DuckDuckGo reklaamid on mitteprofileerivad.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Laaditi j\xE4rgmiste domeenide p\xE4ringud, et v\xE4ltida saidi t\xF6\xF6 h\xE4irimist.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "J\xE4rgmiste domeenide p\xE4ringud laaditi, sest need on seotud domeeniga {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Laaditi ka j\xE4rgmiste domeenide p\xE4ringud." }, sectionHeadingProtectionsDisabled: { title: "J\xE4rgmiste domeenide p\xE4ringud laaditi, sest kaitse on v\xE4lja l\xFClitatud.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Laaditi j\xE4rgmiste kolmanda poole domeenide p\xE4ringud. Kui ettev\xF5tte p\xE4ringud laaditakse, v\xF5ib see v\xF5imaldada neil sind profileerida, kuigi meie teised veebi j\xE4lgimise kaitsemeetmed kehtivad endiselt.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Laaditi j\xE4rgmiste kolmanda poole domeenide p\xE4ringud. Kui ettev\xF5tte p\xE4ringud laaditakse, v\xF5ib see v\xF5imaldada neil sind profileerida, kuigi meie teised veebi j\xE4lgimise kaitsemeetmed kehtivad endiselt.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Me ei tuvastanud kolmandate poolte domeenide p\xE4ringuid.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Anal\xFC\xFCtika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklaamimine", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sotsiaalv\xF5rk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Sisu esitamine", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Manustatud sisu", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Otsi DuckDuckGo'st", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Otsi", note: "Aria label for the search button" }, optionsButton: { title: "Veel valikuid", note: "Aria label for the for the options button" }, navigationComplete: { title: "Valmis", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Tagasi", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Luba kaitse", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Keela kaitse", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Midagi l\xE4ks valesti ja me ei saanud seda sisu laadida. Proovi leht uuesti laadida.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, fi: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Salaa", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Allekirjoita", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Vahvista", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Johda", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Rivit\xE4", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Poista rivitys", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Tuntematon", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Suojausvarmenteen tiedot", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Yleinen nimi", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Julkinen avain", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmi", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Avaimen koko", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "K\xE4ytt\xF6", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Yhteenveto", note: "Header for summary of connection details" }, permanent: { title: "Pysyv\xE4", note: "Whether certificate is permanent" }, effectiveSize: { title: "Tehokas koko", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Varmennetta ei l\xF6ydy", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Verkkotunnuksen {domain} varmenne", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "T\xE4ll\xE4 sivulla k\xE4ytet\xE4\xE4n salaamatonta yhteytt\xE4. Kolmannet osapuolet saattavat kyet\xE4 tarkastelemaan toimintaasi tai sieppaamaan t\xE4ll\xE4 sivulla l\xE4hett\xE4mi\xE4si arkaluontoisia tietoja.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "P\xE4ivitimme t\xE4m\xE4n sivun yhteyden suojataksemme siirron aikana l\xE4hett\xE4mi\xE4si tietoja.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "T\xE4ll\xE4 sivulla k\xE4ytet\xE4\xE4n salattua yhteytt\xE4, joka est\xE4\xE4 kolmansia osapuolia tarkastelemasta toimintaasi tai sieppaamasta t\xE4ll\xE4 sivulla l\xE4hett\xE4mi\xE4si arkaluontoisia tietoja.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Yksityisyyden suojaukset ei ole k\xE4ytett\xE4viss\xE4 erikoissivuilla tai paikallisilla sivuilla.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Pid\xE4tk\xF6 DuckDuckGosta?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Auta meit\xE4 levitt\xE4m\xE4\xE4n sanaa perheellesi ja yst\xE4villesi", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Levit\xE4 DuckDuckGo:ta", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Etk\xF6 halua, ett\xE4 s\xE4hk\xF6postejasi seurantaan?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Rekister\xF6idy DuckDuckGo Email Protection -laajennukseen nyt!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Sulje v\xE4lilehdet ja tyhjenn\xE4 tiedot", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Poista tiedot", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Vain nykyinen sivusto", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Viime tunti", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Viimeiset 24 tuntia", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Viimeiset 7 p\xE4iv\xE4\xE4", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Viimeiset 4 viikkoa", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Kaikki", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {yksi tunti} day {24 tuntia} week {yksi viikko} month {4 viikkoa} other {Kaikki}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Sulje <b>{openTabs}</b> v\xE4lilehti ja tyhjenn\xE4 <b>{durationDesc}</b> selaushistoriaa ja ev\xE4steit\xE4?} other {Sulje <b>{openTabs}</b> v\xE4lilehte\xE4 ja tyhjenn\xE4 <b>{durationDesc}</b> selaushistoriaa ja ev\xE4steit\xE4?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Sulje <b>{openTabs}</b> v\xE4lilehti ja tyhjenn\xE4 <b>{durationDesc}</b> ev\xE4steit\xE4?} other {Sulje <b>{openTabs}</b> v\xE4lilehte\xE4 ja tyhjenn\xE4 <b>{durationDesc}</b> ev\xE4steit\xE4?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Tyhjenn\xE4 <b>{durationDesc}</b> selaushistoriaa ja ev\xE4steit\xE4?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Tyhjenn\xE4 <b>{durationDesc}</b> ev\xE4steit\xE4?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Sulje <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {v\xE4lilehte\xE4}} ja tyhjenn\xE4 <b>kaikki</b> selaushistoria ja ev\xE4steet ({cookies} {cookies, plural, =1 {site} other {sivustoa}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Sulje <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {v\xE4lilehte\xE4}} ja tyhjenn\xE4 <b>kaikki</b> ev\xE4steet ({cookies} {cookies, plural, =1 {site} other {sivustoa}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Tyhjenn\xE4 <b>kaikki</b> ja ev\xE4steet ({cookies} sivusto)?} other {Tyhjenn\xE4 <b>kaikki</b> selaushistoria ja ev\xE4steet ({cookies} sivustoa)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Poista <b>kaikki</b> ev\xE4steet ({cookies} sivusto)?} other {Poista <b>kaikki</b> ev\xE4steet ({cookies} sivustoa)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Sulje <b>{openTabs} {site}</b> v\xE4lilehti ja tyhjenn\xE4 <b>kaikki {site}</b> ev\xE4steet?} other {Close <b>{openTabs} {site}</b> v\xE4lilehte\xE4 ja tyhjenn\xE4 <b>kaikki {site}</b> ev\xE4steet?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Sulje <b>{openTabs} {site}</b> v\xE4lilehti ja tyhjenn\xE4 <b>kaikki {site}</b> ev\xE4steet?} other {Sulje <b>{openTabs} {site}</b> v\xE4lilehte\xE4 ja tyhjenn\xE4 <b>kaikki {site}</b> ev\xE4steet?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Tyhjenn\xE4 <b>kaikki {site}</b> selaushistoria ja ev\xE4steet?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Tyhjenn\xE4 <b>kaikki {site}</b> ev\xE4steet?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} kiinnitetty</b> v\xE4lilehti ohitetaan.} other {<b>{tabs} kiinnitetty\xE4</b> v\xE4lilehte\xE4 ohitetaan.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Tyhjenn\xE4", note: "Button text to start data clearing." }, cancel: { title: "Peruuta", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Jos haluat tyhjent\xE4\xE4 my\xF6s historian, valitse ajanjakso.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofoni", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geopaikannus", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Ponnahdusikkunat", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Kysy joka kerta", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Ilmoita", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Salli aina", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Kiell\xE4 aina", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anonyymin raportin l\xE4hett\xE4minen toimimattomasta sivustosta auttaa meit\xE4 parantamaan sovellusta.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Kuvaile mit\xE4 tapahtui", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Sivusto estetty tai ei latautunut", note: "User is reporting this page because the page didn't load" }, layout: { title: "Sivuston asettelu rikki", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Sivustolla on suuria tyhji\xE4 tiloja", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videota ei toistettu tai se ei latautunut", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Kuvat eiv\xE4t latautuneet", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentit, arvostelut tai chatit eiv\xE4t latautuneet", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Sis\xE4lt\xF6\xE4 puuttuu", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Linkit tai painikkeet eiv\xE4t toimineet", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Ei voi kirjautua sis\xE4\xE4n/rekister\xF6ity\xE4", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Ei voi maksaa, siirty\xE4 kassalle tai ostaa", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Selaimeen tai selainlaajennukseen liittyv\xE4 ongelma", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Sivusto pyysi minua poistamaan mainosten eston", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Jotain muuta", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Anna lis\xE4tietoja (valinnainen):{bullet}Mit\xE4 tapahtui?{bullet}Mit\xE4 olisi pit\xE4nyt tapahtua?{bullet}Auttoiko estojen poistaminen k\xE4yt\xF6st\xE4?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "L\xE4het\xE4 raportti", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "DuckDuckGolle l\xE4hetetyt raportit sis\xE4lt\xE4v\xE4t vain tietoja, joita tarvitaan palautteesi k\xE4sittelemiseen.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Kiitos!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Raporttisi auttaa parantamaan tuotteitamme sek\xE4 muiden ihmisten k\xE4ytt\xF6kokemusta.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Seurantaohjelmat", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Suojausluettelon p\xE4ivitt\xE4minen", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "T\xE4m\xE4n sivuston suojaukset ovat <b>P\xC4\xC4LL\xC4</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "T\xE4m\xE4n sivuston suojaukset ovat <b>POIS P\xC4\xC4LT\xC4</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Yksityisyyden suojaukset on v\xE4liaikaisesti poistettu k\xE4yt\xF6st\xE4, koska ne n\xE4ytt\xE4isiv\xE4t rikkovan t\xE4m\xE4n sivun.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Suosittelemme poistamaan k\xE4yt\xF6st\xE4 t\xE4m\xE4n sivuston yksityisyyden suojaukset, jotta sivusto ei mene ep\xE4kuntoon.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>T\xE4m\xE4 sivusto ei ole turvallinen</b> ja voi vaarantaa kaikki t\xE4ll\xE4 sivulla l\xE4hett\xE4m\xE4si tiedot.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Seuraavien kolmansien osapuolten verkkotunnusten pyynt\xF6jen lataaminen estettiin, koska ne tunnistettiin seurantapyynn\xF6iksi. Jos yrityksen pyynn\xF6t ladataan, yritys voi mahdollisesti profiloida sinut.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Seurantapyynt\xF6jen lataamista ei ole estetty t\xE4ll\xE4 sivulla. Jos yrityksen pyynn\xF6t ladataan, se voi antaa niille mahdollisuuden profiloida sinut.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Emme havainneet seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Emme l\xF6yt\xE4neet yrityksi\xE4, jotka yritt\xE4isiv\xE4t ladata seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Sivuston rikkoutumisen est\xE4miseksi emme ole est\xE4neet yrityksi\xE4 lataamasta seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Seurantapyynt\xF6j\xE4 ei estetty latautumasta, koska suojaukset on poistettu k\xE4yt\xF6st\xE4 t\xE4lt\xE4 sivustolta. Jos yrityksen pyynn\xF6t ladataan, yritys voi mahdollisesti profiloida sinut.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Luo yksityinen Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopioitu leikep\xF6yd\xE4lle!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Eik\xF6 verkkosivusto toimi odotetulla tavalla?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Sivusto ei toimi?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Ilmoita viallisesta sivustosta", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Suojausten kytkeminen pois p\xE4\xE4lt\xE4 voi auttaa.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Eik\xF6 sivusto toimi viel\xE4k\xE4\xE4n?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Ota varotoimet k\xE4ytt\xF6\xF6n", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>T\xE4m\xE4n sivuston omistaa {companyDisplayName}</b>, joka yll\xE4pit\xE4\xE4 seurantaverkostoa {companyPrevalence} prosentissa suosituimmista sivustoista. Pystyimme est\xE4m\xE4\xE4n osan heid\xE4n pyynn\xF6ist\xE4\xE4n t\xE4ll\xE4 sivulla.} other {<b>T\xE4m\xE4n sivuston omistaa {companyDisplayName}</b>, joka yll\xE4pit\xE4\xE4 seurantaverkostoa {companyPrevalence} prosentissa suosituimmista sivustoista. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Estimme joitakin yrityksi\xE4 lataamasta seurantapyynt\xF6j\xE4 t\xE4lle sivulle.} =2 {Estimme yrityksi\xE4 <b>{firstCompany}</b> ja <b>{secondCompany}</b> lataamasta seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.} =3 {Estimme yrityksi\xE4 <b>{firstCompany}</b>, <b>{secondCompany}</b> ja <b>{thirdCompany}</b> lataamasta seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.} =4 {Estimme yritykset <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> ja <b>{fourthCompany}</b> lataamasta j\xE4ljitt\xE4mispyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.} =5 {Estimme yrityksi\xE4 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ja <b>1 muu</b> lataamasta seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.} one {Estimme yrityksen <b>{firstCompany}</b> lataamasta j\xE4ljitt\xE4mispyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.} other {Estimme yritykset <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ja <b>{othersCount} muuta</b> lataamasta j\xE4ljitt\xE4mispyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Hallitut ev\xE4steet", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Ev\xE4steponnahdusikkuna piilotettu", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Pystyimme vain piilottamaan t\xE4m\xE4n sivuston ev\xE4steponnahdusikkunan, koska ev\xE4steasetusten hallintaan ei tarjottu vaihtoehtoja. Muut verkkoseurantasuojamme ovat edelleen k\xE4yt\xF6ss\xE4.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Olemme asettaneet ev\xE4steasetukset maksimoimaan tietosuojan ja sulkeneet ponnahdusikkunan.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Poista k\xE4yt\xF6st\xE4 asetuksissa", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Yhteys on salattu", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Yhteytt\xE4 ei ole salattu", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Pyynn\xF6t, joiden lataaminen estetty", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Ei estettyj\xE4 seurantapyynt\xF6j\xE4", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Seurantapyynt\xF6j\xE4 ei l\xF6ytynyt", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Kolmannen osapuolen pyynn\xF6t ladattu", note: "todo" }, thirdPartiesNoneFound: { title: "Kolmannen osapuolen pyynt\xF6j\xE4 ei l\xF6ytynyt", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "Yritys {companyName} omistaa t\xE4m\xE4n sivuston ja t\xE4ll\xE4 sivulla olevat tunnetut seurantaohjelmat, joten emme est\xE4neet niit\xE4.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Emme l\xF6yt\xE4neet yrityksi\xE4, jotka yritt\xE4isiv\xE4t ladata seurantapyynt\xF6j\xE4 t\xE4ll\xE4 sivulla.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Seurantaohjelmat auttavat yrityksi\xE4 profiloimaan sinut. L\xF6ysimme n\xE4m\xE4 yritykset seuraamassa ja profiloimassa sinua t\xE4ll\xE4 sivulla.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Seurantaohjelmat auttavat yrityksi\xE4 profiloimaan sinut. Olemme est\xE4neet n\xE4m\xE4 yritykset seuraamasta toimintaasi t\xE4ll\xE4 sivulla.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tuntematon seurantaverkosto", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Yrityksen {companyName} seurantaverkkotunnukset", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 seurantaohjelmaa l\xF6ytyi", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "T\xE4m\xE4n sivuston omistamat seurantaohjelmat (sallittu)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} seurantaohjelma estetty verkkotunnuksessa {domain}} other {{trackerCount} seurantaohjelmaa estetty verkkotunnuksessa {domain}}}} other {{trackerCount, plural, one {{trackerCount} seuraaja l\xF6ydetty verkkotunnuksessa {domain}} other {{trackerCount} seuraajaa l\xF6ydetty verkkotunnuksessa {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Huomaa: alustan rajoitukset voivat rajoittaa kyky\xE4mme havaita kaikki pyynn\xF6t.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Tietoa verkkoseurantasuojauksistamme", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Miten hakumainoksemme vaikuttavat suojauksiimme", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Seuraavat verkkotunnuksen pyynn\xF6t ladattiin, koska {domain}-mainosta napsautettiin \xE4skett\xE4in DuckDuckGossa. N\xE4m\xE4 pyynn\xF6t auttavat arvioimaan mainosten tehokkuutta. Kaikki DuckDuckGon mainokset ovat ei-profiloivia.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Seuraavan verkkotunnuksen pyynn\xF6t ladattiin sivuston rikkoutumisen est\xE4miseksi.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Seuraavien verkkotunnusten pyynn\xF6t ladattiin, koska ne liittyv\xE4t verkkotunnukseen {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "My\xF6s seuraavien verkkotunnuksien pyynn\xF6t ladattiin." }, sectionHeadingProtectionsDisabled: { title: "Seuraavien verkkotunnusten pyynn\xF6t ladattiin, koska suojaukset ovat pois p\xE4\xE4lt\xE4.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Seuraavien kolmansien osapuolten verkkotunnusten pyynn\xF6t ladattiin. Jos yrityksen pyynn\xF6t ladataan, se voi antaa yritykselle mahdollisuuden profiloida sinut, vaikka muut verkkoseurantasuojamme ovat edelleen voimassa.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Seuraavien kolmansien osapuolten verkkotunnusten pyynn\xF6t ladattiin. Jos yrityksen pyynn\xF6t ladataan, se voi antaa yritykselle mahdollisuuden profiloida sinut, vaikka muut verkkoseurantasuojamme ovat edelleen voimassa.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Emme havainneet pyynt\xF6j\xE4 kolmansien osapuolten verkkotunnuksilta.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analyysi", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Mainostus", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Someverkosto", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Sis\xE4ll\xF6n toimitus", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Upotettu sis\xE4lt\xF6", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Hae DuckDuckGo:sta", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Etsi", note: "Aria label for the search button" }, optionsButton: { title: "Lis\xE4\xE4 vaihtoehtoja", note: "Aria label for the for the options button" }, navigationComplete: { title: "Valmis", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Takaisin", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Ota suojaukset k\xE4ytt\xF6\xF6n", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Poista suojaukset k\xE4yt\xF6st\xE4", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Jokin meni vikaan, emmek\xE4 voineet ladata t\xE4t\xE4 sis\xE4lt\xF6\xE4. Yrit\xE4 ladata sivu uudelleen.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, fr: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Chiffrer", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Signer", note: "When the cryptographic key can be used to sign data" }, verify: { title: "V\xE9rifier", note: "When the cryptographic key can be used to verify data" }, derive: { title: "D\xE9river", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Emballer", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "D\xE9baller", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Inconnu", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "D\xE9tails du certificat de s\xE9curit\xE9", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Nom commun", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Cl\xE9 publique", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algorithme", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Taille de la cl\xE9", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Utilisation", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "R\xE9sum\xE9", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Taille r\xE9elle", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificat introuvable", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificat pour {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Cette page utilise une connexion non chiffr\xE9e. Des tiers sont susceptibles de voir votre activit\xE9 ou d'intercepter les informations sensibles que vous envoyez sur cette page.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Nous avons am\xE9lior\xE9 la connexion \xE0 cette page pour prot\xE9ger les informations que vous envoyez pendant leur transit.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Cette page utilise une connexion chiffr\xE9e, ce qui emp\xEAche des tiers de consulter votre activit\xE9 ou d'intercepter les informations sensibles que vous envoyez sur cette page.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Les protections de confidentialit\xE9 ne sont pas disponibles pour les pages sp\xE9ciales ou locales.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Vous aimez utiliser DuckDuckGo\xA0?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Aidez-nous \xE0 faire passer le mot \xE0 votre famille et vos amis", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Diffusez DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Vous en avez assez d'\xEAtre suivi(e) via les e-mails\xA0?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Ajoutez DuckDuckGo Email Protection \xE0 votre extension en vous inscrivant d\xE8s maintenant\xA0!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Fermer les onglets et effacer les donn\xE9es", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Effacer les donn\xE9es", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Site actuel uniquement", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Derni\xE8re heure", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Derni\xE8res 24\xA0heures", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "7\xA0derniers jours", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "4\xA0derni\xE8res semaines", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Depuis le d\xE9but", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {une heure} day {24\xA0heures} week {une semaine} month {4\xA0semaines} other {Tous}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Fermer <b>{openTabs}</b>\xA0onglet et effacer <b>{durationDesc}</b> d'historique de navigation et de cookies\xA0?} other {Fermer <b>{openTabs}</b>\xA0onglets et effacer <b>{durationDesc}</b> d'historique de navigation et de cookies\xA0?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Fermer <b>{openTabs}</b>\xA0onglet et effacer <b>{durationDesc}</b> de cookies\xA0?} other {Fermer <b>{openTabs}</b>\xA0onglets et effacer <b>{durationDesc}</b> de cookies\xA0?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Effacer <b>{durationDesc}</b> d'historique de navigation et de cookies\xA0?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Effacer <b>{durationDesc}</b> de cookies\xA0?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Fermer <b>{openTabs}</b> {openTabs, plural, =1 {onglet} other {onglets}} et effacer <b>l'int\xE9gralit\xE9</b> de l'historique de navigation et des cookies ({cookies} {cookies, plural, =1 {site} other {sites}})\xA0?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Fermer <b>{openTabs}</b> {openTabs, plural, =1 {onglet} other {onglets}} et effacer <b>l'int\xE9gralit\xE9</b> des cookies ({cookies} {cookies, plural, =1 {site} other {sites}})\xA0?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Effacer <b>l'int\xE9gralit\xE9</b> de l'historique de navigation et des cookies ({cookies}\xA0site)\xA0?} other {Effacer <b>l'int\xE9gralit\xE9</b> de l'historique de navigation et des cookies ({cookies}\xA0sites)\xA0?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Effacer <b>l'int\xE9gralit\xE9</b> des cookies ({cookies}\xA0site)\xA0?} other {Effacer <b>l'int\xE9gralit\xE9</b> des cookies ({cookies}\xA0sites)\xA0?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Fermer <b>{openTabs}\xA0onglet {site}</b> et effacer <b>tous les cookies {site}</b>\xA0?} other {Fermer <b>{openTabs}\xA0onglets {site}</b> et effacer <b>tous les cookies {site}</b>\xA0?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Fermer <b>{openTabs}\xA0onglet {site}</b> et effacer <b>tous les cookies {site}</b>\xA0?} other {Fermer <b>{openTabs}\xA0onglets {site}</b> et effacer <b>tous les cookies {site}</b>\xA0?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Effacer <b>l'int\xE9gralit\xE9</b> de l'historique de navigation et des cookies {site}\xA0?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Effacer <b>l'int\xE9gralit\xE9</b> des cookies {site}\xA0?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs}\xA0onglet \xE9pingl\xE9</b> sera ignor\xE9.} other {<b>{tabs}\xA0onglets \xE9pingl\xE9s</b> seront ignor\xE9s.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Effacer", note: "Button text to start data clearing." }, cancel: { title: "Annuler", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Pour effacer \xE9galement l'historique, s\xE9lectionnez une p\xE9riode.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Appareil photo", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Micro", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "G\xE9olocalisation", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Fen\xEAtres contextuelles", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Toujours demander", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Notifier", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Toujours autoriser", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Toujours refuser", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "La soumission d'un rapport anonyme pour signaler le mauvais fonctionnement du site nous aide \xE0 am\xE9liorer l'application.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "D\xE9crivez ce qui s'est pass\xE9", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Le site est bloqu\xE9 ou le chargement de la page a \xE9chou\xE9", note: "User is reporting this page because the page didn't load" }, layout: { title: "Probl\xE8me de mise en page du site", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Le site contient de grands espaces vides", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "La lecture ou le chargement de la vid\xE9o n'a pas fonctionn\xE9", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Les images ne se sont pas charg\xE9es", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Les commentaires, les avis ou les chats n'ont pas \xE9t\xE9 charg\xE9s", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Le contenu est manquant", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Les liens ou les boutons ne fonctionnent pas", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Impossible de se connecter/s'inscrire", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Impossible de payer, de passer au paiement ou d'acheter", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Probl\xE8me de navigateur ou d'extension de navigateur", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Le site m'a demand\xE9 de d\xE9sactiver le bloqueur de publicit\xE9s", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Autre chose", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Fournir plus de d\xE9tails (facultatif)\xA0:{bullet}Que s'est-il pass\xE9\xA0?{bullet}Qu'aurait-il d\xFB se passer\xA0?{bullet}Est-ce que la d\xE9sactivation des protections a aid\xE9\xA0?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Envoyer un rapport", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Seules les informations n\xE9cessaires pour r\xE9pondre \xE0 vos commentaires sont incluses dans les rapports envoy\xE9s \xE0 DuckDuckGo.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Merci!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Votre signalement nous permettra d'am\xE9liorer nos produits et l'exp\xE9rience de nos utilisateurs.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Traqueurs", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Mise \xE0 jour de la liste de protection", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Les protections sont <b>activ\xE9es</b> sur ce site", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Les protections sont <b>d\xE9sactiv\xE9es</b> sur ce site", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Nous avons temporairement d\xE9sactiv\xE9 les protections de confidentialit\xE9 car elles semblent perturber ce site.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Nous vous recommandons de d\xE9sactiver les protections de confidentialit\xE9 sur ce site afin d'emp\xEAcher toute perturbation.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Ce site n'est pas prot\xE9g\xE9</b>\xA0; il est susceptible de compromettre les informations que vous envoyez sur cette page.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Les demandes des domaines tiers suivants ont vu leur chargement bloqu\xE9, car elles ont \xE9t\xE9 identifi\xE9es comme des demandes de pistage. Si les demandes d'une entreprise sont charg\xE9es, cela peut lui permettre d'\xE9tablir votre profil.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Aucune demande de pistage n'a vu son chargement bloqu\xE9 sur cette page. Si les demandes d'une entreprise sont charg\xE9es, cela peut lui permettre d'\xE9tablir votre profil.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Nous n'avons identifi\xE9 aucune demande de pistage sur cette page.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Nous n'avons trouv\xE9 aucune entreprise tentant de charger des demandes de pistage sur cette page.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Pour \xE9viter toute coupure du site, nous n'avons emp\xEAch\xE9 aucune entreprise de charger des demandes de pistage sur cette page.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Aucune demande de pistage n'a vu son chargement bloqu\xE9 car les protections sont d\xE9sactiv\xE9es pour ce site. Si les demandes d'une entreprise sont charg\xE9es, cela peut lui permettre d'\xE9tablir votre profil.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "G\xE9n\xE9rer une Duck Address priv\xE9e", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Copi\xE9e dans votre presse-papiers\xA0!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Le site Web ne fonctionne pas correctement\xA0?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Le site Web ne fonctionne pas\xA0?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Signaler un probl\xE8me de site", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "La d\xE9sactivation des protections pourrait aider.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Le site ne fonctionne toujours pas\xA0?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Prenez des pr\xE9cautions", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Ce site appartient \xE0 {companyDisplayName}</b>, qui exploite un r\xE9seau de traqueurs sur {companyPrevalence}\xA0% des principaux sites Web. Nous avons pu bloquer certaines de leurs demandes sur cette page.} other {<b>Ce site appartient \xE0 {companyDisplayName}</b>, qui exploite un r\xE9seau de traqueurs sur {companyPrevalence}\xA0% des principaux sites Web. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Nous avons emp\xEAch\xE9 certaines entreprises de charger des demandes de pistage sur cette page.} =2 {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b> et <b>{secondCompany}</b> de charger des demandes de pistage sur cette page.} =3 {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b>, <b>{secondCompany}</b> et <b>{thirdCompany}</b> de charger des demandes de pistage sur cette page.} =4 {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> et <b>{fourthCompany}</b> de charger des demandes de pistage sur cette page.} =5 {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> et <b>1 autre entreprise</b> de charger des demandes de pistage sur cette page.} one {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b> de charger des demandes de pistage sur cette page.} other {Nous avons emp\xEAch\xE9 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> et <b>{othersCount}\xA0autres entreprises</b> de charger des demandes de pistage sur cette page.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies g\xE9r\xE9s", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Fen\xEAtre contextuelle des cookies masqu\xE9e", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Nous n'avons pu masquer que la fen\xEAtre contextuelle des cookies sur ce site car aucune option n'a \xE9t\xE9 fournie pour g\xE9rer les pr\xE9f\xE9rences en mati\xE8re de cookies. Nos autres protections contre le pistage Web s'appliquent toujours.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Nous avons d\xE9fini vos pr\xE9f\xE9rences en mati\xE8re de cookies de fa\xE7on \xE0 renforcer la confidentialit\xE9 de vos donn\xE9es et nous avons ferm\xE9 la fen\xEAtre contextuelle.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "D\xE9sactiver dans les param\xE8tres", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "La connexion est chiffr\xE9e", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "La connexion n'est pas chiffr\xE9e", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Demandes dont le chargement a \xE9t\xE9 bloqu\xE9", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Aucune demande de pistage bloqu\xE9e", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Aucune demande de pistage trouv\xE9e", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Demandes tierces charg\xE9es", note: "todo" }, thirdPartiesNoneFound: { title: "Aucune demande tierce trouv\xE9e", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} est propri\xE9taire de ce site et des traqueurs connus trouv\xE9s sur cette page. Nous n'avons donc pas pu bloquer cette entreprise.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Nous n'avons trouv\xE9 aucune entreprise tentant de charger des demandes de pistage sur cette page.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Les traqueurs permettent aux entreprises de vous profiler. Nous avons d\xE9tect\xE9 que ces entreprises surveillent votre activit\xE9 sur cette page.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Les traqueurs permettent aux entreprises de vous profiler. Nous avons emp\xEAch\xE9 ces entreprises de surveiller votre activit\xE9 sur cette page.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "R\xE9seau de traqueurs inconnu", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domaines de traqueurs associ\xE9s \xE0 {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0\xA0traqueur trouv\xE9", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Traqueurs appartenant \xE0 ce site (autoris\xE9s)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount}\xA0traqueur bloqu\xE9 sur {domain}} other {{trackerCount}\xA0traqueurs bloqu\xE9s sur {domain}}}} other {{trackerCount, plural, one {{trackerCount}\xA0traqueur trouv\xE9 sur {domain}} other {{trackerCount}\xA0traqueurs trouv\xE9s sur {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Remarque\xA0: les limites de la plateforme peuvent restreindre notre capacit\xE9 \xE0 d\xE9tecter toutes les demandes.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "\xC0 propos de nos protections contre le suivi Web", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Impact de nos publicit\xE9s de recherche sur nos protections", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Les demandes du domaine suivant ont \xE9t\xE9 charg\xE9es car une publicit\xE9 {domain} sur DuckDuckGo a r\xE9cemment fait l'objet d'un clic. Ces demandes permettent d'\xE9valuer l'efficacit\xE9 des publicit\xE9s. Toutes les publicit\xE9s sur DuckDuckGo sont sans profilage.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Les demandes des domaines suivants ont \xE9t\xE9 charg\xE9es pour \xE9viter toute coupure du site.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Les demandes des domaines suivants ont \xE9t\xE9 charg\xE9es car elles sont associ\xE9es \xE0 {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Les demandes des domaines suivants ont \xE9galement \xE9t\xE9 charg\xE9es." }, sectionHeadingProtectionsDisabled: { title: "Les demandes des domaines suivants ont \xE9t\xE9 charg\xE9es car les protections sont d\xE9sactiv\xE9es.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Les demandes des domaines tiers suivants ont \xE9t\xE9 charg\xE9es. Si les demandes d'une entreprise sont charg\xE9es, cela peut lui permettre d'\xE9tablir votre profil, bien que nos autres protections en mati\xE8re de suivi sur Internet restent applicables.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Les demandes des domaines tiers suivants ont \xE9t\xE9 charg\xE9es. Si les demandes d'une entreprise sont charg\xE9es, cela peut lui permettre d'\xE9tablir votre profil, bien que nos autres protections en mati\xE8re de suivi sur Internet restent applicables.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nous n'avons identifi\xE9 aucune demande provenant de domaines tiers.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analytique", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Publicit\xE9", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "R\xE9seau social", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Diffusion de contenu", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Contenu int\xE9gr\xE9", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Rechercher avec DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Rechercher", note: "Aria label for the search button" }, optionsButton: { title: "Plus d'options", note: "Aria label for the for the options button" }, navigationComplete: { title: "Termin\xE9", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Retour", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Activer les protections", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "D\xE9sactiver les protections", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Une erreur s'est produite et nous n'avons pas pu charger ce contenu. Essayez d'actualiser la page.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, hr: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Enkripcija", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Potpis", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Provjera", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Derivacija", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Zamotavanje", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Odmotavanje", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Nepoznato", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Pojedinosti sigurnosnog certifikata", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Uobi\u010Dajeno ime", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Javni klju\u010D", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritam", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Veli\u010Dina klju\u010Da", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Upotreba", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Sa\u017Eetak", note: "Header for summary of connection details" }, permanent: { title: "Trajno", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efektivna veli\u010Dina", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Potvrda nije prona\u0111ena", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Potvrda za {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Ova stranica koristi ne\u0161ifriranu vezu. Tre\u0107e strane bi mogle vidjeti tvoje aktivnosti ili presresti osjetljive informacije koje \u0161alje\u0161 na ovoj stranici.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Na ovoj smo stranici nadogradili vezu kako bismo za\u0161titili podatke koje \u0161alje\u0161 tijekom prijenosa.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Ova stranica koristi \u0161ifriranu vezu koja tre\u0107im stranama onemogu\u0107uje prikaz tvojih aktivnosti ili presretanje osjetljivih podataka koje \u0161alje\u0161 na ovoj stranici.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Za\u0161tita privatnosti nije dostupna za posebne ili lokalne stranice.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Voli\u0161 li koristiti DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Pomozi nam pro\u0161iriti vijest tvojoj obitelji i prijateljima", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "\u0160irite DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Dosta ti je da netko prati tvoju e-po\u0161tu?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Odmah se prijavi za DuckDuckGo Email Protection za svoje pro\u0161irenje!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Zatvori kartice i obri\u0161i podatke", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Obri\u0161i podatke", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Samo aktualna web lokacija", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Posljednjih sat vremena", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Posljednja 24 sata", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Posljednjih 7 dana", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Posljednja 4 tjedna", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Sve vrijeme", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {jedan sat} day {24 sata} week {jedan tjedan} month {4 tjedna} other {Sve}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Zatvoriti <b>{openTabs}</b> karticu i izbrisati <b>{durationDesc}</b> povijesti pregledavanja i kola\u010Di\u0107a?} few {Zatvoriti <b>{openTabs}</b> kartice i izbrisati <b>{durationDesc}</b> povijesti pregledavanja i kola\u010Di\u0107a?} many {Zatvoriti <b>{openTabs}</b> kartica i izbrisati <b>{durationDesc}</b> povijesti pregledavanja i kola\u010Di\u0107a?} other {Zatvoriti <b>{openTabs}</b> kartica i izbrisati <b>{durationDesc}</b> povijesti pregledavanja i kola\u010Di\u0107a?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Zatvoriti <b>{openTabs}</b> karticu i izbrisati <b>{durationDesc}</b> kola\u010Di\u0107?} few {Zatvoriti <b>{openTabs}</b> kartice i izbrisati <b>{durationDesc}</b> kola\u010Di\u0107a?} many {Zatvoriti <b>{openTabs}</b> kartica i izbrisati <b>{durationDesc}</b> kola\u010Di\u0107a?} other {Zatvoriti <b>{openTabs}</b> kartica i izbrisati <b>{durationDesc}</b> kola\u010Di\u0107a?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Izbrisati <b>{durationDesc}</b> povijesti pregledavanja i kola\u010Di\u0107a?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Izbrisati <b>{durationDesc}</b> kola\u010Di\u0107a?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Zatvoriti <b>{openTabs}</b> {openTabs, plural, =1 {karticu} other {kartice}} i izbrisati <b>cjelokupnu</b> povijest pretra\u017Eivanja i sve kola\u010Di\u0107e ({cookies} {cookies, plural, =1 {web lokacija} other {web lokacije}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Zatvoriti <b>{openTabs}</b> {openTabs, plural, =1 {karticu} other {kartice}} i izbrisati <b>sve</b> kola\u010Di\u0107e ({cookies} {cookies, plural, =1 {web lokacija} other {web lokacije}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Izbrisati <b>svu</b> povijest pregledavanja i kola\u010Di\u0107e ({cookies} web lokacija)?} few {Izbrisati <b>svu</b> povijest pregledavanja i kola\u010Di\u0107e ({cookies} web lokacije)?} many {Izbrisati <b>svu</b> povijest pregledavanja i kola\u010Di\u0107e ({cookies} web lokacija)?} other {Izbrisati <b>svu</b> povijest pregledavanja i kola\u010Di\u0107e ({cookies} web lokacija)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Obrisati <b>sve</b> kola\u010Di\u0107e ({cookies} web lokacija)?} few {Obrisati <b>sve</b> kola\u010Di\u0107e ({cookies} web lokacije)?} many {Obrisati <b>sve</b> kola\u010Di\u0107e ({cookies} web lokacija)?} other {Obrisati <b>sve</b> kola\u010Di\u0107e ({cookies} web lokacija)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Zatvoriti <b>{openTabs} {site}</b> karticu i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} few {Zatvoriti <b>{openTabs} {site}</b> kartice i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} many {Zatvoriti <b>{openTabs} {site}</b> kartica i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} other {Zatvoriti <b>{openTabs} {site}</b> kartica i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Zatvoriti <b>{openTabs} {site}</b> karticu i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} few {Zatvoriti <b>{openTabs} {site}</b> kartice i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} many {Zatvoriti <b>{openTabs} {site}</b> kartica i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?} other {Zatvoriti <b>{openTabs} {site}</b> kartica i izbrisati <b>sve kola\u010Di\u0107e na {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Izbrisati <b>svu povijest pregledavanja i kola\u010Di\u0107e na {site}</b> ?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Izbrisati <b>sve kola\u010Di\u0107e na {site}</b> ?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} prikva\u010Dena</b> kartica bit \u0107e zanemarena.} few {<b>{tabs} prikva\u010Dene</b> kartice bit \u0107e zanemareno.} many {<b>{tabs} prikva\u010Denih</b> kartica bit \u0107e zanemareno.} other {<b>{tabs} prikva\u010Denih</b> kartica bit \u0107e zanemareno.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Izbri\u0161i", note: "Button text to start data clearing." }, cancel: { title: "Odustani", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Za brisanje povijesti odaberi vremensko razdoblje.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokacija", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Sko\u010Dni prozori", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Pitaj svaki puta", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Obavijesti", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Uvijek dopusti", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Uvijek odbij", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Podno\u0161enje anonimnog izvje\u0161\u0107a o neispravnoj web-lokaciji poma\u017Ee nam pobolj\u0161ati aplikaciju.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Opi\u0161i \u0161to se dogodilo", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Stranica je blokirana ili se nije u\u010Ditala", note: "User is reporting this page because the page didn't load" }, layout: { title: "Stranica ne izgleda ispravno", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Stranica sadr\u017Ei velike prazne prostore", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videozapis se nije reproducirao ili u\u010Ditao", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Slike se nisu u\u010Ditale", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Komentari, recenzije ili razgovori nisu se u\u010Ditali", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Nedostaje sadr\u017Eaj", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Veze ili gumbi ne funkcioniraju", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Ne mogu se prijaviti/registrirati", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Ne mogu platiti, odjaviti se ili kupovati", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem s preglednikom ili pro\u0161irenjem", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Web-lokacija me zamolila da onemogu\u0107im blokiranje oglasa", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Ne\u0161to drugo", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Podijelite vi\u0161e pojedinosti (nije obavezno):{bullet}\u0160to se dogodilo?{bullet}\u0160to se trebalo dogoditi?{bullet}Je li isklju\u010Divanje za\u0161tite pomoglo?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Po\u0161alji izvje\u0161\u0107e", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Izvje\u0161taji poslani DuckDuckGou uklju\u010Duju samo podatke koji nam trebaju za odgovor na tvoje povratne informacije.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Hvala!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Tvoj \u0107e izvje\u0161taj pomo\u0107i pobolj\u0161ati preglednik, kao i do\u017Eivljaj pretra\u017Eivanja za druge posjetitelje.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Alati za pra\u0107enje", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "A\u017Euriranje popisa za\u0161tite", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Za\u0161tita je <b>UKLJU\u010CENA</b> za ovu stranicu", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Za\u0161tite su <b>ISKLJU\u010CENE</b> za ovu stranicu", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Privremeno smo onemogu\u0107ili za\u0161titu privatnosti jer se \u010Dini da ona ru\u0161i ovu web lokaciju.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Preporu\u010Dujemo onemogu\u0107avanje za\u0161tite privatnosti za ovu web lokaciju kako biste sprije\u010Dili njezin pad.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Ova web lokacija nije sigurna</b> i mo\u017Ee ugroziti sve informacije koje putem nje \u0161alje\u0161.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Sljede\u0107im zahtjevima domena tre\u0107ih strana blokirano je u\u010Ditavanje jer su identificirani kao zahtjevi s pra\u0107enjem. Ako su zahtjevi tvrtke u\u010Ditani, to im mo\u017Ee omogu\u0107iti da te profiliraju.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Nijedan zahtjev s pra\u0107enjem nije blokiran za u\u010Ditavanje na ovoj stranici. Ako su zahtjevi tvrtke u\u010Ditani, to im mo\u017Ee omogu\u0107iti da te profiliraju.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Na ovoj stranici nismo identificirali nikakve zahtjeve s pra\u0107enjem.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Nismo prona\u0161li nijednu tvrtku koja poku\u0161ava u\u010Ditati zahtjeve s pra\u0107enjem na ovoj stranici.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Kako bismo sprije\u010Dili pad stranice, nismo blokirali nijednu tvrtku da u\u010Ditava zahtjeve s pra\u0107enjem na ovoj stranici.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "U\u010Ditavanje zahtjeva s pra\u0107enjem nije blokirano jer su za\u0161tite isklju\u010Dene za ovo web-mjesto. Ako su zahtjevi tvrtke u\u010Ditani, to im mo\u017Ee omogu\u0107iti da te profiliraju.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generiraj privatnu adresu Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopirano u me\u0111uspremnik!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Web-mjesto ne radi u skladu s o\u010Dekivanjima?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Web-lokacija ne funkcionira?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Prijavi neispravno web-mjesto", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "ISKLJU\u010CIVANJE za\u0161tite mo\u017Ee pomo\u0107i.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Web-lokacija jo\u0161 uvijek ne radi?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Poduzmi mjere predostro\u017Enosti", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Ova web lokacija u vlasni\u0161tvu je tvrtke {companyDisplayName}</b> koja upravlja mre\u017Eom za pra\u0107enje na {companyPrevalence} % najpopularnijih web lokacija. Uspjeli smo blokirati neke od njihovih zahtjeva na ovoj stranici.} other {<b>Ova web lokacija u vlasni\u0161tvu je tvrtke {companyDisplayName}</b> , koja upravlja mre\u017Eom za pra\u0107enje na {companyPrevalence} % najpopularnijih web lokacija. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Blokirali smo neke tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici.} =2 {Blokirali smo tvrtke <b>{firstCompany}</b> i <b>{secondCompany}</b> u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici.} =3 {Blokirali smo <b>{firstCompany}</b> , <b>{secondCompany}</b> i <b>{thirdCompany}</b> u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici.} =4 {Blokirali smo sljede\u0107e tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici: <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> i <b>{fourthCompany}</b>.} =5 {Blokirali smo <b>{firstCompany}</b> , <b>{secondCompany}</b> , <b>{thirdCompany}</b> , <b>{fourthCompany}</b> i <b>jo\u0161 1 osobu</b> u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici.} one {Blokirali smo sljede\u0107e tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici: <b>{firstCompany}</b>.} few {Blokirali smo sljede\u0107e tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici: <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> i <b>{fourthCompany}</b> i jo\u0161 njih <b>{othersCount}</b>.} many {Blokirali smo sljede\u0107e tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici: <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> i <b>{fourthCompany}</b> i jo\u0161 njih <b>{othersCount}</b>.} other {Blokirali smo sljede\u0107e tvrtke u u\u010Ditavanju zahtjeva s pra\u0107enjem na ovoj stranici: <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> i <b>{fourthCompany}</b> i jo\u0161 njih <b>{othersCount}</b>.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Upravlja se kola\u010Di\u0107ima", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Sko\u010Dni prozor kola\u010Di\u0107a je sakriven", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Uspjeli smo sakriti sko\u010Dni prozor za kola\u010Di\u0107e na ovoj web lokaciji jer nisu pru\u017Eene opcije za upravljanje preferencijama kola\u010Di\u0107a. Ostale na\u0161e za\u0161tite od pra\u0107enja na webu i dalje vrijede.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Odredili smo tvoje postavke kola\u010Di\u0107a kako bismo maksimizirali privatnost te smo zatvorili sko\u010Dni prozor.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Onemogu\u0107i u postavkama", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Veza je \u0161ifrirana", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Veza nije \u0161ifrirana", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Zahtjevi blokirani od u\u010Ditavanja", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nema blokiranih zahtjeva s pra\u0107enjem", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nije prona\u0111en nijedan zahtjev s pra\u0107enjem", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "U\u010Ditani su zahtjevi tre\u0107ih strana", note: "todo" }, thirdPartiesNoneFound: { title: "Nisu prona\u0111eni zahtjevi tre\u0107ih strana", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} posjeduje ovu stranicu i poznate alate za pra\u0107enje prona\u0111ene na ovoj stranici, tako da ih nismo blokirali.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Nismo prona\u0161li nijednu tvrtku koja poku\u0161ava u\u010Ditati zahtjeve s pra\u0107enjem na ovoj stranici.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Alati za pra\u0107enje poma\u017Eu tvrtkama da te profiliraju. Prona\u0161li smo sljede\u0107e tvrtke koje prate tvoju aktivnost na ovoj stranici.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Alati za pra\u0107enje poma\u017Eu tvrtkama da te profiliraju. Tim smo tvrtkama blokirali pra\u0107enje tvojih aktivnosti na ovoj stranici.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Mre\u017Ea alata za pra\u0107enje nije poznata", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domene alata za pra\u0107enje za {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Prona\u0111eno je 0 alata za pra\u0107enje", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Alati za pra\u0107enje u vlasni\u0161tvu ove stranice (dopu\u0161teno)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {Blokiran je {trackerCount} alat za pra\u0107enje na domeni {domain}} few {Blokirana su {trackerCount} alata za pra\u0107enje na domeni {domain}} many {Blokirano je {trackerCount} alata za pra\u0107enje na domeni {domain}} other {Blokirano je {trackerCount} alata za pra\u0107enje na domeni {domain}}}} other {{trackerCount, plural, one {Prona\u0111en je {trackerCount} alat za pra\u0107enje na domeni {domain}} few {Prona\u0111ena su {trackerCount} alata za pra\u0107enje na domeni {domain}} many {Prona\u0111eno je {trackerCount} alata za pra\u0107enje na domeni {domain}} other {Prona\u0111eno je {trackerCount} alata za pra\u0107enje na domeni {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Imajte na umu: ograni\u010Denja platforme mogu ograni\u010Diti na\u0161u sposobnost otkrivanja svih zahtjeva.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "O na\u0161oj za\u0161titi od pra\u0107enja na webu", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Kako na\u0161i pretra\u017Eiva\u010Dki oglasi utje\u010Du na na\u0161u za\u0161titu", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Sljede\u0107i zahtjevi domene u\u010Ditani su jer je nedavno kliknuto na oglas domene {domain} na DuckDuckGou. Ovi zahtjevi poma\u017Eu u procjeni u\u010Dinkovitosti oglasa. Svi su oglasi na DuckDuckGou neprofiliraju\u0107i.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Sljede\u0107i zahtjevi domene u\u010Ditani su kako bi se sprije\u010Dio pad web stranice.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Zahtjevi sljede\u0107e domene u\u010Ditani su jer su povezani s domenom {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "U\u010Ditani su i zahtjevi sljede\u0107ih domena." }, sectionHeadingProtectionsDisabled: { title: "Zahtjevi sljede\u0107ih domena su u\u010Ditani jer su za\u0161tite isklju\u010Dene.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "U\u010Ditani su sljede\u0107i zahtjevi domena tre\u0107ih strana. Ako su zahtjevi tvrtke u\u010Ditani, to im mo\u017Ee omogu\u0107iti da vas profiliraju, iako se i dalje primjenjuju na\u0161e druge za\u0161tite web pra\u0107enja.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "U\u010Ditani su sljede\u0107i zahtjevi domena tre\u0107ih strana. Ako su zahtjevi tvrtke u\u010Ditani, to im mo\u017Ee omogu\u0107iti da vas profiliraju, iako se i dalje primjenjuju na\u0161e druge za\u0161tite web pra\u0107enja.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nismo identificirali nikakve zahtjeve s domena tre\u0107ih strana.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analitika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Ogla\u0161avanje", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Dru\u0161tvena mre\u017Ea", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Isporuka sadr\u017Eaja", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Ugra\u0111eni sadr\u017Eaj", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Pretra\u017Ei DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Tra\u017Ei", note: "Aria label for the search button" }, optionsButton: { title: "Dodatne mogu\u0107nosti", note: "Aria label for the for the options button" }, navigationComplete: { title: "Gotovo", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Natrag", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Omogu\u0107i za\u0161tite", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Onemogu\u0107i za\u0161tite", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Ne\u0161to nije bilo u redu i nismo mogli u\u010Ditati ovaj sadr\u017Eaj. Poku\u0161ajte ponovo u\u010Ditati stranicu.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, hu: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Titkos\xEDt\xE1s", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Jel", note: "When the cryptographic key can be used to sign data" }, verify: { title: "\xC9rv\xE9nyes\xEDt\xE9s", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Sz\xE1rmaztat\xE1s", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Becsomagol\xE1s", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Kibont\xE1s", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Ismeretlen", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Biztons\xE1gi tan\xFAs\xEDtv\xE1ny r\xE9szletei", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "K\xF6zhaszn\xE1lat\xFA n\xE9v", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Nyilv\xE1nos kulcs", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmus", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Kulcs m\xE9rete", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Haszn\xE1lat", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "\xD6sszefoglal\xE1s", note: "Header for summary of connection details" }, permanent: { title: "\xC1lland\xF3", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effekt\xEDv m\xE9ret", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "A tan\xFAs\xEDtv\xE1ny nem tal\xE1lhat\xF3", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Tan\xFAs\xEDtv\xE1ny: {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Ez az oldal titkos\xEDtatlan kapcsolatot haszn\xE1l. El\u0151fordulhat, hogy harmadik felek megtekinthetik a tev\xE9kenys\xE9gedet, vagy megszerezhetik az erre az oldalra k\xFCld\xF6tt \xE9rz\xE9keny adatokat.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Az oldal kapcsolat\xE1t biztons\xE1gosabb\xE1 tett\xFCk, hogy megv\xE9dj\xFCk az elk\xFCld\xF6tt adatokat az \xE1tvitel sor\xE1n.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Ez az oldal titkos\xEDtott kapcsolatot haszn\xE1l, amely megakad\xE1lyozza, hogy harmadik felek megtekints\xE9k a tev\xE9kenys\xE9gedet, vagy megszerezz\xE9k az erre az oldalra k\xFCld\xF6tt \xE9rz\xE9keny adatokat.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Az adatv\xE9delmi funkci\xF3k a speci\xE1lis vagy helyi oldalakon nem \xE9rhet\u0151k el.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Szereted haszn\xE1lni a DuckDuckG\xF3t?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Terjeszd a j\xF3 h\xEDr\xFCnket csal\xE1dod \xE9s bar\xE1taid k\xF6r\xE9ben", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Terjeszd a DuckDuckGo-t", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Eleged van abb\xF3l, hogy nyomon k\xF6vetik az e-mailjeid?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Regisztr\xE1lj most, hogy a DuckDuckGo Email Protection a b\u0151v\xEDtm\xE9nyedhez legyen adva!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Lapok bez\xE1r\xE1sa \xE9s adatt\xF6rl\xE9s", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Adatok t\xF6rl\xE9se", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Csak a jelenlegi webhely", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "El\u0151z\u0151 1 \xF3ra", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "El\u0151z\u0151 24 \xF3ra", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "El\u0151z\u0151 7 nap", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "El\u0151z\u0151 4 h\xE9t", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Minden id\u0151pont", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {egy \xF3ra} day {24 \xF3ra} week {egy h\xE9t} month {n\xE9gy h\xE9t} other {\xD6sszes}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Bez\xE1rod a megnyitott <b>{openTabs}</b> lapot, \xE9s t\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyeit \xE9s s\xFCtijeit?} other {Bez\xE1rod a megnyitott <b>{openTabs}</b> lapot, \xE9s t\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyeket \xE9s s\xFCtijeit?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Bez\xE1rod a megnyitott <b>{openTabs}</b> lapot \xE9s t\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> s\xFCtijeit?} other {Bez\xE1rod a megnyitott <b>{openTabs}</b> lapot \xE9s t\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> s\xFCtijeit?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "T\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyeit \xE9s s\xFCtijeit?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "T\xF6rl\xF6d az el\u0151z\u0151 <b>{durationDesc}</b> s\xFCtijeit?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Bez\xE1rod a megnyitott <b>{openTabs}</b> {openTabs, plural, =1 {lapot} other {lapot}}, \xE9s t\xF6r\xF6lsz <b>minden</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyt \xE9s s\xFCtit ({cookies} {cookies, plural, =1 {webhelyet} other {webhelyet}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Bez\xE1rod a megnyitott <b>{openTabs}</b> {openTabs, plural, =1 {lapot} other {lapot}}, \xE9s t\xF6r\xF6lsz <b>minden</b> s\xFCtit ({cookies} {cookies, plural, =1 {webhelyet} other {webhelyet}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {T\xF6r\xF6lsz <b>minden</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyt \xE9s s\xFCtit ({cookies} webhelyet)?} other {T\xF6r\xF6lsz <b>minden</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyt \xE9s s\xFCtit ({cookies} webhelyet)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {T\xF6r\xF6lsz <b>minden</b> s\xFCtit ({cookies} webhelyet)?} other {T\xF6r\xF6lsz <b>minden</b> s\xFCtit ({cookies} webhelyet)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Bez\xE1rod a megnyitott <b>{openTabs} {site}</b> lapot, \xE9s t\xF6r\xF6lsz <b>minden {site}</b> s\xFCtit?} other {Bez\xE1rod a megnyitott <b>{openTabs} {site}</b> lapot, \xE9s t\xF6r\xF6lsz <b>minden {site}</b> s\xFCtit?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Bez\xE1rod a megnyitott <b>{openTabs} {site}</b> lapot, \xE9s t\xF6r\xF6lsz <b>minden {site}</b> s\xFCtit?} other {Bez\xE1rod a megnyitott <b>{openTabs} {site}</b> lapot, \xE9s t\xF6r\xF6lsz <b>minden {site}</b> s\xFCtit?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "T\xF6r\xF6lsz <b>minden {site}</b> b\xF6ng\xE9sz\xE9si el\u0151zm\xE9nyt \xE9s s\xFCtit?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "T\xF6r\xF6lsz <b>minden {site}</b> s\xFCtit?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} r\xF6gz\xEDtett</b> lap \xE9rintetlen marad.} other {<b>{tabs} r\xF6gz\xEDtett</b> lap \xE9rintetlen marad.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "T\xF6rl\xE9s", note: "Button text to start data clearing." }, cancel: { title: "M\xE9gsem", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Ha az el\u0151zm\xE9nyeket is t\xF6r\xF6lni szeretn\xE9d, v\xE1lassz egy id\u0151tartamot.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "F\xF6ldrajzi helymeghat\xE1roz\xE1s", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "El\u0151ugr\xF3 ablakok", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "K\xE9rdezzen r\xE1 minden alkalommal", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "\xC9rtes\xEDt\xE9s", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Enged\xE9lyez\xE9s mindig", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Megtagad\xE1s mindig", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Egy hib\xE1s webhelyr\u0151l sz\xF3l\xF3 n\xE9vtelen bejelent\xE9s seg\xEDt benn\xFCnket az alkalmaz\xE1s fejleszt\xE9s\xE9ben.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Az esem\xE9ny le\xEDr\xE1sa", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "A webhely blokkolva van vagy nem t\xF6lt\u0151d\xF6tt be", note: "User is reporting this page because the page didn't load" }, layout: { title: "A webhely megjelen\xEDt\xE9si elrendez\xE9se hib\xE1s", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "A webhelyen nagy \xFCres ter\xFCletek jelennek meg", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "A vide\xF3t nem lehetett lej\xE1tszani vagy bet\xF6lteni", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "A k\xE9pek nem t\xF6lt\u0151dtek be", note: "User is reporting this page because one or more images did not load" }, comments: { title: "A megjegyz\xE9sek, v\xE9lem\xE9nyek vagy cseveg\xE9sek nem t\xF6lt\u0151dtek be", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Hi\xE1nyzik a tartalom", note: "User is reporting this page because some other type of content did not load" }, links: { title: "A hivatkoz\xE1sok vagy a gombok nem m\u0171k\xF6dnek", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nem lehet bejelentkezni/regisztr\xE1lni", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Nem lehet fizetni vagy v\xE1s\xE1rolni", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "B\xF6ng\xE9sz\u0151vel vagy b\xF6ng\xE9sz\u0151b\u0151v\xEDtm\xE9nnyel kapcsolatos egy\xE9b probl\xE9ma", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "A webhely a rekl\xE1mblokkol\xF3 kikapcsol\xE1s\xE1t k\xE9rte", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Valami m\xE1s", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Tov\xE1bbi r\xE9szletek megoszt\xE1sa (nem k\xF6telez\u0151):{bullet}Mi t\xF6rt\xE9nt?{bullet}Minek kellett volna t\xF6rt\xE9nnie?{bullet}A v\xE9delem kikapcsol\xE1sa seg\xEDtett?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Jelent\xE9s k\xFCld\xE9se", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "A DuckDuckG\xF3nak k\xFCld\xF6tt jelent\xE9sek csak a visszajelz\xE9sek kezel\xE9s\xE9hez sz\xFCks\xE9ges inform\xE1ci\xF3kat tartalmazz\xE1k.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "K\xF6sz\xF6nj\xFCk!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "A jelent\xE9sed alapj\xE1n t\xF6k\xE9letes\xEDthetj\xFCk term\xE9keinket, \xE9s jobb \xE9lm\xE9nyt ny\xFAjthatunk m\xE1soknak.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Nyomk\xF6vet\u0151k", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "A v\xE9delmi lista friss\xEDt\xE9se", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "A v\xE9delmek <b>BE</b> vannak kapcsolva ezen a webhelyen", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "A v\xE9delmek <b>KI</b> vannak kapcsolva ezen a webhelyen", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Ideiglenesen kikapcsoltuk az adatv\xE9delmi funkci\xF3kat, mert \xFAgy t\u0171nik, hogy a webhely helytelen m\u0171k\xF6d\xE9s\xE9t eredm\xE9nyezik.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Javasoljuk, hogy kapcsold ki az adatv\xE9delmi funkci\xF3kat ezen a webhelyen, hogy kik\xFCsz\xF6b\xF6ld a webhely helytelen m\u0171k\xF6d\xE9s\xE9t.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Ez az oldal nem biztons\xE1gos</b> \xE9s vesz\xE9lyeztetheti az erre az oldalra k\xFCld\xF6tt inform\xE1ci\xF3kat.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "A k\xF6vetkez\u0151 harmadik f\xE9l tartom\xE1nyok k\xE9r\xE9seinek bet\xF6lt\xE9se blokkolva van, mivel nyomon k\xF6vet\u0151 k\xE9r\xE9sk\xE9nt lettek beazonos\xEDtva. Ha egy c\xE9g k\xE9r\xE9sei bet\xF6lt\u0151dnek, az lehet\u0151v\xE9 teheti sz\xE1mukra, hogy profilokat k\xE9sz\xEDtsenek r\xF3lad.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Ezen az oldalon nem lett blokkolva nyomon k\xF6vet\u0151 k\xE9r\xE9s. Ha egy c\xE9g k\xE9r\xE9sei bet\xF6lt\u0151dnek, az lehet\u0151v\xE9 teheti sz\xE1mukra, hogy profilokat k\xE9sz\xEDtsenek r\xF3lad.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Ezen az oldalon nem \xE9szlelt\xFCnk nyomon k\xF6vet\u0151 k\xE9r\xE9st.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Nem tal\xE1lhat\xF3 olyan c\xE9g, amely megpr\xF3b\xE1lt volna nyomon k\xF6vet\u0151 k\xE9r\xE9st bet\xF6lteni ezen az oldalon.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "A webhely helytelen m\u0171k\xF6d\xE9s\xE9nek megel\u0151z\xE9s\xE9\xE9rt nem blokkoltuk egyetlen c\xE9g nyomon k\xF6vet\u0151 k\xE9r\xE9s\xE9nek bet\xF6lt\xE9s\xE9t sem ezen az oldalon.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "A nyomon k\xF6vet\u0151 k\xE9r\xE9sek bet\xF6lt\xE9se nincs blokkolva, mert a v\xE9delem ki van kapcsolva ehhez a webhelyhez. Ha egy c\xE9g k\xE9r\xE9sei bet\xF6lt\u0151dnek, az lehet\u0151v\xE9 teheti sz\xE1mukra, hogy profilokat k\xE9sz\xEDtsenek r\xF3lad.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Priv\xE1t Duck-c\xEDm l\xE9trehoz\xE1sa", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "A v\xE1g\xF3lapra m\xE1solva!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "A weboldal nem az elv\xE1rtak szerint m\u0171k\xF6dik?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "A webhely nem m\u0171k\xF6dik?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Hib\xE1s weboldal jelent\xE9se", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "A v\xE9delem kikapcsol\xE1sa seg\xEDthet.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "A webhely m\xE9g mindig nem m\u0171k\xF6dik?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "\xD3vint\xE9zked\xE9sekre van sz\xFCks\xE9g", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Ez az oldal a(z) {companyDisplayName} tulajdon\xE1ban van</b>, amely nyomk\xF6vet\u0151 h\xE1l\xF3zatot m\u0171k\xF6dtet a legn\xE9pszer\u0171bb webhelyek {companyPrevalence}%-\xE1n. Ezen az oldalon siker\xFClt blokkolnunk n\xE9h\xE1ny k\xE9r\xE9s\xFCket.} other {<b>Ez az oldal a(z) {companyDisplayName} tulajdon\xE1ban van</b>, amely nyomk\xF6vet\u0151 h\xE1l\xF3zatot m\u0171k\xF6dtet a legn\xE9pszer\u0171bb webhelyek {companyPrevalence}%-\xE1n. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Blokkoltuk n\xE9h\xE1ny c\xE9g nyomk\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.} =2 {Blokkoltuk a(z) <b>{firstCompany}</b> \xE9s a(z) <b>{secondCompany}</b> nyomon k\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.} =3 {Blokkoltuk a(z) <b>{firstCompany}</b>, a(z) <b>{secondCompany}</b> \xE9s a(z) <b>{thirdCompany}</b> nyomon k\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.} =4 {Blokkoltuk a(z) <b>{firstCompany}</b>, a(z) <b>{secondCompany}</b>, a(z) <b>{thirdCompany}</b> \xE9s a(z) <b>{fourthCompany}</b> nyomon k\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.} =5 {Blokkoltuk a(z) <b>{firstCompany}</b>, a(z) <b>{secondCompany}</b>, a(z) <b>{thirdCompany}</b>, a(z) <b>{fourthCompany}</b> \xE9s <b>1 m\xE1sik</b> c\xE9g nyomon k\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.} one {Blokkoltuk a(z) <b>{firstCompany}</b> nyomon k\xF6vet\u0151 k\xE9r\xE9s\xE9nek bet\xF6lt\xE9s\xE9t ezen az oldalon.} other {Blokkoltuk a(z) <b>{firstCompany}</b>, a(z) <b>{secondCompany}</b>, a(z) <b>{thirdCompany}</b>, a(z) <b>{fourthCompany}</b> \xE9s <b>{othersCount} m\xE1sik</b> c\xE9g nyomon k\xF6vet\u0151 k\xE9r\xE9seinek bet\xF6lt\xE9s\xE9t ezen az oldalon.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Kezelt s\xFCtik", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Felugr\xF3 s\xFCtiablak elrejtve", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Ezen a webhelyen csak a s\xFCtik felugr\xF3 ablak\xE1t tudtuk elrejteni, mert nem volt lehet\u0151s\xE9g a s\xFCtikre vonatkoz\xF3 be\xE1ll\xEDt\xE1sok kezel\xE9s\xE9re. A webes k\xF6vet\xE9s elleni egy\xE9b v\xE9delmi m\xF3dszereink tov\xE1bbra is m\u0171k\xF6dnek.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "A s\xFCtibe\xE1ll\xEDt\xE1sokat az adatv\xE9delem maximaliz\xE1l\xE1s\xE1ra \xE1ll\xEDtottuk be, \xE9s bez\xE1rtuk a felugr\xF3 ablakot.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Letilt\xE1s a be\xE1ll\xEDt\xE1sokban", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "A kapcsolat titkos\xEDtott", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "A kapcsolat nem titkos\xEDtott", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "K\xE9r\xE9sek bet\xF6lt\xE9se blokkolva", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nincsenek nyomon k\xF6vet\u0151 k\xE9r\xE9sek blokkolva", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nem tal\xE1lhat\xF3k nyomon k\xF6vet\u0151 k\xE9r\xE9sek", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "A harmadik f\xE9l k\xE9r\xE9sei be lettek t\xF6ltve", note: "todo" }, thirdPartiesNoneFound: { title: "Nem tal\xE1lhat\xF3k harmadik f\xE9lt\u0151l sz\xE1rmaz\xF3 k\xE9r\xE9sek", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "A(z) {companyName} tulajdon\xE1ban van ez az oldal \xE9s az oldalon tal\xE1lhat\xF3 ismert nyomk\xF6vet\u0151k, ez\xE9rt nem tiltottuk l\u0151 \u0151ket.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Nem tal\xE1lhat\xF3 olyan c\xE9g, amely megpr\xF3b\xE1lt volna nyomon k\xF6vet\u0151 k\xE9r\xE9st bet\xF6lteni ezen az oldalon.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "A nyomk\xF6vet\u0151k seg\xEDts\xE9g\xE9vel a c\xE9gek profilt alkothatnak r\xF3lad. Azt \xE9szlelt\xFCk, hogy ezen az oldalon ezek a c\xE9gek nyomon k\xF6vetik a tev\xE9kenys\xE9gedet.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "A nyomk\xF6vet\u0151k seg\xEDts\xE9g\xE9vel a c\xE9gek profilt alkothatnak r\xF3lad. Letiltottuk ezeket a c\xE9geket, hogy nyomon k\xF6vess\xE9k az oldalon v\xE9gzett tev\xE9kenys\xE9gedet.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "A nyomk\xF6vet\u0151 h\xE1l\xF3zat ismeretlen", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "A(z) {companyName} nyomk\xF6vet\u0151 tartom\xE1nyai", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 nyomk\xF6vet\u0151t tal\xE1ltunk", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "A webhely tulajdon\xE1ban l\xE9v\u0151 nyomk\xF6vet\u0151k (enged\xE9lyezett)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} nyomk\xF6vet\u0151 letiltva itt: {domain}} other {{trackerCount} nyomk\xF6vet\u0151 letiltva itt: {domain}}}} other {{trackerCount, plural, one {{trackerCount} nyomk\xF6vet\u0151 tal\xE1lhat\xF3 itt: {domain}} other {{trackerCount} nyomk\xF6vet\u0151 tal\xE1lhat\xF3 itt: {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Fontos tudni: a platformkorl\xE1toz\xE1sok korl\xE1tozhatj\xE1k az \xF6sszes k\xE9r\xE9s \xE9szlel\xE9s\xE9t.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "A webes k\xF6vet\xE9s elleni v\xE9delm\xFCnkr\u0151l", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Hogyan hatnak a keres\xE9si hirdet\xE9seink a v\xE9delm\xFCnkre", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "A k\xF6vetkez\u0151 tartom\xE1ny k\xE9r\xE9sei az\xE9rt lettek bet\xF6ltve, mert a DuckDuckGo-n nemr\xE9g r\xE1kattintottak egy {domain} hirdet\xE9sre. Ezek a k\xE9r\xE9sek seg\xEDtenek \xE9rt\xE9kelni a hirdet\xE9sek hat\xE9konys\xE1g\xE1t. A DuckDuckGo egyik hirdet\xE9se sem profiloz\xF3.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "A k\xF6vetkez\u0151 tartom\xE1nyok k\xE9r\xE9sei a webhely helytelen m\u0171k\xF6d\xE9s\xE9nek megel\u0151z\xE9se \xE9rdek\xE9ben t\xF6lt\u0151dtek be.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "A k\xF6vetkez\u0151 tartom\xE1nyok k\xE9r\xE9sei az\xE9rt t\xF6lt\u0151dtek be, mert a k\xF6vetkez\u0151h\xF6z vannak t\xE1rs\xEDtva: {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "A k\xF6vetkez\u0151 tartom\xE1nyok k\xE9r\xE9sei is bet\xF6lt\u0151dtek." }, sectionHeadingProtectionsDisabled: { title: "A k\xF6vetkez\u0151 tartom\xE1nyok k\xE9r\xE9sei az\xE9rt t\xF6lt\u0151dtek be, mert a v\xE9delem ki van kapcsolva.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "A k\xF6vetkez\u0151 harmadik f\xE9l tartom\xE1nyok k\xE9r\xE9sei be lettek t\xF6ltve. Ha egy c\xE9g k\xE9r\xE9sei bet\xF6lt\u0151dnek, ez lehet\u0151v\xE9 teheti sz\xE1mukra, hogy profilokat k\xE9sz\xEDtsenek r\xF3lad, b\xE1r a t\xF6bbi webes nyomk\xF6vet\xE9si v\xE9delm\xFCnk tov\xE1bbra is m\u0171k\xF6dik.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "A k\xF6vetkez\u0151 harmadik f\xE9l tartom\xE1nyok k\xE9r\xE9sei be lettek t\xF6ltve. Ha egy c\xE9g k\xE9r\xE9sei bet\xF6lt\u0151dnek, ez lehet\u0151v\xE9 teheti sz\xE1mukra, hogy profilokat k\xE9sz\xEDtsenek r\xF3lad, b\xE1r a t\xF6bbi webes nyomk\xF6vet\xE9si v\xE9delm\xFCnk tov\xE1bbra is m\u0171k\xF6dik.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nem \xE9szlelt\xFCnk harmadik f\xE9l tartom\xE1ny\xE1b\xF3l \xE9rkez\u0151 k\xE9r\xE9seket.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analitika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Hirdet\xE9s", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "K\xF6z\xF6ss\xE9gi h\xE1l\xF3zat", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Tartalomk\xE9zbes\xEDt\xE9s", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Be\xE1gyazott tartalom", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Keres\xE9s a DuckDuckGo alkalmaz\xE1sban", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Keres\xE9s", note: "Aria label for the search button" }, optionsButton: { title: "Tov\xE1bbi lehet\u0151s\xE9gek", note: "Aria label for the for the options button" }, navigationComplete: { title: "K\xE9sz", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Vissza", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "V\xE9delmek enged\xE9lyez\xE9se", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "V\xE9delmek letilt\xE1sa", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Hiba t\xF6rt\xE9nt, ez\xE9rt nem tudtuk bet\xF6lteni a tartalmat. Pr\xF3b\xE1lkozz az oldal \xFAjb\xF3li bet\xF6lt\xE9s\xE9vel.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, it: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Crittografia", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Firma", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verifica", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Origine", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Wrapping", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Rimozione wrapping", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Sconosciuto", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Dettagli del certificato di sicurezza", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Nome comune", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Chiave pubblica", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmo", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Dimensione chiave", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Utilizzo", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Riepilogo", note: "Header for summary of connection details" }, permanent: { title: "Permanente", note: "Whether certificate is permanent" }, effectiveSize: { title: "Dimensione effettiva", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificato non trovato", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificato per {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Questa pagina utilizza una connessione non crittografata. Terze parti potrebbero essere in grado di visualizzare la tua attivit\xE0 o intercettare le informazioni sensibili che invii su questa pagina.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Abbiamo aggiornato la connessione di questa pagina per proteggere le informazioni inviate.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Questa pagina utilizza una connessione crittografata, che impedisce a terze parti di visualizzare la tua attivit\xE0 o di intercettare le informazioni sensibili che invii su questa pagina.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Le Protezioni della Privacy non sono disponibili per le pagine speciali o per le pagine locali.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Ti piace usare DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Aiutaci a diffondere la notizia alla tua famiglia e ai tuoi amici", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Diffondi DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Ti preoccupa che le tue e-mail vengano tracciate online?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Iscriviti subito a DuckDuckGo Email Protection per la tua estensione!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Chiudi le schede e cancella i dati", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Elimina dati", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Solo sito corrente", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Ultima ora", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Ultime 24 ore", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Ultimi 7 giorni", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Ultime 4 settimane", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Sempre", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {un'ora} day {24 ore} week {una settimana} month {4 settimane} other {Tutto}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Chiudere <b>{openTabs}</b> scheda ed eliminare <b>{durationDesc}</b> di cronologia di navigazione e di cookie?} other {Chiudere <b>{openTabs}</b> schede ed eliminare <b>{durationDesc}</b> di cronologia di navigazione e di cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Chiudere <b>{openTabs}</b> scheda ed eliminare <b>{durationDesc}</b> di cookie?} other {Chiudere <b>{openTabs}</b> schede ed eliminare <b>{durationDesc}</b> di cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Eliminare <b>{durationDesc}</b> di cronologia di navigazione e di cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Eliminare <b>{durationDesc}</b> di cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Chiudere <b>{openTabs}</b> {openTabs, plural, =1 {scheda} other {schede}} ed eliminare <b>tutti</b> i dati della cronologia di navigazione e dei cookie ({cookies} {cookies, plural, =1 {sito} other {siti}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Chiudere <b>{openTabs}</b> {openTabs, plural, =1 {scheda} other {schede}} ed eliminare <b>tutti</b> i cookie ({cookies} {cookies, plural, =1 {sito} other {siti}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Eliminare <b>tutta</b> la cronologia di navigazione e i cookie ({cookies} sito)?} other {Eliminare <b>tutta</b> la cronologia di navigazione e i cookie ({cookies} siti)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Eliminare <b>tutti</b> i cookie ({cookies} sito)?} other {Eliminare <b>tutti</b> i cookie ({cookies} siti)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Chiudere <b>{openTabs} {site}</b> scheda ed eliminare <b>tutti i cookie {site}</b>?} other {Chiudere <b>{openTabs} {site}</b> schede ed eliminare <b>tutti i cookie {site}</b> ?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Chiudere la scheda <b>{openTabs} {site}</b> ed eliminare <b>tutti i cookie {site}</b>?} other {Chiudere le schede <b>{openTabs} {site}</b> ed eliminare <b>tutti i cookie {site}</b> ?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Eliminare <b>tutta {site}</b> la cronologia di navigazione e i cookie?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Eliminare <b>tutti i cookie di {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} scheda bloccata</b> sar\xE0 ignorata.} other {<b>{tabs} schede bloccate</b> saranno ignorate.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Cancella", note: "Button text to start data clearing." }, cancel: { title: "Annulla", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Per cancellare anche la cronologia, seleziona un periodo di tempo.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Fotocamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Microfono", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolocalizzazione", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Popup", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Chiedi ogni volta", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Invia una notifica", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Consenti sempre", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Rifiuta sempre", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "L'invio di una segnalazione anonima su un sito non funzionante ci aiuta a migliorare l'app.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Descrivi cosa \xE8 successo", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Sito bloccato o non caricato", note: "User is reporting this page because the page didn't load" }, layout: { title: "Layout del sito interrotto", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Il sito contiene grandi spazi vuoti", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Il video non \xE8 stato riprodotto o caricato", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Le immagini non sono state caricate", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Commenti, recensioni o chat non sono stati caricati", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Manca il contenuto", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Collegamenti o pulsanti non funzionano", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Impossibile accedere/registrarsi", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Non riesco a pagare, effettuare il check-out o fare acquisti", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problema con il browser o un'altra estensione del browser", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Il sito mi ha chiesto di disabilitare il blocco degli annunci", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Qualcos'altro", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Comunica ulteriori dettagli (facoltativo):{bullet}Cosa \xE8 successo?{bullet}Cosa sarebbe dovuto succedere?{bullet}Disattivare le protezioni \xE8 stato utile?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Invia il rapporto", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Le segnalazioni inviate a DuckDuckGo includono solo le informazioni necessarie per aiutarci a rispondere al tuo commento.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Grazie!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "La tua segnalazione contribuir\xE0 a migliorare i nostri prodotti e a rendere l'esperienza migliore per gli altri utenti.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Sistemi di tracciamento", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Aggiornamento elenco delle protezioni", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Le protezioni sono <b>ATTIVE</b> per questo sito", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Le protezioni sono <b>DISATTIVATE</b> per questo sito", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Abbiamo temporaneamente disabilitato le Protezioni della Privacy perch\xE9 sembra che stiano interrompendo il funzionamento del sito.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Per evitare malfunzionamenti, ti consigliamo di disabilitare le Protezioni della Privacy per questo sito.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Questo sito non \xE8 sicuro</b> e potrebbe compromettere le informazioni che invii su questa pagina.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Il caricamento delle richieste da parte dei seguenti domini di terze parti \xE8 stato bloccato perch\xE9 si trattava di richieste con tracciamento. Il caricamento delle richieste da parte delle aziende pu\xF2 consentire loro di tracciare un profilo dell'utente.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Nessun caricamento di richieste con tracciamento \xE8 stato bloccato su questa pagina. Il caricamento delle richieste da parte delle aziende pu\xF2 consentire loro di tracciare un profilo dell'utente.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Non abbiamo individuato richieste con tracciamento su questa pagina.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Non abbiamo trovato aziende che tentano di caricare richieste con tracciamento su questa pagina.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Per evitare malfunzionamenti sul sito, non abbiamo bloccato il caricamento delle richieste con tracciamento da parte delle aziende su questa pagina.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Il caricamento delle richieste con tracciamento non \xE8 stato bloccato perch\xE9 le protezioni per questo sito sono disattivate. Il caricamento delle richieste da parte delle aziende pu\xF2 consentire loro di tracciare un profilo dell'utente.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Genera Duck Address privato", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Copiato negli appunti.", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Il sito web non funziona come dovrebbe?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Il sito web non funziona?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Segnala sito danneggiato", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Disattivare le protezioni potrebbe essere utile.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Il sito continua a non funzionare?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Adotta le dovute precauzioni", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Questo sito \xE8 di propriet\xE0 di {companyDisplayName}</b>, che gestisce una rete di sistemi di tracciamento sul {companyPrevalence}% dei principali siti Web. Siamo riusciti a bloccare alcune delle loro richieste su questa pagina.} other {<b>Questo sito \xE8 di propriet\xE0 di {companyDisplayName}</b>, che gestisce una rete di sistemi di tracciamento sul {companyPrevalence}% dei principali siti Web. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Abbiamo impedito ad alcune aziende di caricare richieste di tracciamento su questa pagina.} =2 {Abbiamo bloccato il caricamento delle richieste con tracciamento di <b>{firstCompany}</b> e <b>{secondCompany}</b> su questa pagina.} =3 {Abbiamo bloccato il caricamento delle richieste con tracciamento di <b>{firstCompany}</b>, <b>{secondCompany}</b> e <b>{thirdCompany}</b> su questa pagina.} =4 {Abbiamo bloccato il caricamento delle richieste con tracciamento di <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> e <b>{fourthCompany}</b> su questa pagina.} =5 {Abbiamo bloccato il caricamento delle richieste con tracciamento di <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> e di <b>1 altra</b> su questa pagina.} one {Abbiamo bloccato il caricamento della richiesta con tracciamento di <b>{firstCompany}</b> su questa pagina.} other {Abbiamo bloccato il caricamento delle richieste con tracciamento di <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> e di <b>{othersCount} altre</b> su questa pagina.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookie gestiti", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Popup dei cookie nascosto", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Siamo riusciti solo a nascondere il popup sui cookie di questo sito perch\xE9 non era prevista alcuna opzione che consentisse di gestire le preferenze relative ai cookie. Le altre nostre protezioni contro il tracciamento web sono ancora valide.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Abbiamo configurato le preferenze dei cookie in modo da massimizzare la privacy e abbiamo chiuso il popup.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Disabilita in Impostazioni", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "La connessione \xE8 crittografata", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "La connessione non \xE8 crittografata", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Caricamento delle richieste bloccato", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nessuna richiesta con tracciamento bloccata", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nessuna richiesta con tracciamento trovata", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Richieste di terze parti caricate", note: "todo" }, thirdPartiesNoneFound: { title: "Nessuna richiesta di terze parti trovata", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} \xE8 proprietaria di questo sito e dei sistemi di tracciamento noti presenti in questa pagina, pertanto non li abbiamo bloccati.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Non abbiamo trovato aziende che tentano di caricare richieste con tracciamento su questa pagina.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "I sistemi di tracciamento consentono alle aziende di tracciare un profilo dell'utente. In questa pagina sono presenti queste aziende che monitorano la tua attivit\xE0.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "I sistemi di tracciamento consentono alle aziende di tracciare un profilo dell'utente. Abbiamo impedito a queste aziende di monitorare la tua attivit\xE0 su questa pagina.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Rete di sistemi di tracciamento sconosciuta", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domini di sistemi di tracciamento per {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 sistemi di tracciamento trovati", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sistemi di tracciamento appartenenti a questo sito (consentiti)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sistema di tracciamento bloccato su {domain}} other {{trackerCount} sistemi di tracciamento bloccati su {domain}}}} other {{trackerCount, plural, one {{trackerCount} sistema di tracciamento trovato su {domain}} other {{trackerCount} sistemi di tracciamento trovati su {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Attenzione: le restrizioni imposte dalla piattaforma possono compromettere la possibilit\xE0 di rilevare tutte le richieste.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Informazioni sulle nostre protezioni dal tracciamento web", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "In che modo i nostri annunci della rete di ricerca influiscono sulle nostre protezioni", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Le richieste provenienti dal seguente dominio sono state caricate perch\xE9 si \xE8 recentemente fatto clic su un annuncio di {domain} su DuckDuckGo. Tali richieste contribuiscono a valutare l'efficacia degli annunci. Tutti gli annunci presenti su DuckDuckGo non sono caratterizzati da profilazione.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Le richieste provenienti dal seguente dominio sono state caricate per evitare l'interruzione del funzionamento del sito.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Le richieste provenienti dai seguenti domini sono state caricate perch\xE9 sono associate a {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Sono state caricate anche le richieste dei seguenti domini." }, sectionHeadingProtectionsDisabled: { title: "Le richieste dei seguenti domini sono state caricate perch\xE9 le protezioni sono disattivate.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Le richieste dei seguenti domini di terze parti sono state caricate. Il caricamento delle richieste da parte delle aziende pu\xF2 consentire loro di tracciare un profilo dell'utente, sebbene le nostre ulteriori protezioni per il tracciamento sul web restino comunque valide.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Le richieste dei seguenti domini di terze parti sono state caricate. Il caricamento delle richieste da parte delle aziende pu\xF2 consentire loro di tracciare un profilo dell'utente, sebbene le nostre ulteriori protezioni per il tracciamento sul web restino comunque valide.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Non abbiamo individuato richieste provenienti da domini di terzi.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analisi", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Pubblicit\xE0", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Social Network", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Consegna dei contenuti", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Contenuto incorporato", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Cerca con DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Ricerca", note: "Aria label for the search button" }, optionsButton: { title: "Altre opzioni", note: "Aria label for the for the options button" }, navigationComplete: { title: "Fatto", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Indietro", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Abilita protezioni", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Disabilita protezioni", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Si \xE8 verificato un errore e non siamo riusciti a caricare questo contenuto. Prova a ricaricare la pagina.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, lt: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u0160ifruoti", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Pasira\u0161yti", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Tikrinti", note: "When the cryptographic key can be used to verify data" }, derive: { title: "I\u0161vesti", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Suskleisti", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "I\u0161skleisti", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Ne\u017Einomas", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "I\u0161sami informacija apie saugos sertifikat\u0105", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Bendras pavadinimas", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Vie\u0161as raktas", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmas", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Rakto dydis", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Naudojimas", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Santrauka", note: "Header for summary of connection details" }, permanent: { title: "Nuolatinis", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efektyvus dydis", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Sertifikatas nerastas", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Sertifikatas, skirtas {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "\u0160iame puslapyje naudojamas neu\u017E\u0161ifruotas ry\u0161ys. Tre\u010Diosios \u0161alys gali matyti j\u016Bs\u0173 veikl\u0105 arba perimti slapt\u0105 informacij\u0105, kuri\u0105 siun\u010Diate \u0161iame puslapyje.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Atnaujinome \u0161iame puslapyje esant\u012F ry\u0161\u012F, kad apsaugotume siun\u010Diam\u0105 informacij\u0105 jos perdavimo metu.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "\u0160iame puslapyje naudojamas u\u017E\u0161ifruotas ry\u0161ys, tod\u0117l tre\u010Diosios \u0161alys negali per\u017Ei\u016Br\u0117ti j\u016Bs\u0173 veiklos ar perimti slaptos informacijos, kuri\u0105 siun\u010Diate \u0161iame puslapyje.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Privatumo apsauga netaikoma specialiesiems ar vietiniams puslapiams.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "M\u0117gstate naudoti \u201EDuckDuckGo\u201C?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Pad\u0117kite mums skleisti \u017Eini\u0105 j\u016Bs\u0173 \u0161eimai ir draugams", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Skleiskite \u017Eini\u0105 apie \u201EDuckDuckGo\u201C", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Pavargote nuo sekam\u0173 el. lai\u0161k\u0173?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "U\u017Esisakykite \u201EDuckDuckGo\u201C el. pa\u0161to apsaug\u0105 savo pl\u0117tiniui dabar!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "U\u017Edaryti skirtukus ir valyti duomenis", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Valyti duomenis", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Tik dabartin\u0117 svetain\u0117", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Paskutin\u0117 valanda", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Paskutin\u0117s 24 valandos", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Paskutin\u0117s 7 dienos", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Paskutin\u0117s 4 savait\u0117s", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Viso laiko", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {viena valanda} day {24 valandos} week {viena savait\u0117} month {4 savait\u0117s} other {Visi}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {U\u017Edaryti <b>{openTabs}</b> skirtuk\u0105 ir i\u0161valyti <b>{durationDesc}</b> nar\u0161ymo istorij\u0105 ir slapukus?} few {U\u017Edaryti <b>{openTabs}</b> skirtukus ir i\u0161valyti <b>{durationDesc}</b> nar\u0161ymo istorij\u0105 ir slapukus?} many {U\u017Edaryti <b>{openTabs}</b> skirtuko ir i\u0161valyti <b>{durationDesc}</b> nar\u0161ymo istorij\u0105 ir slapukus?} other {U\u017Edaryti <b>{openTabs}</b> skirtuk\u0173 ir i\u0161valyti <b>{durationDesc}</b> nar\u0161ymo istorij\u0105 ir slapukus?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {U\u017Edaryti <b>{openTabs}</b> skirtuk\u0105 ir i\u0161valyti <b>{durationDesc}</b> slapukus?} few {U\u017Edaryti <b>{openTabs}</b> skirtukus ir i\u0161valyti <b>{durationDesc}</b> slapukus?} many {U\u017Edaryti <b>{openTabs}</b> skirtuko ir i\u0161valyti <b>{durationDesc}</b> slapukus?} other {U\u017Edaryti <b>{openTabs}</b> skirtuk\u0173 ir i\u0161valyti <b>{durationDesc}</b> slapukus?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "I\u0161valyti <b>{durationDesc}</b> nar\u0161ymo istorij\u0105 ir slapukus?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "I\u0161valyti <b>{durationDesc}</b> slapukus?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "U\u017Edaryti <b>{openTabs}</b> {openTabs, plural, =1 {skirtuk\u0105} few {skirtukus} other {skirtuk\u0173}}, ir i\u0161valyti <b>vis\u0105</b> nar\u0161ymo istorij\u0105 ir slapukus ({cookies} {cookies, plural, =1 {svetain\u0117je} few {svetain\u0117se} other {svetaini\u0173}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "U\u017Edaryti <b>{openTabs}</b> {openTabs, plural, =1 {skirtuk\u0105} few {skirtukus} other {skirtuk\u0173}}, ir i\u0161valyti <b>visus</b> slapukus ({cookies} {cookies, plural, =1 {svetain\u0117je} few {svetain\u0117se} other {svetaini\u0173}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {I\u0161valyti <b>vis\u0105</b> nar\u0161ymo istorij\u0105 ir slapukus ({cookies} svetain\u0117je)?} few {I\u0161valyti <b>vis\u0105</b> nar\u0161ymo istorij\u0105 ir slapukus ({cookies} svetain\u0117se)?} many {I\u0161valyti <b>vis\u0105</b> nar\u0161ymo istorij\u0105 ir slapukus ({cookies} svetain\u0117s)?} other {I\u0161valyti <b>vis\u0105</b> nar\u0161ymo istorij\u0105 ir slapukus ({cookies} svetaini\u0173)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {I\u0161valyti <b>visus</b> slapukus ({cookies} svetain\u0117je)?} few {I\u0161valyti <b>visus</b> slapukus ({cookies} svetain\u0117se)?} many {I\u0161valyti <b>visus</b> slapukus ({cookies} svetain\u0117s)?} other {I\u0161valyti <b>visus</b> slapukus ({cookies} svetaini\u0173)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {U\u017Edaryti <b>{openTabs} {site}</b> skirtuk\u0105 ir i\u0161valyti <b>visus {site}</b> slapukus?} few {U\u017Edaryti <b>{openTabs} {site}</b> skirtukus ir i\u0161valyti <b>visus {site}</b> slapukus?} many {U\u017Edaryti <b>{openTabs} {site}</b> skirtuko ir i\u0161valyti <b>visus {site}</b> slapukus?} other {U\u017Edaryti <b>{openTabs} {site}</b> skirtuk\u0173 ir i\u0161valyti <b>visus {site}</b> slapukus?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {U\u017Edarykite <b>{openTabs} {site}</b> skirtukus ir i\u0161valykite <b>visus {site}</b> slapukus?} few {U\u017Edaryti <b>{openTabs} {site}</b> skirtukus ir i\u0161valyti <b>visus {site}</b> slapukus?} many {U\u017Edaryti <b>{openTabs} {site}</b> skirtuko ir i\u0161valyti <b>visus {site}</b> slapukus?} other {U\u017Edaryti <b>{openTabs} {site}</b> skirtuk\u0173 ir i\u0161valyti <b>visus {site}</b> slapukus?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "I\u0161valyti <b>vis\u0105 {site}</b> nar\u0161ymo istorij\u0105 ir slapukus?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "I\u0161valyti <b>visus {site}</b> slapukus?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} prisegtas</b> skirtukas bus ignoruojamas.} few {<b>{tabs} prisegti</b> skirtukai bus ignoruojami.} many {<b>{tabs} prisegto</b> skirtuko bus ignoruojama.} other {<b>{tabs} prisegt\u0173</b> skirtuk\u0173 bus ignoruojama.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Valyti", note: "Button text to start data clearing." }, cancel: { title: "At\u0161aukti", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Nor\u0117dami i\u0161valyti istorij\u0105, pasirinkite laikotarp\u012F.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Fotoaparatas", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofonas", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geografin\u0117 pad\u0117tis", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "I\u0161\u0161okantieji langai", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Klausti kiekvien\u0105 kart\u0105", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Prane\u0161ti", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Visada leisti", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Visada atmesti", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anoniminio prane\u0161imo apie neveikian\u010Di\u0105 svetain\u0119 pateikimas padeda mums tobulinti program\u0117l\u0119.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Apra\u0161ykite, kas atsitiko", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Svetain\u0117 u\u017Eblokuota arba ne\u012Fkelta", note: "User is reporting this page because the page didn't load" }, layout: { title: "Svetain\u0117s i\u0161d\u0117stymas sugadintas", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Svetain\u0117je yra dideli\u0173 tu\u0161\u010Di\u0173 viet\u0173", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Vaizdo \u012Fra\u0161as nebuvo paleistas arba \u012Fkeltas", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Vaizdai ne\u012Fkelti", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Nepavyko \u012Fkelti komentar\u0173, ap\u017Evalg\u0173 ar pokalbi\u0173", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Tr\u016Bksta turinio", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Nuorodos ar mygtukai neveikia", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nepavyksta prisijungti / u\u017Esiregistruoti", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Negalite sumok\u0117ti, atsiskaityti ar apsipirkti", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Nar\u0161ykl\u0117s ar kito nar\u0161ykl\u0117s pl\u0117tinio problema", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Svetain\u0117 papra\u0161\u0117 man\u0119s i\u0161jungti reklamos blokavimo program\u0105", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Ka\u017Ekas kito", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Pasidalinkite daugiau informacijos (neprivaloma):{bullet}Kas atsitiko?{bullet}Kas tur\u0117jo atsitikti?{bullet}Ar pad\u0117jo i\u0161jungus apsaugos priemones?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Si\u0173sti ataskait\u0105", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "\u201EDuckDuckGo\u201C siun\u010Diamose ataskaitose pateikiama tik ta informacija, kurios reikia, kad gal\u0117tume reaguoti \u012F j\u016Bs\u0173 atsiliepimus.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "A\u010Di\u016B!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "J\u016Bs\u0173 ataskaita pad\u0117s patobulinti m\u016Bs\u0173 produktus ir pagerinti kit\u0173 naudotoj\u0173 patirt\u012F.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Steb\u0117jimo priemon\u0117s", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Apsaugos s\u0105ra\u0161o atnaujinimas", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "\u0160ios svetain\u0117s apsauga <b>\u012EJUNGTA</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "\u0160ios svetain\u0117s apsauga <b>I\u0160JUNGTA</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Laikinai i\u0161jung\u0117me privatumo apsaug\u0105, nes atrodo, kad ji trikdo \u0161ios svetain\u0117s veikim\u0105.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Rekomenduojame i\u0161jungti \u0161ios svetain\u0117s privatumo apsaug\u0105, kad svetain\u0117 veikt\u0173 tinkamai.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>\u0160i svetain\u0117 n\u0117ra saugi</b> ir gali pakenkti bet kokiai informacijai, kuri\u0105 siun\u010Diate \u0161iame puslapyje.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Toliau nurodyt\u0173 tre\u010Di\u0173j\u0173 \u0161ali\u0173 domen\u0173 u\u017Eklaus\u0173 \u012Fk\u0117limas buvo u\u017Eblokuotas, nes jos buvo identifikuotos kaip sekimo u\u017Eklausos. Jei \u012Fmon\u0117s u\u017Eklausos \u012Fkeliamos, ji gali leisti joms rinkti informacij\u0105 apie jus.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Sekimo u\u017Eklausos nebuvo u\u017Eblokuotos \u0161iame puslapyje. Jei \u012Fmon\u0117s u\u017Eklausos \u012Fkeliamos, jos gali b\u016Bti naudojamos informacijai apie jus rinkti.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "\u0160iame puslapyje nenustat\u0117me joki\u0173 sekimo u\u017Eklaus\u0173.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Neradome n\u0117 vienos \u012Fmon\u0117s, kuri \u0161iame puslapyje bandyt\u0173 \u012Fkelti sekimo u\u017Eklausas.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Kad svetain\u0117s veikimas neb\u016Bt\u0173 sutrikdytas, neu\u017Eblokavome joki\u0173 \u012Fmoni\u0173, bandan\u010Di\u0173 \u0161iame puslapyje \u012Fkelti sekimo u\u017Eklausas.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Nebuvo u\u017Eblokuotas joki\u0173 sekimo u\u017Eklaus\u0173 \u012Fk\u0117limas, nes \u0161ioje svetain\u0117je apsauga yra i\u0161jungta. Jei \u012Fmon\u0117s u\u017Eklausos \u012Fkeliamos, ji gali leisti joms rinkti informacij\u0105 apie jus.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generuoti privat\u0173 \u201EDuck\u201C adres\u0105", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Nukopijuota \u012F i\u0161karpin\u0119!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Svetain\u0117 neveikia taip, kaip tik\u0117tasi?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Svetain\u0117 neveikia?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Prane\u0161ti apie sugadint\u0105 svetain\u0119", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Gali pad\u0117ti apsaugos priemoni\u0173 i\u0161jungimas.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Svetain\u0117 vis dar neveikia?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Imkit\u0117s atsargumo priemoni\u0173", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>\u0160i svetain\u0117 priklauso {companyDisplayName}</b>, kuri valdo sekimo tinkl\u0105 {companyPrevalence}\xA0% geriausi\u0173 svetaini\u0173. Mums pavyko u\u017Eblokuoti kai kurias j\u0173 u\u017Eklausas \u0161iame puslapyje.} other {<b>\u0160i svetain\u0117 priklauso {companyDisplayName}</b>, kuri valdo sekimo tinkl\u0105 {companyPrevalence}\xA0% geriausi\u0173 svetaini\u0173. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {U\u017Eblokavome kai kuri\u0173 bendrovi\u0173 galimyb\u0119 \u0161iame puslapyje \u012Fkelti sekimo u\u017Eklausas.} =2 {U\u017Eblokavome <b>{firstCompany}</b> ir <b>{secondCompany}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje.} =3 {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b> ir <b>{thirdCompany}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje.} =4 {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> ir <b>{fourthCompany}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje.} =5 {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ir <b>dar 1</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje.} one {U\u017Eblokavome <b>{firstCompany}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje.} few {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ir <b>dar {othersCount}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje..} many {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ir <b>dar {othersCount}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje..} other {U\u017Eblokavome <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ir <b>dar {othersCount}</b> sekimo u\u017Eklaus\u0173 \u012Fk\u0117lim\u0105 \u0161iame puslapyje..}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Slapukai valdomi", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "I\u0161kylantysis slapuk\u0173 langas pasl\u0117ptas", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Slapuk\u0173 i\u0161kylant\u012Fj\u012F lang\u0105 \u0161ioje svetain\u0117je gal\u0117jome pasl\u0117pti tik tod\u0117l, kad nepateikta joki\u0173 parink\u010Di\u0173 slapuk\u0173 nuostatoms tvarkyti. Kitos m\u016Bs\u0173 \u017Einiatinklio steb\u0117jimo apsaugos priemon\u0117s vis dar taikomos.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Nustat\u0117me slapuk\u0173 nuostatas, kad b\u016Bt\u0173 u\u017Etikrintas kuo didesnis privatumas, ir u\u017Edar\u0117me slapuk\u0173 i\u0161kylant\u012Fj\u012F lang\u0105.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "I\u0161jungti nustatymuose", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Ry\u0161ys u\u017E\u0161ifruotas", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Ry\u0161ys neu\u017E\u0161ifruotas", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "U\u017Eklausos u\u017Eblokuotos \u012Fkelti", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Neu\u017Eblokuota joki\u0173 sekimo u\u017Eklaus\u0173", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Sekimo u\u017Eklaus\u0173 nerasta", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "\u012Ekeltos tre\u010Di\u0173j\u0173 \u0161ali\u0173 u\u017Eklausos", note: "todo" }, thirdPartiesNoneFound: { title: "N\u0117ra tre\u010Di\u0173j\u0173 \u0161ali\u0173 u\u017Eklaus\u0173", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} priklauso \u0161i svetain\u0117 ir \u017Einomos steb\u0117jimo priemon\u0117s, rastos \u0161iame puslapyje, tod\u0117l mes j\u0173 neu\u017Eblokavome.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Neradome n\u0117 vienos \u012Fmon\u0117s, kuri \u0161iame puslapyje bandyt\u0173 \u012Fkelti sekimo u\u017Eklausas.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Steb\u0117jimo priemon\u0117s padeda \u012Fmon\u0117ms sudaryti j\u016Bs\u0173 profil\u012F. Nustat\u0117me, kad \u0161ios \u012Fmon\u0117s stebi j\u016Bs\u0173 veikl\u0105 \u0161iame puslapyje.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Steb\u0117jimo priemon\u0117s padeda \u012Fmon\u0117ms sudaryti j\u016Bs\u0173 profil\u012F. U\u017Eblokavome \u0161i\u0173 \u012Fmoni\u0173 galimyb\u0119 steb\u0117ti j\u016Bs\u0173 veikl\u0105 \u0161iame puslapyje.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Steb\u0117jimo priemoni\u0173 tinklas ne\u017Einomas", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "{companyName} steb\u0117jimo priemoni\u0173 domenai", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Rasta 0 steb\u0117jimo priemoni\u0173", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "\u0160iai svetainei priklausan\u010Dios steb\u0117jimo priemon\u0117s (leid\u017Eiama)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} steb\u0117jimo priemon\u0117 u\u017Eblokuota {domain}} few {{trackerCount} steb\u0117jimo priemon\u0117s u\u017Eblokuotos {domain}} many {{trackerCount} steb\u0117jimo priemon\u0117s u\u017Eblokuota {domain}} other {{trackerCount} steb\u0117jimo priemoni\u0173 u\u017Eblokuota {domain}}}} other {{trackerCount, plural, one {{trackerCount} steb\u0117jimo priemon\u0117 rasta {domain}} few {{trackerCount} steb\u0117jimo priemon\u0117s rastos {domain}} many {{trackerCount} steb\u0117jimo priemon\u0117s rasta {domain}} other {{trackerCount} steb\u0117jimo priemoni\u0173 rasta {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Atkreipkite d\u0117mes\u012F: platformos apribojimai gali riboti m\u016Bs\u0173 galimybes aptikti visas u\u017Eklausas.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Apie m\u016Bs\u0173 \u017Einiatinklio steb\u0117jimo apsaug\u0105", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Kaip paie\u0161kos skelbimai veikia m\u016Bs\u0173 apsaugos priemones", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "\u0160io domeno u\u017Eklausos buvo \u012Fkeltos, nes neseniai \u201EDuckDuckGo\u201C buvo spustel\u0117ta {domain} reklama. \u0160ios u\u017Eklausos padeda \u012Fvertinti reklam\u0173 efektyvum\u0105. Visos \u201EDuckDuckGo\u201C reklamos nerenka informacijos apie naudotoj\u0105.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Siekiant i\u0161vengti svetain\u0117s veikimo sutrikim\u0173, buvo \u012Fkeltos \u0161ios domeno u\u017Eklausos.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "\u0160ios domeno u\u017Eklausos buvo \u012Fkeltos, nes jos susijusios su {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Taip pat buvo \u012Fkeltos \u0161ios domeno u\u017Eklausos." }, sectionHeadingProtectionsDisabled: { title: "\u0160ios domeno u\u017Eklausos buvo \u012Fkeltos, nes apsaugos yra i\u0161jungtos.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Buvo \u012Fkeltos \u0161ios tre\u010Di\u0173j\u0173 \u0161ali\u0173 domen\u0173 u\u017Eklausos. Jei \u012Fmon\u0117s u\u017Eklausos \u012Fkeliamos, ji gali leisti joms rinkti informacij\u0105 apie jus, nors kitos m\u016Bs\u0173 \u017Einiatinklio sekimo apsaugos priemon\u0117s tebegalioja.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Buvo \u012Fkeltos \u0161ios tre\u010Di\u0173j\u0173 \u0161ali\u0173 domen\u0173 u\u017Eklausos. Jei \u012Fmon\u0117s u\u017Eklausos \u012Fkeliamos, ji gali leisti joms rinkti informacij\u0105 apie jus, nors kitos m\u016Bs\u0173 \u017Einiatinklio sekimo apsaugos priemon\u0117s tebegalioja.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nenustat\u0117me joki\u0173 u\u017Eklaus\u0173 i\u0161 tre\u010Di\u0173j\u0173 \u0161ali\u0173 domen\u0173.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analiz\u0117", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklaminis", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Socialinis tinklas", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Turinio pateikimas", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "\u012Ed\u0117tasis turinys", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Ie\u0161koti DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Paie\u0161ka", note: "Aria label for the search button" }, optionsButton: { title: "Daugiau parink\u010Di\u0173", note: "Aria label for the for the options button" }, navigationComplete: { title: "Atlikta", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Atgal", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "\u012Ejungti apsaugos priemones", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "I\u0161jungti apsaugos priemones", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Ka\u017Ekas nepavyko ir negal\u0117jome \u012Fkelti \u0161io turinio. Pabandykite i\u0161 naujo \u012Fkelti puslap\u012F.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, lv: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u0160ifr\u0113t", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Parakst\u012Bt", note: "When the cryptographic key can be used to sign data" }, verify: { title: "P\u0101rbaud\u012Bt", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Atvasin\u0101t", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Iesai\u0146ot", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Izsai\u0146ot", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Nezin\u0101ms", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Inform\u0101cija par dro\u0161\u012Bbas sertifik\u0101tu", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Parastais nosaukums", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Publiska atsl\u0113ga", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritms", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Atsl\u0113gas izm\u0113rs", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Lietojums", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Kopsavilkums", note: "Header for summary of connection details" }, permanent: { title: "Past\u0101v\u012Bgs", note: "Whether certificate is permanent" }, effectiveSize: { title: "Der\u012Bgs izm\u0113rs", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Sertifik\u0101ts nav atrasts", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "{domain} sertifik\u0101ts", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "\u0160aj\u0101 lap\u0101 tiek izmantots ne\u0161ifr\u0113ts savienojums. Tre\u0161\u0101s puses, iesp\u0113jams, var\u0113s skat\u012Bt tavas darb\u012Bbas vai p\u0101rtvert sensit\u012Bvu inform\u0101ciju, ko nos\u016Bti \u0161aj\u0101 lap\u0101.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "M\u0113s esam uzlaboju\u0161i \u0161\u012Bs lapas savienojumu, lai aizsarg\u0101tu nos\u016Bt\u012Bto inform\u0101ciju t\u0101s p\u0101rraides laik\u0101.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "\u0160aj\u0101 lap\u0101 tiek izmantots \u0161ifr\u0113ts savienojums, kas ne\u013Cauj tre\u0161aj\u0101m pus\u0113m redz\u0113t tavas darb\u012Bbas un p\u0101rtvert sensit\u012Bvu inform\u0101ciju, ko s\u016Bti \u0161aj\u0101 lap\u0101.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Priv\u0101tuma aizsardz\u012Bba nav pieejama \u012Bpa\u0161\u0101m lap\u0101m vai viet\u0113j\u0101m lap\u0101m.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Tev pat\u012Bk lietot DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Iepaz\u012Bstini ar to ar\u012B radus un draugus", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Dalies ar DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Apnicis, ka tavi e-pasta zi\u0146ojumi tiek izsekoti?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Re\u0123istr\u0113jies DuckDuckGo e-pasta aizsardz\u012Bbai, lai ieg\u016Btu savu papla\u0161in\u0101jumu jau tagad!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Aizv\u0113rt cilnes un not\u012Br\u012Bt datus", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Not\u012Br\u012Bt datus", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Tikai pa\u0161reiz\u0113j\u0101 vietne", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "P\u0113d\u0113j\u0101 stunda", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "P\u0113d\u0113j\u0101s 24 stundas", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "P\u0113d\u0113j\u0101s 7 dienas", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "P\u0113d\u0113j\u0101s 4 ned\u0113\u013Cas", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Visu laiku", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {viena stunda} day {24 stundas} week {viena ned\u0113\u013Ca} month {4 ned\u0113\u013Cas} other {Viss}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, zero {Aizv\u0113rt <b>{openTabs}</b> cilnes un not\u012Br\u012Bt p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus (<b>{durationDesc}</b>)?} one {Aizv\u0113rt <b>{openTabs}</b> cilni un not\u012Br\u012Bt p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus (<b>{durationDesc}</b>)?} other {Aizv\u0113rt <b>{openTabs}</b> cilnes un not\u012Br\u012Bt p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus (<b>{durationDesc}</b>)?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, zero {Aizv\u0113rt <b>{openTabs}</b> cilnes un not\u012Br\u012Bt s\u012Bkfailus (<b>{durationDesc}</b>)?} one {Aizv\u0113rt <b>{openTabs}</b> cilni un not\u012Br\u012Bt s\u012Bkfailus (<b>{durationDesc}</b>)?} other {Aizv\u0113rt <b>{openTabs}</b> cilnes un not\u012Br\u012Bt s\u012Bkfailus (<b>{durationDesc}</b>)?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Not\u012Br\u012Bt p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus (<b>{durationDesc}</b>)?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Not\u012Br\u012Bt s\u012Bkfailus (<b>{durationDesc}</b>)?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Aizv\u0113rt <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} un not\u012Br\u012Bt <b>visu</b> p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Aizv\u0113rt <b>{openTabs}</b>{openTabs, plural, =1 {tab} other {tabs}} un not\u012Br\u012Bt <b>visus</b> s\u012Bkfailus ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, zero {Not\u012Br\u012Bt <b>visu</b> p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus ({cookies} vietnes)?} one {Not\u012Br\u012Bt <b>visu</b> p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus ({cookies} vietne)?} other {Not\u012Br\u012Bt <b>visu</b> p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus ({cookies} vietnes)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, zero {Not\u012Br\u012Bt <b>visus</b> s\u012Bkfailus ({cookies} vietnes)?} one {Not\u012Br\u012Bt <b>visus</b> s\u012Bkfailus ({cookies} vietne)?} other {Not\u012Br\u012Bt <b>visus</b> s\u012Bkfailus ({cookies} vietnes)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, zero {Aizv\u0113rt <b>{openTabs} {site}</b> cilnes un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?} one {Aizv\u0113rt <b>{openTabs} {site}</b> cilni un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?} other {Aizv\u0113rt <b>{openTabs} {site}</b> cilnes un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, zero {Aizv\u0113rt <b>{openTabs} {site}</b> cilnes un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?} one {Aizv\u0113rt <b>{openTabs} {site}</b> cilni un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?} other {Aizv\u0113rt <b>{openTabs} {site}</b> cilnes un not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Not\u012Br\u012Bt <b>visu {site}</b> p\u0101rl\u016Bko\u0161anas v\u0113sturi un s\u012Bkfailus?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Not\u012Br\u012Bt <b>visus {site}</b> s\u012Bkfailus?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, zero {<b>{tabs} piespraust\u0101s</b> cilnes tiks ignor\u0113tas.} one {<b>{tabs} piespraust\u0101</b> cilne tiks ignor\u0113ta.} other {<b>{tabs} piespraust\u0101s</b> cilnes tiks ignor\u0113tas.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Not\u012Br\u012Bt", note: "Button text to start data clearing." }, cancel: { title: "Atcelt", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Lai not\u012Br\u012Btu ar\u012B v\u0113sturi, atlasi laika periodu.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofons", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "\u0122eolok\u0101cija", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Uznirsto\u0161ie logi", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Jaut\u0101t katru reizi", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Pazi\u0146ot", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Vienm\u0113r at\u013Caut", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Vienm\u0113r liegt", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anon\u012Bma zi\u0146o\u0161ana par vietni, kur\u0101 ir darb\u012Bbas trauc\u0113jumi, pal\u012Bdz mums uzlabot lietotni.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Aprakstiet notiku\u0161o", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Vietne ir blo\u0137\u0113ta vai netika iel\u0101d\u0113ta", note: "User is reporting this page because the page didn't load" }, layout: { title: "Vietnes izk\u0101rtojums ir boj\u0101ts", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Vietn\u0113 ir lielas tuk\u0161as vietas", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video netika atska\u0146ots vai iel\u0101d\u0113ts", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Att\u0113li netika iel\u0101d\u0113ti", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Koment\u0101ri, atsauksmes vai t\u0113rz\u0113\u0161ana netika iel\u0101d\u0113ta", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Tr\u016Bkst satura", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Saites vai pogas nedarbojas", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nevar pierakst\u012Bties/re\u0123istr\u0113ties", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Nevar nor\u0113\u0137in\u0101ties vai iepirkties", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "P\u0101rl\u016Bkprogrammas vai cita p\u0101rl\u016Bkprogrammas papla\u0161in\u0101juma probl\u0113ma", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Vietne man l\u016Bdza atsp\u0113jot rekl\u0101mu blo\u0137\u0113t\u0101ju", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Kaut kas cits", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Sniedz s\u012Bk\u0101ku inform\u0101ciju (neoblig\u0101ti):{bullet}Kas notika?{bullet}Kam b\u016Btu bijis j\u0101notiek?{bullet}Vai aizsardz\u012Bbas izsl\u0113g\u0161ana pal\u012Bdz\u0113ja?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Nos\u016Bt\u012Bt zi\u0146ojumu", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Zi\u0146ojumos, kas tiek nos\u016Bt\u012Bti DuckDuckGo, tiek iek\u013Cauta tikai inform\u0101cija, kas mums nepiecie\u0161ama, lai rea\u0123\u0113tu uz tav\u0101m atsauksm\u0113m.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Paldies!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Tavs zi\u0146ojums pal\u012Bdz\u0113s padar\u012Bt m\u016Bsu produktus lab\u0101kus un uzlabot citu lietot\u0101ju pieredzi.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Izsekot\u0101ji", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Aizsardz\u012Bbas saraksta atjaunin\u0101\u0161ana", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Aizsardz\u012Bba \u0161ai vietnei ir <b>IESL\u0112GTA</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Aizsardz\u012Bba \u0161ai vietnei ir <b>IZSL\u0112GTA</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "M\u0113s uz laiku esam izsl\u0113gu\u0161i priv\u0101tuma aizsardz\u012Bbu, jo \u0161\u0137iet, ka t\u0101 trauc\u0113 \u0161\u012Bs vietnes darb\u012Bbu.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "M\u0113s iesak\u0101m atsp\u0113jot \u0161\u012Bs vietnes priv\u0101tuma aizsardz\u012Bbu, lai nov\u0113rstu vietnes darb\u012Bbas trauc\u0113jumus.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>\u0160\u012B vietne nav dro\u0161a</b> un var pak\u013Caut riskam jebkuru inform\u0101ciju, ko nos\u016Bti \u0161aj\u0101 lap\u0101.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "\u0160o tre\u0161o pu\u0161u dom\u0113nu piepras\u012Bjumu iel\u0101de tika blo\u0137\u0113ta, jo tie tika atpaz\u012Bti k\u0101 izseko\u0161i piepras\u012Bjumi. Uz\u0146\u0113muma piepras\u012Bjumu iel\u0101de, var \u013Caut tam veidot tavu profilu.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "\u0160aj\u0101 lap\u0101 netika blo\u0137\u0113ta neviena izsekojo\u0161a piepras\u012Bjuma iel\u0101de. Uz\u0146\u0113muma piepras\u012Bjumu iel\u0101de var \u013Caut tam veidot tavu profilu.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "M\u0113s \u0161aj\u0101 lap\u0101 neatrad\u0101m nevienu izsekojo\u0161o piepras\u012Bjumu.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "\u0160aj\u0101 lap\u0101 neatrad\u0101m nevienu uz\u0146\u0113mumu, kas m\u0113\u0123in\u0101tu iel\u0101d\u0113t izsekojo\u0161us piepras\u012Bjumus.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Lai nepie\u013Cautu vietnes darb\u012Bbas trauc\u0113jumus, m\u0113s neblo\u0137\u0113j\u0101m neviena uz\u0146\u0113muma izsekojo\u0161os piepras\u012Bjumus \u0161aj\u0101 lap\u0101.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Netika blo\u0137\u0113ta neviena izsekojo\u0161a piepras\u012Bjuma iel\u0101de, jo \u0161ai vietnei ir izsl\u0113gta aizsardz\u012Bba. Uz\u0146\u0113muma piepras\u012Bjumu iel\u0101des gad\u012Bjum\u0101 uz\u0146\u0113mums var veidot tavu profilu.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "\u0122ener\u0113t priv\u0101tu Duck adresi", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Nokop\u0113ts starpliktuv\u0113!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "T\u012Bmek\u013Ca vietne nedarbojas, k\u0101 paredz\u0113ts?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "T\u012Bmek\u013Ca vietne nedarbojas?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Zi\u0146ot par boj\u0101tu vietni", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Aizsardz\u012Bbas IZSL\u0112G\u0160ANA var pal\u012Bdz\u0113t.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Vietne joproj\u0101m nedarbojas?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Veikt piesardz\u012Bbas pas\u0101kumus", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>\u0160\u012B vietne pieder {companyDisplayName}</b>, kas p\u0101rvalda izseko\u0161anas t\u012Bklu {companyPrevalence}% popul\u0101r\u0101ko viet\u0146u. Mums izdev\u0101s blo\u0137\u0113t da\u017Eus no t\u0101 piepras\u012Bjumiem \u0161aj\u0101 lap\u0101.} other {<b>\u0160\u012B vietne pieder {companyDisplayName}</b>, kas p\u0101rvalda izseko\u0161anas t\u012Bklu {companyPrevalence}% popul\u0101r\u0101ko viet\u0146u. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {M\u0113s blo\u0137\u0113j\u0101m da\u017Eu uz\u0146\u0113mumu izseko\u0161anas piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} =2 {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b> un <b>{secondCompany}</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} =3 {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b>, <b>{secondCompany}</b> un <b>{thirdCompany}</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} =4 {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> un <b>{fourthCompany}</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} =5 {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> un <b>1 cita uz\u0146\u0113muma</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} zero {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> un <b>{othersCount} citu uz\u0146\u0113mumu</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} one {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.} other {M\u0113s blo\u0137\u0113j\u0101m <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> un <b>{othersCount} citu uz\u0146\u0113mumu</b> izsekojo\u0161o piepras\u012Bjumu iel\u0101d\u0113\u0161anu \u0161aj\u0101 lap\u0101.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "P\u0101rvald\u012Btie s\u012Bkfaili", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "S\u012Bkfailu uznirsto\u0161ais logs pasl\u0113pts", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "\u0160aj\u0101 vietn\u0113 m\u0113s var\u0113j\u0101m tikai pasl\u0113pt s\u012Bkfailu uznirsto\u0161o logu, jo nebija pieejamas s\u012Bkfailu preferen\u010Du p\u0101rvald\u012B\u0161anas opcijas. Joproj\u0101m ir sp\u0113k\u0101 citi m\u016Bsu t\u012Bmek\u013Ca izseko\u0161anas aizsardz\u012Bbas l\u012Bdzek\u013Ci.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "M\u0113s esam iestat\u012Bju\u0161i s\u012Bkfailu preferences maksim\u0101lai konfidencialit\u0101tei un aizv\u0113ru\u0161i uznirsto\u0161o logu.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Atsp\u0113jot iestat\u012Bjumos", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Savienojums ir \u0161ifr\u0113ts", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Savienojums nav \u0161ifr\u0113ts", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Piepras\u012Bjumi, kuru iel\u0101d\u0113\u0161ana ir blo\u0137\u0113ta", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nav blo\u0137\u0113ts neviens izsekojo\u0161ais piepras\u012Bjums", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nav atrasts neviens izsekojo\u0161ais piepras\u012Bjums", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Iel\u0101d\u0113tie tre\u0161o pu\u0161u piepras\u012Bjumi", note: "todo" }, thirdPartiesNoneFound: { title: "Netika atrasts neviens tre\u0161o pu\u0161u piepras\u012Bjums", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} ir \u0161\u012Bs vietnes un \u0161aj\u0101 lap\u0101 atrodamo zin\u0101mo izsekot\u0101ju \u012Bpa\u0161nieks, t\u0101p\u0113c m\u0113s tos neblo\u0137\u0113j\u0101m.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "\u0160aj\u0101 lap\u0101 neatrad\u0101m nevienu uz\u0146\u0113mumu, kas m\u0113\u0123in\u0101tu iel\u0101d\u0113t izsekojo\u0161us piepras\u012Bjumus.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Izsekot\u0101ji pal\u012Bdz uz\u0146\u0113mumiem tevi profil\u0113t. Esam atradu\u0161i \u0161os uz\u0146\u0113mumus, kuri nov\u0113ro tavas darb\u012Bbas \u0161aj\u0101 lap\u0101.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Izsekot\u0101ji pal\u012Bdz uz\u0146\u0113mumiem veidot tavu profilu. Esam blo\u0137\u0113ju\u0161i \u0161o uz\u0146\u0113mumu iesp\u0113ju p\u0101rraudz\u012Bt tavas darb\u012Bbas \u0161aj\u0101 lap\u0101.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Izseko\u0161anas t\u012Bkls nav zin\u0101ms", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "{companyName} izseko\u0161anas dom\u0113ni", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Atrasti 0 izsekot\u0101ji", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "\u0160ai vietnei piedero\u0161ie izsekot\u0101ji (at\u013Cauts)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, zero {{trackerCount} blo\u0137\u0113ti izsekot\u0101ji {domain}} one {{trackerCount} blo\u0137\u0113ts izsekot\u0101js {domain}} other {{trackerCount} blo\u0137\u0113ti izsekot\u0101ji {domain}}}} other {{trackerCount, plural, zero {Atrasti {trackerCount} izsekot\u0101ji {domain}} one {Atrasts {trackerCount} izsekot\u0101js {domain}} other {Atrasti {trackerCount} izsekot\u0101ji {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "L\u016Bdzu, \u0146emiet v\u0113r\u0101: platformas ierobe\u017Eojumi var ierobe\u017Eot m\u016Bsu sp\u0113ju noteikt visus piepras\u012Bjumus.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Par m\u016Bsu T\u012Bmek\u013Ca izseko\u0161anas aizsardz\u012Bbu", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "K\u0101 m\u016Bsu mekl\u0113\u0161anas rekl\u0101mas ietekm\u0113 m\u016Bsu aizsardz\u012Bbu", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "\u0160\u0101 dom\u0113na piepras\u012Bjumi tika iel\u0101d\u0113ti, jo nesen tika noklik\u0161\u0137in\u0101ts uz {domain} rekl\u0101mas pakalpojum\u0101 DuckDuckGo. \u0160ie piepras\u012Bjumi pal\u012Bdz nov\u0113rt\u0113t rekl\u0101mu efektivit\u0101ti. Neviena rekl\u0101ma pakalpojum\u0101 DuckDuckGo nav profil\u0113jo\u0161a.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "\u0160\u012B dom\u0113na piepras\u012Bjumi tika iel\u0101d\u0113ti, lai nepie\u013Cautu vietnes darb\u012Bbas trauc\u0113jumus.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Tika iel\u0101d\u0113ti \u0161o dom\u0113nu piepras\u012Bjumi, jo tie ir saist\u012Bti ar {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Tika iel\u0101d\u0113ti ar\u012B \u0161\u0101du dom\u0113nu piepras\u012Bjumi." }, sectionHeadingProtectionsDisabled: { title: "\u0160o dom\u0113nu piepras\u012Bjumi tika iel\u0101d\u0113ti, jo aizsardz\u012Bba ir izsl\u0113gta.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Tika iel\u0101d\u0113ti \u0161\u0101di tre\u0161o pu\u0161u dom\u0113nu piepras\u012Bjumi. Ja tiek iel\u0101d\u0113ti uz\u0146\u0113muma piepras\u012Bjumi, tas var \u013Caut uz\u0146\u0113mumam tevi profil\u0113t, lai gan joproj\u0101m ir sp\u0113k\u0101 citi m\u016Bsu t\u012Bmek\u013Ca izseko\u0161anas aizsardz\u012Bbas l\u012Bdzek\u013Ci.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Tika iel\u0101d\u0113ti \u0161\u0101di tre\u0161o pu\u0161u dom\u0113nu piepras\u012Bjumi. Ja tiek iel\u0101d\u0113ti uz\u0146\u0113muma piepras\u012Bjumi, tas var \u013Caut uz\u0146\u0113mumam tevi profil\u0113t, lai gan joproj\u0101m ir sp\u0113k\u0101 citi m\u016Bsu t\u012Bmek\u013Ca izseko\u0161anas aizsardz\u012Bbas l\u012Bdzek\u013Ci.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Netika identific\u0113ts neviens piepras\u012Bjums no tre\u0161o pu\u0161u dom\u0113niem.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Anal\u012Btika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Rekl\u0101ma", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Soci\u0101lais t\u012Bkls", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Satura pieg\u0101de", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Iegultais saturs", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Mekl\u0113t DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Mekl\u0113t", note: "Aria label for the search button" }, optionsButton: { title: "Citas iesp\u0113jas", note: "Aria label for the for the options button" }, navigationComplete: { title: "Gatavs", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Atpaka\u013C", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Iesp\u0113jot aizsardz\u012Bbu", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Atsp\u0113jot aizsardz\u012Bbu", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Rad\u0101s probl\u0113ma, un mums neizdev\u0101s iel\u0101d\u0113t \u0161o saturu. M\u0113\u0123iniet p\u0101rl\u0101d\u0113t lapu.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, nb: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Krypter", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Signer", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verifiser", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Hent fra", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Pakk inn", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Pakk ut", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Ukjent", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detaljer om sikkerhetssertifikatet", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Navn", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Offentlig n\xF8kkel", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritme", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "N\xF8kkelst\xF8rrelse", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Bruk", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Sammendrag", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effektiv st\xF8rrelse", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Fant ikke sertifikat", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Sertifikat for {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Denne siden bruker en ukryptert tilkobling. Tredjeparter kan kanskje se aktiviteten din eller fange opp sensitiv informasjon du sender p\xE5 denne siden.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Vi har oppgradert tilkoblingen p\xE5 denne siden, s\xE5 informasjonen du sender er beskyttet i transitt.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Denne siden bruker en kryptert tilkobling, som forhindrer tredjeparter i \xE5 se aktiviteten din eller fange opp sensitiv informasjon du sender p\xE5 denne siden.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Personvernbeskyttelser er ikke tilgjengelige for spesialsider eller lokale sider.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Liker du \xE5 bruke DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Fortell familie og venner om oss", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Spre DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Lei av at e-poster blir sporet?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Registrer deg for DuckDuckGos Email Protection for utvidelsen din n\xE5!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Lukk faner og slett data", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Slett data", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Bare n\xE5v\xE6rende nettsted", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Den siste timen", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "De siste 24 timene", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "De siste 7 dagene", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "De siste 4 ukene", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "All tid", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {\xE9n time} day {24 timer} week {\xE9n uke} month {4 uker} other {Alle}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs}</b> fane og fjerne <b>{durationDesc}</b> med nettleserhistorikk og informasjonskapsler?} other {Vil du lukke <b>{openTabs}</b> faner og fjerne <b>{durationDesc}</b> med nettleserhistorikk og informasjonskapsler?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs}</b> fane og fjerne <b>{durationDesc}</b> med informasjonskapsler?} other {Vil du lukke <b>{openTabs}</b> faner og fjerne <b>{durationDesc}</b> med informasjonskapsler?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Vil du fjerne <b>{durationDesc}</b> med nettleserhistorikk og informasjonskapsler?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Vil du fjerne <b>{durationDesc}</b> med informasjonskapsler?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Vil du lukke <b>{openTabs}</b> {openTabs, plural, =1 {fane} other {faner}} og fjerne <b>all</b> nettleserhistorikk og alle informasjonskapsler ({cookies} {cookies, plural, =1 {nettsted} other {nettsteder}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Vil du lukke <b>{openTabs}</b> {openTabs, plural, =1 {fane} other {faner}}, og fjerne <b>alle</b> informasjonskapsler ({cookies} {cookies, plural, =1 {nettsted} other {nettsteder}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Vil du fjerne <b>all</b> nettleserhistorikk og alle informasjonskapsler ({cookies} nettsted)?} other {Vil du fjerne <b>all</b> nettleserhistorikk og alle informasjonskapsler ({cookies} nettsteder)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Vil du slette <b>alle</b> informasjonskapsler ({cookies} nettsted)?} other {Vil du slette <b>alle</b> informasjonskapsler ({cookies} nettsteder)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs} fane for {site}</b>og slette <b>alle informasjonskapsler for {site}</b>?} other {Vil du lukke <b>{openTabs} faner for {site}</b> og slette <b>alle informasjonskapsler for {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Vil du lukke <b>{openTabs} {site}</b>-fane og slette <b>alle informasjonskapsler for {site}</b>?} other {Vil du lukke <b>{openTabs} {site}</b>-faner og slette <b>alle informasjonskapsler for {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Vil du slette <b>all nettleserhistorikk og alle informasjonskapsler for {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Vil du slette <b>alle informasjonskapsler for {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} festet</b> fane blir ignorert.} other {<b>{tabs} festede</b> faner blir ignorert.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Klarv\xE6r", note: "Button text to start data clearing." }, cancel: { title: "Avbryt", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Hvis du ogs\xE5 vil t\xF8mme historikken, m\xE5 du velge en tidsperiode.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokalisering", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Popup-vinduer", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Sp\xF8r hver gang", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Varsle", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Alltid tillat", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Alltid nekte", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Du kan hjelpe oss med \xE5 forbedre appen ved \xE5 sende inn en rapport om et defekt nettsted.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Beskriv hva som skjedde", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Nettstedet er blokkert eller ble ikke lastet", note: "User is reporting this page because the page didn't load" }, layout: { title: "Nettstedets layout er \xF8delagt", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Nettstedet inneholder store tomme omr\xE5der", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videoen spilte ikke av eller ble ikke lastet", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Bildene ble ikke lastet inn", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentarer, anmeldelser eller chatter ble ikke lastet", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Innhold mangler", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Linker eller knapper fungerer ikke", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Kan ikke logge p\xE5 / registrere meg", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Kan ikke betale, g\xE5 til kassen eller kj\xF8pe", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem med nettleser eller annen nettleserutvidelse", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Nettstedet ba meg om \xE5 deaktivere annonseblokkering", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Noe annet", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Del flere detaljer (valgfritt):{bullet}Hva skjedde?{bullet}Hva skulle ha skjedd?{bullet}Hjalp det \xE5 sl\xE5 av beskyttelse?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Send rapport", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Rapporter som sendes til DuckDuckGo, inneholder bare den informasjonen som er n\xF8dvendig for at vi skal kunne behandle tilbakemeldingen din.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Takk!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Rapporten din bidrar til \xE5 forbedre produktene v\xE5re og gj\xF8re opplevelsen bedre for andre.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Sporere", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Oppdaterer beskyttelseslisten", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Beskyttelse er <b>P\xC5</b> p\xE5 dette nettstedet", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Beskyttelse er <b>AV</b> p\xE5 dette nettstedet", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Vi har midlertidig deaktivert personvernbeskyttelsene, da de ser ut til \xE5 f\xE5 nettstedet til \xE5 slutte \xE5 fungere.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Vi anbefaler \xE5 deaktivere personvernbeskyttelsene for dette nettstedet for \xE5 forhindre at det slutter \xE5 fungere som det skal.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Dette nettstedet er ikke sikkert</b> og kan kompromittere informasjon du sender p\xE5 denne siden.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Foresp\xF8rslene fra f\xF8lgende tredjepartsdomener ble blokkert fra lasting, fordi de ble identifisert som sporende foresp\xF8rsler. Hvis foresp\xF8rslene fra et selskap blir lastet, har selskapet mulighet til \xE5 profilere deg.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Ingen sporende foresp\xF8rsler ble blokkert fra \xE5 bli lastet p\xE5 denne siden. Hvis foresp\xF8rslene fra et firma lastes, kan de profilere deg.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Vi har ikke identifisert noen sporende foresp\xF8rsler p\xE5 denne siden.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Vi fant ingen firmaer som pr\xF8vde \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "For at nettstedet skal fungere, har vi unnlatt \xE5 blokkere sporende foresp\xF8rsler fra firmaer p\xE5 denne siden.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Ingen sporende foresp\xF8rsler ble blokkert fra lasting, fordi beskyttelse er sl\xE5tt av for dette nettstedet. Hvis foresp\xF8rslene fra et selskap blir lastet, har selskapet mulighet til \xE5 profilere deg.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generer privat Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopiert til utklippstavlen din!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Virker ikke nettsiden som forventet?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Fungerer ikke nettstedet?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Rapporter nettstedfeil", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Det kan hjelpe \xE5 sl\xE5 beskyttelsen AV.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Fungerer nettstedet fremdeles ikke?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Ta forholdsregler", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Dette nettstedet eies av {companyDisplayName}</b>, som driver et sporingsnettverk p\xE5 {companyPrevalence} % av de mest popul\xE6re nettstedene. Vi klarte \xE5 blokkere noen av foresp\xF8rslene deres p\xE5 denne siden.} other {<b>Dette nettstedet eies av {companyDisplayName}</b>, som driver et sporingsnettverk p\xE5 {companyPrevalence} % av de mest popul\xE6re nettstedene. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Vi blokkerte noen selskaper fra \xE5 laste inn sporende foresp\xF8rsler p\xE5 denne siden.} =2 {Vi har blokkert <b>{firstCompany}</b> og <b>{secondCompany}</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.} =3 {Vi har blokkert <b>{firstCompany}</b>, <b>{secondCompany}</b> og <b>{thirdCompany}</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.} =4 {Vi har blokkert <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> og <b>{fourthCompany}</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.} =5 {Vi har blokkert <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> og <b>1 til</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.} one {Vi har blokkert <b>{firstCompany}</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.} other {Vi har blokkert <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> og <b>{othersCount} andre</b> fra \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Informasjonskapsler administrert", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Popup-vindu om informasjonskapsler skjult", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Popup-vinduet om informasjonskapsler p\xE5 dette nettstedet ga ingen alternativer for preferanser, s\xE5 vi har bare skjult det. V\xE5re andre nettsporingsbeskyttelser gjelder fortsatt.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Vi har angitt informasjonskapselpreferansene dine for \xE5 maksimere personvernet, og lukket popupen.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Deaktiver i innstillingene", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Tilkoblingen er kryptert", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Tilkoblingen er ikke kryptert", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Foresp\xF8rsler blokkert fra lasting", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Ingen sporende foresp\xF8rsler blokkert", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Ingen sporende foresp\xF8rsler funnet", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Tredjepartsforesp\xF8rsler lastet", note: "todo" }, thirdPartiesNoneFound: { title: "Ingen tredjepartsforesp\xF8rsler er funnet", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} eier dette nettstedet og de kjente sporerne som finnes p\xE5 denne siden, s\xE5 vi blokkerte dem ikke.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Vi fant ingen firmaer som pr\xF8vde \xE5 laste sporende foresp\xF8rsler p\xE5 denne siden.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Sporere hjelper firmaer \xE5 profilere deg. Vi oppdaget at disse selskapene overv\xE5ker aktiviteten din p\xE5 denne siden.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Sporere hjelper firmaer \xE5 profilere deg. Vi blokkerte disse selskapene fra \xE5 overv\xE5ke aktiviteten din p\xE5 denne siden.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Sporingsnettverket ukjent", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Sporingsdomener for {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 sporere funnet", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sporere som eies av dette nettstedet (tillatt)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sporer er blokkert p\xE5 {domain}} other {{trackerCount} sporere er blokkert p\xE5 {domain}}}} other {{trackerCount, plural, one {{trackerCount} sporer funnet p\xE5 {domain}} other {{trackerCount} sporere funnet p\xE5 {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Merk: Plattformbegrensninger kan begrense kapasiteten v\xE5r til \xE5 oppdage alle foresp\xF8rsler.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Om nettsporingsbeskyttelsen v\xE5r", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Hvordan s\xF8keannonsene v\xE5re p\xE5virker beskyttelsen v\xE5r", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Foresp\xF8rslene fra f\xF8lgende domene ble lastet fordi en {domain}-annonse p\xE5 DuckDuckGo nylig ble klikket p\xE5. Disse foresp\xF8rslene bidrar til \xE5 evaluere annonseeffektiviteten. Ingen annonser p\xE5 DuckDuckGo profilerer deg.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Foresp\xF8rslene fra f\xF8lgende domener ble lastet for \xE5 forhindre at nettstedene skulle slutte \xE5 fungere.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Foresp\xF8rslene fra f\xF8lgende domener ble lastet fordi de er tilknyttet {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Foresp\xF8rslene fra f\xF8lgende domener ble ogs\xE5 lastet." }, sectionHeadingProtectionsDisabled: { title: "Foresp\xF8rslene fra f\xF8lgende domener ble lastet fordi beskyttelsen er sl\xE5tt av.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Foresp\xF8rslene fra f\xF8lgende tredjepartsdomener ble lastet. Hvis foresp\xF8rslene fra et selskap blir lastet, har selskapet mulighet til \xE5 profilere deg, selv om de andre nettsporingsbeskyttelsene v\xE5re fremdeles gjelder.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Foresp\xF8rslene fra f\xF8lgende tredjepartsdomener ble lastet. Hvis foresp\xF8rslene fra et selskap blir lastet, har selskapet mulighet til \xE5 profilere deg, selv om de andre nettsporingsbeskyttelsene v\xE5re fremdeles gjelder.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Vi identifiserte ingen foresp\xF8rsler fra tredjepartsdomener.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analyse", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Annonsering", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sosialt nettverk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Levering av innhold", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Innebygd innhold", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "S\xF8k i DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "S\xF8k", note: "Aria label for the search button" }, optionsButton: { title: "Flere alternativer", note: "Aria label for the for the options button" }, navigationComplete: { title: "Ferdig", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Tilbake", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Aktiver beskyttelse", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Deaktiver beskyttelse", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Noe gikk galt, s\xE5 vi kunne ikke laste dette innholdet. Pr\xF8v \xE5 laste siden p\xE5 nytt.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, nl: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Versleutelen", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Tekenen", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verifi\xEBren", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Afleiden", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Inpakken", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Uitpakken", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Onbekend", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detail van veiligheidscertificaat", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Algemene naam", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Openbare sleutel", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritme", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Sleutelgrootte", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Gebruik", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Overzicht", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Effectieve grootte", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificaat niet gevonden", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificaat voor {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Deze pagina gebruikt een niet-versleutelde verbinding. Mogelijk kunnen externe partijen je activiteit bekijken of gevoelige informatie onderscheppen die je op deze pagina verzendt.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Wij hebben de verbinding op deze pagina ge\xFCpgraded om de informatie die je verzendt te beschermen tijdens de overdracht.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Deze pagina maakt gebruik van een versleutelde verbinding, waardoor externe partijen je activiteit niet kunnen bekijken en gevoelige informatie die je op deze pagina verzendt niet kunnen onderscheppen.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Privacybescherming is niet beschikbaar voor speciale pagina's of lokale pagina's.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Gebruik je DuckDuckGo graag?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Laat het weten aan je familie en vrienden", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "DuckDuckGo verspreiden", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Ben je het beu om te worden gevolgd in e-mails?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Meld u nu aan voor DuckDuckGo Email Protection om gebruik te maken van onze extensie!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Tabbladen sluiten en gegevens wissen", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Gegevens wissen", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Alleen huidige site", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Afgelopen uur", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Afgelopen 24 uur", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Afgelopen 7 dagen", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Afgelopen 4 weken", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Altijd", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {een uur} day {24 uur} week {een week} month {4 weken} other {Alle}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> tabblad sluiten en je browsegeschiedenis en cookies van <b>{durationDesc}</b> wissen?} other {<b>{openTabs}</b> tabbladen sluiten en je browsegeschiedenis en cookies van <b>{durationDesc}</b> wissen?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> tabblad sluiten en cookies van <b>{durationDesc}</b> wissen?} other {<b>{openTabs}</b> tabbladen sluiten en cookies van <b>{durationDesc}</b> wissen?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Browsegeschiedenis en cookies van <b>{durationDesc}</b> wissen?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Cookies van <b>{durationDesc}</b> wissen?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "<b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} sluiten en <b>alle</b> browsegeschiedenis en cookies ({cookies} {cookies, plural, =1 {site} other {sites}}) wissen?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "<b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} sluiten en <b>alle</b> cookies ({cookies} {cookies, plural, =1 {site} other {sites}}) wissen?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {<b>Alle</b> browsegeschiedenis en cookies wissen ({cookies} site)?} other {Alle <b>browsegeschiedenis</b> en cookies wissen ({cookies} sites)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {<b>Alle</b> cookies ({cookies} site) wissen?} other {<b>Alle</b> cookies ({cookies} sites) wissen?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> tabblad sluiten en <b>alle</b> cookies van {site} wissen?} other {<b>{openTabs} {site}</b> tabbladen sluiten en <b>alle</b> cookies van {site} wissen?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> tabblad sluiten en <b>alle</b> cookies van {site} wissen?} other {<b>{openTabs} {site}</b> tabbladen sluiten en <b>alle</b> cookies van {site} wissen?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "<b>Alle</b> browsegeschiedenis en cookies van {site} wissen?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "<b>Alle</b> cookies van {site} wissen?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} vastgemaakt</b> tabblad wordt genegeerd.} other {<b>{tabs} vastgemaakte</b> tabbladen worden genegeerd.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Helder", note: "Button text to start data clearing." }, cancel: { title: "Annuleren", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Selecteer een periode om de geschiedenis te wissen.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Camera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Microfoon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolocatie", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pop-ups", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Elke keer vragen", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Informeren", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Altijd toestaan", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Altijd weigeren", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Als je een anoniem rapport over een kapotte site indient, helpt dat ons om de app te verbeteren.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Beschrijf wat er is gebeurd", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Site geblokkeerd of niet geladen", note: "User is reporting this page because the page didn't load" }, layout: { title: "Site wordt niet goed vormgegeven", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Site bevat grote lege ruimtes", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video niet afgespeeld of geladen", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Afbeeldingen zijn niet geladen", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Reacties, recensies of chats niet geladen", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Inhoud ontbreekt", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Links of knoppen werken niet", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Aanmelden/registreren niet mogelijk", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Betalen, afrekenen of winkelen niet mogelijk", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Probleem met browser of andere browserextensie", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "De site vroeg me om de adblocker uit te schakelen", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Iets anders", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Meer details delen (optioneel):{bullet}Wat is er gebeurd?{bullet}Wat had er moeten gebeuren?{bullet} Hielp het uitschakelen van de beveiliging?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Verzend Rapport", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Rapporten die naar DuckDuckGo worden verzonden, bevatten alleen de info die nodig is om ons te helpen je feedback te verwerken.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Dankjewel!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Je rapport helpt ons om onze producten \xE9n de ervaring voor anderen te verbeteren.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Trackers", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Beveiligingslijst updaten", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Beveiliging is <b>INGESCHAKELD</b> voor deze website", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Beveiliging is <b>UITGESCHAKELD</b> voor deze website", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "We hebben privacybescherming tijdelijk uitgeschakeld, omdat het erop lijkt dat deze site hierdoor niet goed meer werkt.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "We raden aan om Privacybescherming voor deze site uit te schakelen om te voorkomen dat de site niet meer goed werkt.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Deze site is niet veilig</b> en kan alle informatie die je op deze pagina verzendt, in gevaar brengen.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "De volgende verzoeken van domeinen van derden werden geblokkeerd omdat ze werden ge\xEFdentificeerd als verzoeken met tracking. Als de verzoeken van een bedrijf worden geladen, kunnen ze een profiel van je maken.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Er zijn geen verzoeken met tracking geblokkeerd die op deze pagina worden geladen. Als de verzoeken van een bedrijf worden geladen, kunnen deze bedrijven een profiel van je maken.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "We hebben geen verzoeken met tracking op deze pagina gevonden.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "We hebben geen bedrijven gevonden die verzoeken met tracking op deze pagina proberen te laden.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Om te voorkomen dat deze site niet meer goed werkt, hebben we geen enkel verzoek met tracking van bedrijven op deze pagina geblokkeerd.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Verzoeken met tracking werden niet verhinderd om te laden omdat beschermingen zijn uitgeschakeld voor deze site. Als de verzoeken van een bedrijf worden geladen, kunnen ze een profiel van je maken.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Priv\xE9-Duck Address genereren", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Naar je klembord gekopieerd!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Werkt de website niet zoals verwacht?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Werkt de website niet?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Defecte website melden", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Het kan helpen om de beveiliging uit te schakelen.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Werkt de site nog steeds niet?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Neem voorzorgsmaatregelen", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Deze site is eigendom van {companyDisplayName}</b>. Dit bedrijf beheert een netwerk met trackers op {companyPrevalence}% van de meest bezochte websites. We hebben een aantal verzoeken op deze pagina kunnen blokkeren.} other {<b>Deze site is eigendom van {companyDisplayName}</b>. Dit bedrijf beheert een netwerk met trackers op {companyPrevalence}% van de meest bezochte websites. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {We hebben het laden van trackingverzoeken van bepaalde bedrijven op deze pagina geblokkeerd.} =2 {We hebben voorkomen dat <b>{firstCompany}</b> en <b>{secondCompany}</b> verzoeken met tracking op deze pagina laden.} =3 {We hebben voorkomen dat <b>{firstCompany}</b>, <b>{secondCompany}</b> en <b>{thirdCompany}</b> verzoeken met tracking op deze pagina laden.} =4 {We hebben voorkomen dat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> en <b>{fourthCompany}</b> verzoeken met tracking op deze pagina laden.} =5 {We hebben voorkomen dat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> en <b>1 ander bedrijf</b> verzoeken met tracking op deze pagina laden.} one {We hebben voorkomen dat <b>{firstCompany}</b> verzoeken met tracking op deze pagina laadt.} other {We hebben voorkomen dat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> en <b>{othersCount} andere bedrijven</b> verzoeken met tracking op deze pagina laden.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Beheerde cookies", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Cookiepop-up verborgen", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "We konden de cookiepop-up op deze site alleen verbergen omdat er geen opties waren om cookievoorkeuren te beheren. De rest van onze bescherming tegen webtracking is nog steeds van toepassing.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "We hebben je cookievoorkeuren ingesteld voor maximale privacy en de pop-up gesloten.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Uitschakelen in Instellingen", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Verbinding is versleuteld", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Verbinding is niet versleuteld", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Verzoeken geblokkeerd bij laden", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Geen verzoeken met tracking geblokkeerd", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Geen verzoeken met tracking gevonden", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Verzoeken van derden geladen", note: "todo" }, thirdPartiesNoneFound: { title: "Geen verzoeken van derden gevonden", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} is eigenaar van deze site en de bekende trackers op deze pagina. Die hebben we dus niet geblokkeerd.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "We hebben geen bedrijven gevonden die verzoeken met tracking op deze pagina proberen te laden.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Trackers helpen bedrijven om een profiel van je te maken. We hebben deze bedrijven gevonden die je activiteit op deze pagina volgen.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Trackers helpen bedrijven om een profiel van je te maken. We hebben voorkomen dat deze bedrijven je activiteit op deze pagina volgen.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Tracker-netwerk onbekend", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Trackerdomeinen voor {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 trackers gevonden", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Trackers die eigendom zijn van deze site (Toegestaan)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} tracker geblokkeerd op {domain}} other {{trackerCount} trackers geblokkeerd op {domain}}}} other {{trackerCount, plural, one {{trackerCount} tracker gevonden op {domain}} other {{trackerCount} trackers gevonden op {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Let op: beperkingen op het platform kunnen ons vermogen om alle verzoeken te detecteren beperken.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Over onze bescherming tegen webtracking", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Hoe onze zoekadvertenties onze bescherming be\xEFnvloeden", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "De verzoeken van het volgende domein zijn geladen omdat er onlangs in DuckDuckGo op een advertentie van {domain} is geklikt. Deze verzoeken helpen de effectiviteit van advertenties te beoordelen. Geen enkele advertentie op DuckDuckGo maakt een profiel van je.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "De verzoeken van het volgende domein werden geladen om te voorkomen dat de site niet meer goed zou werken.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "De verzoeken van de volgende domeinen zijn geladen omdat ze aan {domain} zijn gekoppeld.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "De verzoeken van de volgende domeinen zijn ook geladen." }, sectionHeadingProtectionsDisabled: { title: "De verzoeken van de volgende domeinen zijn geladen omdat de beveiliging is uitgeschakeld.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "De volgende verzoeken van domeinen van derden zijn geladen. Als de verzoeken van een bedrijf worden geladen, kunnen ze een profiel van je maken, hoewel onze andere beschermingen tegen webtracking nog steeds van toepassing zijn.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "De volgende verzoeken van domeinen van derden zijn geladen. Als de verzoeken van een bedrijf worden geladen, kunnen ze een profiel van je maken, hoewel onze andere beschermingen tegen webtracking nog steeds van toepassing zijn.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "We hebben geen verzoeken van domeinen van derden gedetecteerd.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analyses", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "adverteren", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sociaal netwerk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Levering van inhoud", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Ge\xEFntegreerde inhoud", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Zoek in DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Zoeken", note: "Aria label for the search button" }, optionsButton: { title: "Meer opties", note: "Aria label for the for the options button" }, navigationComplete: { title: "Klaar", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Terug", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Bescherming inschakelen", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Bescherming uitschakelen", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Er is iets misgegaan en we kunnen deze inhoud niet laden. Probeer de pagina opnieuw te laden.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, pl: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Szyfruj", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Podpisz", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Zweryfikuj", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Utw\xF3rz pochodne", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Zapakuj", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Odpakuj", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Nieznane", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Szczeg\xF3\u0142y certyfikatu bezpiecze\u0144stwa", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Nazwa og\xF3lna", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Klucz publiczny", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algorytm", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Rozmiar klucza", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Zastosowanie", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Podsumowanie", note: "Header for summary of connection details" }, permanent: { title: "Sta\u0142e", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efektywny rozmiar", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Nie znaleziono certyfikatu", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certyfikat dla {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Ta strona korzysta z po\u0142\u0105czenia nieszyfrowanego. Strony trzecie mog\u0105 by\u0107 w stanie obserwowa\u0107 Twoj\u0105 aktywno\u015B\u0107 lub przechwyci\u0107 poufne informacje, kt\xF3re przesy\u0142asz na tej stronie.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Uaktualnili\u015Bmy po\u0142\u0105czenie na tej stronie, aby chroni\u0107 przesy\u0142ane informacje.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Ta strona wykorzystuje po\u0142\u0105czenie szyfrowane, kt\xF3re uniemo\u017Cliwia osobom trzecim obserwowanie Twojej aktywno\u015Bci lub przechwytywanie poufnych informacji przesy\u0142anych przez Ciebie na tej stronie.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Ochrona prywatno\u015Bci nie jest dost\u0119pna dla stron specjalnych i lokalnych.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Lubisz korzysta\u0107 z DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Powiedz o nas rodzinie i znajomym", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Promuj DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Masz do\u015B\u0107 \u015Bledzenia e-maili?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Skorzystaj z ochrony e-mail DuckDuckGo Email Protection w ramach swojego rozszerzenia teraz!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Zamknij karty i wyczy\u015B\u0107 dane", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Wyczy\u015B\u0107 dane", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Tylko bie\u017C\u0105ca strona", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Ostatnia godzina", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Ostatnie 24 godziny", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Ostatnie 7 dni", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Ostatnie 4 tygodnie", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Ca\u0142y czas", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {jedna godzina} day {24 godziny} week {jeden tydzie\u0144} month {4 tygodnie} other {Wszystko}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Zamkn\u0105\u0107 <b>{openTabs}</b> zak\u0142adk\u0119 wyczy\u015Bci\u0107 <b>{durationDesc}</b> histori\u0119 przegl\u0105dania i pliki cookie?} few {Zamkn\u0105\u0107 <b>{openTabs}</b> zak\u0142adki i wyczy\u015Bci\u0107 <b>{durationDesc}</b> histori\u0119 przegl\u0105dania i pliki cookie?} many {Zamkn\u0105\u0107 <b>{openTabs}</b> zak\u0142adek i wyczy\u015Bci\u0107 <b>{durationDesc}</b> histori\u0119 przegl\u0105dania i pliki cookie?} other {Zamkn\u0105\u0107 <b>{openTabs}</b> zak\u0142adki i wyczy\u015Bci\u0107 <b>{durationDesc}</b> histori\u0119 przegl\u0105dania i pliki cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Zamkn\u0105\u0107 <b>{openTabs}</b> kart\u0119 i wyczy\u015Bci\u0107 <b>{durationDesc}</b> plik\xF3w cookie?} few {Zamkn\u0105\u0107 <b>{openTabs}</b> karty i wyczy\u015Bci\u0107 <b>{durationDesc}</b> plik\xF3w cookie?} many {Zamkn\u0105\u0107 <b>{openTabs}</b> kart i wyczy\u015Bci\u0107 <b>{durationDesc}</b> plik\xF3w cookie?} other {Zamkn\u0105\u0107 <b>{openTabs}</b> karty i wyczy\u015Bci\u0107 <b>{durationDesc}</b> plik\xF3w cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Wyczy\u015Bci\u0107 <b>{durationDesc}</b> historii przegl\u0105dania i pliki cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Wyczy\u015Bci\u0107 <b>{durationDesc}</b> plik\xF3w cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Zamknij <b>{openTabs}</b> {openTabs, plural, =1 {kart\u0119} other {kart(y)}} i wyczy\u015B\u0107 <b>ca\u0142\u0105</b> histori\u0119 przegl\u0105dania i pliki cookie ({cookies} {cookies, plural, =1 {strony} other {str.}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Zamknij <b>{openTabs}</b> {openTabs, plural, =1 {kart\u0119} other {kart(y)}}, i wyczy\u015B\u0107 <b>wszystkie</b> pliki cookie ({cookies} {cookies, plural, =1 {strony} other {str.}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Wyczy\u015Bci\u0107 <b>ca\u0142\u0105</b> histori\u0119 przegl\u0105dania i pliki cookie ({cookies} strony)?} few {Wyczy\u015Bci\u0107 <b>ca\u0142\u0105</b> histori\u0119 przegl\u0105dania i pliki cookie ({cookies} stron)?} many {Wyczy\u015Bci\u0107 <b>ca\u0142\u0105</b> histori\u0119 przegl\u0105dania i pliki cookie ({cookies} stron)?} other {Wyczy\u015Bci\u0107 <b>ca\u0142\u0105</b> histori\u0119 przegl\u0105dania i pliki cookie ({cookies} strony)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Wyczy\u015Bci\u0107 <b>wszystkie</b> pliki cookie ({cookies} strony)?} few {Wyczy\u015Bci\u0107 <b>wszystkie</b> pliki cookie ({cookies} stron)?} many {Wyczy\u015Bci\u0107 <b>wszystkie</b> pliki cookie ({cookies} stron)?} other {Wyczy\u015Bci\u0107 <b>wszystkie</b> pliki cookie ({cookies} strony)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Zamkn\u0105\u0107 <b>{openTabs} kart\u0119 {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} few {Zamkn\u0105\u0107 <b>{openTabs} karty {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} many {Zamkn\u0105\u0107 <b>{openTabs} kart {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} other {Zamkn\u0105\u0107 <b>{openTabs} karty {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Zamkn\u0105\u0107 <b>{openTabs} kart\u0119 {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} few {Zamkn\u0105\u0107 <b>{openTabs} karty {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} many {Zamkn\u0105\u0107 <b>{openTabs} kart {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?} other {Zamkn\u0105\u0107 <b>{openTabs} karty {site}</b> i wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Wyczy\u015Bci\u0107 <b>ca\u0142\u0105 histori\u0119 przegl\u0105dania i pliki cookie {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Wyczy\u015Bci\u0107 <b>wszystkie pliki cookie {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} przypi\u0119ta karta</b> zostanie zignorowana.} few {<b>{tabs} przypi\u0119te karty</b> zostan\u0105 zignorowane.} many {<b>{tabs} przypi\u0119tych kart</b> zostanie zignorowanych.} other {<b>{tabs} przypi\u0119tej karty</b> zostanie zignorowane.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Wyczy\u015B\u0107", note: "Button text to start data clearing." }, cancel: { title: "Anuluj", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Aby wyczy\u015Bci\u0107 r\xF3wnie\u017C histori\u0119, wybierz okres.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Aparat", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokalizacja", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Wyskakuj\u0105ce okienka", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Pytaj za ka\u017Cdym razem", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Powiadom", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Zawsze zezwalaj", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Zawsze odmawiaj", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Przes\u0142anie anonimowego raportu o uszkodzonej witrynie pomaga nam ulepsza\u0107 aplikacj\u0119.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Opisz, co si\u0119 sta\u0142o", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Witryna zablokowana lub nie zosta\u0142a za\u0142adowana", note: "User is reporting this page because the page didn't load" }, layout: { title: "Uszkodzony uk\u0142ad witryny", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Witryna zawiera du\u017Ce puste przestrzenie", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Film nie zosta\u0142 odtworzony lub za\u0142adowany", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Obrazy nie zosta\u0142y za\u0142adowane", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Komentarze, recenzje lub czaty nie zosta\u0142y za\u0142adowane", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Brakuje tre\u015Bci", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Linki lub przyciski nie dzia\u0142aj\u0105", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nie mog\u0119 si\u0119 zalogowa\u0107/zarejestrowa\u0107", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Nie mog\u0119 zap\u0142aci\u0107, finalizowa\u0107 ani zrobi\u0107 zakup\xF3w", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem z przegl\u0105dark\u0105 lub rozszerzeniem przegl\u0105darki", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Witryna poprosi\u0142a mnie o wy\u0142\u0105czenie blokady reklam", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Co\u015B innego", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Udost\u0119pnij wi\u0119cej szczeg\xF3\u0142\xF3w (opcjonalnie):{bullet}Co si\u0119 sta\u0142o?{bullet}Co powinno si\u0119 wydarzy\u0107?{bullet}Czy wy\u0142\u0105czenie zabezpiecze\u0144 pomaga?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Wy\u015Blij raport", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Raporty wysy\u0142ane do DuckDuckGo zawieraj\u0105 jedynie informacje potrzebne nam do podj\u0119cia dzia\u0142a\u0144 w zwi\u0105zku z Twoimi uwagami.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Dzi\u0119kujemy!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Twoje zg\u0142oszenie pomo\u017Ce ulepszy\u0107 nasze produkty i poprawi\u0107 komfort korzystania innych u\u017Cytkownik\xF3w.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Skrypty \u015Bledz\u0105ce", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Aktualizowanie listy ochrony", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Zabezpieczenia s\u0105 <b>W\u0141\u0104CZONE</b> dla tej witryny", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Zabezpieczenia s\u0105 <b>WY\u0141\u0104CZONE</b> dla tej witryny", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Tymczasowo wy\u0142\u0105czyli\u015Bmy ochron\u0119 prywatno\u015Bci, poniewa\u017C wygl\u0105da na to, \u017Ce zniekszta\u0142ca t\u0119 witryn\u0119.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Zalecamy wy\u0142\u0105czenie ochrony prywatno\u015Bci na tej stronie, aby zapobiec jej awarii.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Ta witryna nie jest bezpieczna</b> i mo\u017Ce ujawni\u0107 wszystkie informacje, kt\xF3re w niej przesy\u0142asz.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Nast\u0119puj\u0105ce \u017C\u0105dania domen innych firm zosta\u0142y zablokowane przed za\u0142adowaniem, poniewa\u017C zosta\u0142y zidentyfikowane jako \u017C\u0105dania ze \u015Bledzeniem. Za\u0142adowanie \u017C\u0105da\u0144 firmy mo\u017Ce umo\u017Cliwi\u0107 jej profilowanie u\u017Cytkownika.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Na tej stronie nie zablokowano \u0142adowania \u017Cadnych \u017C\u0105da\u0144 ze \u015Bledzeniem. Za\u0142adowanie \u017C\u0105da\u0144 firmy mo\u017Ce umo\u017Cliwi\u0107 jej profilowanie u\u017Cytkownika.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Nie wykryli\u015Bmy \u017Cadnych \u017C\u0105da\u0144 ze \u015Bledzeniem na tej stronie.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Nie zauwa\u017Cyli\u015Bmy, \u017Ceby jakie\u015B firmy pr\xF3bowa\u0142y umie\u015Bci\u0107 na tej stronie \u017C\u0105dania ze \u015Bledzeniem.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Nie zablokowali\u015Bmy \u017Cadnym firmom mo\u017Cliwo\u015Bci \u0142adowania \u017C\u0105da\u0144 ze \u015Bledzeniem na tej stronie, aby zapobiec jej uszkodzeniu.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "\u017Badne \u017C\u0105dania ze \u015Bledzeniem nie zosta\u0142y zablokowane przed za\u0142adowaniem, poniewa\u017C zabezpieczenia s\u0105 wy\u0142\u0105czone dla tej witryny. Za\u0142adowanie \u017C\u0105da\u0144 firmy mo\u017Ce umo\u017Cliwi\u0107 jej profilowanie u\u017Cytkownika.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Wygeneruj prywatny adres Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Skopiowano do schowka!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Witryna internetowa nie dzia\u0142a zgodnie z oczekiwaniami?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Witryna internetowa nie dzia\u0142a?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Zg\u0142o\u015B uszkodzon\u0105 witryn\u0119", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "WY\u0141\u0104CZENIE zabezpiecze\u0144 mo\u017Ce pom\xF3c.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Witryna nadal nie dzia\u0142a?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Zachowaj \u015Brodki ostro\u017Cno\u015Bci", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Ta strona nale\u017Cy do firmy {companyDisplayName}</b>, kt\xF3ra obs\u0142uguje sie\u0107 system\xF3w \u015Bledz\u0105cych w {companyPrevalence}% najbardziej popularnych witryn. Uda\u0142o nam si\u0119 zablokowa\u0107 niekt\xF3re z jej \u017C\u0105da\u0144 na tej stronie.} other {<b>Ta strona nale\u017Cy do firmy {companyDisplayName}</b>, kt\xF3ra obs\u0142uguje sie\u0107 system\xF3w \u015Bledz\u0105cych w {companyPrevalence}% najbardziej popularnych witryn. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Zablokowali\u015Bmy \u0142adowanie \u017C\u0105da\u0144 \u015Bledzenia wysy\u0142anych przez niekt\xF3re firmy na tej stronie.} =2 {Zablokowali\u015Bmy firmom <b>{firstCompany}</b> oraz <b>{secondCompany}</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} =3 {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b> oraz <b>{thirdCompany}</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} =4 {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> oraz <b>{fourthCompany}</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} =5 {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> oraz <b>1 innej firmie</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} one {Zablokowali\u015Bmy firmie <b>{firstCompany}</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} few {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> i<b> {othersCount} innym firmom</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} many {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> i <b>{othersCount} innym firmom</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.} other {Zablokowali\u015Bmy firmom <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> i <b>{othersCount} innym firmom</b> mo\u017Cliwo\u015B\u0107 umieszczania na tej stronie \u017C\u0105da\u0144 ze \u015Bledzeniem.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Zarz\u0105dzane pliki cookie", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Ukryte wyskakuj\u0105ce okienka dotycz\u0105ce plik\xF3w cookie", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Na tej stronie uda\u0142o nam si\u0119 tylko ukry\u0107 wyskakuj\u0105ce okienko dotycz\u0105ce plik\xF3w cookie, poniewa\u017C nie zawiera\u0142o ono opcji umo\u017Cliwiaj\u0105cych zarz\u0105dzanie preferencjami dotycz\u0105cymi takich plik\xF3w. Pozosta\u0142e zabezpieczenia przed \u015Bledzeniem w sieci nadal dzia\u0142aj\u0105.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Ustawili\u015Bmy preferencje dotycz\u0105ce plik\xF3w cookie, aby zmaksymalizowa\u0107 prywatno\u015B\u0107 i zamkn\u0119li\u015Bmy wyskakuj\u0105ce okienko.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Wy\u0142\u0105cz w ustawieniach", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Po\u0142\u0105czenie jest szyfrowane", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Po\u0142\u0105czenie nie jest szyfrowane", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "\u017B\u0105dania zablokowane przed za\u0142adowaniem", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Brak zablokowanych \u017C\u0105da\u0144 ze \u015Bledzeniem", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nie znaleziono \u017C\u0105da\u0144 ze \u015Bledzeniem", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Za\u0142adowano \u017C\u0105dania innych firm", note: "todo" }, thirdPartiesNoneFound: { title: "Nie znaleziono \u017C\u0105da\u0144 stron trzecich", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} jest w\u0142a\u015Bcicielem tej witryny i znanych skrypt\xF3w \u015Bledz\u0105cych znalezionych na tej stronie, dlatego ich nie zablokowali\u015Bmy.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Nie zauwa\u017Cyli\u015Bmy, \u017Ceby jakie\u015B firmy pr\xF3bowa\u0142y umie\u015Bci\u0107 na tej stronie \u017C\u0105dania ze \u015Bledzeniem.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Skrypty \u015Bledz\u0105ce u\u0142atwiaj\u0105 firmom profilowanie u\u017Cytkownika. Znale\u017Ali\u015Bmy nast\u0119puj\u0105ce firmy, kt\xF3re monitoruj\u0105 Twoj\u0105 aktywno\u015B\u0107 na tej stronie.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Skrypty \u015Bledz\u0105ce u\u0142atwiaj\u0105 firmom profilowanie u\u017Cytkownika. Zablokowali\u015Bmy tym firmom mo\u017Cliwo\u015B\u0107 monitorowania Twojej aktywno\u015Bci na tej stronie.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Nieznana sie\u0107 skrypt\xF3w \u015Bledz\u0105cych", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domeny skrypt\xF3w \u015Bledz\u0105cych {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Znaleziono 0 skrypt\xF3w \u015Bledz\u0105cych", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Skrypty \u015Bledz\u0105ce nale\u017C\u0105ce do tej strony (dozwolone)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {Zablokowano {trackerCount} skrypt \u015Bledz\u0105cy na {domain}} few {Zablokowano {trackerCount} skrypty \u015Bledz\u0105ce na {domain}} many {Zablokowano {trackerCount} skrypt\xF3w \u015Bledz\u0105cych na {domain}} other {Zablokowano {trackerCount} skryptu \u015Bledz\u0105cego na {domain}}}} other {{trackerCount, plural, one {Znaleziono {trackerCount} skrypt \u015Bledz\u0105cy na {domain}} few {Znaleziono {trackerCount} skrypty \u015Bledz\u0105ce na {domain}} many {Znaleziono {trackerCount} skrypt\xF3w \u015Bledz\u0105cych na {domain}} other {Znaleziono {trackerCount} skryptu \u015Bledz\u0105cego na {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Uwaga: ograniczenia platformy mog\u0105 zmniejsza\u0107 mo\u017Cliwo\u015B\u0107 wykrywania wszystkich \u017C\u0105da\u0144.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Informacje o zabezpieczeniach przed \u015Bledzeniem w sieci", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Jak reklamy w wyszukiwarce wp\u0142ywaj\u0105 na zabezpieczenia", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Nast\u0119puj\u0105ce \u017C\u0105dania domeny zosta\u0142y za\u0142adowane, poniewa\u017C niedawno zosta\u0142a klikni\u0119ta reklama {domain} na DuckDuckGo. Te \u017C\u0105dania pomagaj\u0105 oceni\u0107 skuteczno\u015B\u0107 reklam. Wszystkie reklamy na DuckDuckGo s\u0105 nieprofilowane.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Nast\u0119puj\u0105ce \u017C\u0105dania domeny zosta\u0142y za\u0142adowane, aby zapobiec uszkodzeniu witryny.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Nast\u0119puj\u0105ce \u017C\u0105dania domeny zosta\u0142y za\u0142adowane, poniewa\u017C s\u0105 powi\u0105zane z {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Za\u0142adowano r\xF3wnie\u017C \u017C\u0105dania nast\u0119puj\u0105cej domeny." }, sectionHeadingProtectionsDisabled: { title: "\u017B\u0105dania nast\u0119puj\u0105cych domen zosta\u0142y za\u0142adowane, poniewa\u017C zabezpieczenia s\u0105 wy\u0142\u0105czone.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Za\u0142adowano nast\u0119puj\u0105ce \u017C\u0105dania domen innych firm. Za\u0142adowanie \u017C\u0105da\u0144 firmy mo\u017Ce umo\u017Cliwi\u0107 jej profilowanie u\u017Cytkownika, cho\u0107 nadal maj\u0105 zastosowanie nasze pozosta\u0142e zabezpieczenia dotycz\u0105ce \u015Bledzenia w sieci.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Za\u0142adowano nast\u0119puj\u0105ce \u017C\u0105dania domen innych firm. Za\u0142adowanie \u017C\u0105da\u0144 firmy mo\u017Ce umo\u017Cliwi\u0107 jej profilowanie u\u017Cytkownika, cho\u0107 nadal maj\u0105 zastosowanie nasze pozosta\u0142e zabezpieczenia dotycz\u0105ce \u015Bledzenia w sieci.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nie zidentyfikowali\u015Bmy \u017Cadnych \u017C\u0105da\u0144 z domen stron trzecich.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analityka", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklama", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sie\u0107 spo\u0142eczno\u015Bciowa", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Dostarczanie tre\u015Bci", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Tre\u015B\u0107 osadzona", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Szukaj w DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Szukaj", note: "Aria label for the search button" }, optionsButton: { title: "Wi\u0119cej opcji", note: "Aria label for the for the options button" }, navigationComplete: { title: "Gotowe", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Wstecz", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "W\u0142\u0105cz ochron\u0119", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Wy\u0142\u0105cz ochron\u0119", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Co\u015B posz\u0142o nie tak i nie uda\u0142o si\u0119 za\u0142adowa\u0107 tej zawarto\u015Bci. Spr\xF3buj ponownie za\u0142adowa\u0107 stron\u0119.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, pt: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Encriptar", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Assinar", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verificar", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Derivar", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Embrulhar", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Desembrulhar", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Desconhecido", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detalhe do Certificado de Seguran\xE7a", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Nome comum", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Chave p\xFAblica", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmo", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Tamanho da chave", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Uso", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Resumo", note: "Header for summary of connection details" }, permanent: { title: "Permanente", note: "Whether certificate is permanent" }, effectiveSize: { title: "Tamanho efetivo", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificado n\xE3o encontrado", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificado para {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Esta p\xE1gina est\xE1 a utilizar uma liga\xE7\xE3o n\xE3o encriptada. \xC9 poss\xEDvel que terceiros consigam ver a tua atividade ou intercetar informa\xE7\xF5es sens\xEDveis que envies nesta p\xE1gina.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Melhor\xE1mos a liga\xE7\xE3o nesta p\xE1gina para proteger a informa\xE7\xE3o que envias enquanto est\xE1s em tr\xE2nsito.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Esta p\xE1gina utiliza uma liga\xE7\xE3o encriptada, o que impede que terceiros vejam a tua atividade ou intercetem informa\xE7\xF5es sens\xEDveis que envies nesta p\xE1gina.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "As Prote\xE7\xF5es de Privacidade n\xE3o est\xE3o dispon\xEDvel para p\xE1ginas especiais nem p\xE1ginas locais.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Adoras o DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Recomenda-o \xE0 tua fam\xEDlia e amigos", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Espalhar o DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "N\xE3o queres que os teus e-mails sejam rastreados?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Subscreve j\xE1 a Email Protection do DuckDuckGo para a tua extens\xE3o!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Fechar separadores e limpar os dados", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Limpar dados", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "S\xF3 no site atual", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "\xDAltima hora", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "\xDAltimas 24 horas", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "\xDAltimos 7 dias", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "\xDAltimas 4 semanas", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Sempre", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {uma hora} day {24 horas} week {uma semana} month {4 semanas} other {Todos}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Fechar <b>{openTabs}</b> separador e limpar <b>{durationDesc}</b> de hist\xF3rico de navega\xE7\xE3o e cookies?} other {Fechar <b>{openTabs}</b> separadores e limpar <b>{durationDesc}</b> de hist\xF3rico de navega\xE7\xE3o e cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Fechar <b>{openTabs}</b> separador e limpar <b>{durationDesc}</b> de cookies?} other {Close <b>{openTabs}</b> separadores e limpar <b>{durationDesc}</b> de cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Limpar <b>{durationDesc}</b> de hist\xF3rico de navega\xE7\xE3o e cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Limpar <b>{durationDesc}</b> de cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Fechar <b>{openTabs}</b> {openTabs, plural, =1 {separador} other {separadores}} e limpar <b>todo</b> o hist\xF3rico de navega\xE7\xE3o e cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Fechar <b>{openTabs}</b> {openTabs, plural, =1 {separador} other {separadores}} e limpar <b>todos</b> os cookies ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Limpar <b>todo</b> o hist\xF3rico de navega\xE7\xE3o e cookies ({cookies} site)?} other {Limpar <b>todo</b> o hist\xF3rico de navega\xE7\xE3o e cookies ({cookies} sites)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Limpar <b>todos</b> os cookies ({cookies} site)?} other {Limpar <b>todos</b> os cookies ({cookies} sites)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Fechar <b>{openTabs} separador em {site}</b> e limpar <b>todos os cookies de {site}</b>?} other {Fechar <b>{openTabs} separadores em {site}</b> e limpar <b>todos os cookies de {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Fechar <b>{openTabs} separador em {site}</b> e limpar <b>todos os cookies de {site}</b>?} other {Fechar <b>{openTabs} separadores em {site}</b> e limpar <b>todos os cookies de {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Limpar todo o hist\xF3rico de navega\xE7\xE3o e cookies de <b>{site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Limpar todos os cookies de <b>{site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} separador afixado</b> ser\xE1 ignorado.} other {<b>{tabs} separadores afixados</b> ser\xE3o ignorados.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "C\xE9u limpo", note: "Button text to start data clearing." }, cancel: { title: "Cancelar", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Para limpar o hist\xF3rico, selecione um intervalo de tempo.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "C\xE2mara", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Microfone", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolocaliza\xE7\xE3o", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pop-ups", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Pergunte todas as vezes", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Notificar", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Permitir sempre", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Negar sempre", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "O envio de um relat\xF3rio an\xF3nimo de site com problemas ajuda-nos a melhorar a aplica\xE7\xE3o.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Descrever o que aconteceu", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Site bloqueado ou que n\xE3o foi carregado", note: "User is reporting this page because the page didn't load" }, layout: { title: "Disposi\xE7\xE3o do site com problemas", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "O site cont\xE9m espa\xE7os vazios grandes", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "O v\xEDdeo n\xE3o foi reproduzido ou carregado", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "As imagens n\xE3o foram carregadas", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Coment\xE1rios, avalia\xE7\xF5es ou chats n\xE3o foram carregados", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Falta conte\xFAdo", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Os links ou bot\xF5es n\xE3o funcionam", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "N\xE3o consigo iniciar sess\xE3o/registar-me", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "N\xE3o \xE9 poss\xEDvel pagar, finalizar a compra ou fazer compras", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problema com o navegador ou outra extens\xE3o do navegador", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "O site solicitou que desativasse o bloqueador de an\xFAncios", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Outra coisa", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Partilhar mais detalhes (opcional):{bullet} O que aconteceu?{bullet} O que deveria ter acontecido?{bullet} A desativa\xE7\xE3o das prote\xE7\xF5es ajudou?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Enviar relat\xF3rio", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "As den\xFAncias enviadas para o DuckDuckGo incluem apenas as informa\xE7\xF5es necess\xE1rias para processarmos o teu feedback.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Obrigado!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "A tua den\xFAncia ajuda-nos a melhorarmos os nossos produtos e a experi\xEAncia de todos os utilizadores.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Rastreadores", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "A atualizar a lista de prote\xE7\xE3o", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "As prote\xE7\xF5es est\xE3o <b>ATIVADAS</b> para este site", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "As prote\xE7\xF5es est\xE3o <b>DESATIVADAS</b> para este site", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Desativ\xE1mos temporariamente as Prote\xE7\xF5es de Privacidade, pois parecem estar a impedir que o site funcione corretamente.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Recomendamos a desativa\xE7\xE3o das Prote\xE7\xF5es de Privacidade para que este site funcione corretamente.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Este site n\xE3o \xE9 seguro</b> e pode comprometer quaisquer informa\xE7\xF5es que envies nesta p\xE1gina.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Foi bloqueado o carregamento dos pedidos dos seguintes dom\xEDnios de terceiros porque foram identificados como pedidos com rastreamento. Se os pedidos de uma empresa forem carregados, a empresa pode conseguir criar um perfil sobre ti.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "N\xE3o foi bloqueado o carregamento de nenhum pedido com rastreamento nesta p\xE1gina. Se os pedidos de uma empresa forem carregados, a empresa pode conseguir criar um perfil sobre ti.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "N\xE3o identific\xE1mos pedidos de rastreamento nesta p\xE1gina.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "N\xE3o encontr\xE1mos nenhuma empresa a tentar carregar pedidos com rastreamento nesta p\xE1gina.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Para que o site funcione corretamente, n\xE3o bloque\xE1mos o carregamento de pedidos com rastreamento de nenhuma empresa.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "N\xE3o foram bloqueados pedidos de terceiros porque as Prote\xE7\xF5es est\xE3o desativadas para este site. Se os pedidos de uma empresa forem carregados, a empresa pode conseguir criar um perfil sobre ti.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Gerar um Duck Address Privado", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Copiado para a \xE1rea de transfer\xEAncia!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "O website n\xE3o funciona como esperado?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "O site n\xE3o est\xE1 a funcionar?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Denunciar site danificado", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "A desativa\xE7\xE3o das prote\xE7\xF5es pode ajudar.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "O site continua sem funcionar?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Toma precau\xE7\xF5es", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Este site pertence \xE0 {companyDisplayName}</b>, que opera uma rede de rastreamento em {companyPrevalence}% dos principais sites. Conseguimos bloquear alguns dos pedidos desta empresa nesta p\xE1gina.} other {<b>Este site pertence \xE0 {companyDisplayName}</b>, que opera uma rede de rastreamento em {companyPrevalence}% dos principais sites. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Bloque\xE1mos algumas empresas de carregarem solicita\xE7\xF5es de rastreamento nesta p\xE1gina.} =2 {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b> e da <b>{secondCompany}</b> nesta p\xE1gina.} =3 {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b>, da <b>{secondCompany}</b> e da <b>{thirdCompany}</b> nesta p\xE1gina.} =4 {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b>, da <b>{secondCompany}</b>, da <b>{thirdCompany}</b> e da <b>{fourthCompany}</b> nesta p\xE1gina.} =5 {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b>, da <b>{secondCompany}</b>, da <b>{thirdCompany}</b>, da <b>{fourthCompany}</b> e de <b>mais 1 empresa</b> nesta p\xE1gina.} one {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b> nesta p\xE1gina.} other {Bloque\xE1mos o carregamento de pedidos com rastreamento da <b>{firstCompany}</b>, da <b>{secondCompany}</b>, da <b>{thirdCompany}</b>, da <b>{fourthCompany}</b> e de <b>mais {othersCount} empresas</b> nesta p\xE1gina.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies geridos", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Pop-up de cookies ocultado", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "S\xF3 conseguimos ocultar o pop-up de cookies neste site porque n\xE3o foram disponibilizadas op\xE7\xF5es para gerir as prefer\xEAncias de cookies. As nossas restantes prote\xE7\xF5es contra o rastreamento na Internet ainda se aplicam.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Definimos as tuas prefer\xEAncias de cookies para maximizar a privacidade e fech\xE1mos o pop-up.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Desativar nas defini\xE7\xF5es", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "A liga\xE7\xE3o est\xE1 encriptada", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "A liga\xE7\xE3o n\xE3o est\xE1 encriptada", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Pedidos com carregamento bloqueado", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nenhum pedido com rastreamento bloqueado", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nenhum pedido com rastreamento encontrado", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Pedidos de terceiros carregados", note: "todo" }, thirdPartiesNoneFound: { title: "Nenhum pedido de terceiros encontrado", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} \xE9 propriet\xE1rio deste site e dos monitorizadores detetados nesta p\xE1gina, portanto n\xE3o os bloque\xE1mos.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "N\xE3o encontr\xE1mos nenhuma empresa a tentar carregar pedidos com rastreamento nesta p\xE1gina.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Os rastreadores ajudam as empresas a segmentar-te. Encontr\xE1mos estas empresas a rastrear a tua atividade nesta p\xE1gina.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Os rastreadores ajudam as empresas a segmentar-te. Bloque\xE1mos o rastreio da tua atividade nesta p\xE1gina por parte destas empresas.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Rede de rastreadores desconhecida", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Dom\xEDnios de rastreador de {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 rastreadores encontrados", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Rastreadores propriedade deste Site (Permitido)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} rastreador bloqueado em {domain}} other {{trackerCount} rastreadores bloqueados em {domain}}}} other {{trackerCount, plural, one {{trackerCount} rastreador encontrado em {domain}} other {{trackerCount} rastreadores encontrados em {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Nota: as limita\xE7\xF5es da plataforma podem limitar a nossa capacidade de detetar todos os pedidos.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Sobre as nossas prote\xE7\xF5es contra o rastreamento na internet", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Como os nossos an\xFAncios de pesquisa afetam as nossas prote\xE7\xF5es", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Os pedidos do seguinte dom\xEDnio foram carregados devido a um clique recente num an\xFAncio de {domain} no DuckDuckGo. Estes pedidos ajudam a avaliar a efic\xE1cia dos an\xFAncios. Nenhum an\xFAncio no DuckDuckGo \xE9 utilizado para cria\xE7\xE3o de perfis.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Os pedidos dos seguintes dom\xEDnios foram carregados para que o site funcione corretamente.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Os pedidos dos seguintes dom\xEDnios foram carregados porque est\xE3o associados a {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Os pedidos dos seguintes dom\xEDnios tamb\xE9m foram carregados." }, sectionHeadingProtectionsDisabled: { title: "Os pedidos dos seguintes dom\xEDnios foram carregados porque as prote\xE7\xF5es est\xE3o desativadas.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Os pedidos dos seguintes dom\xEDnios de terceiros foram carregados. Se os pedidos de uma empresa forem carregados, a empresa pode conseguir criar um perfil sobre ti, embora sejam aplicadas as nossas outras prote\xE7\xF5es contra rastreamento na internet.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Os pedidos dos seguintes dom\xEDnios de terceiros foram carregados. Se os pedidos de uma empresa forem carregados, a empresa pode conseguir criar um perfil sobre ti, embora sejam aplicadas as nossas outras prote\xE7\xF5es contra rastreamento na internet.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "N\xE3o identific\xE1mos pedidos de dom\xEDnios de terceiros.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Dados anal\xEDticos", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Publicidade", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Redes sociais", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Fornecimento de conte\xFAdos", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Conte\xFAdo incorporado", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Pesquisar no DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Pesquisar", note: "Aria label for the search button" }, optionsButton: { title: "Mais op\xE7\xF5es", note: "Aria label for the for the options button" }, navigationComplete: { title: "Feito", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Retroceder", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Ativar prote\xE7\xF5es", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Desativar prote\xE7\xF5es", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Algo correu mal e n\xE3o conseguimos carregar este conte\xFAdo. Tenta recarregar a p\xE1gina.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, ro: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Criptare", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Semn", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verificare", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Derivare", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "\xCEncadrare", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Anulare \xEEncadrare", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Necunoscut", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Detalii privind certificatul de securitate", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Denumirea comun\u0103", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Cheie public\u0103", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritm", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Dimensiunea cheii", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Utilizare", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Rezumat", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Dimensiune efectiv\u0103", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certificatul nu a fost g\u0103sit", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certificat pentru {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Aceast\u0103 pagin\u0103 folose\u0219te o conexiune necriptat\u0103. Este posibil ca ter\u021Be p\u0103r\u021Bi s\u0103 \xEE\u021Bi poat\u0103 vedea activitatea sau s\u0103 intercepteze informa\u021Biile sensibile pe care le trimi\u021Bi pe aceast\u0103 pagin\u0103.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Am \xEEmbun\u0103t\u0103\u021Bit conexiunea de pe aceast\u0103 pagin\u0103 pentru a proteja informa\u021Biile pe care le trimi\u021Bi, \xEEn timp ce acestea se afl\u0103 \xEEn tranzit.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Aceast\u0103 pagin\u0103 utilizeaz\u0103 o conexiune criptat\u0103, care \xEEmpiedic\u0103 ter\u021Bii s\u0103 \xEE\u021Bi vizualizeze activitatea sau s\u0103 intercepteze informa\u021Biile sensibile pe care le trimi\u021Bi pe aceast\u0103 pagin\u0103.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Elementele de protec\u021Bie a confiden\u021Bialit\u0103\u021Bii nu sunt disponibile pentru paginile speciale sau pentru paginile locale.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\xCE\u021Bi place s\u0103 folose\u0219ti DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Ajut\u0103-ne s\u0103 transmitem vestea familiei \u0219i prietenilor t\u0103i", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Promoveaz\u0103 DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Te-ai s\u0103turat s\u0103 \xEE\u021Bi fie urm\u0103rite e-mailurile?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "\xCEnscrie-te acum la protec\u021Bia comunica\u021Biilor prin e-mail DuckDuckGo pentru extensia ta!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "\xCEnchide filele \u0219i \u0219terge datele", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "\u0218tergere date", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Numai de site-ul curent", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Ultima or\u0103", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Ultimele 24 de ore", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Ultimele 7 zile", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Ultimele 4 s\u0103pt\u0103m\xE2ni", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Totdeauna", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {o or\u0103} day {24 de ore} week {o s\u0103pt\u0103m\xE2n\u0103} month {4 s\u0103pt\u0103m\xE2ni} other {Toate}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\xCEnchizi <b>{openTabs}</b> fil\u0103 \u0219i \u0219tergi istoricul de navigare \u0219i modulele cookie pentru <b>{durationDesc}</b>?} few {\xCEnchizi <b>{openTabs}</b> file \u0219i \u0219tergi istoricul de navigare \u0219i modulele cookie pentru <b>{durationDesc}</b>?} other {\xCEnchizi <b>{openTabs}</b> de file \u0219i \u0219tergi istoricul de navigare \u0219i modulele cookie pentru <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\xCEnchizi <b>{openTabs}</b> fil\u0103 \u0219i \u0219tergi modulele cookie pentru <b>{durationDesc}</b>?} few {\xCEnchizi <b>{openTabs}</b> file \u0219i \u0219tergi modulele cookie pentru <b>{durationDesc}</b>?} other {\xCEnchizi <b>{openTabs}</b> de file \u0219i \u0219tergi modulele cookie pentru <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\u0218tergi istoricul de navigare \u0219i modulele cookie pentru <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\u0218tergi modulele cookie pentru <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\xCEnchizi <b>{openTabs}</b> {openTabs, plural, =1 {tab} other {tabs}} \u0219i \u0219tergi <b>\xEEntregul</b> istoric de navigare \u0219i toate modulele cookie ({cookies} {cookies, plural, =1 {site} other {sites}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\xCEnchizi <b>{openTabs}</b> {openTabs, plural, =1 {fil\u0103} other {file}} \u0219i \u0219tergi <b>toate</b> modulele cookie ({cookies} {cookies, plural, =1 {site} other {site-uri}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\u0218tergi <b>\xEEntregul</b> istoric de navigare \u0219i toate modulele cookie ({cookies} site)?} few {\u0218tergi <b>\xEEntregul</b> istoric de navigare \u0219i toate modulele cookie ({cookies} site-uri)?} other {\u0218tergi <b>\xEEntregul</b> istoric de navigare \u0219i toate modulele cookie ({cookies} de site-uri)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\u0218tergi <b>toate</b> modulele cookie ({cookies} site)?} few {\u0218tergi <b>toate</b> modulele cookie ({cookies} site-uri)?} other {\u0218tergi <b>toate</b> modulele cookie ({cookies} de site-uri)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\xCEnchizi <b>{openTabs} fil\u0103 {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?} few {\xCEnchizi <b>{openTabs} file {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?} other {\xCEnchizi <b>{openTabs} de file {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\xCEnchizi <b>{openTabs} fil\u0103 {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?} few {\xCEnchizi <b>{openTabs} file {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?} other {\xCEnchizi <b>{openTabs} file {site}</b> \u0219i \u0219tergi <b>toate modulele cookie {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\u0218tergi \xEEntregul istoric de navigare \u0219i modulele cookie aferente <b>{site}</b> ?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\u0218tergi toate modulele cookie aferente <b>{site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} fil\u0103 fixat\u0103</b> va fi ignorat\u0103.} few {<b>{tabs} file fixate</b> vor fi ignorate.} other {<b>{tabs} de file fixate</b> vor fi ignorate.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Cer senin", note: "Button text to start data clearing." }, cancel: { title: "Anuleaz\u0103", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Pentru a \u0219terge \u0219i istoricul, selecteaz\u0103 o perioad\u0103.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Aparat foto", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Microfon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Localizare geografic\u0103", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Ferestre pop-up", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "\xCEntreab\u0103 de fiecare dat\u0103", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Notificare", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Permite \xEEntotdeauna", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Refuz\u0103 \xEEntotdeauna", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Trimiterea unui raport anonim privind un site nefunc\u021Bional ne ajut\u0103 s\u0103 \xEEmbun\u0103t\u0103\u021Bim aplica\u021Bia.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Descrie ce s-a \xEEnt\xE2mplat", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Site-ul era blocat sau nu s-a \xEEnc\u0103rcat", note: "User is reporting this page because the page didn't load" }, layout: { title: "Aspectul site-ului era defectuos", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Site-ul con\u021Bine spa\u021Bii goale mari", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videoclipul nu a fost redat sau \xEEnc\u0103rcat", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Imaginile nu s-au \xEEnc\u0103rcat", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Comentariile, recenziile sau mesajele chat nu s-au \xEEnc\u0103rcat", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Con\u021Binutul lipse\u0219te", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Linkurile sau butoanele nu func\u021Bioneaz\u0103", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Nu pot s\u0103 m\u0103 conectez/\xEEnregistrez", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Nu pot pl\u0103ti sau nu pot face cump\u0103r\u0103turi", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem\u0103 cu browserul sau cu alt\u0103 extensie de browser", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Site-ul mi-a solicitat s\u0103 dezactivez func\u021Bia de blocare a reclamelor", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Altceva", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Comunic\u0103 mai multe detalii (op\u021Bional):{bullet}Ce s-a \xEEnt\xE2mplat?{bullet}Ce ar fi trebuit s\u0103 se \xEEnt\xE2mple?{bullet} Dezactivarea protec\u021Biilor a fost util\u0103?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Trimite raportul", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Rapoartele trimise c\u0103tre DuckDuckGo includ doar informa\u021Biile necesare pentru a ne ajuta s\u0103 r\u0103spundem la feedbackul t\u0103u.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Mul\u021Bumim!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Raportul t\u0103u va contribui la \xEEmbun\u0103t\u0103\u021Birea produselor noastre \u0219i la \xEEmbun\u0103t\u0103\u021Birea experien\u021Bei pentru alte persoane.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Tehnologii de urm\u0103rire", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Se actualizeaz\u0103 lista de protec\u021Bie", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Protec\u021Biile sunt <b>ACTIVATE</b> pentru acest site", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Protec\u021Biile sunt <b>DEZACTIVATE</b> pentru acest site", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Am dezactivat temporar Elementele de protec\u021Bie a confiden\u021Bialit\u0103\u021Bii, deoarece par s\u0103 creeze disfunc\u021Bii pe acest site.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "\xCE\u021Bi recomand\u0103m s\u0103 dezactivezi Elementele de protec\u021Bie a confiden\u021Bialit\u0103\u021Bii pentru acest site pentru a preveni disfunc\u021Biile pe site.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Acest site nu este securizat</b> \u0219i poate compromite informa\u021Biile pe care le trimi\u021Bi pe aceast\u0103 pagin\u0103.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "\xCEnc\u0103rcarea solicit\u0103rilor urm\u0103toarelor domenii ter\u021Be a fost blocat\u0103, deoarece au fost identificate ca fiind solicit\u0103ri de urm\u0103rire. \xCEn cazul \xEEn care solicit\u0103rile unei societ\u0103\u021Bi sunt \xEEnc\u0103rcate, aceasta \xEEi poate permite s\u0103 \xEE\u021Bi creeze un profil.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Nu a fost blocat\u0103 \xEEnc\u0103rcarea niciunei solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103. \xCEn cazul \xEEn care solicit\u0103rile unei companii sunt \xEEnc\u0103rcate, aceasta \xEEi poate permite s\u0103 \xEE\u021Bi creeze un profil.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Nu am identificat nicio solicitare de urm\u0103rire pe aceast\u0103 pagin\u0103.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Nu am g\u0103sit nicio companie care s\u0103 \xEEncerce s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Pentru a preveni apari\u021Bia unor disfunc\u021Bii pe site, nu am blocat \xEEnc\u0103rcarea solicit\u0103rilor de urm\u0103rire ale companiilor pe aceast\u0103 pagin\u0103.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Nu a fost blocat\u0103 \xEEnc\u0103rcarea niciunei solicit\u0103ri de urm\u0103rire, deoarece protec\u021Biile sunt dezactivate pentru acest site. \xCEn cazul \xEEn care solicit\u0103rile unei societ\u0103\u021Bi sunt \xEEnc\u0103rcate, aceasta \xEEi poate permite s\u0103 \xEE\u021Bi creeze un profil.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Genereaz\u0103 o Duck Address privat\u0103", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "S-a copiat \xEEn clipboard!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Site-ul nu func\u021Bioneaz\u0103 a\u0219a cum era de a\u0219teptat?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Site-ul nu func\u021Bioneaz\u0103?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Raporteaz\u0103 site-ul defect", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Dezactivarea protec\u021Biilor ar putea fi de ajutor.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Site-ul tot nu func\u021Bioneaz\u0103?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Ia m\u0103suri de precau\u021Bie", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Acest site este de\u021Binut de {companyDisplayName}</b>, care opereaz\u0103 o re\u021Bea de tehnologii de urm\u0103rire pe {companyPrevalence}% dintre principalele site-uri. Am reu\u0219it s\u0103 bloc\u0103m unele dintre cererile companiei respective pe aceast\u0103 pagin\u0103.} other {<b>Acest site este de\u021Binut de {companyDisplayName}</b>, care opereaz\u0103 o re\u021Bea de tehnologii de urm\u0103rire pe {companyPrevalence}% dintre principalele site-uri. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Am blocat unele companii pentru a nu \xEEnc\u0103rca solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.} =2 {Am blocat <b>{firstCompany}</b> \u0219i <b>{secondCompany}</b> s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.} =3 {Am blocat <b>{firstCompany}</b>, <b>{secondCompany}</b> \u0219i <b>{thirdCompany}</b> s\u0103 \xEEncarce cereri de urm\u0103rire pe aceast\u0103 pagin\u0103.} =4 {Am blocat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>\u0219i <b>{fourthCompany}</b>s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.} =5 {Am blocat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0219i <b>\xEEnc\u0103 o companie</b> s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.} one {Am blocat <b>{firstCompany}</b> s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.} few {Am blocat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0219i <b>{othersCount} altele</b> de la \xEEnc\u0103rcarea cererilor de urm\u0103rire pe aceast\u0103 pagin\u0103.} other {Am blocat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0219i \xEEnc\u0103 <b>{othersCount} companii</b> s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Modulele cookie au fost gestionate", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Fereastr\u0103 pop-up privind modulele cookie ascuns\u0103", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Am reu\u0219it s\u0103 ascundem fereastra pop-up privind modulele cookie numai pe acest site, deoarece nu au fost oferite op\u021Biuni pentru gestionarea preferin\u021Belor privind modulele cookie. Se aplic\u0103 \xEEn continuare celelalte instrumente ale noastre de protec\u021Bie cu privire la urm\u0103rirea pe internet.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Am setat preferin\u021Bele tale privind modulele cookie pentru a maximiza confiden\u021Bialitatea \u0219i am \xEEnchis fereastra pop-up.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Dezactiveaz\u0103 din Set\u0103ri", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Conexiunea este criptat\u0103", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Conexiunea nu este criptat\u0103", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Solicit\u0103ri a c\u0103ror \xEEnc\u0103rcare a fost blocat\u0103", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nu a fost blocat\u0103 nicio solicitare de urm\u0103rire", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nu au fost g\u0103site solicit\u0103ri de urm\u0103rire", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Solicit\u0103ri de la ter\u021Bi \xEEnc\u0103rcate", note: "todo" }, thirdPartiesNoneFound: { title: "Nu s-au g\u0103sit cereri de la ter\u021Bi", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} este proprietara acestui site \u0219i a instrumentelor de urm\u0103rire cunoscute g\u0103site pe aceast\u0103 pagin\u0103, a\u0219adar nu am blocat-o.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Nu am g\u0103sit nicio companie care s\u0103 \xEEncerce s\u0103 \xEEncarce solicit\u0103ri de urm\u0103rire pe aceast\u0103 pagin\u0103.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Instrumentele de urm\u0103rire ajut\u0103 companiile s\u0103 creeze profilul t\u0103u. Am g\u0103sit aceste companii care \xEE\u021Bi monitorizeaz\u0103 activitatea pe aceast\u0103 pagin\u0103.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Instrumentele de urm\u0103rire ajut\u0103 companiile s\u0103 creeze profilul t\u0103u. Am \xEEmpiedicat aceste companii s\u0103 monitorizeze activitatea ta pe aceast\u0103 pagin\u0103.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Re\u021Bea cu tehnologii de urm\u0103rire necunoscut\u0103", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domenii tehnologii de urm\u0103rire pentru {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 tehnologii de urm\u0103rire g\u0103site", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Instrumente de urm\u0103rire de\u021Binute de acest site (permise)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} instrument de urm\u0103rire blocat pe {domain}} few {{trackerCount} instrumente de urm\u0103rire blocate pe {domain}} other {{trackerCount} instrumente de urm\u0103rire blocate pe {domain}}}} other {{trackerCount, plural, one {{trackerCount} instrument de urm\u0103rire g\u0103sit pe {domain}} few {{trackerCount} instrumente de urm\u0103rire g\u0103site pe {domain}} other {{trackerCount} instrumente de urm\u0103rire g\u0103site pe {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Re\u021Bine: limit\u0103rile platformei ne pot limita capacitatea de a detecta toate solicit\u0103rile.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Despre protec\u021Biile noastre \xEEmpotriva urm\u0103ririi pe internet", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "\xCEn ce mod anun\u021Burile noastre de c\u0103utare ne afecteaz\u0103 m\u0103surile de protec\u021Bie", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Cererile urm\u0103torului domeniu au fost \xEEnc\u0103rcate deoarece s-a f\u0103cut clic recent pe o reclam\u0103 {domain} de pe DuckDuckGo. Aceste cereri ajut\u0103 la evaluarea eficien\u021Bei anun\u021Burilor. Nicio reclam\u0103 de pe DuckDuckGo nu creeaz\u0103 profiluri.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Cererile urm\u0103toarelor domenii au fost \xEEnc\u0103rcate pentru a preveni disfunc\u021Biile pe site.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Cererile urm\u0103toarelor domenii au fost \xEEnc\u0103rcate deoarece sunt asociate cu {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Au fost \xEEnc\u0103rcate \u0219i cererile urm\u0103toarelor domenii." }, sectionHeadingProtectionsDisabled: { title: "Cererile urm\u0103toarelor domenii au fost \xEEnc\u0103rcate deoarece protec\u021Biile sunt dezactivate.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Au fost \xEEnc\u0103rcate urm\u0103toarele solicit\u0103ri ale domeniilor ter\u021Be. \xCEn cazul \xEEn care solicit\u0103rile unei societ\u0103\u021Bi sunt \xEEnc\u0103rcate, aceasta \xEEi poate permite s\u0103 \xEE\u021Bi creeze un profil, de\u0219i celelalte m\u0103suri de protec\u021Bie ale noastre \xEEmpotriva urm\u0103ririi pe internet se aplic\u0103 \xEEn continuare.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Au fost \xEEnc\u0103rcate urm\u0103toarele solicit\u0103ri ale domeniilor ter\u021Be. \xCEn cazul \xEEn care solicit\u0103rile unei societ\u0103\u021Bi sunt \xEEnc\u0103rcate, aceasta \xEEi poate permite s\u0103 \xEE\u021Bi creeze un profil, de\u0219i celelalte m\u0103suri de protec\u021Bie ale noastre \xEEmpotriva urm\u0103ririi pe internet se aplic\u0103 \xEEn continuare.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nu am identificat nicio cerere din partea domeniilor ter\u021Be.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analiz\u0103", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "publicitate", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Re\u021Bea social\u0103", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Livrare de con\u021Binut", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Con\u021Binut \xEEncorporat", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "C\u0103utare DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Caut\u0103", note: "Aria label for the search button" }, optionsButton: { title: "Mai multe op\u021Biuni", note: "Aria label for the for the options button" }, navigationComplete: { title: "Terminat", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "\xCEnapoi", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Activeaz\u0103 protec\u021Biile", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Dezactiveaz\u0103 protec\u021Biile", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Ceva nu a mers bine \u0219i nu am putut \xEEnc\u0103rca acest con\u021Binut. \xCEncearc\u0103 s\u0103 re\xEEncarci pagina.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, ru: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u0428\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u0438\u0435", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "\u041F\u043E\u0434\u043F\u0438\u0441\u044C", note: "When the cryptographic key can be used to sign data" }, verify: { title: "\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043D\u0438\u0435", note: "When the cryptographic key can be used to verify data" }, derive: { title: "\u041F\u0440\u043E\u0438\u0437\u0432\u043E\u0434\u043D\u044B\u0435", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "\u0421\u0432\u043E\u0440\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u043A\u0430", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u043E", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "\u041E \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0435 \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0441\u0442\u0438", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "\u041E\u0431\u0449\u0435\u043F\u0440\u0438\u043D\u044F\u0442\u043E\u0435 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435", note: "The Common Name for an SSL certificate" }, publicKey: { title: "\u041E\u0442\u043A\u0440\u044B\u0442\u044B\u0439 \u043A\u043B\u044E\u0447", note: "The Public Key for an SSL certificate" }, algorithm: { title: "\u0410\u043B\u0433\u043E\u0440\u0438\u0442\u043C", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "\u0420\u0430\u0437\u043C\u0435\u0440 \u043A\u043B\u044E\u0447\u0430", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "\u041F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u0435", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "\u0421\u0432\u043E\u0434\u043A\u0430", note: "Header for summary of connection details" }, permanent: { title: "\u041F\u043E\u0441\u0442\u043E\u044F\u043D\u043D\u044B\u0439", note: "Whether certificate is permanent" }, effectiveSize: { title: "\u0424\u0430\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0439 \u0440\u0430\u0437\u043C\u0435\u0440", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442 {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "\u041D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u043D\u0435\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0435 \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435. \u0421\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0435 \u043B\u0438\u0446\u0430 \u043C\u043E\u0433\u0443\u0442 \u043F\u0440\u043E\u0441\u043C\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044C \u0432\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F \u0438 \u043F\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044B\u0432\u0430\u0442\u044C \u043A\u043E\u043D\u0444\u0438\u0434\u0435\u043D\u0446\u0438\u0430\u043B\u044C\u043D\u0443\u044E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E, \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C\u0443\u044E \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "\u0427\u0442\u043E\u0431\u044B \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044C \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u0443\u044E \u0432\u0430\u043C\u0438 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E, \u043C\u044B \u043F\u043E\u0432\u044B\u0441\u0438\u043B\u0438 \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0441\u0442\u044C \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "\u041D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0437\u0430\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0435 \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435, \u043A\u043E\u0442\u043E\u0440\u043E\u0435 \u043D\u0435 \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0435\u0442 \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u043C \u043B\u0438\u0446\u0430\u043C \u043F\u0440\u043E\u0441\u043C\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044C \u0432\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F \u0438 \u043F\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044B\u0432\u0430\u0442\u044C \u043A\u043E\u043D\u0444\u0438\u0434\u0435\u043D\u0446\u0438\u0430\u043B\u044C\u043D\u0443\u044E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "\u0417\u0430\u0449\u0438\u0442\u0430 \u043A\u043E\u043D\u0444\u0438\u0434\u0435\u043D\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u0438 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 \u043D\u0430 \u0441\u043F\u0435\u0446\u0438\u0430\u043B\u044C\u043D\u044B\u0445 \u0438 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u044B\u0445 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430\u0445.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\u041D\u0440\u0430\u0432\u0438\u0442\u0441\u044F, \u043A\u0430\u043A \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "\u0420\u0430\u0441\u0441\u043A\u0430\u0436\u0438\u0442\u0435 \u043E \u043D\u0435\u043C \u0440\u043E\u0434\u0441\u0442\u0432\u0435\u043D\u043D\u0438\u043A\u0430\u043C \u0438 \u0434\u0440\u0443\u0437\u044C\u044F\u043C", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "\u0420\u0430\u0441\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u044F\u0439\u0442\u0435 DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "\u041D\u0430\u0434\u043E\u0435\u043B\u043E, \u0447\u0442\u043E \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u044E\u0442 \u0432\u0430\u0448\u0438 \u043F\u0438\u0441\u044C\u043C\u0430?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "\u041F\u043E\u0434\u043F\u0438\u0448\u0438\u0442\u0435\u0441\u044C \u043D\u0430 \u0443\u0441\u043B\u0443\u0433\u0443 \u0437\u0430\u0449\u0438\u0442\u044B \u044D\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0439 \u043F\u043E\u0447\u0442\u044B DuckDuckGo, \u0447\u0442\u043E\u0431\u044B \u0432\u043E\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C\u0441\u044F \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u043C!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u044B\u0435", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u044B\u0435", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "\u0422\u043E\u043B\u044C\u043A\u043E \u0441 \u0442\u0435\u043A\u0443\u0449\u0435\u0433\u043E \u0441\u0430\u0439\u0442\u0430", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "\u0417\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439 \u0447\u0430\u0441", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "\u0417\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 24 \u0447\u0430\u0441\u0430", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "\u0417\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 7 \u0434\u043D\u0435\u0439", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "\u0417\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 4 \u043D\u0435\u0434\u0435\u043B\u0438", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "\u0417\u0430 \u0432\u0441\u0451 \u0432\u0440\u0435\u043C\u044F", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {\u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0439 \u0447\u0430\u0441} day {\u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 24 \u0447\u0430\u0441\u0430} week {\u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u043D\u0435\u0434\u0435\u043B\u044E} month {\u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 4 \u043D\u0435\u0434\u0435\u043B\u0438} other {\u0412\u0441\u0435}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0443 \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} few {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} many {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043E\u043A \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} other {\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0432\u043A\u043B\u0430\u0434\u043A\u0438 (<b>{openTabs}</b>) \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0443 \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} few {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} many {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> \u0432\u043A\u043B\u0430\u0434\u043E\u043A \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?} other {\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0432\u043A\u043B\u0430\u0434\u043A\u0438 (<b>{openTabs}</b>) \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> {openTabs, plural, =1 {\u0432\u043A\u043B\u0430\u0434\u043A\u0443} other {\u0432\u043A\u043B\u0430\u0434.}} \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} {cookies, plural, =1 {\u0441\u0430\u0439\u0442\u0430} other {\u0441\u0430\u0439\u0442\u043E\u0432}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs}</b> {openTabs, plural, =1 {\u0432\u043A\u043B\u0430\u0434\u043A\u0443} other {\u0432\u043A\u043B\u0430\u0434.}} \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} {cookies, plural, =1 {\u0441\u0430\u0439\u0442\u0430} other {\u0441\u0430\u0439\u0442\u043E\u0432}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u0430)?} few {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?} many {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?} other {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u0430)?} few {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?} many {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?} other {\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B (\u0441 {cookies} \u0441\u0430\u0439\u0442\u043E\u0432)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043A\u0443 {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} few {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043A\u0438 {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} many {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043E\u043A {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} other {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>\u0432\u043A\u043B\u0430\u0434\u043A\u0438 {site} ({openTabs})</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043A\u0443 {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} few {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043A\u0438 {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} many {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>{openTabs} \u0432\u043A\u043B\u0430\u0434\u043E\u043A {site}</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?} other {\u0417\u0430\u043A\u0440\u044B\u0442\u044C <b>\u0432\u043A\u043B\u0430\u0434\u043A\u0438 {site} ({openTabs})</b> \u0438 \u0443\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u044E</b> \u0438\u0441\u0442\u043E\u0440\u0438\u044E \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u043E\u0432 \u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C <b>\u0432\u0441\u0435</b> \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0441 {site}?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043D\u0430\u044F</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0430 \u0431\u0443\u0434\u0435\u0442 \u043F\u0440\u043E\u0438\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\u043D\u0430.} few {<b>{tabs} \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043D\u044B\u0435</b> \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u0431\u0443\u0434\u0443\u0442 \u043F\u0440\u043E\u0438\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\u043D\u044B.} many {<b>{tabs} \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043D\u044B\u0445</b> \u0432\u043A\u043B\u0430\u0434\u043E\u043A \u0431\u0443\u0434\u0435\u0442 \u043F\u0440\u043E\u0438\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\u043D\u043E.} other {\u0417\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043D\u044B\u0435 \u0432\u043A\u043B\u0430\u0434\u043A\u0438 (<b>{tabs}</b>) \u0431\u0443\u0434\u0443\u0442 \u043F\u0440\u043E\u0438\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\u043D\u044B.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C", note: "Button text to start data clearing." }, cancel: { title: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "\u0415\u0441\u043B\u0438 \u0432\u044B \u0442\u0430\u043A\u0436\u0435 \u0445\u043E\u0442\u0438\u0442\u0435 \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u0438\u0441\u0442\u043E\u0440\u0438\u044E, \u0432\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0439 \u043E\u0442\u0440\u0435\u0437\u043E\u043A.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "\u041A\u0430\u043C\u0435\u0440\u0430", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "\u041C\u0438\u043A\u0440\u043E\u0444\u043E\u043D", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "\u0413\u0435\u043E\u043B\u043E\u043A\u0430\u0446\u0438\u044F", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "\u0412\u0441\u043F\u043B\u044B\u0432\u0430\u044E\u0449\u0438\u0435 \u043E\u043A\u043D\u0430", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "\u0421\u043F\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044C \u043A\u0430\u0436\u0434\u044B\u0439 \u0440\u0430\u0437", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "\u0421\u043F\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044C \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u0435", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "\u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044C \u0432\u0441\u0435\u0433\u0434\u0430", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "\u041D\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0442\u044C", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "\u0412\u0430\u0448\u0430 \u0430\u043D\u043E\u043D\u0438\u043C\u043D\u0430\u044F \u0436\u0430\u043B\u043E\u0431\u0430 \u043D\u0430 \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u044B \u0441 \u0441\u0430\u0439\u0442\u043E\u043C \u043F\u043E\u043C\u043E\u0436\u0435\u0442 \u043D\u0430\u043C \u0443\u043B\u0443\u0447\u0448\u0438\u0442\u044C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "\u041E\u043F\u0438\u0448\u0438\u0442\u0435, \u0447\u0442\u043E \u0441\u043B\u0443\u0447\u0438\u043B\u043E\u0441\u044C", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "\u0421\u0430\u0439\u0442 \u0431\u043B\u043E\u043A\u0438\u0440\u0443\u0435\u0442\u0441\u044F \u0438\u043B\u0438 \u043D\u0435 \u0433\u0440\u0443\u0437\u0438\u0442\u0441\u044F", note: "User is reporting this page because the page didn't load" }, layout: { title: "\u041D\u0430\u0440\u0443\u0448\u0435\u043D\u0430 \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430 \u0441\u0430\u0439\u0442\u0430", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "\u041A\u0440\u0443\u043F\u043D\u044B\u0435 \u043F\u0443\u0441\u0442\u044B\u0435 \u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0430", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "\u041D\u0435 \u0433\u0440\u0443\u0437\u0438\u0442\u0441\u044F \u0438\u043B\u0438 \u043D\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0432\u0438\u0434\u0435\u043E", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "\u041D\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044E\u0442\u0441\u044F \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F", note: "User is reporting this page because one or more images did not load" }, comments: { title: "\u041D\u0435 \u0433\u0440\u0443\u0437\u044F\u0442\u0441\u044F \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438, \u043E\u0442\u0437\u044B\u0432\u044B \u0438\u043B\u0438 \u0447\u0430\u0442", note: "User is reporting this page because one or more comments did not load" }, content: { title: "\u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0435", note: "User is reporting this page because some other type of content did not load" }, links: { title: "\u041D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u044E\u0442 \u0441\u0441\u044B\u043B\u043A\u0438 \u0438\u043B\u0438 \u043A\u043D\u043E\u043F\u043A\u0438", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0432\u043E\u0439\u0442\u0438/\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u044F", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "\u041D\u0435 \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0432\u0435\u0441\u0442\u0438 \u043E\u043F\u043B\u0430\u0442\u0443 \u0438\u043B\u0438 \u043E\u0444\u043E\u0440\u043C\u0438\u0442\u044C \u0437\u0430\u043A\u0430\u0437/\u043F\u043E\u043A\u0443\u043F\u043A\u0443", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "\u041F\u0440\u043E\u0431\u043B\u0435\u043C\u0430 \u0441 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043E\u043C \u0438\u043B\u0438 \u0434\u0440\u0443\u0433\u0438\u043C \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u043C", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "\u0421\u0430\u0439\u0442 \u043F\u0440\u043E\u0441\u0438\u0442 \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0443 \u0440\u0435\u043A\u043B\u0430\u043C\u044B", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "\u0427\u0442\u043E-\u0442\u043E \u0434\u0440\u0443\u0433\u043E\u0435", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "\u041F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u044C\u0442\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u0443\u044E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E (\u043D\u0435\u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E).{bullet}\u0427\u0442\u043E \u0441\u043B\u0443\u0447\u0438\u043B\u043E\u0441\u044C?{bullet}\u0427\u0442\u043E \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u043B\u043E \u043F\u0440\u043E\u0438\u0437\u043E\u0439\u0442\u0438?{bullet}\u041F\u043E\u043C\u043E\u0433\u043B\u043E \u043B\u0438 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0437\u0430\u0449\u0438\u0442\u044B?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0436\u0430\u043B\u043E\u0431\u0443", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F, \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043D\u044B\u0435 \u0432 DuckDuckGo, \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043E\u043B\u044C\u043A\u043E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E, \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u0443\u044E \u0434\u043B\u044F \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0432\u0430\u0448\u0435\u0433\u043E \u043E\u0442\u0437\u044B\u0432\u0430.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "\u0421\u043F\u0430\u0441\u0438\u0431\u043E!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "\u0412\u0430\u0448\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043F\u043E\u0441\u043E\u0431\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0443\u043B\u0443\u0447\u0448\u0435\u043D\u0438\u044E \u041F\u041E \u0438 \u043F\u043E\u0432\u044B\u0448\u0435\u043D\u0438\u044E \u0443\u0434\u043E\u0431\u0441\u0442\u0432\u0430 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u044B", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "\u0421\u043F\u0438\u0441\u043E\u043A \u0437\u0430\u0449\u0438\u0442\u044B \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0435\u0442\u0441\u044F", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "\u0424\u0443\u043D\u043A\u0446\u0438\u0438 \u0437\u0430\u0449\u0438\u0442\u044B \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 <b>\u0412\u041A\u041B\u042E\u0427\u0415\u041D\u042B</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "\u0424\u0443\u043D\u043A\u0446\u0438\u0438 \u0437\u0430\u0449\u0438\u0442\u044B \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 <b>\u0412\u042B\u041A\u041B\u042E\u0427\u0415\u041D\u042B</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "\u041C\u044B \u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u043B\u0438 \u0437\u0430\u0449\u0438\u0442\u0443 \u043A\u043E\u043D\u0444\u0438\u0434\u0435\u043D\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u0438, \u0442\u0430\u043A \u043A\u0430\u043A \u043E\u043D\u0430 \u043D\u0430\u0440\u0443\u0448\u0430\u043B\u0430 \u0440\u0430\u0431\u043E\u0442\u0443 \u044D\u0442\u043E\u0433\u043E \u0441\u0430\u0439\u0442\u0430.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u043C \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u0443 \u043A\u043E\u043D\u0444\u0438\u0434\u0435\u043D\u0446\u0438\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u0438 \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u043D\u0435 \u043D\u0430\u0440\u0443\u0448\u0430\u0442\u044C \u0435\u0433\u043E \u0440\u0430\u0431\u043E\u0442\u0443.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>\u0421\u0430\u0439\u0442 \u043D\u0435\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u0435\u043D</b> \u0438 \u043D\u0435 \u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u0449\u0438\u0442\u0443 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438, \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u043E\u0439 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "\u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0445 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432, \u0442\u0430\u043A \u043A\u0430\u043A \u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043B\u0438 \u0432 \u043D\u0438\u0445 \u043F\u043E\u043F\u044B\u0442\u043A\u0438 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F. \u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u044E\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F\u043C \u0432\u0430\u0441 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "\u041C\u044B \u043D\u0435 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0438 \u043E\u0434\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435. \u0412 \u0441\u043B\u0443\u0447\u0430\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0438\u0445 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432, \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 \u0438\u043C\u0435\u044E\u0442 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C \u0441\u043E\u0437\u0434\u0430\u0432\u0430\u0442\u044C \u0432\u0430\u0448 \u043F\u0440\u043E\u0444\u0438\u043B\u044C.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "\u041C\u044B \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0438\u043B\u0438 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "\u041D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439, \u043F\u044B\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "\u0427\u0442\u043E\u0431\u044B \u043D\u0435 \u043D\u0430\u0440\u0443\u0448\u0438\u0442\u044C \u0440\u0430\u0431\u043E\u0442\u0443 \u0441\u0430\u0439\u0442\u0430, \u043C\u044B \u043D\u0435 \u0441\u0442\u0430\u043B\u0438 \u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "\u041C\u044B \u043D\u0435 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0438 \u043E\u0434\u043D\u043E\u0433\u043E \u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435, \u0442\u0430\u043A \u043A\u0430\u043A \u0437\u0430\u0449\u0438\u0442\u0430 \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0430. \u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u044E\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u044F\u043C \u0432\u0430\u0441 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0430\u0434\u0440\u0435\u0441 \u043D\u0430 Duck", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u043E \u0432 \u0431\u0443\u0444\u0435\u0440!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "\u0421\u0430\u0439\u0442 \u043F\u043B\u043E\u0445\u043E \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "\u0421\u0430\u0439\u0442 \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "\u0421\u043E\u043E\u0431\u0449\u0438\u0442\u044C \u043E \u043D\u0435\u0440\u0430\u0431\u043E\u0442\u0430\u044E\u0449\u0435\u043C \u0441\u0430\u0439\u0442\u0435", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "\u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u0443.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "\u0412\u0441\u0451 \u0440\u0430\u0432\u043D\u043E \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "\u0411\u0443\u0434\u044C\u0442\u0435 \u043E\u0441\u0442\u043E\u0440\u043E\u0436\u043D\u044B!", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>\u042D\u0442\u043E\u0442 \u0441\u0430\u0439\u0442 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0438\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 {companyDisplayName}</b>, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u0442 \u0441\u0435\u0442\u044C\u044E \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432 \u043D\u0430 {companyPrevalence}% \u0432\u0435\u0434\u0443\u0449\u0438\u0445 \u0441\u0430\u0439\u0442\u043E\u0432. \u041D\u0430\u043C \u043D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435.} other {<b>\u042D\u0442\u043E\u0442 \u0441\u0430\u0439\u0442 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0438\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 {companyDisplayName}</b>, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u0442 \u0441\u0435\u0442\u044C\u044E \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432 \u043D\u0430 {companyPrevalence}% \u0432\u0435\u0434\u0443\u0449\u0438\u0445 \u0441\u0430\u0439\u0442\u043E\u0432. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {\u041C\u044B \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0442\u0440\u0435\u043A\u0438\u043D\u0433-\u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0435\u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.} =2 {\u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 <b>{firstCompany}</b> \u0438 <b>{secondCompany}</b>.} =3 {\u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 <b>{firstCompany}</b>, <b>{secondCompany}</b> \u0438 <b>{thirdCompany}</b>.} =4 {\u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> \u0438 <b>{fourthCompany}</b>.} =5 {\u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0438 <b>\u0435\u0449\u0435 \u043E\u0434\u043D\u043E\u0439</b> \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438.} one {\u041C\u044B \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 \u043E\u0442 <b>{firstCompany}</b> \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435.} few {\u041C\u044B \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435, \u043F\u043E\u0441\u0442\u0443\u043F\u0438\u0432\u0448\u0438\u0445 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> \u0438 <b>{fourthCompany}</b> \u0438 \u0435\u0449\u0435 <b>{othersCount}</b> \u0434\u0440\u0443\u0433\u0438\u0445 \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435.} many {\u041C\u044B \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435, \u043F\u043E\u0441\u0442\u0443\u043F\u0438\u0432\u0448\u0438\u0445 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0438 <b>\u0435\u0449\u0435 {othersCount}</b> \u0434\u0440\u0443\u0433\u0438\u0445 \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435.} other {\u041C\u044B \u043F\u0440\u0435\u0434\u043E\u0442\u0432\u0440\u0430\u0442\u0438\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435, \u043F\u043E\u0441\u0442\u0443\u043F\u0438\u0432\u0448\u0438\u0445 \u043E\u0442 <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> \u0438 <b>\u0435\u0449\u0435 {othersCount}</b> \u0434\u0440\u0443\u0433\u0438\u0445 \u043D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "K\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B \u0432\u044B\u0431\u0440\u0430\u043D\u044B", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "\u0412\u0441\u043F\u043B\u044B\u0432\u0430\u044E\u0449\u0435\u0435 \u043E\u043A\u043D\u043E \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u043E\u0432 \u0441\u043A\u0440\u044B\u0442\u043E", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "\u041D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 \u043D\u0435 \u043F\u0440\u0435\u0434\u0443\u0441\u043C\u043E\u0442\u0440\u0435\u043D\u0430 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u043E\u0432, \u043F\u043E\u044D\u0442\u043E\u043C\u0443 \u043C\u044B \u043F\u0440\u043E\u0441\u0442\u043E \u0441\u043A\u0440\u044B\u043B\u0438 \u0438\u0445 \u0432\u0441\u043F\u043B\u044B\u0432\u0430\u044E\u0449\u0435\u0435 \u043E\u043A\u043D\u043E. \u041E\u0441\u0442\u0430\u043B\u044C\u043D\u044B\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0437\u0430\u0449\u0438\u0442\u044B \u043E\u0442 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F \u043E\u043D\u043B\u0430\u0439\u043D \u043F\u043E-\u043F\u0440\u0435\u0436\u043D\u0435\u043C\u0443 \u0430\u043A\u0442\u0438\u0432\u043D\u044B.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "\u041C\u044B \u0432\u044B\u0431\u0440\u0430\u043B\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u043E\u0432, \u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0438\u0432\u0430\u044E\u0449\u0438\u0435 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u0443\u044E \u0437\u0430\u0449\u0438\u0442\u0443 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043D\u043D\u044B\u0445, \u0438 \u0437\u0430\u043A\u0440\u044B\u043B\u0438 \u0432\u0441\u043F\u043B\u044B\u0432\u0430\u044E\u0449\u0435\u0435 \u043E\u043A\u043D\u043E.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u043E", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043D\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u043E", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "\u0417\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 \u043D\u0435 \u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438\u0441\u044C", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "\u0417\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u044B", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u044B \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B", note: "todo" }, thirdPartiesNoneFound: { title: "\u041D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0445 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "\u042D\u0442\u043E\u0442 \u0441\u0430\u0439\u0442 \u0438 \u043D\u0430\u0439\u0434\u0435\u043D\u043D\u044B\u0435 \u043D\u0430 \u043D\u0435\u043C \u0442\u0440\u0435\u043A\u0435\u0440\u044B \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0430\u0442 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 {companyName}, \u043F\u043E\u044D\u0442\u043E\u043C\u0443 \u043C\u044B \u0438\u0445 \u043D\u0435 \u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "\u041D\u0430 \u044D\u0442\u043E\u043C \u0441\u0430\u0439\u0442\u0435 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0439, \u043F\u044B\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043D\u0430 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u0435.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u044B \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u044E\u0442\u0441\u044F \u0434\u043B\u044F \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u0441\u0435\u0442\u0438\u0442\u0435\u043B\u0435\u0439 \u0441\u0430\u0439\u0442\u043E\u0432. \u041F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u044B\u0435 \u0437\u0434\u0435\u0441\u044C \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u044E\u0442 \u0432\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u044B \u043F\u0440\u0438\u043C\u0435\u043D\u044F\u044E\u0442\u0441\u044F \u0434\u043B\u044F \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u0441\u0435\u0442\u0438\u0442\u0435\u043B\u0435\u0439 \u0441\u0430\u0439\u0442\u043E\u0432. \u041C\u044B \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043B\u0438 \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043F\u044B\u0442\u0430\u043B\u0438\u0441\u044C \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u0442\u044C \u0432\u0430\u0448\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F \u043D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "\u0421\u0435\u0442\u044C \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432 \u043D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u0430", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u043D\u044B\u0435 \u0434\u043E\u043C\u0435\u043D\u044B {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u044B \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u044B", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "\u0422\u0440\u0435\u043A\u0435\u0440\u044B, \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0430\u0449\u0438\u0435 \u044D\u0442\u043E\u043C\u0443 \u0441\u0430\u0439\u0442\u0443 (\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u044B)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {\u041D\u0430 {domain} \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440} few {\u041D\u0430 {domain} \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u043E {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440\u0430} many {\u041D\u0430 {domain} \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u043E {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432} other {\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u043E \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435 {domain}: {trackerCount}}}} other {{trackerCount, plural, one {\u041D\u0430 \u0441\u0430\u0439\u0442\u0435 {domain} \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440} few {\u041D\u0430 \u0441\u0430\u0439\u0442\u0435 {domain} \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440\u0430} many {\u041D\u0430 \u0441\u0430\u0439\u0442\u0435 {domain} \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E {trackerCount} \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432} other {\u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E \u0442\u0440\u0435\u043A\u0435\u0440\u043E\u0432 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435 {domain}: {trackerCount}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "\u0412\u043D\u0438\u043C\u0430\u043D\u0438\u0435: \u043D\u0430\u0448\u0438 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u0438 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u0438\u044F \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u0437\u0430\u0432\u0438\u0441\u044F\u0442 \u043E\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u0439 \u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u044B.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "\u041E \u043D\u0430\u0448\u0435\u0439 \u0437\u0430\u0449\u0438\u0442\u0435 \u043E\u0442 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F \u043E\u043D\u043B\u0430\u0439\u043D", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "\u041A\u0430\u043A \u0440\u0435\u043A\u043B\u0430\u043C\u0430 \u043F\u0440\u0438 \u043F\u043E\u0438\u0441\u043A\u0435 \u0432\u043B\u0438\u044F\u0435\u0442 \u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0443", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "\u0417\u0430\u043F\u0440\u043E\u0441\u044B \u044D\u0442\u043E\u0433\u043E \u0434\u043E\u043C\u0435\u043D\u0430 \u0431\u044B\u043B\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u044B \u0432 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0435 \u043D\u0435\u0434\u0430\u0432\u043D\u0435\u0433\u043E \u043D\u0430\u0436\u0430\u0442\u0438\u044F \u043D\u0430 \u0440\u0435\u043A\u043B\u0430\u043C\u0443 {domain} \u0432 DuckDuckGo. \u0422\u0430\u043A\u0438\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u043E\u043C\u043E\u0433\u0430\u044E\u0442 \u043E\u0446\u0435\u043D\u0438\u0442\u044C \u044D\u0444\u0444\u0435\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u044C \u0440\u0435\u043A\u043B\u0430\u043C\u044B. \u0420\u0435\u043A\u043B\u0430\u043C\u043D\u044B\u0435 \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u044F \u0432 DuckDuckGo \u043D\u0435 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u0443\u044E\u0442 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "\u041C\u044B \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043B\u0438 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u044D\u0442\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432, \u0447\u0442\u043E\u0431\u044B \u043D\u0435 \u043D\u0430\u0440\u0443\u0448\u0438\u0442\u044C \u0440\u0430\u0431\u043E\u0442\u0443 \u0441\u0430\u0439\u0442\u0430.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "\u041C\u044B \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043B\u0438 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u044D\u0442\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432, \u0442\u0430\u043A \u043A\u0430\u043A \u043E\u043D\u0438 \u0441\u0432\u044F\u0437\u0430\u043D\u044B \u0441 {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "\u0422\u0430\u043A\u0436\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u044B \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432." }, sectionHeadingProtectionsDisabled: { title: "\u041C\u044B \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043B\u0438 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u044D\u0442\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432, \u0442\u0430\u043A \u043A\u0430\u043A \u0443 \u0432\u0430\u0441 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0430 \u0437\u0430\u0449\u0438\u0442\u0430.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "\u041D\u0438\u0436\u0435 \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D \u0441\u043F\u0438\u0441\u043E\u043A \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432. \u0411\u043B\u0430\u0433\u043E\u0434\u0430\u0440\u044F \u044D\u0442\u0438\u043C \u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043C \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 \u043C\u043E\u0433\u0443\u0442 \u0432\u0430\u0441 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C, \u043E\u0434\u043D\u0430\u043A\u043E \u043C\u044B \u043F\u043E-\u043F\u0440\u0435\u0436\u043D\u0435\u043C\u0443 \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u043C \u0432\u0430\u0441 \u043E\u0442 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F \u0432 \u0441\u0435\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u043C\u0438 \u0441\u043F\u043E\u0441\u043E\u0431\u0430\u043C\u0438.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "\u041D\u0438\u0436\u0435 \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D \u0441\u043F\u0438\u0441\u043E\u043A \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432. \u0411\u043B\u0430\u0433\u043E\u0434\u0430\u0440\u044F \u044D\u0442\u0438\u043C \u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043C \u043A\u043E\u043C\u043F\u0430\u043D\u0438\u0438 \u043C\u043E\u0433\u0443\u0442 \u0432\u0430\u0441 \u043F\u0440\u043E\u0444\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C, \u043E\u0434\u043D\u0430\u043A\u043E \u043C\u044B \u043F\u043E-\u043F\u0440\u0435\u0436\u043D\u0435\u043C\u0443 \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u043C \u0432\u0430\u0441 \u043E\u0442 \u043E\u0442\u0441\u043B\u0435\u0436\u0438\u0432\u0430\u043D\u0438\u044F \u0432 \u0441\u0435\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u043C\u0438 \u0441\u043F\u043E\u0441\u043E\u0431\u0430\u043C\u0438.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "\u0417\u0430\u043F\u0440\u043E\u0441\u043E\u0432 \u043E\u0442 \u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0438\u0445 \u0434\u043E\u043C\u0435\u043D\u043E\u0432 \u043D\u0435 \u043E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D\u043E.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "\u0410\u043D\u0430\u043B\u0438\u0442\u0438\u043A\u0430", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "\u0420\u0435\u043A\u043B\u0430\u043C\u0430", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "\u0421\u043E\u0446\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0441\u0435\u0442\u044C", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "\u0414\u043E\u0441\u0442\u0430\u0432\u043A\u0430 \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "\u0412\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0439 \u043A\u043E\u043D\u0442\u0435\u043D\u0442", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "\u041F\u043E\u0438\u0441\u043A \u0432 DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "\u041F\u043E\u0438\u0441\u043A", note: "Aria label for the search button" }, optionsButton: { title: "\u0414\u0440\u0443\u0433\u0438\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B", note: "Aria label for the for the options button" }, navigationComplete: { title: "\u0413\u043E\u0442\u043E\u0432\u043E", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "\u041D\u0430\u0437\u0430\u0434", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u0443", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u0449\u0438\u0442\u0443", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "\u0427\u0442\u043E-\u0442\u043E \u0441\u0440\u0430\u0431\u043E\u0442\u0430\u043B\u043E \u043D\u0435 \u0442\u0430\u043A: \u043D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u044D\u0442\u043E\u0442 \u043A\u043E\u043D\u0442\u0435\u043D\u0442. \u041F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, sk: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u0160ifrova\u0165", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Podp\xEDsa\u0165", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Overi\u0165", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Odvodi\u0165", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Zabali\u0165", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Rozbali\u0165", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Nezn\xE1me", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Podrobnosti bezpe\u010Dnostn\xE9ho certifik\xE1tu", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "V\u0161eobecn\xFD n\xE1zov", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Verejn\xFD k\u013E\xFA\u010D", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritmus", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Ve\u013Ekos\u0165 k\u013E\xFA\u010Da", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Pou\u017E\xEDvanie", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Zhrnutie", note: "Header for summary of connection details" }, permanent: { title: "Trval\xE9", note: "Whether certificate is permanent" }, effectiveSize: { title: "Efekt\xEDvna ve\u013Ekos\u0165", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certifik\xE1t nebol n\xE1jden\xFD", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certifik\xE1t pre {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "T\xE1to str\xE1nka pou\u017E\xEDva ne\u0161ifrovan\xE9 pripojenie. Tretie strany m\xF4\u017Eu by\u0165 schopn\xE9 zobrazi\u0165 va\u0161u aktivitu alebo m\xF4\u017Eu zachyti\u0165 citliv\xE9 inform\xE1cie, ktor\xE9 odo\u0161lete na tejto str\xE1nke.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Inovovali sme pripojenie na tejto str\xE1nke, aby sme chr\xE1nili vami odosielan\xE9 \xFAdaje po\u010Das prenosu.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "T\xE1to str\xE1nka pou\u017E\xEDva \u0161ifrovan\xE9 pripojenie, ktor\xE9 zabra\u0148uje tret\xEDm stran\xE1m prezera\u0165 si va\u0161u \u010Dinnos\u0165 alebo zachyt\xE1va\u0165 citliv\xE9 inform\xE1cie, ktor\xE9 na tejto str\xE1nke odosielate.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Ochrana s\xFAkromia nie je k dispoz\xEDcii pre \u0161peci\xE1lne str\xE1nky alebo miestne str\xE1nky.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Radi pou\u017E\xEDvate DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Povedzte o DuckDuckGo rodine a priate\u013Eom", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Roz\u0161\xEDri\u0165 DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "M\xE1te u\u017E dos\u0165 sledovania va\u0161ich e-mailov?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Zaregistrujte si svoje roz\u0161\xEDrenie DuckDuckGo na ochranu e-mailov teraz!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Zatvori\u0165 karty a vymaza\u0165 \xFAdaje", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Vymaza\u0165 \xFAdaje", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Len aktu\xE1lna str\xE1nka", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Posledn\xE1 hodina", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Posledn\xFDch 24\xA0hod\xEDn", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Posledn\xFDch 7\xA0dn\xED", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Posledn\xE9 4\xA0t\xFD\u017Edne", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Cel\xE9 obdobie", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {jednu hodinu} day {24 hod\xEDn} week {jeden t\xFD\u017Ede\u0148} month {4 t\xFD\u017Edne} other {V\u0161etky}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Zatvori\u0165 <b>{openTabs}</b>\xA0kartu a\xA0vymaza\u0165 <b>{durationDesc}</b> hist\xF3rie prehliadania a\xA0s\xFAbory cookie?} few {Zatvori\u0165 <b>{openTabs}</b>\xA0karty a\xA0vymaza\u0165 <b>{durationDesc}</b> hist\xF3rie prehliadania a\xA0s\xFAbory cookie?} many {Zatvori\u0165 <b>{openTabs}</b>\xA0karty a\xA0vymaza\u0165 <b>{durationDesc}</b> hist\xF3rie prehliadania a\xA0s\xFAbory cookie?} other {Zatvori\u0165 <b>{openTabs}</b>\xA0kariet a\xA0vymaza\u0165 <b>{durationDesc}</b> hist\xF3rie prehliadania a\xA0s\xFAbory cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Zavrie\u0165 <b>{openTabs}</b> kartu a\xA0vymaza\u0165 <b>{durationDesc}</b> s\xFAborov cookie?} few {Zavrie\u0165 <b>{openTabs}</b>\xA0karty a\xA0vymaza\u0165 <b>{durationDesc}</b> s\xFAborov cookie?} many {Zavrie\u0165 <b>{openTabs}</b>\xA0karty a\xA0vymaza\u0165 <b>{durationDesc}</b> s\xFAborov cookie?} other {Zavrie\u0165 <b>{openTabs}</b> kariet a\xA0vymaza\u0165 <b>{durationDesc}</b> s\xFAborov cookie?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Vymaza\u0165 <b>{durationDesc}</b> hist\xF3rie prehliadania a\xA0s\xFAborov cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Vymaza\u0165 <b>{durationDesc}</b> s\xFAborov cookie?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Zatvori\u0165 <b>{openTabs}</b> {openTabs, plural, =1 {kartu} other {kariet}} a\xA0vymaza\u0165 <b>cel\xFA</b> hist\xF3riu prehliadania a\xA0s\xFAbory cookie ({cookies} {cookies, plural, =1 {str\xE1nka} other {str\xE1nok}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Zatvori\u0165 <b>{openTabs}</b> {openTabs, plural, =1 {kartu} other {kariet}} a\xA0vymaza\u0165 <b>v\u0161etky</b> s\xFAbory cookie ({cookies} {cookies, plural, =1 {str\xE1nku} other {str\xE1nok}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Vymaza\u0165 <b>cel\xFA</b> hist\xF3riu prehliadania a\xA0s\xFAbory cookie ({cookies} str\xE1nka)?} few {Vymaza\u0165 <b>cel\xFA</b> hist\xF3riu prehliadania a\xA0s\xFAbory cookie ({cookies} str\xE1nky)?} many {Vymaza\u0165 <b>cel\xFA</b> hist\xF3riu prehliadania a\xA0s\xFAbory cookie ({cookies} str\xE1nky)?} other {Vymaza\u0165 <b>cel\xFA</b> hist\xF3riu prehliadania a\xA0s\xFAbory cookie ({cookies} str\xE1nok)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Vymaza\u0165 <b>v\u0161etky</b> s\xFAbory cookie ({cookies} str\xE1nka)?} few {Vymaza\u0165 <b>v\u0161etky</b> s\xFAbory cookie ({cookies} str\xE1nky)?} many {Vymaza\u0165 <b>v\u0161etky</b> s\xFAbory cookie ({cookies} str\xE1nky)?} other {Vymaza\u0165 <b>v\u0161etky</b> s\xFAbory cookie ({cookies} str\xE1nok)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Zatvori\u0165 <b>{openTabs}\xA0kariet na str\xE1nke {site}</b> a\xA0vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?} few {Zatvori\u0165 <b>{openTabs} karty na str\xE1nke {site}</b> a\xA0vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b>?} many {Zatvori\u0165 <b>{openTabs} karty na str\xE1nke {site}</b> a\xA0vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?} other {Zatvori\u0165 <b>{openTabs} kariet {site}</b> a\xA0vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Zatvori\u0165 <b>{openTabs} kartu na str\xE1nke {site}</b> a vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?} few {Zatvori\u0165 <b>{openTabs} karty na str\xE1nke {site}</b> a vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b>?} many {Zatvori\u0165 <b>{openTabs} karty na str\xE1nke {site}</b> a vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?} other {Zatvori\u0165 <b>{openTabs} kariet na str\xE1nke {site}</b> a vymaza\u0165 <b>v\u0161etky s\xFAbory cookie zo str\xE1nky {site}</b> ?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Vymaza\u0165 <b>cel\xFA hist\xF3riu prehliadania a s\xFAbory cookie na str\xE1nke {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Vymaza\u0165 <b>v\u0161etky s\xFAbory cookie na str\xE1nke {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} pripnut\xE1</b> karta bude ignorovan\xE1.} few {<b>{tabs} pripnut\xE9</b> karty bud\xFA ignorovan\xE9.} many {<b>{tabs} pripnutej</b> karty bude ignorovan\xFDch.} other {<b>{tabs} pripnut\xFDch</b> kariet bude ignorovan\xFDch.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Jasno", note: "Button text to start data clearing." }, cancel: { title: "Zru\u0161i\u0165", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Ak chcete vymaza\u0165 aj hist\xF3riu, vyberte obdobie.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrof\xF3n", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolok\xE1cia", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Automaticky zobrazen\xE9 okn\xE1", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "V\u017Edy sa op\xFDta\u0165", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Ozn\xE1mi\u0165", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "V\u017Edy povoli\u0165", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "V\u017Edy odoprie\u0165", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Odoslanie anonymn\xE9ho hl\xE1senia o nefunk\u010Dnej str\xE1nke n\xE1m pom\xE1ha zlep\u0161ova\u0165 aplik\xE1ciu.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Pop\xED\u0161te, \u010Do sa stalo", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Str\xE1nka je zablokovan\xE1 alebo sa nena\u010D\xEDtala", note: "User is reporting this page because the page didn't load" }, layout: { title: "Rozlo\u017Eenie str\xE1nky je nefunk\u010Dn\xE9", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Str\xE1nka obsahuje ve\u013Ek\xE9 pr\xE1zdne miesta", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video sa neprehralo alebo nena\u010D\xEDtalo", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Obr\xE1zky sa nepodarilo na\u010D\xEDta\u0165", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Nena\u010D\xEDtali sa koment\xE1re, recenzie alebo \u010Dety", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Ch\xFDba obsah", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Odkazy alebo tla\u010Didl\xE1 nefunguj\xFA", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Ned\xE1 sa prihl\xE1si\u0165/registrova\u0165", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Ned\xE1 sa zaplati\u0165, prejs\u0165 do pokladne ani nakupova\u0165", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Vyskytol sa probl\xE9m s in\xFDm roz\u0161\xEDren\xEDm prehliada\u010Da", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Str\xE1nka ma po\u017Eiadala, aby som vypol/vypla blokovanie rekl\xE1m", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Nie\u010Do in\xE9", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Zdie\u013Eajte \u010Fal\u0161ie podrobnosti (volite\u013En\xE9):{bullet}\u010Co sa stalo?{bullet}K\u010Domu malo d\xF4js\u0165?{bullet} Pom\xE1havypnutie ochrann\xFDch prvkov?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Odosla\u0165 spr\xE1vu", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Spr\xE1vy odoslan\xE9 spolo\u010Dnosti DuckDuckGo obsahuj\xFA len inform\xE1cie, ktor\xE9 s\xFA potrebn\xE9 na to, aby sme mohli rie\u0161i\u0165 va\u0161u sp\xE4tn\xFA v\xE4zbu.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "\u010Eakujeme!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Va\u0161e ozn\xE1menie pom\xF4\u017Ee zlep\u0161i\u0165 prehliada\u010D a zlep\u0161i\u0165 sk\xFAsenosti ostatn\xFDch pou\u017E\xEDvate\u013Eov.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Sledovacie zariadenia", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Aktualiz\xE1cia zoznamu ochrany", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Ochrany s\xFA pre tento web <b>ZAPNUT\xC9</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Ochrany s\xFA pre tento web <b>VYPNUT\xC9</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Do\u010Dasne sme vypli ochranu s\xFAkromia, preto\u017Ee sa zd\xE1, \u017Ee sp\xF4sobuje poruchy na tejto lokalite.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Odpor\xFA\u010Dame vypn\xFA\u0165 ochranu s\xFAkromia pre t\xFAto lokalitu s cie\u013Eom zabr\xE1ni\u0165 chyb\xE1m.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>T\xE1to lokalita nie je zabezpe\u010Den\xE1</b> a m\xF4\u017Ee ohrozi\u0165 zabezpe\u010Denie v\u0161etk\xFDch inform\xE1ci\xED, ktor\xE9 na nej odo\u0161lete.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Na\u010D\xEDtanie po\u017Eiadaviek nasleduj\xFAcich dom\xE9n tret\xEDch str\xE1n bolo zablokovan\xE9, preto\u017Ee boli identifikovan\xE9 ako po\u017Eiadavky so sledovan\xEDm. Ak s\xFA na\u010D\xEDtan\xE9 po\u017Eiadavky spolo\u010Dnosti, m\xF4\u017Ee im umo\u017Eni\u0165 profilova\u0165 v\xE1s.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Na tejto str\xE1nke nebolo zablokovan\xE9 na\u010D\xEDtanie \u017Eiadnych po\u017Eiadaviek so sledovan\xEDm. Ak s\xFA po\u017Eiadavky spolo\u010Dnosti na\u010D\xEDtan\xE9, m\xF4\u017Ee im to umo\u017Eni\u0165 profilova\u0165 v\xE1s.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Na tejto str\xE1nke sme nezistili \u017Eiadne po\u017Eiadavky so sledovan\xEDm.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Na tejto str\xE1nke sme nena\u0161li \u017Eiadne spolo\u010Dnosti, ktor\xE9 by sa pok\xFA\u0161ali na\u010D\xEDta\u0165 po\u017Eiadavky so sledovan\xEDm.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Aby sme zabr\xE1nili naru\u0161eniu lokality, neblokovali sme \u017Eiadnym spolo\u010Dnostiam na\u010D\xEDtanie \u017Eiadost\xED so sledovan\xEDm na tejto str\xE1nke.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Nebolo zablokovan\xE9 \u017Eiadne na\u010D\xEDtavanie po\u017Eiadaviek so sledovan\xEDm, preto\u017Ee ochrana je pre t\xFAto str\xE1nku vypnut\xE1. Ak s\xFA po\u017Eiadavky spolo\u010Dnosti na\u010D\xEDtan\xE9, m\xF4\u017Ee im to umo\u017Eni\u0165 profilova\u0165 v\xE1s.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generova\u0165 s\xFAkromn\xFA adresu Duck", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Skop\xEDrovan\xE9 do schr\xE1nky!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Webov\xE1 lokalita nefunguje pod\u013Ea o\u010Dak\xE1vania?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Webov\xE1 str\xE1nka nefunguje?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Nahl\xE1si\u0165 nefunk\u010Dn\xFA lokalitu", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Pom\xF4c\u0165 by mohlo VYPNUTIE ochrann\xFDch prvkov.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "St\xE1le nefunguje webov\xE1 str\xE1nka?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Vykonajte prevent\xEDvne opatrenia", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>T\xFAto str\xE1nku vlastn\xED spolo\u010Dnos\u0165 {companyDisplayName}</b>, ktor\xE1 prev\xE1dzkuje sie\u0165 sledova\u010Dov na {companyPrevalence} % najlep\u0161\xEDch webov\xFDch lokal\xEDt. Na tejto str\xE1nke sa n\xE1m podarilo zablokova\u0165 niektor\xE9 z ich po\u017Eiadaviek.} other {<b>T\xFAto str\xE1nku vlastn\xED spolo\u010Dnos\u0165 {companyDisplayName}</b>, ktor\xE1 prev\xE1dzkuje sie\u0165 sledova\u010Dov na {companyPrevalence} % najlep\u0161\xEDch webov\xFDch lokal\xEDt. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Niektor\xFDm spolo\u010Dnostiam sme na tejto str\xE1nke zablokovali na\u010D\xEDtanie po\u017Eiadaviek so sledovan\xEDm.} =2 {Zablokovali sme <b>{firstCompany}</b> a <b>{secondCompany}</b>, z na\u010D\xEDtania po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} =3 {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b> a <b>{thirdCompany}</b> z na\u010D\xEDtania po\u017Eiadaviek so sledovan\xEDm.} =4 {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> a <b>{fourthCompany}</b> z na\u010D\xEDtania po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} =5 {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> a <b>1 \u010Fal\u0161ie</b> z na\u010D\xEDtania po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} one {Zablokovali sme <b>{firstCompany}</b> pred na\u010D\xEDtan\xEDm po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} few {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b>a <b>{othersCount} \u010Fal\u0161ie</b>pred na\u010D\xEDtan\xEDm po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} many {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b>a <b>{othersCount} \u010Fal\u0161ie</b>pred na\u010D\xEDtan\xEDm po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.} other {Zablokovali sme <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b>a <b>{othersCount} \u010Fal\u0161ie</b>pred na\u010D\xEDtan\xEDm po\u017Eiadaviek so sledovan\xEDm na tejto str\xE1nke.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Spravovan\xE9 s\xFAbory cookie", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Kontextov\xE9 okno pre s\xFAbory cookie je skryt\xE9", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Na tejto lokalite sme mohli vyskakovacie okno so s\xFAhlasom pre s\xFAbory cookie iba skry\u0165, preto\u017Ee k dispoz\xEDcii neboli \u017Eiadne mo\u017Enosti na spr\xE1vu preferenci\xED s\xFAborov cookie. Na\u0161a ostatn\xE1 ochrana proti sledovaniu z webu st\xE1le funguje.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Nastavili sme va\u0161e preferencie pre s\xFAbory cookie na maximaliz\xE1ciu ochrany s\xFAkromia a zatvorili sme automaticky otv\xE1ran\xE9 okno.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Zak\xE1za\u0165 v nastaveniach", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Pripojenie je \u0161ifrovan\xE9", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Pripojenie nie je \u0161ifrovan\xE9", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Na\u010D\xEDtavanie \u017Eiadost\xED je zablokovan\xE9", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Nie s\xFA blokovan\xE9 \u017Eiadne po\u017Eiadavky so sledovan\xEDm", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nena\u0161li sa \u017Eiadne po\u017Eiadavky so sledovan\xEDm", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Po\u017Eiadavky tret\xEDch str\xE1n boli na\u010D\xEDtan\xE9", note: "todo" }, thirdPartiesNoneFound: { title: "Nena\u0161li sa \u017Eiadne po\u017Eiadavky tret\xEDch str\xE1n", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} vlastn\xED t\xFAto str\xE1nku a zn\xE1me sledovacie zariadenia n\xE1jden\xE9 na tejto str\xE1nke, tak\u017Ee sme ich nezablokovali.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Na tejto str\xE1nke sme nena\u0161li \u017Eiadne spolo\u010Dnosti, ktor\xE9 by sa pok\xFA\u0161ali na\u010D\xEDta\u0165 po\u017Eiadavky so sledovan\xEDm.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Sledovacie zariadenia pom\xE1haj\xFA spolo\u010Dnostiam profilova\u0165 v\xE1s. Na tejto str\xE1nke sme na\u0161li tieto spolo\u010Dnosti, ktor\xE9 monitoruj\xFA va\u0161u aktivitu.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Sledovacie zariadenia pom\xE1haj\xFA spolo\u010Dnostiam profilova\u0165 v\xE1s. T\xFDmto spolo\u010Dnostiam sme zablokovali monitorovanie va\u0161ej aktivity na tejto str\xE1nke.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Nezn\xE1ma sie\u0165 sledovac\xEDch zariaden\xED", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Dom\xE9ny sledovac\xEDch zariaden\xED pre spolo\u010Dnos\u0165 {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Na\u0161lo sa '{'0'}' sledovac\xEDch zariaden\xED", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sledovacie zariadenia vlastnen\xE9 touto lokalitou (povolen\xE9)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sledovacie zariadenie zablokovan\xE9 na {domain}} few {{trackerCount} sledovacie zariadenia zablokovan\xE9 na {domain}} many {{trackerCount} sledovacieho zariadenia zablokovan\xE9ho na {domain}} other {{trackerCount} sledovac\xEDch zariaden\xED zablokovan\xFDch na {domain}}}} other {{trackerCount, plural, one {{trackerCount} sledovacie zariadenie n\xE1jden\xE9 na {domain}} few {{trackerCount} sledovacie zariadenia n\xE1jden\xE9 na {domain}} many {{trackerCount} sledovacieho zariadenia n\xE1jden\xE9ho na {domain}} other {{trackerCount} sledovac\xEDch zariaden\xED n\xE1jden\xFDch na {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Upozornenie: obmedzenia platformy m\xF4\u017Eu obmedzi\u0165 na\u0161u schopnos\u0165 zisti\u0165 v\u0161etky po\u017Eiadavky.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "O na\u0161ej ochrane pred sledovan\xEDm \u010Dinnosti na webe", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Ako na\u0161e reklamy vo vyh\u013Ead\xE1van\xED ovplyv\u0148uj\xFA na\u0161u ochranu", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Po\u017Eiadavky nasleduj\xFAcej dom\xE9ny boli na\u010D\xEDtan\xE9, preto\u017Ee ned\xE1vno ste klikli na reklamu {domain} na DuckDuckGo. Tieto \u017Eiadosti pom\xE1haj\xFA vyhodnoti\u0165 \xFA\u010Dinnos\u0165 rekl\xE1m. V\u0161etky reklamy na DuckDuckGo s\xFA neprofiluj\xFAce.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Po\u017Eiadavky nasleduj\xFAcej dom\xE9ny boli na\u010D\xEDtan\xE9, aby sa zabr\xE1nilo rozbitiu str\xE1nky.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Po\u017Eiadavky na nasleduj\xFAce dom\xE9ny boli na\u010D\xEDtan\xE9, preto\u017Ee s\xFA spojen\xE9 s dom\xE9nou {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Boli na\u010D\xEDtan\xE9 aj nasleduj\xFAce po\u017Eiadavky dom\xE9ny." }, sectionHeadingProtectionsDisabled: { title: "Po\u017Eiadavky na nasleduj\xFAce dom\xE9ny boli na\u010D\xEDtan\xE9, preto\u017Ee ochrany s\xFA vypnut\xE9.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Boli na\u010D\xEDtan\xE9 nasleduj\xFAce po\u017Eiadavky na dom\xE9ny tret\xEDch str\xE1n. Ak s\xFA po\u017Eiadavky spolo\u010Dnosti na\u010D\xEDtan\xE9, m\xF4\u017Ee im to umo\u017Eni\u0165 profilova\u0165 v\xE1s, hoci na\u0161e ostatn\xE9 ochrany sledovania webu st\xE1le platia.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Boli na\u010D\xEDtan\xE9 nasleduj\xFAce po\u017Eiadavky na dom\xE9ny tret\xEDch str\xE1n. Ak s\xFA po\u017Eiadavky spolo\u010Dnosti na\u010D\xEDtan\xE9, m\xF4\u017Ee im to umo\u017Eni\u0165 profilova\u0165 v\xE1s, hoci na\u0161e ostatn\xE9 ochrany sledovania webu st\xE1le platia.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Neidentifikovali sme \u017Eiadne \u017Eiadosti z dom\xE9n tret\xEDch str\xE1n.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analytick\xE9 \xFAdaje", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Reklama", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Soci\xE1lna sie\u0165", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Dodanie obsahu", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Vlo\u017Een\xFD obsah", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "Vyh\u013Ead\xE1vajte cez DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Vyh\u013Ead\xE1va\u0165", note: "Aria label for the search button" }, optionsButton: { title: "\u010Eal\u0161ie mo\u017Enosti", note: "Aria label for the for the options button" }, navigationComplete: { title: "Hotovo", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Sp\xE4\u0165", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Povolenie ochrany", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Zak\xE1zanie ochrany", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Do\u0161lo k chybe a my sme nemohli na\u010D\xEDta\u0165 tento obsah. Sk\xFAste znovu na\u010D\xEDta\u0165 str\xE1nku.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, sl: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u0160ifriraj", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Znak", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Preveri", note: "When the cryptographic key can be used to verify data" }, derive: { title: "Izpelji", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Zavij", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Razvij", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Neznano", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Podrobnosti varnostnega potrdila", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Splo\u0161no ime", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Javni klju\u010D", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritem", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Velikost klju\u010Da", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Uporaba", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Povzetek", note: "Header for summary of connection details" }, permanent: { title: "Trajno", note: "Whether certificate is permanent" }, effectiveSize: { title: "U\u010Dinkovita velikost", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certifikata ni bilo mogo\u010De najti", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Potrdilo za spletno mesto {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Ta stran uporablja ne\u0161ifrirano povezavo. Tretje osebe si lahko ogledajo va\u0161e dejavnosti ali prestre\u017Eejo ob\u010Dutljive podatke, ki jih po\u0161ljete na tej strani.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Na tej strani smo nadgradili povezavo za za\u0161\u010Dito podatkov, ki jih po\u0161iljate med prenosom.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Ta stran uporablja \u0161ifrirano povezavo, ki tretjim osebam prepre\u010Duje ogled va\u0161e dejavnosti ali prestrezanje ob\u010Dutljivih podatkov, ki jih po\u0161ljete na tej strani.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Za\u0161\u010Dita zasebnosti ni na voljo za posebne ali lokalne strani.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "Radi uporabljate DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Pomagajte nam raz\u0161iriti besedo med va\u0161o dru\u017Eino in prijatelje", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Pomagaj \u0161iriti besedo o DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Ste naveli\u010Dani sledenja e-po\u0161tnim sporo\u010Dilom?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Prijavite se na za\u0161\u010Dito e-po\u0161te DuckDuckGo za svojo raz\u0161iritev zdaj!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Zapri zavihke in izbri\u0161i podatke", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Po\u010Disti podatke", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Samo trenutna stran", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Zadnja ura", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Zadnjih 24 ur", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Zadnjih 7 dni", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Zadnje 4 tedne", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Ves \u010Das", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {ene ure} day {24 ur} week {enega tedna} month {4 tednov} other {Vse}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {\u017Delite zapreti <b>{openTabs}</b> zavihek ter po\u010Distiti zgodovino brskanja in pi\u0161kotke za obdobje <b>{durationDesc}</b>?} two {\u017Delite zapreti <b>{openTabs}</b> zavihka ter po\u010Distiti zgodovino brskanja in pi\u0161kotke za obdobje <b>{durationDesc}</b>?} few {\u017Delite zapreti <b>{openTabs}</b> zavihke ter po\u010Distiti zgodovino brskanja in pi\u0161kotke za obdobje <b>{durationDesc}</b>?} other {\u017Delite zapreti <b>{openTabs}</b> zavihkov ter po\u010Distiti zgodovino brskanja in pi\u0161kotke za obdobje <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {\u017Delite zapreti <b>{openTabs}</b> zavihek in po\u010Distiti pi\u0161kotke za obdobje <b>{durationDesc}</b>?} two {\u017Delite zapreti <b>{openTabs}</b> zavihka in po\u010Distiti pi\u0161kotke za obdobje <b>{durationDesc}</b>?} few {\u017Delite zapreti <b>{openTabs}</b> zavihke in po\u010Distiti pi\u0161kotke za obdobje <b>{durationDesc}</b>?} other {\u017Delite zapreti <b>{openTabs}</b> zavihkov in po\u010Distiti pi\u0161kotke za obdobje <b>{durationDesc}</b>?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "\u017Delite po\u010Distiti zgodovino brskanja in pi\u0161kotke za obdobje <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "\u017Delite po\u010Distiti pi\u0161kotke za obdobje <b>{durationDesc}</b>?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "\u017Delite zapreti <b>{openTabs}</b> {openTabs, plural, =1 {zavihek} other {zavihka/-e/-ov}} ter po\u010Distiti <b>vso</b> zgodovino brskanja in pi\u0161kotke ({cookies} {cookies, plural, =1 {spletnega mesta} other {spletnih mest}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "\u017Delite zapreti <b>{openTabs}</b> {openTabs, plural, =1 {zavihek} other {zavihka/-e/-ov}} in po\u010Distiti <b>vse</b> pi\u0161kotke ({cookies} {cookies, plural, =1 {spletnega mesta} other {spletnih mest}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {\u017Delite izbrisati <b>vso</b> zgodovino brskanja in pi\u0161kotke (za {cookies} spletno mesto)?} two {\u017Delite izbrisati <b>vso</b> zgodovino brskanja in pi\u0161kotke (za {cookies} spletni mesti)?} few {\u017Delite izbrisati <b>vso</b> zgodovino brskanja in pi\u0161kotke (za {cookies} spletna mesta)?} other {\u017Delite izbrisati <b>vso</b> zgodovino brskanja in pi\u0161kotke (za {cookies} spletnih mest)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {\u017Delite po\u010Distiti <b>vse</b> pi\u0161kotke (za {cookies} spletno mesto)?} two {\u017Delite po\u010Distiti <b>vse</b> pi\u0161kotke (za {cookies} spletni mesti)?} few {\u017Delite po\u010Distiti <b>vse</b> pi\u0161kotke (za {cookies} spletna mesta)?} other {\u017Delite po\u010Distiti <b>vse</b> pi\u0161kotke (za {cookies} spletnih mest)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {\u017Delite zapreti <b>{openTabs} zavihek spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} two {\u017Delite zapreti <b>{openTabs} zavihka spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} few {\u017Delite zapreti <b>{openTabs} zavihke spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} other {\u017Delite zapreti <b>{openTabs} zavihkov spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {\u017Delite zapreti <b>{openTabs} zavihek spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} two {\u017Delite zapreti <b>{openTabs} zavihka spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} few {\u017Delite zapreti <b>{openTabs} zavihke spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?} other {\u017Delite zapreti <b>{openTabs} zavihkov spletnega mesta {site}</b> in izbrisati <b>vse pi\u0161kotke spletnega mesta {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "\u017Delite izbrisati <b>vso zgodovino brskanja in pi\u0161kotke za spletno mesto {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "\u017Delite izbrisati <b>vse pi\u0161kotke za spletno mesto {site}</b>)?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} pripet</b> zavihek bo prezrt.} two {<b>{tabs} pripeta</b> zavihka bosta prezrta.} few {<b>{tabs} pripeti</b> zavihki bodo prezrti.} other {<b>{tabs} pripetih</b> zavihkov bo prezrtih.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Po\u010Disti", note: "Button text to start data clearing." }, cancel: { title: "Preklic", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "\u010Ce \u017Eelite po\u010Distiti tudi zgodovino, izberite \u010Dasovno obdobje.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokacija", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Pojavna okna", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Vpra\u0161aj vsaki\u010D", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Obvesti", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Vedno dovolite", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Vedno zavrnite", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Oddaja anonimnega poro\u010Dila o nedelujo\u010Dem mestu nam pomaga izbolj\u0161ati aplikacijo.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Opi\u0161ite, kaj se je zgodilo", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Stran je blokirana ali se ni nalo\u017Eila", note: "User is reporting this page because the page didn't load" }, layout: { title: "Postavitev spletnega mesta je neuporabna", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Spletno mesto vsebuje velike prazne prostore", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video se ni predvajal ali nalo\u017Eil", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Slike se niso nalo\u017Eile", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Komentarji, ocene ali klepeti se niso nalo\u017Eili", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Vsebina manjka", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Povezave ali tipke ne delujejo", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Ne morem se prijaviti/registrirati", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Ne morem pla\u010Dati, se odjaviti ali nakupovati", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Te\u017Eava z brskalnikom ali druga te\u017Eava z raz\u0161iritvijo brskalnika", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Spletno mesto me je pozvalo, naj onemogo\u010Dim prepre\u010Devalec oglasov", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Nekaj drugega", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Navedite ve\u010D podrobnosti (neobvezno):{bullet}Kaj se je zgodilo?{bullet}Kaj bi se moralo zgoditi?{bullet}Ali je izklop za\u0161\u010Dite odpravil te\u017Eavo?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Po\u0161ljite poro\u010Dilo", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Poro\u010Dila, poslana DuckDuckGo, vklju\u010Dujejo samo informacije, ki so potrebne za obravnavanje va\u0161ih povratnih informacij.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Hvala!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Va\u0161e poro\u010Dilo bo pripomoglo k izbolj\u0161anju brskalnika in bolj\u0161i izku\u0161nji drugih uporabnikov.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Sledilniki", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Posodabljanje seznama za\u0161\u010Dite", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Za\u0161\u010Dita za to stran je <b>OMOGO\u010CENA</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Za\u0161\u010Dita so za to stran je <b>ONEMOGO\u010CENA</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Za\u0161\u010Dito zasebnosti smo za\u010Dasno onemogo\u010Dili, ker je videti, da zato prihaja do napak na tem spletnem mestu.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Priporo\u010Damo, da za to spletno mesto onemogo\u010Dite za\u0161\u010Dite zasebnosti, da prepre\u010Dite prekinitev delovanja spletnega mesta.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>To spletno mesto ni varno</b> in lahko ogrozi vse podatke, ki jih po\u0161ljete na tej strani.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "Nalaganje zahtevkov naslednjih domen tretjih oseb je bilo blokirano, ker so bili prepoznani kot zahtevki za sledenje. \u010Ce so zahtevki podjetja nalo\u017Eeni, lahko na podlagi tega oblikujejo va\u0161 profil.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Na tej strani nalaganje zahtevkov za sledenje ni bilo blokirano. \u010Ce so zahtevki podjetja nalo\u017Eeni, lahko na podlagi tega oblikujejo va\u0161 profil.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Na tej strani nismo odkrili nobenih zahtevkov za sledenje.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Na tej strani nismo na\u0161li nobenega podjetja, ki bi posku\u0161alo nalo\u017Eiti zahtevke za sledenje.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Da bi prepre\u010Dili okvare spletnega mesta, na tej strani nismo blokirali nobenih podjetij, ki bi nalagala zahtevke za sledenje.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Nalaganje zahtevkov za sledenje ni bilo blokirano, ker so za\u0161\u010Dite za to spletno mesto izklopljene. \u010Ce so zahtevki podjetja nalo\u017Eeni, lahko na podlagi tega oblikujejo va\u0161 profil.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Ustvarjanje zasebnega naslova Duck", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopirano v odlo\u017Ei\u0161\u010De!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Spletno mesto ne deluje po pri\u010Dakovanjih?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Spletna stran ne deluje?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Prijavite po\u0161kodovano spletno mesto", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "IZKLOP za\u0161\u010Dit lahko pomaga.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Stran \u0161e vedno ne deluje?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Previdnostni ukrepi", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>To spletno mesto je v lasti podjetja {companyDisplayName}</b>, ki upravlja mre\u017Eo sledilnikov pri {companyPrevalence}% najbolj\u0161ih spletnih mest. Na tej strani smo uspeli blokirati nekatere njihove zahteve.} other {<b>To spletno mesto je v lasti podjetja {companyDisplayName}</b>, ki upravlja mre\u017Eo sledilnikov pri {companyPrevalence}% najbolj\u0161ih spletnih mest. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Nekaterim podjetjem smo prepre\u010Dili nalaganje zahtevkov za sledenje na tej strani.} =2 {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjema <b>{firstCompany}</b> in <b>{secondCompany}</b>.} =3 {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjem <b>{firstCompany}</b>, <b>{secondCompany}</b> in <b>{thirdCompany}</b>.} =4 {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjem <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> in <b>{fourthCompany}</b>.} =5 {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjem <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> in <b>1 drugemu podjetju</b>.} one {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetju <b>{firstCompany}</b>.} two {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjem <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> in <b>{othersCount} drugima podjetjema</b>.} few {Na tej strani smo blokirali nalaganje zahtevkov za sledenje podjetjem <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> in <b>{othersCount} drugim podjetjem</b>.} other {Na tej strani smo blokirali nalaganje zahtevkov za sledenje <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> in <b>{othersCount} drugim podjetjem</b>.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Upravljani pi\u0161kotki", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Pojavno okno za pi\u0161kotke je skrito", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Na tem spletnem mestu smo lahko le skrili pojavno okno za pi\u0161kotke, ker ni bilo na voljo nobenih mo\u017Enosti za upravljanje nastavitev pi\u0161kotkov. Na\u0161a preostala za\u0161\u010Dita pred spletnim sledenjem se \u0161e vedno izvaja.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Nastavili smo va\u0161e nastavitve pi\u0161kotkov za \u010Dim ve\u010Djo zasebnost in zaprli pojavno okno.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Onemogo\u010Di v nastavitvah", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Povezava je \u0161ifrirana", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Povezava ni \u0161ifrirana", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Zahtevki, katerih nalaganje je blokirano", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Noben zahtevek za sledenje ni bil blokiran", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Nobenega zahtevka za sledenje ni bilo mogo\u010De najti", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "Nalaganje zahtevkov tretjih oseb", note: "todo" }, thirdPartiesNoneFound: { title: "Zahtev tretjih oseb ni bilo mogo\u010De najti", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "Podjetje {companyName} je lastnik tega spletnega mesta in znanih sledilnikov na tej strani, zato jih nismo blokirali.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Na tej strani nismo na\u0161li nobenega podjetja, ki bi posku\u0161alo nalo\u017Eiti zahtevke za sledenje.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Sledilniki podjetjem pomagajo pri oblikovanju va\u0161ega profila. Ta podjetja spremljajo va\u0161e dejavnosti na tej strani.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Sledilniki podjetjem pomagajo pri oblikovanju va\u0161ega profila. Tem podjetjem smo prepre\u010Dili spremljanje va\u0161ih dejavnosti na tej strani.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Neznano omre\u017Eje sledilnika", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Domene sledilnikov podjetja {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "Nobenega sledilnika ni bilo mogo\u010De najti", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sledilniki v lasti tega spletnega mesta (dovoljeni)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sledilnik je bil blokiran na {domain}} two {{trackerCount} sledilnika sta bila blokirana na {domain}} few {{trackerCount} sledilniki so bili blokirani na {domain}} other {{trackerCount} sledilnikov je bilo blokiranih na {domain}}}} other {{trackerCount, plural, one {{trackerCount} sledilnik je bil najden na {domain}} two {{trackerCount} sledilnika sta bila najdena na {domain}} few {{trackerCount} sledilniki so bili najdeni na {domain}} other {{trackerCount} sledilnikov je bilo najdenih na {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Upo\u0161tevajte: omejitve platforme lahko omejijo na\u0161o zmo\u017Enost zaznavanja vseh zahtevkov.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "O na\u0161i za\u0161\u010Diti spletnega sledenja", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Kako na\u0161i oglasi v iskalnem omre\u017Eju vplivajo na na\u0161o za\u0161\u010Dito", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "Naslednji zahtevki domen so bili nalo\u017Eeni, ker ste pred kratkim kliknili oglas {domain} na portalu DuckDuckGo. Ti zahtevki pomagajo oceniti u\u010Dinkovitost oglasa. Vsi oglasi na DuckDuckGo so neprofilirani.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Nalo\u017Eene so bile naslednje zahteve za domene, da se prepre\u010Di prekinitev spletnega mesta.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "Nalo\u017Eeni so bili naslednji zahtevki domen, ker so povezani z [{domain}].", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "Nalo\u017Eene so bile tudi naslednje zahteve domene." }, sectionHeadingProtectionsDisabled: { title: "Zahteve naslednjih domen so bile nalo\u017Eene, ker so za\u0161\u010Dite izklopljene.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "Nalo\u017Eene so bile naslednje zahteve za domene tretjih oseb. \u010Ce so zahteve podjetja izpolnjene, lahko podjetje na podlagi tega oblikuje va\u0161 profil, \u010Deprav \u0161e vedno veljajo na\u0161a druga za\u0161\u010Ditna pravila za sledenje v spletu.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "Nalo\u017Eene so bile naslednje zahteve za domene tretjih oseb. \u010Ce so zahteve podjetja izpolnjene, lahko podjetje na podlagi tega oblikuje va\u0161 profil, \u010Deprav \u0161e vedno veljajo na\u0161a druga za\u0161\u010Ditna pravila za sledenje v spletu.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Nismo ugotovili nobenih zahtevkov z domen tretjih oseb.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analitika", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Ogla\u0161evanje", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Dru\u017Ebena omre\u017Eja", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Dostava vsebine", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Vdelana vsebina", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "I\u0161\u010Dite po DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Iskanje", note: "Aria label for the search button" }, optionsButton: { title: "Ve\u010D mo\u017Enosti", note: "Aria label for the for the options button" }, navigationComplete: { title: "Kon\u010Dano", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Nazaj", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Omogo\u010Di za\u0161\u010Dito", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Onemogo\u010Di za\u0161\u010Dito", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Nekaj je \u0161lo narobe in te vsebine nismo mogli nalo\u017Eiti. Poskusite znova nalo\u017Eiti stran.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, sv: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "Kryptera", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "Underteckna", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Verifiera", note: "When the cryptographic key can be used to verify data" }, derive: { title: "H\xE4rled", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Packa in", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Packa upp", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Ok\xE4nd", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "Information om s\xE4kerhetscertifikat", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Vanligt namn", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Offentlig nyckel", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritm", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Nyckelstorlek", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Anv\xE4ndning", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "Sammanfattning", note: "Header for summary of connection details" }, permanent: { title: "Permanent", note: "Whether certificate is permanent" }, effectiveSize: { title: "Verklig storlek", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Certifikatet hittades inte", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "Certifikat f\xF6r {domain}", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Den h\xE4r sidan anv\xE4nder en okrypterad anslutning. Tredje part kan ha m\xF6jlighet att se din aktivitet eller avlyssna k\xE4nslig information som du skickar p\xE5 den h\xE4r sidan.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Vi har uppgraderat anslutningen p\xE5 den h\xE4r sidan f\xF6r att skydda den information som du skickar medan den \xF6verf\xF6rs.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Den h\xE4r sidan anv\xE4nder en krypterad anslutning, vilket f\xF6rhindrar att tredje part kan se din aktivitet eller avlyssna k\xE4nslig information som du skickar p\xE5 den h\xE4r sidan.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Integritetsskydd \xE4r inte tillg\xE4ngligt f\xF6r s\xE4rskilda sidor eller lokala sidor.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "\xC4lskar du att anv\xE4nda DuckDuckGo?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Hj\xE4lp oss att sprida budskapet till din familj och dina v\xE4nner", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "Sprid DuckDuckGo", note: "Button text for 'spread' CTA" }, emailTitle: { title: "Tr\xF6tt p\xE5 att e-postmeddelanden sp\xE5ras?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Registrera dig f\xF6r e-postskydd fr\xE5n DuckDuckGo f\xF6r ditt till\xE4gg nu!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "St\xE4ng flikar och rensa data", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Rensa data", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Endast nuvarande webbplats", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Senaste timmen", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Senaste 24 timmarna", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Senaste 7 dagarna", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Senaste 4 veckorna", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "F\xF6r all tid", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {en timmes} day {24 timmars} week {en veckas} month {4 veckors} other {Alla}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {Vill du st\xE4nga <b>{openTabs}</b> flik och rensa <b>{durationDesc}</b> surfhistorik och cookies?} other {Vill du st\xE4nga <b>{openTabs}</b> flikar och rensa <b>{durationDesc}</b> surfhistorik och cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {Vill du st\xE4nga <b>{openTabs}</b> flik och rensa <b>{durationDesc}</b> cookies?} other {Vill du st\xE4nga <b>{openTabs}</b> flikar och rensa <b>{durationDesc}</b> cookies?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "Vill du rensa <b>{durationDesc}</b> surfhistorik och cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "Vill du rensa <b>{durationDesc}</b> cookies?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "Vill du st\xE4nga <b>{openTabs}</b> {openTabs, plural, =1 {flik} other {flikar}}, rensa <b>all</b> surfhistorik och alla ({cookies} {cookies, plural, =1 {webbplats} other {webbplatser}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "Vill du st\xE4nga <b>{openTabs}</b> {openTabs, plural, =1 {flik} other {flikar}} och rensa <b>alla</b> cookies ({cookies} {cookies, plural, =1 {webbplats} other {webbplatser}})?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {Vill du rensa <b>all</b> surfhistorik och alla cookies ({cookies} webbplats)?} other {Vill du rensa <b>all</b> surfhistorik och alla cookies ({cookies} webbplatser)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {Vill du rensa <b>alla</b> cookies ({cookies} webbplats)?} other {Vill du rensa <b>alla</b> cookies ({cookies} webbplatser)?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {Vill du st\xE4nga <b>{openTabs} flik f\xF6r {site}</b> och rensa <b>alla cookies f\xF6r {site}</b>?} other {Vill du st\xE4nga <b>{openTabs} flikar f\xF6r {site}</b> och rensa <b>alla cookies f\xF6r {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {Vill du st\xE4nga <b>{openTabs} flik f\xF6r {site}</b> och rensa <b>alla cookies f\xF6r {site}</b>?} other {Vill du st\xE4nga <b>{openTabs} flikar f\xF6r {site}</b> och rensa <b>alla cookies f\xF6r {site}</b>?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "Vill du rensa <b>all surfhistorik och alla cookies f\xF6r {site}</b>?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "Vill du rensa <b>alla cookies f\xF6r {site}</b>?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} f\xE4st</b> flik kommer att ignoreras.} other {<b>{tabs} f\xE4sta</b> flikar kommer att ignoreras.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Klart", note: "Button text to start data clearing." }, cancel: { title: "Avbryt", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Om du ocks\xE5 vill rensa historiken v\xE4ljer du en tidsperiod.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Geolokalisering", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "Popup-f\xF6nster", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Fr\xE5ga varje g\xE5ng", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Meddela", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Till\xE5t alltid", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Neka alltid", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Genom att skicka in en anonym anm\xE4lan om att webbplatsen inte fungerar hj\xE4lper du oss att f\xF6rb\xE4ttra appen.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Ber\xE4tta vad som h\xE4nde:", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Webbplatsen \xE4r blockerad eller l\xE4stes inte in", note: "User is reporting this page because the page didn't load" }, layout: { title: "Webbplatsens layout \xE4r trasig", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Webbplatsen inneh\xE5ller stora tomma f\xE4lt", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Videon spelades inte upp eller laddades inte", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Bilderna kunde inte laddas", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Kommentarer, recensioner eller chattar laddades inte", note: "User is reporting this page because one or more comments did not load" }, content: { title: "Inneh\xE5ll saknas", note: "User is reporting this page because some other type of content did not load" }, links: { title: "L\xE4nkar eller knappar fungerar inte", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Det g\xE5r inte att logga in/registrera sig", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "Det g\xE5r inte att betala, g\xE5 till kassan eller shoppa", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Problem med webbl\xE4sare eller annat till\xE4ggsprogram", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Webbplatsen bad mig att inaktivera annonsblockeraren", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "\xD6vrigt", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Ber\xE4tta mer (valfritt):{bullet}Vad h\xE4nde?{bullet}Vad borde ha h\xE4nt?{bullet}Hj\xE4lpte det att st\xE4nga av skydd?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Skicka anm\xE4lan", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "Rapporter som skickas till DuckDuckGo inneh\xE5ller endast information som kr\xE4vs f\xF6r att vi ska kunna bem\xF6ta din feedback.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Tack!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Din rapport bidrar till att f\xF6rb\xE4ttra v\xE5ra produkter och g\xF6ra upplevelsen b\xE4ttre f\xF6r andra.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "Sp\xE5rare", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Skyddslistan uppdateras", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Skydd \xE4r <b>P\xC5</b> f\xF6r den h\xE4r webbplatsen", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Skydd \xE4r <b>AV</b> f\xF6r den h\xE4r webbplatsen", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Vi har tillf\xE4lligt st\xE4ngt av integritetsskydd eftersom det verkade g\xF6ra att denna webbplats inte fungerade.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Vi rekommenderar att du inaktiverar integritetsskydd f\xF6r den h\xE4r webbplatsen f\xF6r att f\xF6rhindra fel p\xE5 webbplatsen.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Den h\xE4r webbplatsen \xE4r inte s\xE4ker</b> och kan \xE4ventyra eventuell information som du skickar p\xE5 sidan.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "F\xF6ljande tredjepartsdom\xE4ners f\xF6rfr\xE5gningar blockerades fr\xE5n att l\xE4sas in eftersom de identifierades som sp\xE5rningsf\xF6rfr\xE5gningar. Om ett f\xF6retags f\xF6rfr\xE5gningar l\xE4ses in kan det g\xF6ra det m\xF6jligt f\xF6r f\xF6retaget att profilera dig.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Inga sp\xE5rningsf\xF6rfr\xE5gningar blockerades fr\xE5n att l\xE4sas in p\xE5 den h\xE4r sidan. Om ett f\xF6retags f\xF6rfr\xE5gningar l\xE4ses in kan det g\xF6ra det m\xF6jligt f\xF6r f\xF6retaget att profilera dig.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Vi har inte identifierat n\xE5gra sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Vi har inte hittat n\xE5gra f\xF6retag som f\xF6rs\xF6ker l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "F\xF6r att f\xF6rhindra fel p\xE5 webbplatsen har vi inte blockerat n\xE5gra f\xF6retag fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Inga sp\xE5rningsf\xF6rfr\xE5gningar blockerades fr\xE5n att l\xE4sas in eftersom skyddet \xE4r avst\xE4ngt f\xF6r den h\xE4r webbplatsen. Om ett f\xF6retags f\xF6rfr\xE5gningar l\xE4ses in kan det g\xF6ra det m\xF6jligt f\xF6r f\xF6retaget att profilera dig.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "Generera privat Duck Address", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Kopierad till Urklipp!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Fungerar inte webbplatsen som f\xF6rv\xE4ntat?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Fungerar inte webbplatsen?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Rapportera skadad webbplats", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Det kan hj\xE4lpa att st\xE4nga av skyddet.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Fungerar det fortfarande inte?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "Vidta f\xF6rsiktighets\xE5tg\xE4rder", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Den h\xE4r webbplatsen \xE4gs av {companyDisplayName}</b>, som driver ett sp\xE5rningsn\xE4tverk p\xE5 {companyPrevalence}\xA0% av de popul\xE4raste webbplatserna. Vi har lyckats blockera n\xE5gra av deras f\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} other {<b>Den h\xE4r webbplatsen \xE4gs av {companyDisplayName}</b>, som driver ett sp\xE5rningsn\xE4tverk p\xE5 {companyPrevalence}\xA0% av de popul\xE4raste webbplatserna. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Vi har blockerat vissa f\xF6retag fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} =2 {Vi har blockerat <b>{firstCompany}</b> och <b>{secondCompany}</b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} =3 {Vi har blockerat <b>{firstCompany}</b>, <b>{secondCompany}</b> och <b>{thirdCompany}</b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} =4 {Vi har blockerat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> och <b>{fourthCompany}</b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} =5 {Vi har blockerat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> och <b>1 annat f\xF6retag </b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} one {Vi har blockerat <b>{firstCompany}</b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.} other {Vi har blockerat <b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> och <b>{othersCount} andra f\xF6retag</b> fr\xE5n att l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Cookies hanteras", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "Popup-f\xF6nster f\xF6r cookies dolt", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "Vi kunde bara d\xF6lja popup-f\xF6nstret f\xF6r cookies p\xE5 den h\xE4r webbplatsen eftersom det inte erbj\xF6ds n\xE5gra alternativ f\xF6r att hantera inst\xE4llningar f\xF6r cookies. V\xE5ra \xF6vriga webbsp\xE5rningsskydd g\xE4ller fortfarande.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "Vi har konfigurerat dina cookieinst\xE4llningar f\xF6r att maximera din integritet och st\xE4ngt popup-f\xF6nstret.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Inaktivera i inst\xE4llningar", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Anslutningen \xE4r krypterad", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Anslutningen \xE4r inte krypterad", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "F\xF6rfr\xE5gningar blockerades fr\xE5n att l\xE4sas in", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Inga sp\xE5rningsf\xF6rfr\xE5gningar blockerades", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "Inga sp\xE5rningsf\xF6rfr\xE5gningar hittades", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "F\xF6rfr\xE5gningar fr\xE5n tredje part l\xE4stes in", note: "todo" }, thirdPartiesNoneFound: { title: "Inga f\xF6rfr\xE5gningar fr\xE5n tredje part hittades", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} \xE4ger den h\xE4r webbplatsen och de k\xE4nda sp\xE5rare som hittades p\xE5 sidan, s\xE5 vi har inte blockerat dem.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Vi har inte hittat n\xE5gra f\xF6retag som f\xF6rs\xF6ker l\xE4sa in sp\xE5rningsf\xF6rfr\xE5gningar p\xE5 den h\xE4r sidan.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "Sp\xE5rare hj\xE4lper f\xF6retag att profilera dig. Vi har uppt\xE4ckt att f\xF6ljande f\xF6retag \xF6vervakar din aktivitet p\xE5 den h\xE4r sidan.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "Sp\xE5rare hj\xE4lper f\xF6retag att profilera dig. Vi har blockerat f\xF6ljande f\xF6retag fr\xE5n att \xF6vervaka din aktivitet p\xE5 den h\xE4r sidan.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "Ok\xE4nt sp\xE5rarn\xE4tverk", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "Sp\xE5rardom\xE4ner f\xF6r {companyName}", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 sp\xE5rare hittades", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Sp\xE5rare som \xE4gs av den h\xE4r webbplatsen (till\xE5tna)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{trackerCount} sp\xE5rare blockerad p\xE5 {domain}} other {{trackerCount} sp\xE5rare blockerade p\xE5 {domain}}}} other {{trackerCount, plural, one {{trackerCount} sp\xE5rare hittades p\xE5 {domain}} other {{trackerCount} sp\xE5rare hittades p\xE5 {domain}}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Obs! Plattformsbegr\xE4nsningar kan begr\xE4nsa v\xE5r f\xF6rm\xE5ga att uppt\xE4cka alla f\xF6rfr\xE5gningar.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Om v\xE5ra webbsp\xE5rningsskydd", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Hur v\xE5ra s\xF6kannonser p\xE5verkar v\xE5rt skydd", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "F\xF6ljande dom\xE4ns f\xF6rfr\xE5gningar l\xE4stes in eftersom du nyligen klickade p\xE5 en annons fr\xE5n {domain} p\xE5 DuckDuckGo. Dessa f\xF6rfr\xE5gningar hj\xE4lper till att utv\xE4rdera annonsens effektivitet. Alla annonser p\xE5 DuckDuckGo \xE4r icke-profilerande.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "F\xF6ljande dom\xE4ners f\xF6rfr\xE5gningar l\xE4stes in f\xF6r att f\xF6rhindra fel p\xE5 webbplatsen.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "F\xF6ljande dom\xE4ners f\xF6rfr\xE5gningar l\xE4stes in eftersom de \xE4r kopplade till {domain}.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "F\xF6ljande dom\xE4ners f\xF6rfr\xE5gningar l\xE4stes ocks\xE5 in." }, sectionHeadingProtectionsDisabled: { title: "F\xF6ljande dom\xE4ners f\xF6rfr\xE5gningar l\xE4stes in eftersom skydd \xE4r avst\xE4ngda.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "F\xF6ljande tredjepartsdom\xE4ners f\xF6rfr\xE5gningar l\xE4stes in. Om ett f\xF6retags f\xF6rfr\xE5gningar l\xE4ses in kan det g\xF6ra det m\xF6jligt f\xF6r f\xF6retaget att profilera dig, \xE4ven om v\xE5ra \xF6vriga webbsp\xE5rningsskydd fortfarande \xE4r aktiva.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "F\xF6ljande tredjepartsdom\xE4ners f\xF6rfr\xE5gningar l\xE4stes in. Om ett f\xF6retags f\xF6rfr\xE5gningar l\xE4ses in kan det g\xF6ra det m\xF6jligt f\xF6r f\xF6retaget att profilera dig, \xE4ven om v\xE5ra \xF6vriga webbsp\xE5rningsskydd fortfarande \xE4r aktiva.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "Vi har inte identifierat n\xE5gra f\xF6rfr\xE5gningar fr\xE5n tredjepartsdom\xE4ner.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analys", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "Annonsering", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Socialt n\xE4tverk", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "Inneh\xE5llsleverans", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "Inb\xE4ddat inneh\xE5ll", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "S\xF6k med DuckDuckGo", note: "Placeholder text for the search bar" }, searchGoButton: { title: "S\xF6k", note: "Aria label for the search button" }, optionsButton: { title: "Fler alternativ", note: "Aria label for the for the options button" }, navigationComplete: { title: "Klart", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Tillbaka", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Aktivera skydd", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Inaktivera skydd", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "N\xE5got gick fel och vi kunde inte l\xE4sa in detta inneh\xE5ll. F\xF6rs\xF6k l\xE4sa in sidan igen.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } }, tr: { connection: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, encrypt: { title: "\u015Eifreleme", note: "When the cryptographic key can be used to encrypt data" }, sign: { title: "\u0130mzala", note: "When the cryptographic key can be used to sign data" }, verify: { title: "Do\u011Frulama", note: "When the cryptographic key can be used to verify data" }, derive: { title: "T\xFCrev", note: "When the cryptographic key can be used to derive new keys" }, wrap: { title: "Paketleme", note: "When the cryptographic key can be used to wrap another key" }, unwrap: { title: "Paket a\xE7ma", note: "When the cryptographic key can be used to unwrap another key" }, unknown: { title: "Bilinmiyor", note: "The cryptographic key can be used some other purpose we don't recognize" }, certificateDetail: { title: "G\xFCvenlik Sertifikas\u0131 Detay\u0131", note: "Header for section that contains the SSL certificate details" }, commonName: { title: "Ortak Ad", note: "The Common Name for an SSL certificate" }, publicKey: { title: "Ortak Anahtar", note: "The Public Key for an SSL certificate" }, algorithm: { title: "Algoritma", note: "The Algorithm used for an SSL certificate" }, keySize: { title: "Anahtar Boyutu", note: "The size of the encryption key for an SSL certificate" }, usage: { title: "Kullan\u0131m", note: "The allowed uses for an SSL certificate (references 'encrypt', 'sign', 'verify', 'unwrap', etc. strings in this file)" }, summary: { title: "\xD6zet", note: "Header for summary of connection details" }, permanent: { title: "Kal\u0131c\u0131", note: "Whether certificate is permanent" }, effectiveSize: { title: "Ge\xE7erli Boyut", note: "Effective size of encryption key for an SSL certificate" }, certificateNotFound: { title: "Sertifika bulunamad\u0131", note: "When the connection is not encrypted (ie. http) we do not have any certificate details to show" }, certificateForDomain: { title: "{domain} i\xE7in sertifika", note: "Header for certificate details for a given domain" }, insecureConnectionDesc: { title: "Bu sayfada \u015Fifrelenmemi\u015F bir ba\u011Flant\u0131 kullan\u0131l\u0131yor. \xDC\xE7\xFCnc\xFC taraflar bu sayfadaki etkinli\u011Finizi g\xF6r\xFCnt\xFCleyebilir veya bu sayfada g\xF6nderdi\u011Finiz hassas bilgileri ele ge\xE7irebilir.", note: "Shown we connection is not encrypted" }, upgradedConnectionDesc: { title: "Aktar\u0131m s\u0131ras\u0131nda g\xF6nderdi\u011Finiz bilgileri korumak i\xE7in bu sayfadaki ba\u011Flant\u0131y\u0131 y\xFCkselttik.", note: "Shown when we successfully upgrade a connection from an insecure one to a secure connection" }, secureConnectionDesc: { title: "Bu sayfada \xFC\xE7\xFCnc\xFC taraflar\u0131n etkinli\u011Finizi g\xF6r\xFCnt\xFClemesini veya bu sayfadayken g\xF6nderdi\u011Finiz hassas bilgileri ele ge\xE7irmesini \xF6nleyen \u015Fifreli bir ba\u011Flant\u0131 kullan\u0131lmaktad\u0131r.", note: "Shown when the user navigated directly to a secure connection" } }, ctascreens: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, protectionsUnavailableNote: { title: "Gizlilik Korumalar\u0131 \xF6zel sayfalar veya bilgisayar\u0131n\u0131zda yerel olarak a\xE7t\u0131\u011F\u0131n\u0131z sayfalar i\xE7in kullan\u0131lamaz.", note: "'Special pages' here means things like the browser settings page, whereas 'local pages' means files opened from the user's computer rather than the internet" }, spreadTitle: { title: "DuckDuckGo kullanmay\u0131 seviyor musunuz?", note: "Title text for 'Spread DuckDuckGo' CTA" }, spreadText: { title: "Bu haberi ailenizle ve arkada\u015Flar\u0131n\u0131zla payla\u015Fmam\u0131za yard\u0131mc\u0131 olun", note: "Secondary text for 'Spread DuckDuckGo' CTA" }, spreadButton: { title: "DuckDuckGo'yu yay\u0131n", note: "Button text for 'spread' CTA" }, emailTitle: { title: "E-postalar\u0131n takip edilmesini art\u0131k istemiyor musunuz?", note: "Title text for 'Email Protection' CTA" }, emailText: { title: "Taray\u0131c\u0131 uzant\u0131s\u0131 i\xE7in DuckDuckGo E-posta Korumas\u0131na \u015Fimdi kaydolun!", note: "Extension here means browser extension or addon" } }, firebutton: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, fireDialogHeader: { title: "Sekmeleri Kapat ve Verileri Temizle", note: "Dialog header." }, fireDialogHeaderNoTabs: { title: "Verileri Temizle", note: "Dialog header when tab clearing is disabled." }, optionCurrentSite: { title: "Yaln\u0131zca mevcut site", note: "Dropdown option to only clear data for the current active website" }, optionLastHour: { title: "Son bir saat", note: "Dropdown option to only clear data from the past hour" }, optionLast24Hour: { title: "Son 24 saat", note: "Dropdown option to only clear data from the past 24 hours" }, optionLast7days: { title: "Son 7 g\xFCn", note: "Dropdown option to only clear data from the past 7 days" }, optionLast4Weeks: { title: "Son 4 hafta", note: "Dropdown option to only clear data from the past 4 weeks" }, optionAllTime: { title: "Her zaman", note: "Dropdown option to clear all data, since recording started" }, historyDuration: { title: "{duration, select, hour {bir saat} day {24 saat} week {bir hafta} month {4 hafta} other {T\xFCm\xFC}}", note: "Description of what period of history data should be deleted." }, summaryClearTabsHistoryDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> sekme kapat\u0131ls\u0131n ve <b>{durationDesc}</b> s\xFCreli tarama ge\xE7mi\u015Fi ve \xE7erezler temizlensin mi?} other {<b>{openTabs}</b> sekme kapat\u0131ls\u0131n ve <b>{durationDesc}</b> s\xFCreli tarama ge\xE7mi\u015Fi ve \xE7erez temizlensin mi?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of browsing\u2026" }, summaryClearTabsDuration: { title: "{openTabs, plural, one {<b>{openTabs}</b> sekme kapat\u0131ls\u0131n ve <b>{durationDesc}</b> s\xFCreli \xE7erez silinsin mi?} other {<b>{openTabs}</b> sekme kapat\u0131ls\u0131n ve <b>{durationDesc}</b> s\xFCreli \xE7erez silinsin mi?}}", note: "Description of data to be removed after the user submits the form. Placeholders stand for: 1. the number of tabs that will be affected; 2. the timespan of data to be removed (translated separately with key historyDuration). Example: Close 3 tabs and clear 2 weeks of cookies?" }, summaryClearHistoryDuration: { title: "<b>{durationDesc}</b> s\xFCreli tarama ge\xE7mi\u015Fi ve \xE7erez silinsin mi?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of browsing\u2026" }, summaryClearCookiesDuration: { title: "<b>{durationDesc}</b> s\xFCreli \xE7erez temizlensin mi?", note: "Description of data to be removed after the user submits the form. The placeholder stands for the timespan of data to be removed (translated separately with key historyDuration). Example: Clear 2 weeks of cookies?" }, summaryClearTabsHistoryAll: { title: "<b>{openTabs}</b> {openTabs, plural, =1 {sekme} other {sekme}} kapat\u0131ls\u0131n ve <b>t\xFCm</b> tarama ge\xE7mi\u015Fi ve \xE7erezler ({cookies} {cookies, plural, =1 {site} other {site}}) temizlensin mi?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear browsing history and cookies (2 sites)?" }, summaryClearTabsAll: { title: "<b>{openTabs}</b> {openTabs, plural, =1 {sekme} other {sekme}} kapat\u0131ls\u0131n ve <b>t\xFCm</b> \xE7erezler ({cookies} {cookies, plural, =1 {site} other {site}}) temizlensin mi?", note: "Description of data to be removed after the user submits the form. The placeholders are for the number of tabs to be closed, and the number of sites where we'll clear cookies. Example: Close 3 tabs, and clear all cookies (2 sites)?" }, summaryClearHistoryAll: { title: "{cookies, plural, one {<b>T\xFCm</b> tarama ge\xE7mi\u015Fi ve \xE7erezler ({cookies} site) temizlensin mi?} other {<b>T\xFCm</b> tarama ge\xE7mi\u015Fi ve \xE7erezler ({cookies} site) temizlensin mi?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all browsing history and cookies (2 sites)?" }, summaryClearCookiesAll: { title: "{cookies, plural, one {<b>T\xFCm</b> \xE7erezler ({cookies} site) temizlensin mi?} other {<b>T\xFCm</b> \xE7erezler ({cookies} site) temizlensin mi?}}", note: "Description of data to be removed after the user submits the form. The placeholders stand for the number of sites where we'll clear cookies. Example: Clear all cookies (2 sites)?" }, summaryClearTabsHistorySite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> sekmesi kapat\u0131ls\u0131n ve <b>t\xFCm {site}</b> \xE7erezleri temizlensin mi?} other {<b>{openTabs} {site}</b> sekmeleri kapat\u0131ls\u0131n ve <b>t\xFCm {site}</b> \xE7erezleri temizlensin mi?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearTabsSite: { title: "{openTabs, plural, one {<b>{openTabs} {site}</b> sekmesi kapat\u0131ls\u0131n ve <b>t\xFCm {site}</b> \xE7erezleri temizlensin mi?} other {<b>{openTabs} {site}</b> sekmeleri kapat\u0131ls\u0131n ve <b>t\xFCm {site}</b> \xE7erezleri temizlensin mi?}}", note: 'Description of data to be removed after the user submits the form. Example: "Close <b>3 example.com</b> tabs, and clear <b>all example.com</b> cookies?".' }, summaryClearHistorySite: { title: "<b>T\xFCm {site}</b> tarama ge\xE7mi\u015Fi ve \xE7erezleri silinsin mi?", note: "Description of data to be removed after the user submits the form. Example: Clear all example.com browsing history and cookies?" }, summaryClearCookiesSite: { title: "<b>T\xFCm {site}</b> \xE7erezleri silinsin mi?", note: "Description of data to be removed after the user submits the form. Clear all example.com cookies?" }, summaryPinnedIgnored: { title: "{tabs, plural, one {<b>{tabs} sabitlenmi\u015F</b> sekme yoksay\u0131lacak.} other {<b>{tabs} sabitlenmi\u015F</b> sekme yoksay\u0131lacak.}}", note: "Notice to tell the user that some tabs will not be closed. Example: 3 pinned tabs will be ignored." }, clearData: { title: "Temizle", note: "Button text to start data clearing." }, cancel: { title: "Vazge\xE7", note: "Button text to exit the fire button modal." }, historyAndDownloadsNotAffected: { title: "Ge\xE7mi\u015Fi de temizlemek i\xE7in bir zaman aral\u0131\u011F\u0131 se\xE7in.", note: "Notice to tell the user that the chosen clearing settings will not affect history and downloads because a time period has not been selected from the dropdown." } }, permissions: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, camera: { title: "Kamera", note: "Camera permission is used by the browser to ask the user for access to computer or phone camera" }, microphone: { title: "Mikrofon", note: "Microphone permission is used by the browser to ask the user for access to computer or phone microphone" }, geolocation: { title: "Co\u011Frafi Konum", note: "Geolocation permission is used by the browser to ask the user to share their current location with the website" }, popups: { title: "A\xE7\u0131l\u0131r pencereler", note: "Pop-ups permission is used by the browser to ask the user to allow the website to open new windows" }, ask: { title: "Her seferinde sor", note: "A permission setting that specifies the user should be asked each time the website wants to use a given permission" }, notify: { title: "Bildir", note: "A permission setting that specifies the user should be notified each time the website wants to use a given permission" }, grant: { title: "Her zaman izin ver", note: "A permission setting that allows the website to always use this permission without asking" }, deny: { title: "Her zaman reddet", note: "A permission setting that always blocks the website from using this permission" } }, report: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, selectTheOptionDesc: { title: "Anonim bir hatal\u0131 site raporunun g\xF6nderilmesi uygulamay\u0131 geli\u015Ftirmemize yard\u0131mc\u0131 olur.", note: "The user will see this UI when they're running into issues with a given website, that we may be causing" }, pickYourIssueFromTheList: { title: "Ne oldu\u011Funu a\xE7\u0131klay\u0131n", note: "Asks the user to pick a specific list from the pulldown" }, blocked: { title: "Site engellendi veya y\xFCklenmedi", note: "User is reporting this page because the page didn't load" }, layout: { title: "Sitede d\xFCzen hatal\u0131", note: "User is reporting this page because the page layout appears broken" }, emptySpaces: { title: "Sitede geni\u015F bo\u015F alanlar var", note: "User is reporting this page because the page contains large empty spaces" }, videos: { title: "Video oynat\u0131lmad\u0131 veya y\xFCklenmedi", note: "User is reporting this page because a video didn't play or load correctly" }, images: { title: "Resimler y\xFCklenemedi", note: "User is reporting this page because one or more images did not load" }, comments: { title: "Yorumlar, incelemeler veya sohbetler y\xFCklenmedi", note: "User is reporting this page because one or more comments did not load" }, content: { title: "\u0130\xE7erik eksik", note: "User is reporting this page because some other type of content did not load" }, links: { title: "Ba\u011Flant\u0131lar veya d\xFC\u011Fmeler \xE7al\u0131\u015Fm\u0131yor", note: "User is reporting this page because one or more links or buttons did not work when clicked" }, login: { title: "Oturum a\xE7am\u0131yorum/kay\u0131t olam\u0131yorum", note: "User is reporting this page because they are unable to log into the website" }, shopping: { title: "\xD6deme yapam\u0131yorum, \xE7\u0131k\u0131\u015F yapam\u0131yorum veya al\u0131\u015Fveri\u015F yapam\u0131yorum", note: "User is reporting this page because they are unable to log into the website" }, browser: { title: "Taray\u0131c\u0131da veya di\u011Fer taray\u0131c\u0131 uzant\u0131s\u0131nda sorun var", note: "User is reporting this page because there a problem with the browser or another extension" }, paywall: { title: "Site benden reklam engelleyiciyi devre d\u0131\u015F\u0131 b\u0131rakmam\u0131 istedi", note: "User is reporting this page asked them to disable their privacy or ad blocking extension" }, other: { title: "Ba\u015Fka bir \u015Fey", note: "User is reporting this page because of some other reason than the ones we listed" }, tellUsMoreDesc: { title: "Daha fazla ayr\u0131nt\u0131 payla\u015F\u0131n (iste\u011Fe ba\u011Fl\u0131):{bullet}Ne oldu?{bullet}Ne olmas\u0131 gerekirdi?{bullet} Korumalar\u0131 kapatmak yard\u0131mc\u0131 oldu mu?", note: "A hint for a text box that lets user enter free text to describe their problem. There are 3 questions as a guide, and each 'bullet' is replaced with a bullet point - such as '\u2022 What happened?'" }, sendReport: { title: "Rapor g\xF6nder", note: "Button for submitting report" }, reportsAreAnonymousDesc: { title: "DuckDuckGo'ya g\xF6nderilen raporlar yaln\u0131zca geri bildiriminizi de\u011Ferlendirmemize yard\u0131mc\u0131 olacak gerekli bilgileri i\xE7erir.", note: "A small disclaimer at the bottom of the view describing what is included in the report" }, thankYou: { title: "Te\u015Fekk\xFCr ederiz!", note: "Title for what the user sees upon submitting the report" }, yourReportWillHelpDesc: { title: "Raporunuz \xFCr\xFCnlerimizi geli\u015Ftirmemize ve di\u011Fer kullan\u0131c\u0131lar i\xE7in daha iyi bir deneyim sunmam\u0131za yard\u0131mc\u0131 olacakt\u0131r.", note: "Body that the user sees upon submitting the report" } }, shared: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, trackers: { title: "\u0130zleyiciler", note: "Trackers are a pieces of code on a website that monitors users as they navigate the web" } }, site: { smartling: { string_format: "icu", translate_paths: [{ path: "*/title", key: "{*}/title", instruction: "*/note" }] }, updatingProtectionList: { title: "Koruma listesi g\xFCncelleniyor", note: "Message shown while updating the list of protections" }, protectionsEnabled: { title: "Bu site i\xE7in koruma <b>A\xC7IK</b>", note: "Headline when privacy protections are enabled" }, protectionsDisabled: { title: "Bu site i\xE7in koruma <b>KAPALI</b>", note: "Headline when privacy protections are disabled by user" }, protectionsDisabledRemote: { title: "Bu sitede hatalara neden oldu\u011Fu i\xE7in Gizlilik Korumalar\u0131n\u0131 ge\xE7ici olarak kapatt\u0131k.", note: "Headline when privacy protections are disabled by DDG" }, protectionsDisabledRemoteOverride: { title: "Sitede hatalar\u0131 \xF6nlemek i\xE7in bu sitede Gizlilik Korumalar\u0131'n\u0131 devre d\u0131\u015F\u0131 b\u0131rakman\u0131z\u0131 \xF6neririz.", note: "Headline when privacy protections are disabled by user" }, connectionDescriptionUnencrypted: { title: "<b>Bu site g\xFCvenli de\u011Fildir</b> ve bu sayfada g\xF6nderdi\u011Finiz bilgileri tehlikeye atabilir.", note: "Shown when the connection is not encrypted (HTTP instead of HTTPS)" }, trackerNetworksSummaryBlocked: { title: "A\u015Fa\u011F\u0131daki \xFC\xE7\xFCnc\xFC taraf alan adlar\u0131n\u0131n isteklerinin y\xFCklenmesi, izleme istekleri olarak tan\u0131mland\u0131klar\u0131 i\xE7in engellendi. Bir \u015Firketin istekleri y\xFCklenirse profilinizi olu\u015Fturmalar\u0131 m\xFCmk\xFCn olabilir.", note: "The summary immediately shown on the 'trackers blocked' screen" }, trackerNetworksSummaryNoneBlocked: { title: "Tespit edilen herhangi bir izleme iste\u011Finin bu sayfaya y\xFCklenmesi engellenmedi. Bir \u015Firketin isteklerinin y\xFCklenmesi profilinizi olu\u015Fturmalar\u0131n\u0131 m\xFCmk\xFCn k\u0131labilir.", note: "The message shown when we detected trackers, but none were blocked" }, trackerNetworksSummaryNoneFound: { title: "Bu sayfada herhangi bir izleme iste\u011Fi tespit etmedik.", note: "The message shown when we didn't detect any trackers" }, trackerNetworksSummaryNone: { title: "Bu sayfada izleme isteklerini y\xFCklemeye \xE7al\u0131\u015Fan herhangi bir \u015Firket bulamad\u0131k.", note: "We did not find any trackers on this page" }, trackerNetworksSummaryAllowedOnly: { title: "Sitede hatalar olmas\u0131n\u0131 \xF6nlemek i\xE7in \u015Firketlerin bu sayfaya izleme iste\u011Fi y\xFCklemesini engellemedik.", note: "The message shown when we allowed some trackers to load." }, trackerNetworksSummaryProtectionsOff: { title: "Bu site i\xE7in Korumalar kapal\u0131 oldu\u011Fundan, hi\xE7bir izleme iste\u011Finin y\xFCklenmesi engellenmedi. Bir \u015Firketin istekleri y\xFCklenirse profilinizi olu\u015Fturmalar\u0131 m\xFCmk\xFCn olabilir.", note: "We found trackers, but protections were disabled" }, createNewDuckAddress: { title: "\xD6zel Duck Address Olu\u015Ftur", note: "Create a new private email alias" }, createNewDuckAddressCopied: { title: "Panonuza kopyaland\u0131!", note: "Note to inform that the email address was copied" }, websiteNotWorkingQ: { title: "Web sitesi beklendi\u011Fi gibi \xE7al\u0131\u015Fm\u0131yor mu?", note: "Call to action for user to click if they are having issues with this web page" }, websiteNotWorkingPrompt: { title: "Web sitesi \xE7al\u0131\u015Fm\u0131yor mu?", note: "button label text when we are trying to encourage a user to toggle protections off" }, websiteNotWorkingCta: { title: "Hatal\u0131 siteyi bildir", note: "button label text for a trigger that shows our feedback form" }, websiteNotWorkingAdvice: { title: "Korumalar\u0131 KAPALI duruma getirmek yard\u0131mc\u0131 olabilir.", note: "help text" }, websiteNotWorkingPromptFollowUp: { title: "Site hala \xE7al\u0131\u015Fm\u0131yor mu?", note: "button label text a user has already turned protections off" }, takePrecautions: { title: "\xD6nlem Al\u0131n", note: "Title shown when the page is unencrypted" }, majorTrackingNetworkDesc: { title: "{blocked, select, true {<b>Bu site, en iyi web sitelerinin \xF6nemli bir k\u0131sm\u0131nda (%{companyPrevalence}) bir izleyici a\u011F\u0131n\u0131 y\xF6neten {companyDisplayName}</b> \u015Firketine aittir. Bu sayfadaki baz\u0131 taleplerini engelleyebildik.} other {<b>Bu site, en iyi web sitelerinin \xF6nemli bir k\u0131sm\u0131nda (%{companyPrevalence}) bir izleyici a\u011F\u0131n\u0131 y\xF6neten {companyDisplayName}</b> \u015Firketine aittir. }}", note: "When visiting a site that is owned by a major tracking company, we cannot block their trackers so we warn the user.  Ex. Google (owner of news.google.com) tracks you across 79% of top sites.... etc" }, trackersBlockedDesc: { title: "{companyCount, plural, =0 {Baz\u0131 \u015Firketlerin bu sayfaya izleme istekleri y\xFCklemesini engelledik.} =2 {<b>{firstCompany}</b> ve <b>{secondCompany}</b> \u015Firketlerinin bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.} =3 {<b>{firstCompany}</b>, <b>{secondCompany}</b> ve <b>{thirdCompany}</b> \u015Firketlerinin bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.} =4 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b> ve <b>{fourthCompany}</b> \u015Firketlerinin bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.} =5 {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ve <b>1 di\u011Fer</b> \u015Firketin bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.} one {<b>{firstCompany}</b> \u015Firketinin bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.} other {<b>{firstCompany}</b>, <b>{secondCompany}</b>, <b>{thirdCompany}</b>, <b>{fourthCompany}</b> ve <b>{othersCount} di\u011Ferlerinin</b> bu sayfadaki izleme isteklerini y\xFCklemesini engelledik.}}", note: "Returns a string in the form of 'We blocked CompanyA and CompanyB from trying to track you.'" }, cookiesMinimized: { title: "Y\xF6netilen \xC7erezler", note: "Title for when we have set the cookie privacy settings on this website to maximize privacy" }, cookiesHidden: { title: "\xC7erez A\xE7\u0131l\u0131r Penceresi Gizli", note: "Title for when we have cosmetically hidden a cookie banner" }, cookiesHiddenSummary: { title: "\xC7erez tercihlerini y\xF6netmek i\xE7in herhangi bir se\xE7enek sunulmad\u0131\u011F\u0131ndan, bu sitede yaln\u0131zca \xE7erez a\xE7\u0131l\u0131r penceresini gizleyebildik. Di\u011Fer Web \u0130zleme Korumalar\u0131m\u0131z hala ge\xE7erli.", note: "A longer explanation that we have cosmetically hidden a cookie banner" }, cookiesMinimizedSummary: { title: "\xC7erez tercihlerinizi gizlili\u011Fi en \xFCst d\xFCzeye \xE7\u0131karacak \u015Fekilde ayarlad\u0131k ve a\xE7\u0131l\u0131r pencereyi kapatt\u0131k.", note: "A longer explanation that we have set the cookie privacy settings on this website to maximize privacy" }, cookiesMinimizedSettings: { title: "Ayarlar'da Devre D\u0131\u015F\u0131 B\u0131rak", note: "Button text for allowing the settings to be opened" }, connectionSecure: { title: "Ba\u011Flant\u0131 \u015Eifrelenmi\u015Ftir", note: "The connection to the website is secure (HTTPS)" }, connectionNotSecure: { title: "Ba\u011Flant\u0131 \u015Eifrelenmemi\u015Ftir", note: "The connection is not secure (HTTP)" }, trackerNetworksDesc: { title: "Y\xFCklenmesi Engellenen \u0130stekler", note: "This indicates that 1 or more trackers were blocked." }, trackerNetworksNotBlocked: { title: "Hi\xE7bir \u0130zleme \u0130ste\u011Fi Engellenmedi", note: "This indicates that no trackers were blocked." }, trackerNetworksNotFound: { title: "\u0130zleme \u0130ste\u011Fi Bulunamad\u0131", note: "This is an alternative heading for when there were no Trackers but there WAS at least 1 non-special request loaded" }, thirdPartiesLoaded: { title: "\xDC\xE7\xFCnc\xFC Taraf \u0130stekleri Y\xFCklendi", note: "todo" }, thirdPartiesNoneFound: { title: "Y\xFCklenen \xDC\xE7\xFCnc\xFC Taraf \u0130ste\u011Fi Yok", note: "This describes how many non-tracker domains were loaded with a longer description  Ex: Requests from 3 other third-party domains were loaded on this page." }, firstPartyDesc: { title: "{companyName} bu sitenin ve bu sayfada bulunan bilinen izleyicilerin sahibi oldu\u011Fundan bu \u015Firketi engellemedik.", note: "When trackers detected belong to companyName, we can't block them on a site that company owns" }, noTrackersFound: { title: "Bu sayfada izleme isteklerini y\xFCklemeye \xE7al\u0131\u015Fan herhangi bir \u015Firket bulamad\u0131k.", note: "We did not find any trackers on this page" }, trackersFoundForAllowlisted: { title: "\u015Eirketler izleyici kullanarak profilinizi \xE7\u0131karabilir. Bu sayfadaki etkinli\u011Finizi bu \u015Firketlerin izledi\u011Fini belirledik.", note: "This header for the list of tracker companies is shown when a site has protections disabled" }, trackersFoundAndBlocked: { title: "\u015Eirketler izleyici kullanarak profilinizi \xE7\u0131karabilir. Bu sayfadaki etkinli\u011Finizin bu \u015Firketler taraf\u0131ndan izlenmesini engelledik.", note: "This header for the list of tracker companies is shown when a site has protections enabled" }, trackerNetworkUnknown: { title: "\u0130zleyici a\u011F\u0131 bilinmiyor", note: "Shown when we don't have a company name for a given tracker" }, trackerDomainsForCompany: { title: "{companyName} i\xE7in izleyici alan adlar\u0131", note: "Title for the list of tracker domains detected from a given company" }, zeroTrackersFound: { title: "0 \u0130zleyici Bulundu", note: "We did not find any trackers on this page" }, trackerOwnedByThisSite: { title: "Bu Sitenin Sahip Oldu\u011Fu \u0130zleyiciler (\u0130zin Verilenler)", note: "Trackers owned by this site are not blocked" }, trackerCountForDomain: { title: "{blocked, select, true {{trackerCount, plural, one {{domain} \xFCzerinde {trackerCount} \u0130zleyici Engellendi} other {{domain} \xFCzerinde {trackerCount} \u0130zleyici Engellendi}}} other {{trackerCount, plural, one {{domain} \xFCzerinde {trackerCount} \u0130zleyici Bulundu} other {{domain} \xFCzerinde {trackerCount} \u0130zleyici Bulundu}}}}", note: "For a given domain, the count of trackers either blocked or just detected (found).  Ex 4 Trackers Blocked" }, trackerLimitationsNote: { title: "Not: Platform s\u0131n\u0131rlamalar\u0131 y\xFCz\xFCnden t\xFCm istekleri belirlememiz m\xFCmk\xFCn olmayabilir.", note: "Shown at the bottom of tracker lists" }, trackerAboutLink: { title: "Web \u0130zleme Korumalar\u0131m\u0131z hakk\u0131nda", note: "A link pointing to a help page that gives more info on our Web Tracking Protections" }, trackerAdLink: { title: "Arama a\u011F\u0131 reklamlar\u0131m\u0131z korumalar\u0131m\u0131z\u0131 nas\u0131l etkiler?", note: "A link pointing to an help page explaining how our search ads impact our protections" }, sectionHeadingAdAttribution: { title: "A\u015Fa\u011F\u0131daki etki alan\u0131ndan gelen istekler, yak\u0131n zamanda DuckDuckGo'daki bir {domain} reklam\u0131 t\u0131kland\u0131\u011F\u0131 i\xE7in y\xFCklendi. Bu istekler, reklamlar\u0131n ne kadar etkili oldu\u011Funun de\u011Ferlendirilmesine yard\u0131mc\u0131 olur. DuckDuckGo'daki reklamlar profil olu\u015Fturmak i\xE7in kullan\u0131lmaz.", note: "The placeholder stands for a company name" }, sectionHeadingIgnore: { title: "Sitede hatalar olu\u015Fmas\u0131n\u0131 \xF6nlemek i\xE7in a\u015Fa\u011F\u0131daki etki alan\u0131 istekleri y\xFCklendi.", note: "Blocking trackers can cause issue with the host page, so we may allow them to load" }, sectionHeadingFirstParty: { title: "A\u015Fa\u011F\u0131daki etki alan\u0131 istekleri {domain} ile ili\u015Fkili oldu\u011Fu i\xE7in y\xFCklendi.", note: "The placeholder stands for a company name" }, sectionHeadingThirdParty: { title: "A\u015Fa\u011F\u0131daki etki alanlar\u0131n\u0131n istekleri de y\xFCklendi." }, sectionHeadingProtectionsDisabled: { title: "Korumalar kapal\u0131 oldu\u011Fu i\xE7in a\u015Fa\u011F\u0131daki etki alan\u0131 istekleri y\xFCklendi.", note: "The user can manually turn off protections. When that happens we show this message" }, thirdPartiesSummaryLoaded: { title: "A\u015Fa\u011F\u0131daki \xFC\xE7\xFCnc\xFC taraf alan adlar\u0131n\u0131n istekleri y\xFCklendi. Bir \u015Firketin istekleri y\xFCklenirse, di\u011Fer web izleme korumalar\u0131m\u0131za ra\u011Fmen profilinizi olu\u015Fturmalar\u0131 m\xFCmk\xFCn olabilir.", note: "Shown as the summary in third parties screen" }, thirdPartiesSummaryProtectionsOff: { title: "A\u015Fa\u011F\u0131daki \xFC\xE7\xFCnc\xFC taraf alan adlar\u0131n\u0131n istekleri y\xFCklendi. Bir \u015Firketin istekleri y\xFCklenirse, di\u011Fer web izleme korumalar\u0131m\u0131za ra\u011Fmen profilinizi olu\u015Fturmalar\u0131 m\xFCmk\xFCn olabilir.", note: "Shown when any requests were loaded, but protections are off" }, thirdPartiesSummaryNone: { title: "\xDC\xE7\xFCnc\xFC taraf etki alanlar\u0131ndan gelen herhangi bir talep tespit etmedik.", note: "Shown in third party listing screen" }, analyticsCategory: { title: "Analitik", note: "Used to describe the type of tracker, in this case one that is used to report analytics back to the site owner" }, advertisingCategory: { title: "tan\u0131t\u0131m", note: "Used to describe the type of tracker, in this case one that is used for advertising" }, socialCategory: { title: "Sosyal A\u011F", note: "Used to describe the type of tracker, in this case one that is used by one of the popular social networks" }, contentDeliveryCategory: { title: "\u0130\xE7erik Da\u011F\u0131t\u0131m\u0131", note: "Used to describe the type of tracker, in this case one that is used by content delivery platforms" }, embeddedContentCategory: { title: "G\xF6m\xFCl\xFC \u0130\xE7erik", note: "Used to describe the type of tracker, in this case one that is used by embedded content" }, searchPlaceholder: { title: "DuckDuckGo'da Ara", note: "Placeholder text for the search bar" }, searchGoButton: { title: "Ara", note: "Aria label for the search button" }, optionsButton: { title: "Di\u011Fer se\xE7enekler", note: "Aria label for the for the options button" }, navigationComplete: { title: "Bitti", note: "Button text for iOS on top bar navigation" }, navigationBack: { title: "Geri", note: "Aria label and visible text for iOS on top bar navigation" }, enableProtectionsSwitch: { title: "Korumalar\u0131 Etkinle\u015Ftir", note: "Aria label for the switch that allows the user to turn protections on" }, disableProtectionsSwitch: { title: "Korumalar\u0131 Devre D\u0131\u015F\u0131 B\u0131rak", note: "Aria label for the switch that allows the user to turn protections off" }, errorMessage: { title: "Bir \u015Feyler ters gitti ve bu i\xE7eri\u011Fi y\xFCkleyemedik. Sayfay\u0131 yeniden y\xFCklemeyi deneyin.", note: "Message shown to the user when an error has occurred and the UI cannot be displayed" } } } };
    }
  });

  // shared/js/ui/base/localize.js
  function site(key, options) {
    return i18next_default.t(`site:${key}`, options);
  }
  function report(key, options) {
    return i18next_default.t(`report:${key}`, options);
  }
  var i18n, ns;
  var init_localize = __esm({
    "shared/js/ui/base/localize.js"() {
      "use strict";
      init_i18next();
      init_es();
      init__();
      i18next_default.use(es_default).init({
        // debug: true,
        initImmediate: false,
        fallbackLng: "en",
        lng: "en",
        ns: ["shared", "site", "connection", "report", "ctascreens", "firebutton"],
        defaultNS: "shared",
        resources: __default,
        i18nFormat: {
          parseErrorHandler: (err, key, res, options) => {
            console.warn("parseErrorHandler", err, key, res, options);
          }
        }
      });
      i18n = i18next_default;
      ns = {
        site,
        report
      };
    }
  });

  // shared/js/ui/templates/email-protection.js
  function emailProtectionTemplate() {
    const state = this.model.state;
    if (state === "unknown") {
      return null;
    }
    const text = state === "idle" ? i18n.t("site:createNewDuckAddress.title") : i18n.t("site:createNewDuckAddressCopied.title");
    const icon = state === "idle" ? wandIcon() : checkMarkIcon();
    return import_nanohtml.default` <div class="js-email-alias email-alias token-body-em">
        <button
            class="email-alias__button"
            type="button"
            data-state=${state}
            disabled=${state === "added"}
            onclick=${(e3) => this.copyAlias(e3)}
        >
            ${icon}
            <span class="email-alias__text">${text}</span>
        </button>
    </div>`;
  }
  function wandIcon() {
    return import_nanohtml.default`<svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path
            d="M10.4998 0.75C10.4998 0.335786 10.164 0 9.74976 0C9.33554 0 8.99976 0.335786 8.99976 0.75V3.25C8.99976 3.66421 9.33554 4 9.74976 4C10.164 4 10.4998 3.66421 10.4998 3.25V0.75Z"
        />
        <path
            d="M10.4998 9.75C10.4998 9.33579 10.164 9 9.74976 9C9.33554 9 8.99976 9.33579 8.99976 9.75V12.25C8.99976 12.6642 9.33554 13 9.74976 13C10.164 13 10.4998 12.6642 10.4998 12.25V9.75Z"
        />
        <path
            d="M15.9998 6.25C15.9998 6.66421 15.664 7 15.2498 7H12.7498C12.3355 7 11.9998 6.66421 11.9998 6.25C11.9998 5.83579 12.3355 5.5 12.7498 5.5H15.2498C15.664 5.5 15.9998 5.83579 15.9998 6.25Z"
        />
        <path
            d="M6.24976 7C6.66397 7 6.99976 6.66421 6.99976 6.25C6.99976 5.83579 6.66397 5.5 6.24976 5.5H3.74976C3.33554 5.5 2.99976 5.83579 2.99976 6.25C2.99976 6.66421 3.33554 7 3.74976 7H6.24976Z"
        />
        <path
            d="M14.2801 10.7803C13.9872 11.0732 13.5123 11.0732 13.2194 10.7803L11.4694 9.03033C11.1765 8.73744 11.1765 8.26256 11.4694 7.96967C11.7623 7.67678 12.2372 7.67678 12.5301 7.96967L14.2801 9.71967C14.573 10.0126 14.573 10.4874 14.2801 10.7803Z"
        />
        <path
            d="M6.71942 4.28033C7.01231 4.57322 7.48719 4.57322 7.78008 4.28033C8.07297 3.98744 8.07297 3.51256 7.78008 3.21967L6.03008 1.46967C5.73719 1.17678 5.26231 1.17678 4.96942 1.46967C4.67653 1.76256 4.67653 2.23744 4.96942 2.53033L6.71942 4.28033Z"
        />
        <path
            d="M11.4694 4.53032C11.1765 4.23743 11.1765 3.76256 11.4694 3.46966L13.2194 1.71966C13.5123 1.42677 13.9872 1.42677 14.2801 1.71966C14.573 2.01256 14.573 2.48743 14.2801 2.78032L12.5301 4.53032C12.2372 4.82322 11.7623 4.82322 11.4694 4.53032Z"
        />
        <path
            d="M2.28296 12.658L9.24784 5.69307C9.54074 5.40018 10.0156 5.40018 10.3085 5.69307V5.69307C10.6014 5.98597 10.6014 6.46084 10.3085 6.75373L3.34362 13.7186L2.28296 12.658Z"
        />
        <path
            d="M0.243221 15.7588C-0.0496725 15.466 -0.0496726 14.9911 0.243221 14.6982L1.75195 13.1895L2.81261 14.2501L1.30388 15.7588C1.01099 16.0517 0.536114 16.0517 0.243221 15.7588V15.7588Z"
        />
    </svg>`;
  }
  function checkMarkIcon() {
    return import_nanohtml.default`<svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path
            d="M11.809 6.2501C12.0851 5.94141 12.0588 5.46727 11.7501 5.19108C11.4414 4.91488 10.9673 4.94122 10.6911 5.24991L7.0255 9.34675L5.33049 7.27508C5.06819 6.9545 4.59568 6.90724 4.27509 7.16954C3.95451 7.43183 3.90726 7.90435 4.16955 8.22494L6.41955 10.9749C6.55833 11.1446 6.76436 11.245 6.98346 11.2498C7.20256 11.2547 7.41282 11.1634 7.55895 11.0001L11.809 6.2501Z"
        />
        <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0ZM1.5 8C1.5 4.41015 4.41015 1.5 8 1.5C11.5899 1.5 14.5 4.41015 14.5 8C14.5 11.5899 11.5899 14.5 8 14.5C4.41015 14.5 1.5 11.5899 1.5 8Z"
        />
    </svg>`;
  }
  var import_nanohtml;
  var init_email_protection2 = __esm({
    "shared/js/ui/templates/email-protection.js"() {
      "use strict";
      import_nanohtml = __toESM(require_browser());
      init_localize();
    }
  });

  // shared/js/ui/models/search.js
  function Search(attrs) {
    model_default.call(this, attrs);
  }
  var import_jquery4, search_default;
  var init_search = __esm({
    "shared/js/ui/models/search.js"() {
      "use strict";
      import_jquery4 = __toESM(require_jquery());
      init_model();
      init_common();
      Search.prototype = import_jquery4.default.extend({}, model_default.prototype, {
        modelName: "search",
        /**
         * @this {import('./site.js').LocalThis}
         * @param searchTerm
         */
        doSearch: function(searchTerm) {
          this.searchText = searchTerm;
          this.fetch(new SearchMessage({ term: searchTerm }));
        },
        /**
         * @this {import('./site.js').LocalThis}
         */
        openOptionsPage: function() {
          this.fetch(new OpenOptionsMessage());
        }
      });
      search_default = Search;
    }
  });

  // shared/js/ui/templates/search.js
  function search_default2() {
    const { showFireButton } = this.model;
    const fireButton = showFireButton ? import_nanohtml2.default`<button type="button" class="fire-button js-search-fire-button">${fireIcon()}</button>` : null;
    return import_nanohtml2.default`
        <div class="search token-search-input">
            <form class="search-form js-search-form" name="x" data-test-id="search-form">
                <input
                    type="text"
                    autocomplete="off"
                    autofocus
                    placeholder="${i18n.t("site:searchPlaceholder.title")}"
                    name="q"
                    class="search-form__input js-search-input"
                    value=""
                />
                <button class="search-form__go js-search-go" type="submit" aria-label="${i18n.t("site:searchGoButton.title")}">
                    ${loupeIcon()}
                </button>
            </form>
            ${fireButton}
            <button type="button" class="cog-button js-search-cog-button" aria-label="${i18n.t("site:optionsButton.title")}">
                ${cogIcon()}
            </button>
        </div>
    `;
  }
  function loupeIcon() {
    return import_nanohtml2.default`<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect class="loupe-handle" x="11.5" y="12.9142" width="2" height="6" rx="1" transform="rotate(-45 11.5 12.9142)" />
        <path
            class="loupe-glass"
            d="M12.6976 5.27292C14.7478 7.32317 14.7478 10.6473 12.6976 12.6975C10.6473 14.7478 7.32322 14.7478 5.27297 12.6975C3.22272 10.6473 3.22272 7.32317 5.27297 5.27292C7.32322 3.22267 10.6473 3.22267 12.6976 5.27292Z"
            stroke-width="1.5"
        />
    </svg>`;
  }
  function cogIcon() {
    return import_nanohtml2.default`<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
            class="settings-cog"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M3.43351 13.1462C3.06364 14.0391 3.48767 15.0628 4.3806 15.4327L5.30448 15.8154C6.19741 16.1853 7.2211 15.7612 7.59096 14.8683L7.84778 14.2483C7.89842 14.2495 7.94918 14.2501 8.00007 14.2501C8.05068 14.2501 8.10118 14.2495 8.15154 14.2483L8.40831 14.8682C8.77818 15.7611 9.80187 16.1852 10.6948 15.8153L11.6187 15.4326C12.5116 15.0628 12.9356 14.0391 12.5658 13.1461L12.3093 12.527C12.3828 12.457 12.4546 12.3853 12.5247 12.3118L13.1437 12.5682C14.0366 12.9381 15.0603 12.514 15.4302 11.6211L15.8129 10.6972C16.1827 9.8043 15.7587 8.7806 14.8658 8.41074L14.2482 8.15493C14.2494 8.10345 14.2501 8.05185 14.2501 8.00011C14.2501 7.94964 14.2495 7.89928 14.2483 7.84905L14.8659 7.59324C15.7588 7.22337 16.1828 6.19968 15.8129 5.30675L15.4303 4.38287C15.0604 3.48994 14.0367 3.06592 13.1438 3.43578L12.5273 3.69115C12.4568 3.61712 12.3845 3.54482 12.3105 3.47432L12.5658 2.85787C12.9357 1.96494 12.5117 0.94124 11.6188 0.571378L10.6949 0.188694C9.80195 -0.181168 8.77825 0.242858 8.40839 1.13579L8.15316 1.75196C8.10226 1.75073 8.05122 1.75011 8.00007 1.75011C7.94864 1.75011 7.89734 1.75074 7.84616 1.75198L7.59089 1.13569C7.22102 0.242766 6.19733 -0.181263 5.3044 0.1886L4.38052 0.571284C3.4876 0.941146 3.06357 1.96484 3.43343 2.85777L3.68905 3.47488C3.61513 3.54532 3.54293 3.61755 3.47254 3.69151L2.85533 3.43585C1.9624 3.06599 0.938705 3.49002 0.568843 4.38295L0.186159 5.30683C-0.183704 6.19975 0.240324 7.22345 1.13325 7.59331L1.75185 7.84955C1.75067 7.89961 1.75007 7.9498 1.75007 8.00011C1.75007 8.05168 1.7507 8.10312 1.75194 8.15443L1.13335 8.41066C0.240417 8.78052 -0.18361 9.80422 0.186252 10.6971L0.568936 11.621C0.938798 12.514 1.96249 12.938 2.85542 12.5681L3.47512 12.3114C3.54507 12.3848 3.6168 12.4565 3.69022 12.5265L3.43351 13.1462ZM1.61161 6.43846C1.35648 6.33279 1.23533 6.0403 1.34101 5.78518L1.72369 4.8613C1.82937 4.60618 2.12185 4.48503 2.37697 4.5907L3.47809 5.0468C3.69752 5.13769 3.94855 5.05988 4.09713 4.87459C4.32641 4.58865 4.58647 4.32845 4.87227 4.099C5.05738 3.95039 5.13507 3.69948 5.04422 3.48016L4.58828 2.37941C4.4826 2.12429 4.60375 1.83181 4.85888 1.72613L5.78276 1.34345C6.03788 1.23777 6.33036 1.35893 6.43604 1.61405L6.89159 2.71385C6.98246 2.93322 7.21488 3.05571 7.45092 3.02993C7.63126 3.01022 7.81448 3.00011 8.00007 3.00011C8.18541 3.00011 8.3684 3.0102 8.54851 3.02985C8.78452 3.0556 9.01691 2.93311 9.10776 2.71377L9.56324 1.61414C9.66891 1.35902 9.9614 1.23787 10.2165 1.34354L11.1404 1.72623C11.3955 1.8319 11.5167 2.12439 11.411 2.37951L10.9553 3.47967C10.8644 3.69901 10.9422 3.94995 11.1273 4.09856C11.4132 4.32802 11.6734 4.58826 11.9027 4.87425C12.0513 5.05952 12.3023 5.13731 12.5217 5.04642L13.6221 4.59063C13.8773 4.48495 14.1697 4.6061 14.2754 4.86122L14.6581 5.7851C14.7638 6.04023 14.6426 6.33271 14.3875 6.43839L13.2866 6.89438C13.0674 6.98521 12.9449 7.21748 12.9705 7.45343C12.99 7.63298 13.0001 7.81537 13.0001 8.00011C13.0001 8.18597 12.9899 8.36945 12.9702 8.55005C12.9443 8.78611 13.0668 9.01859 13.2862 9.10947L14.3874 9.56559C14.6425 9.67126 14.7637 9.96375 14.658 10.2189L14.2753 11.1427C14.1696 11.3979 13.8772 11.519 13.622 11.4133L12.5195 10.9566C12.3002 10.8658 12.0493 10.9435 11.9007 11.1285C11.6715 11.4139 11.4117 11.6736 11.1262 11.9026C10.941 12.0511 10.8632 12.3021 10.9541 12.5215L11.4109 13.6245C11.5166 13.8796 11.3954 14.1721 11.1403 14.2778L10.2164 14.6604C9.96132 14.7661 9.66884 14.645 9.56316 14.3898L9.1062 13.2866C9.01536 13.0673 8.78307 12.9449 8.54711 12.9705C8.36745 12.9901 8.18493 13.0001 8.00007 13.0001C7.81497 13.0001 7.63221 12.9901 7.45233 12.9705C7.21634 12.9447 6.984 13.0672 6.89316 13.2865L6.43611 14.3899C6.33044 14.6451 6.03796 14.7662 5.78283 14.6605L4.85895 14.2779C4.60383 14.1722 4.48268 13.8797 4.58836 13.6246L5.04545 12.521C5.13632 12.3017 5.05857 12.0507 4.87337 11.9021C4.58799 11.6731 4.32826 11.4135 4.09918 11.1282C3.95057 10.9431 3.69967 10.8654 3.48037 10.9563L2.37707 11.4133C2.12194 11.5189 1.82946 11.3978 1.72379 11.1427L1.3411 10.2188C1.23543 9.96367 1.35658 9.67119 1.6117 9.56551L2.71385 9.10898C2.93323 9.01811 3.05572 8.78566 3.02992 8.54962C3.01019 8.36916 3.00007 8.18582 3.00007 8.00011C3.00007 7.81552 3.01007 7.63327 3.02957 7.45386C3.0552 7.21793 2.93271 6.98568 2.71345 6.89486L1.61161 6.43846ZM6.12508 8.00008C6.12508 6.96455 6.96455 6.12508 8.00008 6.12508C9.03562 6.12508 9.87508 6.96455 9.87508 8.00008C9.87508 9.03562 9.03562 9.87508 8.00008 9.87508C6.96455 9.87508 6.12508 9.03562 6.12508 8.00008ZM8.00008 4.87508C6.27419 4.87508 4.87508 6.27419 4.87508 8.00008C4.87508 9.72597 6.27419 11.1251 8.00008 11.1251C9.72597 11.1251 11.1251 9.72597 11.1251 8.00008C11.1251 6.27419 9.72597 4.87508 8.00008 4.87508Z"
            fill-opacity="0.8"
        />
    </svg> `;
  }
  function fireIcon() {
    return import_nanohtml2.default`<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
            class="fire-icon"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M6.51018 15.53C5.52187 15.1832 4.62831 14.6102 3.90082 13.8566C3.17333 13.1031 2.63205 12.1899 2.32018 11.19C2.00674 10.2021 1.95815 9.14927 2.17926 8.1367C2.40038 7.12413 2.88345 6.18736 3.58018 5.42005C3.55105 5.89155 3.6297 6.36349 3.81018 6.80005C4.02356 7.25295 4.32236 7.6604 4.69018 8.00005C4.69018 8.00005 4.12018 6.49005 5.50018 4.00005C6.05384 3.11404 6.78312 2.35083 7.64306 1.75747C8.50299 1.16412 9.47535 0.7532 10.5002 0.550049C9.98701 1.37608 9.80819 2.36673 10.0002 3.32005C10.3002 4.32005 10.7902 4.86005 11.3402 6.32005C11.6533 7.02128 11.8102 7.78217 11.8002 8.55005C11.8926 8.00549 12.0787 7.48106 12.3502 7.00005C12.8054 6.23481 13.5124 5.65154 14.3502 5.35005C13.9624 6.24354 13.8043 7.21983 13.8902 8.19005C14.1302 9.57207 14.0026 10.9929 13.5202 12.31C13.1428 13.1433 12.5799 13.8792 11.8745 14.4616C11.1691 15.0439 10.3398 15.4573 9.45018 15.67C10.0364 15.44 10.5354 15.0313 10.8765 14.5018C11.2175 13.9723 11.3832 13.349 11.3502 12.72C11.252 11.9769 10.8985 11.2911 10.3502 10.78C10.0002 12.67 9.00018 12.89 9.00018 12.89C9.38752 12.0753 9.62788 11.1985 9.71018 10.3C9.76455 9.73167 9.71025 9.15813 9.55018 8.61005C9.35806 7.62829 8.80504 6.75416 8.00018 6.16005C8.05821 6.68407 8.0102 7.21441 7.85902 7.7195C7.70784 8.22458 7.45657 8.69408 7.12018 9.10005C6.31018 10.36 4.94018 11.29 5.00018 13.17C5.02637 13.6604 5.17925 14.1356 5.44391 14.5492C5.70856 14.9628 6.07594 15.3008 6.51018 15.53Z"
            fill-opacity="0.84"
        />
    </svg> `;
  }
  var import_nanohtml2;
  var init_search2 = __esm({
    "shared/js/ui/templates/search.js"() {
      "use strict";
      import_nanohtml2 = __toESM(require_browser());
      init_localize();
    }
  });

  // shared/js/ui/base/view.js
  function BaseView(ops) {
    this.model = ops.model;
    this.views = this.views || {};
    this.store = store_exports;
    this.$parent = typeof ops.appendTo === "string" ? (0, import_jquery5.default)(ops.appendTo) : ops.appendTo;
    this.$before = typeof ops.before === "string" ? (0, import_jquery5.default)(ops.before) : ops.before;
    this.$after = typeof ops.after === "string" ? (0, import_jquery5.default)(ops.after) : ops.after;
    if (ops.events) {
      for (const id in ops.events) {
        this.on(id, ops.events[id]);
      }
    }
    this._render(ops);
  }
  var import_jquery5, view_default;
  var init_view = __esm({
    "shared/js/ui/base/view.js"() {
      "use strict";
      import_jquery5 = __toESM(require_jquery());
      init_events();
      init_store();
      BaseView.prototype = import_jquery5.default.extend({}, events_exports, {
        /***
         * Each view should define a template
         * if it wants to be rendered and added to the DOM.
         *
         * template: '',
         */
        /**
         * Removes the view element (and all child view elements)
         * from the DOM.
         *
         * Should be extended to do any cleanup of child views or
         * unbinding of events.
         */
        destroy: function() {
          this.unbindEvents();
          this.destroyChildViews();
          this.$el.remove();
          if (this.model)
            this.model.destroy();
        },
        /**
         * Go through the this.views object
         * and recurse down destroying any child
         * views and their child views so that
         * when a view is destroyed it removes all memory
         * footprint, all events are cleanly unbound and
         * all related DOM elements are removed.
         *
         */
        destroyChildViews: function() {
          ;
          (function destroyViews(views) {
            if (!views) {
              return;
            }
            let v3;
            if (import_jquery5.default.isArray(views)) {
              for (let i3 = 0; i3 < views.length; i3++) {
                v3 = views[i3];
                if (v3 && import_jquery5.default.isArray(v3)) {
                  destroyViews(v3);
                } else {
                  v3 && v3.destroy && v3.destroy();
                }
              }
              views = null;
            } else {
              for (const c3 in views) {
                v3 = views[c3];
                if (v3 && import_jquery5.default.isArray(v3)) {
                  destroyViews(v3);
                } else {
                  v3 && v3.destroy && v3.destroy();
                }
                delete views[c3];
              }
            }
          })(this.views);
          delete this.views;
        },
        /**
         * Take the template defined on the view class and
         * use it to create a DOM element + append it to the DOM.
         *
         * Can be extended with any custom rendering logic
         * a view may need to do.
         *
         * @param {object} ops - the same ops hash passed into the view constructor
         * @this {any}
         */
        _render: function(ops) {
          if (!this.$el) {
            if (ops && ops.$el) {
              this.$el = ops.$el;
            } else {
              const el = this.template();
              this.$el = (0, import_jquery5.default)(el);
            }
          }
          if (!this.$el)
            throw new Error("Template Not Found: " + this.template);
          this._addToDOM();
          this.$ = this.$el.find.bind(this.$el);
        },
        /**
         * @this {any}
         */
        _rerender: function() {
          const $prev = this.$el.prev();
          if ($prev.length) {
            delete this.$parent;
            this.$after = $prev;
          } else {
            const $next = this.$el.next();
            if ($next.length) {
              delete this.$parent;
              this.$before = $next;
            }
          }
          this.$el.remove();
          delete this.$el;
          this._render();
        },
        /**
         * Add the rendered element to the DOM.
         */
        _addToDOM: function() {
          if (this.$parent) {
            this.$parent.append(this.$el);
          } else if (this.$before) {
            this.$before.before(this.$el);
          } else if (this.$after) {
            this.$after.after(this.$el);
          }
        },
        /**
         * Takes a prefix string and an array
         * of elements and caches dom references.
         *
         * It should be used like this:
         *
         * this._cacheElems('.js-detail',['next','prev'])
         * --> this.$next (is cached ref to '.js-detail-next'
         *   this.$prev (is cached ref to '.js-detail-prev'
         *
         * @param {String} prefix
         * @param {Array} elems
         * @this {any}
         */
        _cacheElems: function(prefix2, elems) {
          for (let i3 = 0; i3 < elems.length; i3++) {
            const selector = prefix2 + "-" + elems[i3];
            const id = "$" + elems[i3].replace(/-/g, "");
            this[id] = this.$(selector);
          }
        }
      });
      view_default = BaseView;
    }
  });

  // node_modules/nanohtml/lib/raw-browser.js
  var require_raw_browser = __commonJS({
    "node_modules/nanohtml/lib/raw-browser.js"(exports, module) {
      "use strict";
      function nanohtmlRawBrowser(tag) {
        var el = document.createElement("div");
        el.innerHTML = tag;
        return toArray(el.childNodes);
      }
      function toArray(arr2) {
        return Array.isArray(arr2) ? arr2 : [].slice.call(arr2);
      }
      module.exports = nanohtmlRawBrowser;
    }
  });

  // shared/js/ui/templates/cta-rotation.js
  function ctaRotationView() {
    const cta = ctas[this.model.currentCta];
    if (!cta) {
      console.warn("unreachable - selected CTA not available " + this.model.currentCta);
      return "";
    }
    return import_nanohtml3.default`
        <div class="cta-screen">
            <p class="note token-title-3 text--center">${i18n.t("ctascreens:protectionsUnavailableNote.title")}</p>
            <div class="cta text--center">
                <div class="cta__icon">${cta.icon()}</div>
                <h1 class="cta__title">${cta.title()}</h1>
                <h2 class="cta__text">${cta.text()}</h2>
                <div class="cta__action">${cta.action()}</div>
            </div>
        </div>
    `;
  }
  function heartArrowSvg() {
    return import_raw.default`<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M78.5138 21L71.5098 28.003V34.003L78.5138 27V21Z" fill="#C0C0C0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M78.505 27.0034L71.51 33.9614H77.51L84.505 27.0034H78.505Z" fill="#C0C0C0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M66.339 42.0032L63.51 39.1742L76.684 26.0012L79.512 28.8302L66.339 42.0032Z" fill="#C0C0C0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M64.755 32.1171C58.769 31.3911 53.4 34.2001 50.505 38.6781C47.61 34.2001 42.241 31.3911 36.255 32.1171C29.715 32.9091 24.444 38.0531 23.619 44.4181C23.577 44.7471 23.546 45.0751 23.526 45.4001C23.293 49.2851 24.979 53.0491 27.799 55.8071L50.505 78.0031L73.211 55.8071C76.031 53.0491 77.717 49.2851 77.484 45.4001C77.464 45.0751 77.433 44.7471 77.391 44.4181C76.566 38.0531 71.295 32.9091 64.755 32.1171Z" fill="#DE5833"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.3909 44.4179C76.5659 38.0529 71.2949 32.9099 64.7549 32.1169C62.5109 31.8449 60.3539 32.0699 58.3809 32.6929C63.6639 34.3599 67.6819 38.9309 68.3929 44.4179C68.4359 44.7479 68.4669 45.0749 68.4869 45.3999C68.7189 49.2849 67.0349 53.0489 64.2129 55.8069L46.0059 73.6049L50.5049 78.0029L73.2109 55.8069C76.0319 53.0489 77.7169 49.2849 77.4839 45.3999C77.4639 45.0749 77.4329 44.7479 77.3909 44.4179Z" fill="#BC4726"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M31.51 66.0034L27.51 78.0034L39.51 74.0034L31.51 66.0034Z" fill="#C0C0C0"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M33.51 74.0034C32.998 74.0034 32.487 73.8084 32.096 73.4174C31.315 72.6364 31.315 71.3704 32.096 70.5894L44.096 58.5894C44.876 57.8084 46.144 57.8084 46.924 58.5894C47.705 59.3704 47.705 60.6364 46.924 61.4174L34.924 73.4174C34.534 73.8084 34.022 74.0034 33.51 74.0034Z" fill="#C0C0C0"/>
<path d="M86.4922 44L90.5052 41" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path d="M88.5049 52.5H94.5099" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path d="M14.5176 44L10.5046 41" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path d="M12.505 52.5H6.5" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path d="M86.4922 61.5L90.5052 64.5" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path d="M14.5176 61.5L10.5046 64.5" stroke="#AAAAAA" stroke-opacity="0.6" stroke-width="3" stroke-linecap="round"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M27.9544 15.0818C26.3303 14.4357 24.6178 14.8261 23.4753 15.8672C22.995 14.398 21.6978 13.2137 19.9664 12.9746C18.0748 12.7131 16.2171 13.7652 15.5153 15.4882C15.4792 15.5773 15.4462 15.6669 15.4166 15.7565C15.0641 16.8282 15.2583 18.0079 15.8448 18.9894L20.5677 26.8894L28.5729 22.3469C29.5672 21.7824 30.318 20.8521 30.54 19.7459C30.5584 19.6534 30.574 19.5591 30.5865 19.4638C30.8259 17.6188 29.7289 15.7873 27.9544 15.0818Z" fill="#E2E2E2"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.945 75.9298C76.9297 76.1112 76.1926 76.8398 75.9437 77.7173C75.2457 77.1301 74.2269 76.94 73.2844 77.3588C72.2546 77.8163 71.6506 78.9218 71.8348 80.004C71.8444 80.0599 71.8558 80.1151 71.8688 80.1693C72.0255 80.8163 72.49 81.3473 73.0894 81.6569L77.9155 84.1482L80.5157 79.3799C80.8385 78.7875 80.9255 78.0875 80.6926 77.4638C80.673 77.4117 80.6515 77.3596 80.6282 77.3079C80.1741 76.3084 79.0542 75.7314 77.945 75.9298Z" fill="#E2E2E2"/>
</svg>

`;
  }
  function emailSvg() {
    return import_raw.default`<svg width="76" height="78" viewBox="0 0 76 78" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_273_32068)">
<path d="M55.0125 26.7115C55.3701 26.3897 55.6204 25.9249 55.6204 25.3886V0.71875L41.4263 16.2L55.0125 26.7115Z" fill="#F9BE1A"/>
<path d="M14.147 0.71875V25.3886C14.147 25.9249 14.3972 26.3897 14.7548 26.7115L28.3411 16.2L14.147 0.71875Z" fill="#F9BE1A"/>
<path d="M40.9621 16.7361C40.2828 17.487 39.3175 17.8803 38.3164 17.8803H31.4517C30.4506 17.8803 29.4853 17.4512 28.806 16.7361L28.3412 16.2356L14.7549 26.7471C15.0767 27.0331 15.47 27.2119 15.9347 27.2119H53.8333C54.2981 27.2119 54.6914 27.0331 55.0132 26.7471L41.4269 16.2356L40.9621 16.7361Z" fill="#F9BE1A"/>
<path d="M55.6209 0.71875L41.4268 16.2L40.962 16.7363C40.2827 17.4871 39.3174 17.8804 38.3163 17.8804H31.4516C30.4505 17.8804 29.4852 17.4513 28.8059 16.7363L28.3411 16.2357L14.147 0.71875H55.6209Z" fill="#F9BE1A"/>
</g>
<g clip-path="url(#clip1_273_32068)">
<path d="M60.3304 38.5762C60.7824 38.1695 61.0987 37.5819 61.0987 36.9039V5.71753L43.1553 25.2881L60.3304 38.5762Z" fill="#FFCC33"/>
<path d="M8.66943 5.71753V36.9039C8.66943 37.5819 8.98582 38.1695 9.43779 38.5762L26.6129 25.2881L8.66943 5.71753Z" fill="#FFCC33"/>
<path d="M42.5679 25.966C41.7091 26.9152 40.4888 27.4123 39.2233 27.4123H30.5453C29.2798 27.4123 28.0594 26.87 27.2007 25.966L26.6131 25.3333L9.43799 38.6214C9.84477 38.983 10.3419 39.2089 10.9295 39.2089H58.839C59.4266 39.2089 59.9238 38.983 60.3306 38.6214L43.1555 25.3333L42.5679 25.966Z" fill="#FFCC33"/>
<path d="M61.0987 5.71753L43.1553 25.2881L42.5677 25.9661C41.7089 26.9152 40.4886 27.4124 39.2231 27.4124H30.5451C29.2796 27.4124 28.0592 26.87 27.2005 25.9661L26.6129 25.3333L8.66943 5.71753H61.0987Z" fill="#FFCC33"/>
</g>
<g clip-path="url(#clip2_273_32068)">
<path d="M63.5124 47.6839C64.0209 47.2263 64.3769 46.5652 64.3769 45.8025V10.7161L44.1895 32.7341L63.5124 47.6839Z" fill="#FDD20A"/>
<path d="M5.39062 10.7161V45.8025C5.39062 46.5652 5.74657 47.2263 6.25507 47.6839L25.578 32.7341L5.39062 10.7161Z" fill="#FDD20A"/>
<path d="M43.5283 33.4968C42.5622 34.5647 41.1892 35.124 39.7654 35.124H30.0023C28.5785 35.124 27.2055 34.5138 26.2394 33.4968L25.5783 32.7849L6.25537 47.7348C6.71302 48.1416 7.27237 48.3958 7.93342 48.3958H61.8343C62.4954 48.3958 63.0547 48.1416 63.5124 47.7348L44.1894 32.7849L43.5283 33.4968Z" fill="#F5B608"/>
<path d="M64.3765 10.7161L44.1891 32.7341L43.528 33.4968C42.5619 34.5647 41.189 35.124 39.7652 35.124H30.002C28.5782 35.124 27.2052 34.5138 26.2391 33.4968L25.578 32.7849L5.39062 10.7161H64.3765Z" fill="#FFDE7A"/>
</g>
<rect x="13.0835" y="47.7449" width="43.9126" height="4.87918" fill="#8CABFF"/>
<path d="M59.4354 37.9863L52.1166 52.6239H17.9624L10.6436 37.9863H0.885254V64.8218C0.885254 67.5165 3.06974 69.701 5.76443 69.701H64.3145C67.0092 69.701 69.1937 67.5165 69.1937 64.8218V37.9863H59.4354Z" fill="#668BFF"/>
<path d="M10.6436 37.9864H5.76443V23.3489H3.32484C1.97749 23.3489 0.885254 24.4411 0.885254 25.7885V40.426C0.885254 41.7733 1.97749 42.8656 3.32484 42.8656H13.0832L10.6436 37.9864Z" fill="#8CABFF"/>
<path d="M59.4357 37.9864H64.3149V23.3489H66.7544C68.1018 23.3489 69.194 24.4411 69.194 25.7885V40.426C69.194 41.7733 68.1018 42.8656 66.7544 42.8656H56.9961L59.4357 37.9864Z" fill="#8CABFF"/>
<path d="M59.1032 54.5231C60.7374 51.5626 64.9926 51.5626 66.6268 54.5231L74.8089 69.3457C76.3897 72.2095 74.3182 75.7191 71.047 75.7191H54.6829C51.4118 75.7191 49.3403 72.2095 50.9211 69.3457L59.1032 54.5231Z" fill="#FDD20A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M62.1235 58.5312C61.6767 58.5312 61.3209 58.9053 61.3433 59.3515L61.6558 65.6015C61.6765 66.0173 62.0197 66.3438 62.436 66.3438H63.2935C63.7098 66.3438 64.0529 66.0173 64.0737 65.6015L64.3862 59.3515C64.4085 58.9053 64.0528 58.5312 63.606 58.5312H62.1235ZM62.8647 71.0312C63.7277 71.0312 64.4272 70.3317 64.4272 69.4688C64.4272 68.6058 63.7277 67.9062 62.8647 67.9062C62.0018 67.9062 61.3022 68.6058 61.3022 69.4688C61.3022 70.3317 62.0018 71.0312 62.8647 71.0312Z" fill="black" fill-opacity="0.8"/>
<defs>
<clipPath id="clip0_273_32068">
<rect x="14.147" y="0.71875" width="41.4739" height="26.4932" rx="2.99924" fill="white"/>
</clipPath>
<clipPath id="clip1_273_32068">
<rect x="8.66943" y="5.71753" width="52.4293" height="33.4915" rx="2.99924" fill="white"/>
</clipPath>
<clipPath id="clip2_273_32068">
<rect x="5.39062" y="10.7161" width="58.9859" height="37.6798" rx="2.99924" fill="white"/>
</clipPath>
</defs>
</svg>
`;
  }
  var import_nanohtml3, import_raw, ctas, cta_rotation_default;
  var init_cta_rotation = __esm({
    "shared/js/ui/templates/cta-rotation.js"() {
      "use strict";
      import_nanohtml3 = __toESM(require_browser());
      import_raw = __toESM(require_raw_browser());
      init_localize();
      ctas = {
        spread: {
          title: () => i18n.t("ctascreens:spreadTitle.title"),
          text: () => i18n.t("ctascreens:spreadText.title"),
          icon: heartArrowSvg,
          action: () => {
            return import_nanohtml3.default`<a href="https://duckduckgo.com/spread" target="_blank" class="cta__button"
                >${i18n.t("ctascreens:spreadButton.title")}</a
            >`;
          }
        },
        email: {
          title: () => i18n.t("ctascreens:emailTitle.title"),
          text: () => i18n.t("ctascreens:emailText.title"),
          icon: emailSvg,
          action: () => {
            return import_nanohtml3.default`<a href="https://duckduckgo.com/email" target="_blank" class="cta__button"
                >${i18n.t("ctascreens:spreadButton.title")}</a
            >`;
          }
        }
      };
      cta_rotation_default = ctaRotationView;
    }
  });

  // shared/js/ui/models/cta-rotation.js
  function CtaRotationModel(attrs) {
    attrs = attrs || {};
    model_default.call(this, attrs);
    this._setup();
  }
  var import_jquery6, constants;
  var init_cta_rotation2 = __esm({
    "shared/js/ui/models/cta-rotation.js"() {
      "use strict";
      import_jquery6 = __toESM(require_jquery());
      init_model();
      init_cta_rotation();
      constants = {
        MODEL_NAME: "ctaRotation",
        CTA_SCREENS: Object.keys(ctas)
      };
      CtaRotationModel.prototype = import_jquery6.default.extend({}, model_default.prototype, {
        modelName: constants.MODEL_NAME,
        /**
         * Which CTA screen is going to be shown next.
         * @type {string}
         */
        currentCta: constants.CTA_SCREENS[0],
        /**
         * We need to do this to prevent showing the
         * email CTA to existing signed-in users
         * @this {any}
         */
        _setup: function() {
          if (this.emailProtectionUserData?.nextAlias) {
            this.currentCta = "spread";
          } else {
            this.setRandomCta();
          }
        },
        /**
         * If we decide all CTAs can be displayed, just choose a random one
         */
        setRandomCta: function() {
          const names = constants.CTA_SCREENS;
          const random = Math.floor(Math.random() * names.length);
          this.currentCta = names[random];
        }
      });
    }
  });

  // shared/data/constants.js
  var displayCategories, httpsMessages;
  var init_constants2 = __esm({
    "shared/data/constants.js"() {
      "use strict";
      displayCategories = {
        Analytics: "site:analyticsCategory.title",
        Advertising: "site:advertisingCategory.title",
        "Social Network": "site:socialCategory.title",
        "Content Delivery": "site:contentDeliveryCategory.title",
        "Embedded Content": "site:embeddedContentCategory.title"
      };
      httpsMessages = {
        secure: "site:connectionSecure.title",
        upgraded: "site:connectionSecure.title",
        none: "site:connectionNotSecure.title"
      };
    }
  });

  // shared/js/ui/templates/shared/links.js
  function aboutLink() {
    const text = ns.site("trackerAboutLink.title");
    return import_nanohtml4.default`<a
        class="about-link link-action link-action--text-short"
        href="https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/"
        target="_blank"
        >${text}</a
    >`;
  }
  function adAttributionLink() {
    const text = ns.site("trackerAdLink.title");
    return import_nanohtml4.default`<a
        class="link-action link-action--text-micro"
        href="https://help.duckduckgo.com/duckduckgo-help-pages/privacy/web-tracking-protections/#3rd-party-tracker-loading-protection"
        target="_blank"
        >${text}</a
    >`;
  }
  function disableInSettingsLink(cb) {
    const text = ns.site("cookiesMinimizedSettings.title");
    return import_nanohtml4.default`<a class="link-action link-action--text-micro" draggable="false" href="javascript:void(0)" onclick=${cb}>${text}</a>`;
  }
  var import_nanohtml4;
  var init_links = __esm({
    "shared/js/ui/templates/shared/links.js"() {
      "use strict";
      import_nanohtml4 = __toESM(require_browser());
      init_localize();
    }
  });

  // shared/js/ui/templates/shared/tracker-networks-text.js
  function trackerNetworksText(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn_blocked:
      case states.protectionsOn_blocked_allowedTrackers:
      case states.protectionsOn_blocked_allowedNonTrackers:
      case states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers: {
        return {
          title: ns.site("trackerNetworksDesc.title"),
          icon: "blocked"
        };
      }
      case states.protectionsOn_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers: {
        return {
          title: ns.site("trackerNetworksNotBlocked.title"),
          icon: "info"
        };
      }
      case states.protectionsOff_allowedTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers: {
        return {
          title: ns.site("trackerNetworksNotBlocked.title"),
          icon: "warning"
        };
      }
      case states.protectionsOn:
      case states.protectionsOff:
      case states.protectionsOn_allowedNonTrackers:
      case states.protectionsOff_allowedNonTrackers: {
        return {
          title: ns.site("trackerNetworksNotFound.title"),
          icon: "blocked"
        };
      }
      default:
        return unreachable(state);
    }
  }
  function trackerNetworkSummary(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn:
      case states.protectionsOff:
      case states.protectionsOn_allowedNonTrackers:
      case states.protectionsOff_allowedNonTrackers: {
        return ns.site("trackerNetworksSummaryNoneFound.title");
      }
      case states.protectionsOn_allowedTrackers:
      case states.protectionsOn_allowedTrackers_allowedNonTrackers: {
        return ns.site("trackerNetworksSummaryNoneBlocked.title");
      }
      case states.protectionsOff_allowedTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers:
        return ns.site("trackerNetworksSummaryProtectionsOff.title");
      default:
        return ns.site("trackerNetworksSummaryBlocked.title");
    }
  }
  function trackerNetworksHeroIcon(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn:
      case states.protectionsOff:
      case states.protectionsOff_allowedNonTrackers:
      case states.protectionsOn_allowedNonTrackers: {
        return "major-networks-no-activity";
      }
      case states.protectionsOn_allowedTrackers:
      case states.protectionsOn_allowedTrackers_allowedNonTrackers: {
        return "major-networks-info";
      }
      case states.protectionsOff_allowedTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers: {
        return "major-networks-warning";
      }
      case states.protectionsOn_blocked_allowedTrackers:
      case states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_blocked:
      case states.protectionsOn_blocked_allowedNonTrackers: {
        return "major-networks-blocked";
      }
      default:
        return unreachable(state);
    }
  }
  function unreachable(x2) {
    throw new Error("Didn't expect to get here with value" + x2);
  }
  var init_tracker_networks_text = __esm({
    "shared/js/ui/templates/shared/tracker-networks-text.js"() {
      "use strict";
      init_request_details();
      init_localize();
    }
  });

  // shared/js/ui/templates/shared/thirdparty-text.js
  function thirdpartyText(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn:
      case states.protectionsOn_blocked:
      case states.protectionsOff: {
        return {
          title: ns.site("thirdPartiesNoneFound.title"),
          icon: "blocked"
        };
      }
      case states.protectionsOn_allowedTrackers:
      case states.protectionsOn_allowedNonTrackers:
      case states.protectionsOn_blocked_allowedTrackers:
      case states.protectionsOn_blocked_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers:
      case states.protectionsOff_allowedNonTrackers:
      case states.protectionsOff_allowedTrackers: {
        return {
          title: ns.site("thirdPartiesLoaded.title"),
          icon: "info"
        };
      }
      default:
        return unreachable2(state);
    }
  }
  function thirdpartySummary(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn_blocked_allowedTrackers:
      case states.protectionsOn_blocked_allowedNonTrackers:
      case states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers:
      case states.protectionsOff_allowedTrackers:
      case states.protectionsOn_allowedNonTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers:
      case states.protectionsOff_allowedNonTrackers: {
        return ns.site("thirdPartiesSummaryProtectionsOff.title");
      }
      case states.protectionsOn:
      case states.protectionsOff:
      case states.protectionsOn_blocked: {
        return ns.site("thirdPartiesSummaryNone.title");
      }
      default:
        return unreachable2(state);
    }
  }
  function thirdpartyHeroIcon(requestDetails, protectionsEnabled) {
    const state = requestDetails.state(protectionsEnabled);
    switch (state) {
      case states.protectionsOn:
      case states.protectionsOn_blocked:
      case states.protectionsOff: {
        return "major-networks-no-activity";
      }
      case states.protectionsOn_blocked_allowedTrackers:
      case states.protectionsOn_blocked_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers:
      case states.protectionsOn_allowedNonTrackers:
      case states.protectionsOff_allowedNonTrackers:
      case states.protectionsOff_allowedTrackers:
      case states.protectionsOn_blocked_allowedNonTrackers:
      case states.protectionsOff_allowedTrackers_allowedNonTrackers:
      case states.protectionsOn_allowedTrackers_allowedNonTrackers: {
        return "major-networks-info";
      }
      default:
        return unreachable2(state);
    }
  }
  function unreachable2(x2) {
    throw new Error("Didn't expect to get here with value " + x2);
  }
  var init_thirdparty_text = __esm({
    "shared/js/ui/templates/shared/thirdparty-text.js"() {
      "use strict";
      init_request_details();
      init_localize();
    }
  });

  // shared/js/ui/templates/shared/hero.js
  function heroTemplate(opts) {
    return import_nanohtml5.default`
        <div class="key-insight" data-suffix=${opts.suffix}>
            ${opts.icon} ${opts.summary ? import_nanohtml5.default`<p class="token-title-3">${opts.summary}</p>` : null}
            ${opts.suffix === "about-link" ? aboutLink() : null} ${opts.children ? opts.children : null}
        </div>
    `;
  }
  function heroFromTabTrackers(requestDetails, protectionsEnabled) {
    const summary = trackerNetworkSummary(requestDetails, protectionsEnabled);
    const icon = trackerNetworksHeroIcon(requestDetails, protectionsEnabled);
    const largeIcon = largeHeroIcon({
      status: icon
    });
    return heroTemplate({
      suffix: "about-link",
      icon: largeIcon,
      summary
    });
  }
  function heroFromTabNonTrackers(requestDetails, protectionsEnabled) {
    const summary = thirdpartySummary(requestDetails, protectionsEnabled);
    const icon = thirdpartyHeroIcon(requestDetails, protectionsEnabled);
    const largeIcon = largeHeroIcon({
      status: icon
    });
    return heroTemplate({
      suffix: "about-link",
      icon: largeIcon,
      summary
    });
  }
  function largeHeroIcon(ops) {
    return import_nanohtml5.default`<div class="large-icon-container hero-icon--${ops.status}"></div>`;
  }
  var import_nanohtml5;
  var init_hero = __esm({
    "shared/js/ui/templates/shared/hero.js"() {
      "use strict";
      import_nanohtml5 = __toESM(require_browser());
      init_links();
      init_tracker_networks_text();
      init_thirdparty_text();
    }
  });

  // shared/js/ui/templates/shared/utils.js
  function getColorId(value) {
    const characters = value.toLowerCase().split("");
    const sum = characters.reduce((total, character) => total + character.charCodeAt(0) - offset, 0);
    return Math.abs(sum % colorCount + 1);
  }
  var offset, colorCount;
  var init_utils3 = __esm({
    "shared/js/ui/templates/shared/utils.js"() {
      "use strict";
      offset = "a".charCodeAt(0);
      colorCount = 16;
    }
  });

  // shared/js/ui/templates/shared/platform-limitations.js
  function platformLimitations() {
    return import_nanohtml6.default`<p class="platform-limitations border--top--inner">${ns.site("trackerLimitationsNote.title")}</p>`;
  }
  var import_nanohtml6;
  var init_platform_limitations = __esm({
    "shared/js/ui/templates/shared/platform-limitations.js"() {
      "use strict";
      import_nanohtml6 = __toESM(require_browser());
      init_localize();
    }
  });

  // shared/js/ui/templates/shared/top-nav.js
  function topNav(opts = {}) {
    const { view = "primary" } = opts;
    let elements;
    if (view === "primary") {
      elements = platformSwitch({
        ios: () => [close()],
        android: () => [back()],
        default: () => []
      });
    } else {
      elements = platformSwitch({
        ios: () => [back(), close()],
        default: () => [back()]
      });
    }
    if (!elements.length)
      return null;
    return import_nanohtml7.default`
        <div>
            <div class="top-nav">${elements}</div>
            <div class="top-nav__spacer"></div>
        </div>
    `;
  }
  function back() {
    const textLabel = ns.site("navigationBack.title");
    return import_nanohtml7.default` <a
        href="javascript:void(0)"
        class="top-nav__back js-sliding-subview-close js-site-done link-action link-action--dark"
        role="button"
        aria-label="${textLabel}"
    >
        <span class="icon icon__back-arrow" data-icon-text="${textLabel}"></span>
    </a>`;
  }
  function close() {
    const textLabel = ns.site("navigationComplete.title");
    return import_nanohtml7.default` <a
        href="javascript:void(0)"
        class="top-nav__done js-sliding-subview-done js-site-done link-action link-action--dark"
        role="button"
    >
        ${textLabel}
    </a>`;
  }
  var import_nanohtml7;
  var init_top_nav = __esm({
    "shared/js/ui/templates/shared/top-nav.js"() {
      "use strict";
      import_nanohtml7 = __toESM(require_browser());
      init_environment_check();
      init_localize();
    }
  });

  // shared/js/ui/templates/page-trackers.js
  function trackerNetworksTemplate() {
    if (!this.model) {
      return import_nanohtml8.default`<section class="sliding-subview"></section>`;
    }
    const sections = sectionsFromSiteTrackers(this.model.site);
    const hero = heroFromTabTrackers(this.model.site.tab.requestDetails, this.model.site.protectionsEnabled);
    const limitations = this.model.site.tab.platformLimitations ? import_nanohtml8.default`<div class="padding-x-double">${platformLimitations()}</div>` : import_nanohtml8.default`<div></div>`;
    return import_nanohtml8.default` <div class="site-info card page-inner" data-page="trackers">
        ${topNav({ view: "secondary" })}
        <div class="padding-x-double js-tracker-networks-hero">${hero}</div>
        <div class="padding-x-double js-tracker-networks-details" aria-label="List of Tracker Companies">${sections}</div>
        ${limitations}
    </div>`;
  }
  function trackerListWrapper(name, heading, companiesList, bordered) {
    return import_nanohtml8.default`
        <ol class="default-list site-info__trackers__company-list ${bordered ? "border--top" : ""}" aria-label="List of tracker networks">
            ${heading ? import_nanohtml8.default`<li class="section-list-header" data-section-name=${name}>${heading}</li>` : import_nanohtml8.default``} ${companiesList}
        </ol>
    `;
  }
  function renderCompany(company) {
    if (company.displayName && company.displayName === "unknown") {
      company.displayName = `(${i18n.t("site:trackerNetworkUnknown.title")})`;
    }
    const slug = company.normalizedName;
    const title = company.name || company.displayName;
    const titleClasses = [
      "site-info__tracker__icon",
      "site-info__tracker__icon--company",
      slug[0].toUpperCase(),
      "color-" + getColorId(slug),
      slug
    ];
    const listLabel = i18n.t("site:trackerDomainsForCompany.title", {
      companyName: company.displayName
    });
    return import_nanohtml8.default`<li class="site-info__trackers__company-list-item">
        <p title=${title} class="site-info__domain block token-title-3-em">
            <span class=${titleClasses.join(" ")}></span>
            ${company.displayName}
        </p>
        <ol class="default-list site-info__trackers__company-list__url-list" aria-label=${listLabel}>
            ${Object.keys(company.urls).map((urlHostname) => {
      const url = company.urls[urlHostname];
      const matched = displayCategories[url.category];
      return import_nanohtml8.default` <li class="url-list-item">
                    <p class="url" title=${urlHostname}>${urlHostname}</p>
                    ${matched ? import_nanohtml8.default`<div class="category">${i18n.t(matched)}</div>` : ""}
                </li>`;
    })}
        </ol>
    </li>`;
  }
  function renderSections(sections) {
    const output2 = sections.filter((section) => section.companies.length > 0).map((section) => {
      const companiesList = section.companies.map((company) => renderCompany(company));
      const sectionHeading = section.heading();
      return trackerListWrapper(section.name, sectionHeading, companiesList, section.bordered);
    });
    return output2;
  }
  function sectionsFromSiteTrackers(site2) {
    const { blocked } = site2.tab.requestDetails;
    const sections = renderSections([
      {
        name: "blocked",
        heading: () => null,
        companies: blocked.sortedByPrevalence(),
        bordered: true
      }
    ]);
    return sections;
  }
  var import_nanohtml8;
  var init_page_trackers = __esm({
    "shared/js/ui/templates/page-trackers.js"() {
      "use strict";
      import_nanohtml8 = __toESM(require_browser());
      init_constants2();
      init_localize();
      init_hero();
      init_utils3();
      init_platform_limitations();
      init_top_nav();
    }
  });

  // shared/js/ui/templates/page-non-trackers.js
  function nonTrackersTemplate() {
    if (!this.model) {
      return import_nanohtml9.default`<section class="sliding-subview"></section>`;
    }
    const sections = sectionsFromSiteNonTracker(this.model.site);
    const hero = heroFromTabNonTrackers(this.model.site.tab.requestDetails, this.model.site.protectionsEnabled);
    const limitations = this.model.site.tab.platformLimitations ? import_nanohtml9.default`<div class="padding-x-double">${platformLimitations()}</div>` : import_nanohtml9.default`<div></div>`;
    return import_nanohtml9.default` <div class="site-info card page-inner" data-page="non-trackers">
        ${topNav({ view: "secondary" })}
        <div class="padding-x-double js-tracker-networks-hero">${hero}</div>
        <div class="padding-x-double js-tracker-networks-details">${sections}</div>
        ${limitations}
    </div>`;
  }
  function sectionsFromSiteNonTracker(site2) {
    const requestDetails = site2.tab.requestDetails;
    const onlyAllowedNonTrackers = requestDetails.matches(site2.protectionsEnabled, [
      states.protectionsOn_allowedNonTrackers,
      states.protectionsOff_allowedNonTrackers,
      states.protectionsOn_blocked_allowedNonTrackers
    ]);
    if (!site2.protectionsEnabled) {
      return renderSections([
        {
          name: "protectionsDisabled",
          heading: () => ns.site("sectionHeadingProtectionsDisabled.title"),
          companies: requestDetails.all.sortedByPrevalence(),
          bordered: false
        }
      ]);
    }
    return renderSections([
      {
        name: "adAttribution",
        heading: () => import_nanohtml9.default`
                <div>
                    <p>${ns.site("sectionHeadingAdAttribution.title", { domain: site2.tab.domain })}</p>
                    ${adAttributionLink()}
                </div>
            `,
        companies: requestDetails.allowed.adClickAttribution.sortedByPrevalence()
      },
      {
        name: "ignored (rule exceptions)",
        heading: () => ns.site("sectionHeadingIgnore.title"),
        companies: requestDetails.allowed.ruleException.sortedByPrevalence()
      },
      {
        name: "firstParty",
        heading: () => ns.site("sectionHeadingFirstParty.title", { domain: site2.tab.domain }),
        companies: requestDetails.allowed.ownedByFirstParty.sortedByPrevalence()
      },
      {
        name: "thirdParty",
        heading: () => {
          if (onlyAllowedNonTrackers) {
            return null;
          }
          return ns.site("sectionHeadingThirdParty.title");
        },
        companies: requestDetails.allowed.otherThirdPartyRequest.sortedByPrevalence(),
        bordered: onlyAllowedNonTrackers
      }
    ]);
  }
  var import_nanohtml9;
  var init_page_non_trackers = __esm({
    "shared/js/ui/templates/page-non-trackers.js"() {
      "use strict";
      import_nanohtml9 = __toESM(require_browser());
      init_localize();
      init_request_details();
      init_hero();
      init_page_trackers();
      init_links();
      init_platform_limitations();
      init_top_nav();
    }
  });

  // shared/js/ui/templates/key-insights.js
  function KeyInsightView(ops) {
    this.model = ops.model;
    this.store = ops.store;
    this.template = renderKeyInsight;
    view_default.call(this, ops);
    this._setup();
  }
  function renderKeyInsight() {
    const model = this.model;
    const title = (text) => import_nanohtml10.default`<h1 class="token-title-3-em">${text}</h1>`;
    const description = (text) => import_nanohtml10.default`<div class="token-title-3"><span role="text">${text}</span></div>`;
    const state = (() => {
      if (model.httpsState === "none")
        return keyInsightsState.insecure;
      if (model.isBroken)
        return keyInsightsState.broken;
      if (!model.protectionsEnabled)
        return keyInsightsState.userAllowListed;
      if (model.isaMajorTrackingNetwork && model.tab.parentEntity)
        return keyInsightsState.majorTrackingNetwork;
      if (model.tab.requestDetails.blocked.requestCount === 0) {
        if (model.tab.requestDetails.allowedSpecialCount() > 0) {
          return keyInsightsState.noneBlocked_someSpecialAllowed;
        }
        return keyInsightsState.noneBlocked;
      }
      const companyNames = model.tab.requestDetails.blockedCompanyNames();
      if (companyNames.length === 0)
        return keyInsightsState.emptyCompaniesList;
      return keyInsightsState.blocked;
    })();
    return {
      insecure: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--insecure-connection"></div>
                    ${title(model.tab.domain)} ${description((0, import_raw2.default)(i18n.t("site:connectionDescriptionUnencrypted.title")))}
                </div>
            `;
      },
      broken: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--protections-off"></div>
                    ${title(model.tab.domain)} 
                </div>
            `;
      },
      userAllowListed: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--protections-off"></div>
                    ${title(model.tab.domain)} ${description((0, import_raw2.default)(i18n.t("site:protectionsDisabled.title")))}
                </div>
            `;
      },
      majorTrackingNetwork: () => {
        const company = model.tab.parentEntity;
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--tracker-network"></div>
                    ${title(model.tab.domain)}
                    ${description(
          (0, import_raw2.default)(
            i18n.t("site:majorTrackingNetworkDesc.title", {
              companyDisplayName: company?.displayName,
              companyPrevalence: Math.round(company?.prevalence ?? 0),
              blocked: model.tab.requestDetails.blocked.entitiesCount > 0
            })
          )
        )}
                </div>
            `;
      },
      noneBlocked_someSpecialAllowed: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--info"></div>
                    ${title(model.tab.domain)} ${description(i18n.t("site:trackerNetworksSummaryAllowedOnly.title"))}
                </div>
            `;
      },
      noneBlocked: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--no-activity"></div>
                    ${title(model.tab.domain)} ${description((0, import_raw2.default)(i18n.t("site:trackerNetworksSummaryNone.title")))}
                </div>
            `;
      },
      emptyCompaniesList: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    <div class="key-insight__icon hero-icon--trackers-blocked"></div>
                    ${title(model.tab.domain)}
                    ${description((0, import_raw2.default)(i18n.t("site:trackersBlockedDesc.title", generateCompanyNamesList(model))))}
                </div>
            `;
      },
      blocked: () => {
        return import_nanohtml10.default`
                <div class="key-insight key-insight--main">
                    ${renderCompanyIconsList(model)} ${title(model.tab.domain)}
                    ${description((0, import_raw2.default)(i18n.t("site:trackersBlockedDesc.title", generateCompanyNamesList(model))))}
                </div>
            `;
      }
    }[state]();
  }
  function generateCompanyNamesList(model) {
    const blockedCompanyNames = model.tab.requestDetails.blockedCompanyNames();
    return {
      companyCount: blockedCompanyNames.length,
      othersCount: blockedCompanyNames.length - 4,
      firstCompany: blockedCompanyNames[0],
      secondCompany: blockedCompanyNames[1],
      thirdCompany: blockedCompanyNames[2],
      fourthCompany: blockedCompanyNames[3]
    };
  }
  function renderCompanyIconsList(model) {
    const companyNames = model.tab.requestDetails.blockedCompanyNames();
    if (companyNames.length === 0)
      return "";
    const topCompanies = companyNames.slice(0, 4);
    const remainingCount = companyNames.length - topCompanies.length;
    const items = ["large", "medium", "medium", "small", "small"];
    const positions = {
      1: [1],
      2: [2, 1],
      3: [2, 1, 3],
      4: [3, 2, 4, 1],
      5: [3, 2, 4, 1, 5]
    };
    const processed = topCompanies.map((name, index) => {
      const slug = normalizeCompanyName(name);
      return {
        kind: "icon",
        slug,
        colorId: getColorId(slug),
        letter: slug[0].toUpperCase(),
        size: items[index]
      };
    });
    if (remainingCount > 0) {
      processed.push({
        kind: "more",
        count: remainingCount,
        size: items[4]
      });
    }
    const positionMap = positions[processed.length];
    const list = processed.map((item, index) => {
      if (item.kind === "icon") {
        return import_nanohtml10.default`
                <span class="icon-list__item" style="order: ${positionMap[index]}" data-company-icon-position=${positionMap[index]}>
                    <span class="icon-list__wrapper" data-company-icon-size=${item.size}>
                        <span class="icon-list__icon ${item.letter} color-${item.colorId} ${item.slug}"></span>
                        <span class="icon-list__blocked-icon"> ${blockSvg()} </span>
                    </span>
                </span>
            `;
      }
      return import_nanohtml10.default`
            <span class='icon-list__item' style='order: ${positionMap[index]}' data-company-icon-position='${positionMap[index]}'>
                <span class='icon-list__wrapper icon-list__wrapper--count' 
                    data-company-icon-size='${item.size}'>
                    <span class='icon-list__count'>+${item.count}</span>
                </span>
            </div>`;
    });
    return import_nanohtml10.default`
        <div class="key-insight__icon icon-list" data-company-count="${processed.length}" aria-label="List of Blocked Company Icons">
            ${list}
        </div>
    `;
  }
  function blockSvg() {
    return import_nanohtml10.default`
        <svg viewBox="0 0 32 32" fill="none">
            <circle fill="white" cx="16" cy="16" r="15" />
            <path
                fill="#EE1025"
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M28 16C28 22.6274 22.6274 28 16 28C9.37258 28 4 22.6274 4 16C4 9.37258 9.37258 4 16 4C22.6274 4 28 9.37258 28 16ZM24 16C24 20.4183 20.4183 24 16 24C14.5164 24 13.1271 23.5961 11.9361 22.8924L22.8924 11.9361C23.5961 13.1271 24 14.5164 24 16ZM9.10763 20.0639L20.0639 9.10763C18.8729 8.40386 17.4836 8 16 8C11.5817 8 8 11.5817 8 16C8 17.4836 8.40386 18.8729 9.10763 20.0639Z"
            />
        </svg>
    `;
  }
  var import_nanohtml10, import_raw2, import_jquery7, keyInsightsState;
  var init_key_insights = __esm({
    "shared/js/ui/templates/key-insights.js"() {
      "use strict";
      import_nanohtml10 = __toESM(require_browser());
      import_raw2 = __toESM(require_raw_browser());
      import_jquery7 = __toESM(require_jquery());
      init_localize();
      init_normalize_company_name();
      init_view();
      init_utils3();
      KeyInsightView.prototype = import_jquery7.default.extend({}, view_default.prototype, {
        /**
         * @this {KeyInsightView & Parent}
         * @private
         */
        _setup: function() {
          this.bindEvents([[this.store.subscribe, "change:site", this._rerender]]);
        },
        rerender() {
          this._rerender();
        }
      });
      keyInsightsState = /** @type {const} */
      {
        /* 01 */
        insecure: "insecure",
        /* 02 */
        broken: "broken",
        /* 03 */
        userAllowListed: "userAllowListed",
        /* 04 */
        majorTrackingNetwork: "majorTrackingNetwork",
        /* 05 */
        noneBlocked_someSpecialAllowed: "noneBlocked_someSpecialAllowed",
        /* 06 */
        noneBlocked: "noneBlocked",
        /* 07 */
        emptyCompaniesList: "emptyCompaniesList",
        /* 08 */
        blocked: "blocked"
      };
    }
  });

  // shared/js/ui/models/breakage-form.js
  function BreakageFormModel(attrs) {
    attrs = attrs || {};
    model_default.call(this, attrs);
  }
  var import_jquery8;
  var init_breakage_form = __esm({
    "shared/js/ui/models/breakage-form.js"() {
      "use strict";
      import_jquery8 = __toESM(require_jquery());
      init_model();
      init_common();
      BreakageFormModel.prototype = import_jquery8.default.extend({}, model_default.prototype, {
        modelName: "breakageForm",
        /** @this {import('./site.js').LocalThis} */
        submitBreakageForm: function(category, description) {
          try {
            this.fetch(
              new SubmitBrokenSiteReportMessage({
                category,
                description
              })
            );
          } catch (e3) {
            console.error("submitBreakageForm error", e3);
          }
        }
      });
    }
  });

  // shared/js/ui/platform-features.mjs
  function createPlatformFeatures(platform2) {
    const desktop = ["windows", "macos", "browser"];
    return new PlatformFeatures({
      spinnerFollowingProtectionsToggle: platform2.name !== "android" && platform2.name !== "windows",
      supportsHover: desktop.includes(platform2.name)
    });
  }
  var PlatformFeatures, FeatureSettings;
  var init_platform_features = __esm({
    "shared/js/ui/platform-features.mjs"() {
      "use strict";
      PlatformFeatures = class {
        /**
         * @param {object} params
         * @param {boolean} params.spinnerFollowingProtectionsToggle
         * @param {boolean} params.supportsHover
         */
        constructor(params) {
          this.spinnerFollowingProtectionsToggle = params.spinnerFollowingProtectionsToggle;
          this.supportsHover = params.supportsHover;
        }
      };
      FeatureSettings = class _FeatureSettings {
        /**
         * @param {object} params
         * @param {import("../../../schema/__generated__/schema.types").PrimaryScreen} [params.primaryScreen]
         */
        constructor(params) {
          this.primaryScreen = params.primaryScreen || { layout: "default" };
        }
        /**
         *
         */
        static default() {
          return new _FeatureSettings({});
        }
      };
    }
  });

  // shared/js/ui/models/cookie-prompt.js
  function CookiePromptModel(attrs) {
    this.isCosmetic = attrs.isCosmetic;
    model_default.call(this, attrs);
  }
  var import_jquery9;
  var init_cookie_prompt = __esm({
    "shared/js/ui/models/cookie-prompt.js"() {
      "use strict";
      import_jquery9 = __toESM(require_jquery());
      init_model();
      init_common();
      CookiePromptModel.prototype = import_jquery9.default.extend({}, model_default.prototype, {
        modelName: "cookiePrompt",
        openSettings: function(_category) {
          this.fetch(
            new OpenSettingsMessages({
              target: "cpm"
            })
          );
        }
      });
    }
  });

  // node_modules/preact/dist/preact.module.js
  function h(n2, l3) {
    for (var u3 in l3)
      n2[u3] = l3[u3];
    return n2;
  }
  function p(n2) {
    var l3 = n2.parentNode;
    l3 && l3.removeChild(n2);
  }
  function y(l3, u3, t4) {
    var i3, o3, r3, f3 = {};
    for (r3 in u3)
      "key" == r3 ? i3 = u3[r3] : "ref" == r3 ? o3 = u3[r3] : f3[r3] = u3[r3];
    if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : t4), "function" == typeof l3 && null != l3.defaultProps)
      for (r3 in l3.defaultProps)
        void 0 === f3[r3] && (f3[r3] = l3.defaultProps[r3]);
    return d(l3, f3, i3, o3, null);
  }
  function d(n2, t4, i3, o3, r3) {
    var f3 = { type: n2, props: t4, key: i3, ref: o3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: null == r3 ? ++u : r3 };
    return null == r3 && null != l.vnode && l.vnode(f3), f3;
  }
  function k(n2) {
    return n2.children;
  }
  function b(n2, l3) {
    this.props = n2, this.context = l3;
  }
  function g(n2, l3) {
    if (null == l3)
      return n2.__ ? g(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
    for (var u3; l3 < n2.__k.length; l3++)
      if (null != (u3 = n2.__k[l3]) && null != u3.__e)
        return u3.__d || u3.__e;
    return "function" == typeof n2.type ? g(n2) : null;
  }
  function m(n2) {
    var l3, u3;
    if (null != (n2 = n2.__) && null != n2.__c) {
      for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++)
        if (null != (u3 = n2.__k[l3]) && null != u3.__e) {
          n2.__e = n2.__c.base = u3.__e;
          break;
        }
      return m(n2);
    }
  }
  function w(n2) {
    (!n2.__d && (n2.__d = true) && i.push(n2) && !x.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(x);
  }
  function x() {
    var n2, l3, u3, t4, o3, r3, e3, c3, s3;
    for (i.sort(f); n2 = i.shift(); )
      n2.__d && (l3 = i.length, t4 = void 0, o3 = void 0, r3 = void 0, c3 = (e3 = (u3 = n2).__v).__e, (s3 = u3.__P) && (t4 = [], o3 = [], (r3 = h({}, e3)).__v = e3.__v + 1, z(s3, e3, r3, u3.__n, void 0 !== s3.ownerSVGElement, null != e3.__h ? [c3] : null, t4, null == c3 ? g(e3) : c3, e3.__h, o3), L(t4, e3, o3), e3.__e != c3 && m(e3)), i.length > l3 && i.sort(f));
    x.__r = 0;
  }
  function P(n2, l3, u3, t4, i3, o3, r3, f3, e3, a3, h3) {
    var p3, y3, _24, b3, m3, w3, x2, P2, C, D2 = 0, H2 = t4 && t4.__k || s, I2 = H2.length, T2 = I2, j3 = l3.length;
    for (u3.__k = [], p3 = 0; p3 < j3; p3++)
      null != (b3 = u3.__k[p3] = null == (b3 = l3[p3]) || "boolean" == typeof b3 || "function" == typeof b3 ? null : "string" == typeof b3 || "number" == typeof b3 || "bigint" == typeof b3 ? d(null, b3, null, null, b3) : v(b3) ? d(k, { children: b3 }, null, null, null) : b3.__b > 0 ? d(b3.type, b3.props, b3.key, b3.ref ? b3.ref : null, b3.__v) : b3) ? (b3.__ = u3, b3.__b = u3.__b + 1, -1 === (P2 = A(b3, H2, x2 = p3 + D2, T2)) ? _24 = c : (_24 = H2[P2] || c, H2[P2] = void 0, T2--), z(n2, b3, _24, i3, o3, r3, f3, e3, a3, h3), m3 = b3.__e, (y3 = b3.ref) && _24.ref != y3 && (_24.ref && N(_24.ref, null, b3), h3.push(y3, b3.__c || m3, b3)), null != m3 && (null == w3 && (w3 = m3), (C = _24 === c || null === _24.__v) ? -1 == P2 && D2-- : P2 !== x2 && (P2 === x2 + 1 ? D2++ : P2 > x2 ? T2 > j3 - x2 ? D2 += P2 - x2 : D2-- : D2 = P2 < x2 && P2 == x2 - 1 ? P2 - x2 : 0), x2 = p3 + D2, "function" != typeof b3.type || P2 === x2 && _24.__k !== b3.__k ? "function" == typeof b3.type || P2 === x2 && !C ? void 0 !== b3.__d ? (e3 = b3.__d, b3.__d = void 0) : e3 = m3.nextSibling : e3 = S(n2, m3, e3) : e3 = $10(b3, e3, n2), "function" == typeof u3.type && (u3.__d = e3))) : (_24 = H2[p3]) && null == _24.key && _24.__e && (_24.__e == e3 && (_24.__ = t4, e3 = g(_24)), O(_24, _24, false), H2[p3] = null);
    for (u3.__e = w3, p3 = I2; p3--; )
      null != H2[p3] && ("function" == typeof u3.type && null != H2[p3].__e && H2[p3].__e == u3.__d && (u3.__d = H2[p3].__e.nextSibling), O(H2[p3], H2[p3]));
  }
  function $10(n2, l3, u3) {
    for (var t4, i3 = n2.__k, o3 = 0; i3 && o3 < i3.length; o3++)
      (t4 = i3[o3]) && (t4.__ = n2, l3 = "function" == typeof t4.type ? $10(t4, l3, u3) : S(u3, t4.__e, l3));
    return l3;
  }
  function S(n2, l3, u3) {
    return null == u3 || u3.parentNode !== n2 ? n2.insertBefore(l3, null) : l3 == u3 && null != l3.parentNode || n2.insertBefore(l3, u3), l3.nextSibling;
  }
  function A(n2, l3, u3, t4) {
    var i3 = n2.key, o3 = n2.type, r3 = u3 - 1, f3 = u3 + 1, e3 = l3[u3];
    if (null === e3 || e3 && i3 == e3.key && o3 === e3.type)
      return u3;
    if (t4 > (null != e3 ? 1 : 0))
      for (; r3 >= 0 || f3 < l3.length; ) {
        if (r3 >= 0) {
          if ((e3 = l3[r3]) && i3 == e3.key && o3 === e3.type)
            return r3;
          r3--;
        }
        if (f3 < l3.length) {
          if ((e3 = l3[f3]) && i3 == e3.key && o3 === e3.type)
            return f3;
          f3++;
        }
      }
    return -1;
  }
  function D(n2, l3, u3, t4, i3) {
    var o3;
    for (o3 in u3)
      "children" === o3 || "key" === o3 || o3 in l3 || I(n2, o3, null, u3[o3], t4);
    for (o3 in l3)
      i3 && "function" != typeof l3[o3] || "children" === o3 || "key" === o3 || "value" === o3 || "checked" === o3 || u3[o3] === l3[o3] || I(n2, o3, l3[o3], u3[o3], t4);
  }
  function H(n2, l3, u3) {
    "-" === l3[0] ? n2.setProperty(l3, null == u3 ? "" : u3) : n2[l3] = null == u3 ? "" : "number" != typeof u3 || a.test(l3) ? u3 : u3 + "px";
  }
  function I(n2, l3, u3, t4, i3) {
    var o3;
    n:
      if ("style" === l3)
        if ("string" == typeof u3)
          n2.style.cssText = u3;
        else {
          if ("string" == typeof t4 && (n2.style.cssText = t4 = ""), t4)
            for (l3 in t4)
              u3 && l3 in u3 || H(n2.style, l3, "");
          if (u3)
            for (l3 in u3)
              t4 && u3[l3] === t4[l3] || H(n2.style, l3, u3[l3]);
        }
      else if ("o" === l3[0] && "n" === l3[1])
        o3 = l3 !== (l3 = l3.replace(/(PointerCapture)$|Capture$/, "$1")), l3 = l3.toLowerCase() in n2 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + o3] = u3, u3 ? t4 ? u3.u = t4.u : (u3.u = Date.now(), n2.addEventListener(l3, o3 ? j : T, o3)) : n2.removeEventListener(l3, o3 ? j : T, o3);
      else if ("dangerouslySetInnerHTML" !== l3) {
        if (i3)
          l3 = l3.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" !== l3 && "height" !== l3 && "href" !== l3 && "list" !== l3 && "form" !== l3 && "tabIndex" !== l3 && "download" !== l3 && "rowSpan" !== l3 && "colSpan" !== l3 && "role" !== l3 && l3 in n2)
          try {
            n2[l3] = null == u3 ? "" : u3;
            break n;
          } catch (n3) {
          }
        "function" == typeof u3 || (null == u3 || false === u3 && "-" !== l3[4] ? n2.removeAttribute(l3) : n2.setAttribute(l3, u3));
      }
  }
  function T(n2) {
    var u3 = this.l[n2.type + false];
    if (n2.t) {
      if (n2.t <= u3.u)
        return;
    } else
      n2.t = Date.now();
    return u3(l.event ? l.event(n2) : n2);
  }
  function j(n2) {
    return this.l[n2.type + true](l.event ? l.event(n2) : n2);
  }
  function z(n2, u3, t4, i3, o3, r3, f3, e3, c3, s3) {
    var a3, p3, y3, d3, _24, g3, m3, w3, x2, $25, C, S2, A2, D2, H2, I2 = u3.type;
    if (void 0 !== u3.constructor)
      return null;
    null != t4.__h && (c3 = t4.__h, e3 = u3.__e = t4.__e, u3.__h = null, r3 = [e3]), (a3 = l.__b) && a3(u3);
    n:
      if ("function" == typeof I2)
        try {
          if (w3 = u3.props, x2 = (a3 = I2.contextType) && i3[a3.__c], $25 = a3 ? x2 ? x2.props.value : a3.__ : i3, t4.__c ? m3 = (p3 = u3.__c = t4.__c).__ = p3.__E : ("prototype" in I2 && I2.prototype.render ? u3.__c = p3 = new I2(w3, $25) : (u3.__c = p3 = new b(w3, $25), p3.constructor = I2, p3.render = q), x2 && x2.sub(p3), p3.props = w3, p3.state || (p3.state = {}), p3.context = $25, p3.__n = i3, y3 = p3.__d = true, p3.__h = [], p3._sb = []), null == p3.__s && (p3.__s = p3.state), null != I2.getDerivedStateFromProps && (p3.__s == p3.state && (p3.__s = h({}, p3.__s)), h(p3.__s, I2.getDerivedStateFromProps(w3, p3.__s))), d3 = p3.props, _24 = p3.state, p3.__v = u3, y3)
            null == I2.getDerivedStateFromProps && null != p3.componentWillMount && p3.componentWillMount(), null != p3.componentDidMount && p3.__h.push(p3.componentDidMount);
          else {
            if (null == I2.getDerivedStateFromProps && w3 !== d3 && null != p3.componentWillReceiveProps && p3.componentWillReceiveProps(w3, $25), !p3.__e && (null != p3.shouldComponentUpdate && false === p3.shouldComponentUpdate(w3, p3.__s, $25) || u3.__v === t4.__v)) {
              for (u3.__v !== t4.__v && (p3.props = w3, p3.state = p3.__s, p3.__d = false), u3.__e = t4.__e, u3.__k = t4.__k, u3.__k.forEach(function(n3) {
                n3 && (n3.__ = u3);
              }), C = 0; C < p3._sb.length; C++)
                p3.__h.push(p3._sb[C]);
              p3._sb = [], p3.__h.length && f3.push(p3);
              break n;
            }
            null != p3.componentWillUpdate && p3.componentWillUpdate(w3, p3.__s, $25), null != p3.componentDidUpdate && p3.__h.push(function() {
              p3.componentDidUpdate(d3, _24, g3);
            });
          }
          if (p3.context = $25, p3.props = w3, p3.__P = n2, p3.__e = false, S2 = l.__r, A2 = 0, "prototype" in I2 && I2.prototype.render) {
            for (p3.state = p3.__s, p3.__d = false, S2 && S2(u3), a3 = p3.render(p3.props, p3.state, p3.context), D2 = 0; D2 < p3._sb.length; D2++)
              p3.__h.push(p3._sb[D2]);
            p3._sb = [];
          } else
            do {
              p3.__d = false, S2 && S2(u3), a3 = p3.render(p3.props, p3.state, p3.context), p3.state = p3.__s;
            } while (p3.__d && ++A2 < 25);
          p3.state = p3.__s, null != p3.getChildContext && (i3 = h(h({}, i3), p3.getChildContext())), y3 || null == p3.getSnapshotBeforeUpdate || (g3 = p3.getSnapshotBeforeUpdate(d3, _24)), P(n2, v(H2 = null != a3 && a3.type === k && null == a3.key ? a3.props.children : a3) ? H2 : [H2], u3, t4, i3, o3, r3, f3, e3, c3, s3), p3.base = u3.__e, u3.__h = null, p3.__h.length && f3.push(p3), m3 && (p3.__E = p3.__ = null);
        } catch (n3) {
          u3.__v = null, (c3 || null != r3) && (u3.__e = e3, u3.__h = !!c3, r3[r3.indexOf(e3)] = null), l.__e(n3, u3, t4);
        }
      else
        null == r3 && u3.__v === t4.__v ? (u3.__k = t4.__k, u3.__e = t4.__e) : u3.__e = M(t4.__e, u3, t4, i3, o3, r3, f3, c3, s3);
    (a3 = l.diffed) && a3(u3);
  }
  function L(n2, u3, t4) {
    for (var i3 = 0; i3 < t4.length; i3++)
      N(t4[i3], t4[++i3], t4[++i3]);
    l.__c && l.__c(u3, n2), n2.some(function(u4) {
      try {
        n2 = u4.__h, u4.__h = [], n2.some(function(n3) {
          n3.call(u4);
        });
      } catch (n3) {
        l.__e(n3, u4.__v);
      }
    });
  }
  function M(l3, u3, t4, i3, o3, r3, f3, e3, s3) {
    var a3, h3, y3, d3 = t4.props, _24 = u3.props, k3 = u3.type, b3 = 0;
    if ("svg" === k3 && (o3 = true), null != r3) {
      for (; b3 < r3.length; b3++)
        if ((a3 = r3[b3]) && "setAttribute" in a3 == !!k3 && (k3 ? a3.localName === k3 : 3 === a3.nodeType)) {
          l3 = a3, r3[b3] = null;
          break;
        }
    }
    if (null == l3) {
      if (null === k3)
        return document.createTextNode(_24);
      l3 = o3 ? document.createElementNS("http://www.w3.org/2000/svg", k3) : document.createElement(k3, _24.is && _24), r3 = null, e3 = false;
    }
    if (null === k3)
      d3 === _24 || e3 && l3.data === _24 || (l3.data = _24);
    else {
      if (r3 = r3 && n.call(l3.childNodes), h3 = (d3 = t4.props || c).dangerouslySetInnerHTML, y3 = _24.dangerouslySetInnerHTML, !e3) {
        if (null != r3)
          for (d3 = {}, b3 = 0; b3 < l3.attributes.length; b3++)
            d3[l3.attributes[b3].name] = l3.attributes[b3].value;
        (y3 || h3) && (y3 && (h3 && y3.__html == h3.__html || y3.__html === l3.innerHTML) || (l3.innerHTML = y3 && y3.__html || ""));
      }
      if (D(l3, _24, d3, o3, e3), y3)
        u3.__k = [];
      else if (P(l3, v(b3 = u3.props.children) ? b3 : [b3], u3, t4, i3, o3 && "foreignObject" !== k3, r3, f3, r3 ? r3[0] : t4.__k && g(t4, 0), e3, s3), null != r3)
        for (b3 = r3.length; b3--; )
          null != r3[b3] && p(r3[b3]);
      e3 || ("value" in _24 && void 0 !== (b3 = _24.value) && (b3 !== l3.value || "progress" === k3 && !b3 || "option" === k3 && b3 !== d3.value) && I(l3, "value", b3, d3.value, false), "checked" in _24 && void 0 !== (b3 = _24.checked) && b3 !== l3.checked && I(l3, "checked", b3, d3.checked, false));
    }
    return l3;
  }
  function N(n2, u3, t4) {
    try {
      "function" == typeof n2 ? n2(u3) : n2.current = u3;
    } catch (n3) {
      l.__e(n3, t4);
    }
  }
  function O(n2, u3, t4) {
    var i3, o3;
    if (l.unmount && l.unmount(n2), (i3 = n2.ref) && (i3.current && i3.current !== n2.__e || N(i3, null, u3)), null != (i3 = n2.__c)) {
      if (i3.componentWillUnmount)
        try {
          i3.componentWillUnmount();
        } catch (n3) {
          l.__e(n3, u3);
        }
      i3.base = i3.__P = null, n2.__c = void 0;
    }
    if (i3 = n2.__k)
      for (o3 = 0; o3 < i3.length; o3++)
        i3[o3] && O(i3[o3], u3, t4 || "function" != typeof n2.type);
    t4 || null == n2.__e || p(n2.__e), n2.__ = n2.__e = n2.__d = void 0;
  }
  function q(n2, l3, u3) {
    return this.constructor(n2, u3);
  }
  function B(u3, t4, i3) {
    var o3, r3, f3, e3;
    l.__ && l.__(u3, t4), r3 = (o3 = "function" == typeof i3) ? null : i3 && i3.__k || t4.__k, f3 = [], e3 = [], z(t4, u3 = (!o3 && i3 || t4).__k = y(k, null, [u3]), r3 || c, c, void 0 !== t4.ownerSVGElement, !o3 && i3 ? [i3] : r3 ? null : t4.firstChild ? n.call(t4.childNodes) : null, f3, !o3 && i3 ? i3 : r3 ? r3.__e : t4.firstChild, o3, e3), L(f3, u3, e3);
  }
  function G(n2, l3) {
    var u3 = { __c: l3 = "__cC" + e++, __: n2, Consumer: function(n3, l4) {
      return n3.children(l4);
    }, Provider: function(n3) {
      var u4, t4;
      return this.getChildContext || (u4 = [], (t4 = {})[l3] = this, this.getChildContext = function() {
        return t4;
      }, this.shouldComponentUpdate = function(n4) {
        this.props.value !== n4.value && u4.some(function(n5) {
          n5.__e = true, w(n5);
        });
      }, this.sub = function(n4) {
        u4.push(n4);
        var l4 = n4.componentWillUnmount;
        n4.componentWillUnmount = function() {
          u4.splice(u4.indexOf(n4), 1), l4 && l4.call(n4);
        };
      }), n3.children;
    } };
    return u3.Provider.__ = u3.Consumer.contextType = u3;
  }
  var n, l, u, t2, i, o, r, f, e, c, s, a, v;
  var init_preact_module = __esm({
    "node_modules/preact/dist/preact.module.js"() {
      c = {};
      s = [];
      a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
      v = Array.isArray;
      n = s.slice, l = { __e: function(n2, l3, u3, t4) {
        for (var i3, o3, r3; l3 = l3.__; )
          if ((i3 = l3.__c) && !i3.__)
            try {
              if ((o3 = i3.constructor) && null != o3.getDerivedStateFromError && (i3.setState(o3.getDerivedStateFromError(n2)), r3 = i3.__d), null != i3.componentDidCatch && (i3.componentDidCatch(n2, t4 || {}), r3 = i3.__d), r3)
                return i3.__E = i3;
            } catch (l4) {
              n2 = l4;
            }
        throw n2;
      } }, u = 0, t2 = function(n2) {
        return null != n2 && void 0 === n2.constructor;
      }, b.prototype.setState = function(n2, l3) {
        var u3;
        u3 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = h({}, this.state), "function" == typeof n2 && (n2 = n2(h({}, u3), this.props)), n2 && h(u3, n2), null != n2 && this.__v && (l3 && this._sb.push(l3), w(this));
      }, b.prototype.forceUpdate = function(n2) {
        this.__v && (this.__e = true, n2 && this.__h.push(n2), w(this));
      }, b.prototype.render = k, i = [], r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n2, l3) {
        return n2.__v.__b - l3.__v.__b;
      }, x.__r = 0, e = 0;
    }
  });

  // shared/js/ui/views/sliding-subview.js
  function SlidingSubview(ops) {
    ops.appendTo = (0, import_jquery10.default)(".sliding-subview--root");
    view_default.call(this, ops);
    this.$root = (0, import_jquery10.default)(".sliding-subview--root");
    this.$root.addClass("sliding-subview--open");
    this.setupNavigationSupport();
    this.setupClose();
  }
  var import_jquery10, sliding_subview_default;
  var init_sliding_subview = __esm({
    "shared/js/ui/views/sliding-subview.js"() {
      "use strict";
      import_jquery10 = __toESM(require_jquery());
      init_environment_check();
      init_view();
      init_utils();
      init_preact_module();
      SlidingSubview.prototype = import_jquery10.default.extend({}, view_default.prototype, {
        setupClose: function() {
          this._cacheElems(".js-sliding-subview", ["close", "done"]);
          this.bindEvents([
            [this.$close, "click", this._destroy],
            [this.$done, "click", this._done]
          ]);
          if (isAndroid()) {
            setupMaterialDesignRipple(this.$parent[0], ".link-action");
          }
        },
        setupNavigationSupport: function() {
          const url = new URL(window.location);
          url.searchParams.set("open", "true");
          window.history.pushState({}, "", url);
          if (this.popstateHandler) {
            window.removeEventListener("popstate", this.popstateHandler);
          }
          this.popstateHandler = () => {
            this._destroy(null, { fromNavigation: true });
          };
          window.addEventListener("popstate", this.popstateHandler);
        },
        _destroy: function(e3, opts = {}) {
          if (this.popstateHandler) {
            window.removeEventListener("popstate", this.popstateHandler);
          }
          const url = new URL(window.location);
          url.searchParams.delete("open");
          window.history.replaceState({}, "", url);
          if (opts.fromNavigation && isIOS()) {
            this.$root.addClass("sliding-subview--immediate");
            window.setTimeout(() => {
              this.$root.removeClass("sliding-subview--open");
              this._destroyProxy();
              window.history.replaceState({}, "", window.location);
              window.setTimeout(() => {
                this.$root.removeClass("sliding-subview--immediate");
              }, 1);
            }, 1);
            return;
          }
          this.$root.removeClass("sliding-subview--open");
          const isReduced = window.matchMedia("(prefers-reduced-motion: reduce)").matches === true;
          if (isReduced) {
            this._destroyProxy();
            window.history.replaceState({}, "", window.location);
          } else {
            window.setTimeout(() => {
              this._destroyProxy();
              window.history.replaceState({}, "", window.location);
            }, 325);
          }
        },
        _destroyProxy: function() {
          if (this.roots) {
            for (const [key] of this.roots) {
              B("", key);
            }
            this.roots.clear();
          }
          this.destroy();
        },
        _done: function() {
          this.model.site.close();
        }
      });
      sliding_subview_default = SlidingSubview;
    }
  });

  // shared/js/ui/views/breakage-form.js
  function BreakageForm(ops) {
    this.model = ops.model;
    this.mainModel = ops.mainModel;
    this.template = ops.template;
    sliding_subview_default.call(this, ops);
    this._setup();
  }
  var import_jquery11, breakage_form_default;
  var init_breakage_form2 = __esm({
    "shared/js/ui/views/breakage-form.js"() {
      "use strict";
      import_jquery11 = __toESM(require_jquery());
      init_sliding_subview();
      BreakageForm.prototype = import_jquery11.default.extend(
        {},
        // @ts-ignore
        sliding_subview_default.prototype,
        {
          roots: /* @__PURE__ */ new Map(),
          _setup: function() {
            this._cacheElems(".js-breakage-form", ["close", "submit", "element", "dropdown", "description"]);
            this.bindEvents([[this.$submit, "click", this._submitForm]]);
          },
          _submitForm: function() {
            const category = this.$dropdown.val();
            const description = this.$description.val();
            this.model.submitBreakageForm(category, description);
            this._showThankYouMessage();
          },
          _showThankYouMessage: function() {
            this.$element[0].dataset.state = "sent";
          }
        }
      );
      breakage_form_default = BreakageForm;
    }
  });

  // shared/js/ui/templates/page-connection.js
  function page_connection_default() {
    if (!this.model) {
      return import_nanohtml11.default`<section class="sliding-subview"></section>`;
    }
    const summary = renderConnectionDescription(this.model.site);
    const icon = largeHeroIcon({
      status: `connection-${this.model.site.httpsState}`
    });
    const hero = heroTemplate({
      icon,
      summary,
      suffix: "none"
    });
    return import_nanohtml11.default` <div class="site-info card" data-page="connection">
        ${topNav({ view: "secondary" })}
        <div class="padding-x-double">${hero} ${renderCertificateDetails(this.model.site, this.model.tab)}</div>
    </div>`;
  }
  function getKeyUsage(key) {
    const capabilities = {
      canEncrypt: i18n.t("connection:encrypt.title"),
      canDecrypt: i18n.t("connection:decrypt.title"),
      canSign: i18n.t("connection:sign.title"),
      canVerify: i18n.t("connection:verify.title"),
      canDerive: i18n.t("connection:derive.title"),
      canWrap: i18n.t("connection:wrap.title"),
      canUnwrap: i18n.t("connection:unwrap.title")
    };
    return Object.keys(capabilities).reduce((usage, capability) => {
      if (!key[capability])
        return usage;
      return [].concat(usage, capabilities[capability]);
    }, []);
  }
  function renderCertificateDetails(site2, tab) {
    if (site2.httpsState === "none" || !tab.certificate || tab.certificate.length === 0)
      return "";
    const certificate = tab.certificate[0];
    return import_nanohtml11.default`
        <div>
            ${renderHeader(site2, tab)}
            <div class="page-connection__certificate">
                <div class="page-connection__certificate-details">
                    <h3 class="token-body-em">${i18n.t("connection:certificateDetail.title")}</h3>
                    <div>
                        <span>${i18n.t("connection:commonName.title")}</span>
                        <span class="page-connection__certificate-value">${certificate.commonName}</span>
                    </div>
                    ${renderCertificateSummary(certificate)}
                </div>
                ${renderPublicKeyDetails(certificate)}
            </div>
        </div>
    `;
  }
  function renderCertificateSummary(certificate) {
    if (!certificate.summary)
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:summary.title")}</span>
        <span class="page-connection__certificate-value">${certificate.summary}</span>
    </div>`;
  }
  function renderPublicKeyDetails(certificate) {
    if (!certificate.publicKey)
      return "";
    return import_nanohtml11.default`<div class="page-connection__certificate-details">
        <h3 class="token-body-em">${i18n.t("connection:publicKey.title")}</h3>
        ${renderCertificateType(certificate.publicKey)} ${renderCertificateBitSize(certificate.publicKey)}
        ${renderCertificateEffectiveSize(certificate.publicKey)} ${renderCertificateKeyUsage(certificate.publicKey)}
        ${renderCertificateIsPermanent(certificate.publicKey)}
    </div>`;
  }
  function renderCertificateType(publicKey) {
    if (!publicKey.type)
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:algorithm.title")}</span>
        <span class="page-connection__certificate-value">${publicKey.type}</span>
    </div>`;
  }
  function renderCertificateBitSize(publicKey) {
    if (!publicKey.bitSize)
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:keySize.title")}</span>
        <span class="page-connection__certificate-value">${publicKey.bitSize} bits</span>
    </div>`;
  }
  function renderCertificateIsPermanent(publicKey) {
    if (typeof publicKey.isPermanent !== "boolean")
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:permanent.title")}</span>
        <span class="page-connection__certificate-value">${publicKey.isPermanent ? "Yes" : "No"}</span>
    </div>`;
  }
  function renderCertificateKeyUsage(publicKey) {
    const keyUsage = getKeyUsage(publicKey);
    if (keyUsage.length === 0)
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:usage.title")}</span>
        <span class="page-connection__certificate-value">${keyUsage.join(", ")}</span>
    </div>`;
  }
  function renderCertificateEffectiveSize(publicKey) {
    if (!publicKey.effectiveSize)
      return "";
    return import_nanohtml11.default`<div>
        <span>${i18n.t("connection:effectiveSize.title")}</span>
        <span class="page-connection__certificate-value">${publicKey.effectiveSize} bits</span>
    </div>`;
  }
  function renderHeader(site2, tab) {
    if (site2.httpsState === "none") {
      return import_nanohtml11.default`<div class="section-list-header certificate-header--not-found">${i18n.t("connection:certificateNotFound.title")}</div>`;
    }
    return import_nanohtml11.default`<div class="section-list-header">${i18n.t("connection:certificateForDomain.title", { domain: tab.domain })}</div>`;
  }
  function renderConnectionDescription(site2) {
    if (site2.httpsState === "none") {
      return i18n.t("connection:insecureConnectionDesc.title");
    }
    if (site2.httpsState === "upgraded") {
      return i18n.t("connection:upgradedConnectionDesc.title");
    }
    return i18n.t("connection:secureConnectionDesc.title");
  }
  var import_nanohtml11;
  var init_page_connection = __esm({
    "shared/js/ui/templates/page-connection.js"() {
      "use strict";
      import_nanohtml11 = __toESM(require_browser());
      init_localize();
      init_hero();
      init_top_nav();
    }
  });

  // node_modules/preact/hooks/dist/hooks.module.js
  function d2(t4, u3) {
    l.__h && l.__h(r2, t4, o2 || u3), o2 = 0;
    var i3 = r2.__H || (r2.__H = { __: [], __h: [] });
    return t4 >= i3.__.length && i3.__.push({ __V: c2 }), i3.__[t4];
  }
  function h2(n2) {
    return o2 = 1, s2(B2, n2);
  }
  function s2(n2, u3, i3) {
    var o3 = d2(t3++, 2);
    if (o3.t = n2, !o3.__c && (o3.__ = [i3 ? i3(u3) : B2(void 0, u3), function(n3) {
      var t4 = o3.__N ? o3.__N[0] : o3.__[0], r3 = o3.t(t4, n3);
      t4 !== r3 && (o3.__N = [r3, o3.__[1]], o3.__c.setState({}));
    }], o3.__c = r2, !r2.u)) {
      var f3 = function(n3, t4, r3) {
        if (!o3.__c.__H)
          return true;
        var u4 = o3.__c.__H.__.filter(function(n4) {
          return n4.__c;
        });
        if (u4.every(function(n4) {
          return !n4.__N;
        }))
          return !c3 || c3.call(this, n3, t4, r3);
        var i4 = false;
        return u4.forEach(function(n4) {
          if (n4.__N) {
            var t5 = n4.__[0];
            n4.__ = n4.__N, n4.__N = void 0, t5 !== n4.__[0] && (i4 = true);
          }
        }), !(!i4 && o3.__c.props === n3) && (!c3 || c3.call(this, n3, t4, r3));
      };
      r2.u = true;
      var c3 = r2.shouldComponentUpdate, e3 = r2.componentWillUpdate;
      r2.componentWillUpdate = function(n3, t4, r3) {
        if (this.__e) {
          var u4 = c3;
          c3 = void 0, f3(n3, t4, r3), c3 = u4;
        }
        e3 && e3.call(this, n3, t4, r3);
      }, r2.shouldComponentUpdate = f3;
    }
    return o3.__N || o3.__;
  }
  function p2(u3, i3) {
    var o3 = d2(t3++, 3);
    !l.__s && z2(o3.__H, i3) && (o3.__ = u3, o3.i = i3, r2.__H.__h.push(o3));
  }
  function y2(u3, i3) {
    var o3 = d2(t3++, 4);
    !l.__s && z2(o3.__H, i3) && (o3.__ = u3, o3.i = i3, r2.__h.push(o3));
  }
  function _23(n2) {
    return o2 = 5, F(function() {
      return { current: n2 };
    }, []);
  }
  function F(n2, r3) {
    var u3 = d2(t3++, 7);
    return z2(u3.__H, r3) ? (u3.__V = n2(), u3.i = r3, u3.__h = n2, u3.__V) : u3.__;
  }
  function b2() {
    for (var t4; t4 = f2.shift(); )
      if (t4.__P && t4.__H)
        try {
          t4.__H.__h.forEach(k2), t4.__H.__h.forEach(w2), t4.__H.__h = [];
        } catch (r3) {
          t4.__H.__h = [], l.__e(r3, t4.__v);
        }
  }
  function j2(n2) {
    var t4, r3 = function() {
      clearTimeout(u3), g2 && cancelAnimationFrame(t4), setTimeout(n2);
    }, u3 = setTimeout(r3, 100);
    g2 && (t4 = requestAnimationFrame(r3));
  }
  function k2(n2) {
    var t4 = r2, u3 = n2.__c;
    "function" == typeof u3 && (n2.__c = void 0, u3()), r2 = t4;
  }
  function w2(n2) {
    var t4 = r2;
    n2.__c = n2.__(), r2 = t4;
  }
  function z2(n2, t4) {
    return !n2 || n2.length !== t4.length || t4.some(function(t5, r3) {
      return t5 !== n2[r3];
    });
  }
  function B2(n2, t4) {
    return "function" == typeof t4 ? t4(n2) : t4;
  }
  var t3, r2, u2, i2, o2, f2, c2, e2, a2, v2, l2, m2, g2;
  var init_hooks_module = __esm({
    "node_modules/preact/hooks/dist/hooks.module.js"() {
      init_preact_module();
      o2 = 0;
      f2 = [];
      c2 = [];
      e2 = l.__b;
      a2 = l.__r;
      v2 = l.diffed;
      l2 = l.__c;
      m2 = l.unmount;
      l.__b = function(n2) {
        r2 = null, e2 && e2(n2);
      }, l.__r = function(n2) {
        a2 && a2(n2), t3 = 0;
        var i3 = (r2 = n2.__c).__H;
        i3 && (u2 === r2 ? (i3.__h = [], r2.__h = [], i3.__.forEach(function(n3) {
          n3.__N && (n3.__ = n3.__N), n3.__V = c2, n3.__N = n3.i = void 0;
        })) : (i3.__h.forEach(k2), i3.__h.forEach(w2), i3.__h = [], t3 = 0)), u2 = r2;
      }, l.diffed = function(t4) {
        v2 && v2(t4);
        var o3 = t4.__c;
        o3 && o3.__H && (o3.__H.__h.length && (1 !== f2.push(o3) && i2 === l.requestAnimationFrame || ((i2 = l.requestAnimationFrame) || j2)(b2)), o3.__H.__.forEach(function(n2) {
          n2.i && (n2.__H = n2.i), n2.__V !== c2 && (n2.__ = n2.__V), n2.i = void 0, n2.__V = c2;
        })), u2 = r2 = null;
      }, l.__c = function(t4, r3) {
        r3.some(function(t5) {
          try {
            t5.__h.forEach(k2), t5.__h = t5.__h.filter(function(n2) {
              return !n2.__ || w2(n2);
            });
          } catch (u3) {
            r3.some(function(n2) {
              n2.__h && (n2.__h = []);
            }), r3 = [], l.__e(u3, t5.__v);
          }
        }), l2 && l2(t4, r3);
      }, l.unmount = function(t4) {
        m2 && m2(t4);
        var r3, u3 = t4.__c;
        u3 && u3.__H && (u3.__H.__.forEach(function(n2) {
          try {
            k2(n2);
          } catch (n3) {
            r3 = n3;
          }
        }), u3.__H = void 0, r3 && l.__e(r3, u3.__v));
      };
      g2 = "function" == typeof requestAnimationFrame;
    }
  });

  // shared/js/ui/hooks/useRipple.js
  function useRipple(params) {
    const { ref } = params;
    y2(() => {
      const $el = ref.current;
      if (!$el)
        return;
      if (!isAndroid())
        return;
      $el.classList.add("material-design-ripple");
      const instance2 = MDCRipple.attachTo($el);
      instance2.listen("click", function(e3) {
        if (e3.target instanceof HTMLElement) {
          e3.target.closest?.("a")?.blur();
        }
      });
      return () => {
        instance2.destroy();
      };
    }, []);
  }
  var init_useRipple = __esm({
    "shared/js/ui/hooks/useRipple.js"() {
      "use strict";
      init_hooks_module();
      init_ripple();
      init_environment_check();
    }
  });

  // shared/js/ui/components/text-link.jsx
  function TextLink(props) {
    const { onClick, rounded = false } = props;
    const ref = _23(null);
    useRipple({ ref });
    let classNames = [`link-action`, `link-action--text`];
    if (rounded)
      classNames.push(`link-action--rounded`);
    return /* @__PURE__ */ y("a", { href: "javascript:void(0)", className: classNames.join(" "), draggable: false, ref, onClick }, props.children);
  }
  var init_text_link = __esm({
    "shared/js/ui/components/text-link.jsx"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_useRipple();
    }
  });

  // node_modules/@material/switch/adapter.js
  var init_adapter2 = __esm({
    "node_modules/@material/switch/adapter.js"() {
    }
  });

  // node_modules/@material/switch/constants.js
  var CssClasses, Selectors;
  var init_constants3 = __esm({
    "node_modules/@material/switch/constants.js"() {
      (function(CssClasses2) {
        CssClasses2["PROCESSING"] = "mdc-switch--processing";
        CssClasses2["SELECTED"] = "mdc-switch--selected";
        CssClasses2["UNSELECTED"] = "mdc-switch--unselected";
      })(CssClasses || (CssClasses = {}));
      (function(Selectors2) {
        Selectors2["RIPPLE"] = ".mdc-switch__ripple";
      })(Selectors || (Selectors = {}));
    }
  });

  // node_modules/@material/base/observer.js
  function observeProperty(target, property, observer) {
    var targetObservers = installObserver(target, property);
    var observers = targetObservers.getObservers(property);
    observers.push(observer);
    return function() {
      observers.splice(observers.indexOf(observer), 1);
    };
  }
  function installObserver(target, property) {
    var observersMap = /* @__PURE__ */ new Map();
    if (!allTargetObservers.has(target)) {
      allTargetObservers.set(target, {
        isEnabled: true,
        getObservers: function(key) {
          var observers = observersMap.get(key) || [];
          if (!observersMap.has(key)) {
            observersMap.set(key, observers);
          }
          return observers;
        },
        installedProperties: /* @__PURE__ */ new Set()
      });
    }
    var targetObservers = allTargetObservers.get(target);
    if (targetObservers.installedProperties.has(property)) {
      return targetObservers;
    }
    var descriptor = getDescriptor(target, property) || {
      configurable: true,
      enumerable: true,
      value: target[property],
      writable: true
    };
    var observedDescriptor = __assign({}, descriptor);
    var descGet = descriptor.get, descSet = descriptor.set;
    if ("value" in descriptor) {
      delete observedDescriptor.value;
      delete observedDescriptor.writable;
      var value_1 = descriptor.value;
      descGet = function() {
        return value_1;
      };
      if (descriptor.writable) {
        descSet = function(newValue) {
          value_1 = newValue;
        };
      }
    }
    if (descGet) {
      observedDescriptor.get = function() {
        return descGet.call(this);
      };
    }
    if (descSet) {
      observedDescriptor.set = function(newValue) {
        var e_4, _a2;
        var previous = descGet ? descGet.call(this) : newValue;
        descSet.call(this, newValue);
        if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
          try {
            for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer(newValue, previous);
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_4)
                throw e_4.error;
            }
          }
        }
      };
    }
    targetObservers.installedProperties.add(property);
    Object.defineProperty(target, property, observedDescriptor);
    return targetObservers;
  }
  function getDescriptor(target, property) {
    var descriptorTarget = target;
    var descriptor;
    while (descriptorTarget) {
      descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
      if (descriptor) {
        break;
      }
      descriptorTarget = Object.getPrototypeOf(descriptorTarget);
    }
    return descriptor;
  }
  function setObserversEnabled(target, enabled) {
    var targetObservers = allTargetObservers.get(target);
    if (targetObservers) {
      targetObservers.isEnabled = enabled;
    }
  }
  var allTargetObservers;
  var init_observer = __esm({
    "node_modules/@material/base/observer.js"() {
      init_tslib_es6();
      allTargetObservers = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/@material/base/observer-foundation.js
  var MDCObserverFoundation;
  var init_observer_foundation = __esm({
    "node_modules/@material/base/observer-foundation.js"() {
      init_tslib_es6();
      init_foundation();
      init_observer();
      MDCObserverFoundation = /** @class */
      function(_super) {
        __extends(MDCObserverFoundation2, _super);
        function MDCObserverFoundation2(adapter) {
          var _this = _super.call(this, adapter) || this;
          _this.unobserves = /* @__PURE__ */ new Set();
          return _this;
        }
        MDCObserverFoundation2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
          this.unobserve();
        };
        MDCObserverFoundation2.prototype.observe = function(target, observers) {
          var e_1, _a2;
          var _this = this;
          var cleanup = [];
          try {
            for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              var property = _c.value;
              var observer = observers[property].bind(this);
              cleanup.push(this.observeProperty(target, property, observer));
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          var unobserve = function() {
            var e_2, _a3;
            try {
              for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
                var cleanupFn = cleanup_1_1.value;
                cleanupFn();
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (cleanup_1_1 && !cleanup_1_1.done && (_a3 = cleanup_1.return))
                  _a3.call(cleanup_1);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            _this.unobserves.delete(unobserve);
          };
          this.unobserves.add(unobserve);
          return unobserve;
        };
        MDCObserverFoundation2.prototype.observeProperty = function(target, property, observer) {
          return observeProperty(target, property, observer);
        };
        MDCObserverFoundation2.prototype.setObserversEnabled = function(target, enabled) {
          setObserversEnabled(target, enabled);
        };
        MDCObserverFoundation2.prototype.unobserve = function() {
          var e_3, _a2;
          try {
            for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
              var unobserve = _c.value;
              unobserve();
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        };
        return MDCObserverFoundation2;
      }(MDCFoundation);
    }
  });

  // node_modules/@material/switch/foundation.js
  var MDCSwitchFoundation, MDCSwitchRenderFoundation;
  var init_foundation3 = __esm({
    "node_modules/@material/switch/foundation.js"() {
      init_tslib_es6();
      init_observer_foundation();
      init_constants3();
      MDCSwitchFoundation = /** @class */
      function(_super) {
        __extends(MDCSwitchFoundation2, _super);
        function MDCSwitchFoundation2(adapter) {
          var _this = _super.call(this, adapter) || this;
          _this.handleClick = _this.handleClick.bind(_this);
          return _this;
        }
        MDCSwitchFoundation2.prototype.init = function() {
          this.observe(this.adapter.state, {
            disabled: this.stopProcessingIfDisabled,
            processing: this.stopProcessingIfDisabled
          });
        };
        MDCSwitchFoundation2.prototype.handleClick = function() {
          if (this.adapter.state.disabled) {
            return;
          }
          this.adapter.state.selected = !this.adapter.state.selected;
        };
        MDCSwitchFoundation2.prototype.stopProcessingIfDisabled = function() {
          if (this.adapter.state.disabled) {
            this.adapter.state.processing = false;
          }
        };
        return MDCSwitchFoundation2;
      }(MDCObserverFoundation);
      MDCSwitchRenderFoundation = /** @class */
      function(_super) {
        __extends(MDCSwitchRenderFoundation2, _super);
        function MDCSwitchRenderFoundation2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        MDCSwitchRenderFoundation2.prototype.init = function() {
          _super.prototype.init.call(this);
          this.observe(this.adapter.state, {
            disabled: this.onDisabledChange,
            processing: this.onProcessingChange,
            selected: this.onSelectedChange
          });
        };
        MDCSwitchRenderFoundation2.prototype.initFromDOM = function() {
          this.setObserversEnabled(this.adapter.state, false);
          this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);
          this.onSelectedChange();
          this.adapter.state.disabled = this.adapter.isDisabled();
          this.adapter.state.processing = this.adapter.hasClass(CssClasses.PROCESSING);
          this.setObserversEnabled(this.adapter.state, true);
          this.stopProcessingIfDisabled();
        };
        MDCSwitchRenderFoundation2.prototype.onDisabledChange = function() {
          this.adapter.setDisabled(this.adapter.state.disabled);
        };
        MDCSwitchRenderFoundation2.prototype.onProcessingChange = function() {
          this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);
        };
        MDCSwitchRenderFoundation2.prototype.onSelectedChange = function() {
          this.adapter.setAriaChecked(String(this.adapter.state.selected));
          this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);
          this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);
        };
        MDCSwitchRenderFoundation2.prototype.toggleClass = function(addClass, className) {
          if (addClass) {
            this.adapter.addClass(className);
          } else {
            this.adapter.removeClass(className);
          }
        };
        return MDCSwitchRenderFoundation2;
      }(MDCSwitchFoundation);
    }
  });

  // node_modules/@material/switch/component.js
  var MDCSwitch;
  var init_component3 = __esm({
    "node_modules/@material/switch/component.js"() {
      init_tslib_es6();
      init_component();
      init_component2();
      init_foundation2();
      init_constants3();
      init_foundation3();
      MDCSwitch = /** @class */
      function(_super) {
        __extends(MDCSwitch2, _super);
        function MDCSwitch2(root, foundation) {
          var _this = _super.call(this, root, foundation) || this;
          _this.root = root;
          return _this;
        }
        MDCSwitch2.attachTo = function(root) {
          return new MDCSwitch2(root);
        };
        MDCSwitch2.prototype.initialize = function() {
          this.ripple = new MDCRipple(this.root, this.createRippleFoundation());
        };
        MDCSwitch2.prototype.initialSyncWithDOM = function() {
          var rippleElement = this.root.querySelector(Selectors.RIPPLE);
          if (!rippleElement) {
            throw new Error("Switch " + Selectors.RIPPLE + " element is required.");
          }
          this.rippleElement = rippleElement;
          this.root.addEventListener("click", this.foundation.handleClick);
          this.foundation.initFromDOM();
        };
        MDCSwitch2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
          this.ripple.destroy();
          this.root.removeEventListener("click", this.foundation.handleClick);
        };
        MDCSwitch2.prototype.getDefaultFoundation = function() {
          return new MDCSwitchRenderFoundation(this.createAdapter());
        };
        MDCSwitch2.prototype.createAdapter = function() {
          var _this = this;
          return {
            addClass: function(className) {
              _this.root.classList.add(className);
            },
            hasClass: function(className) {
              return _this.root.classList.contains(className);
            },
            isDisabled: function() {
              return _this.root.disabled;
            },
            removeClass: function(className) {
              _this.root.classList.remove(className);
            },
            setAriaChecked: function(ariaChecked) {
              return _this.root.setAttribute("aria-checked", ariaChecked);
            },
            setDisabled: function(disabled) {
              _this.root.disabled = disabled;
            },
            state: this
          };
        };
        MDCSwitch2.prototype.createRippleFoundation = function() {
          return new MDCRippleFoundation(this.createRippleAdapter());
        };
        MDCSwitch2.prototype.createRippleAdapter = function() {
          var _this = this;
          return __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
            return _this.rippleElement.getBoundingClientRect();
          }, isUnbounded: function() {
            return true;
          } });
        };
        return MDCSwitch2;
      }(MDCComponent);
    }
  });

  // node_modules/@material/switch/index.js
  var init_switch = __esm({
    "node_modules/@material/switch/index.js"() {
      init_adapter2();
      init_component3();
      init_constants3();
      init_foundation3();
    }
  });

  // shared/js/ui/components/toggle.jsx
  function ProtectionToggle(props) {
    const [toggleState, toggle] = useToggleState(props.model);
    const altText = ns.site("updatingProtectionList.title");
    return /* @__PURE__ */ y("div", { class: `site-info-toggle ${toggleState.active ? "is-active" : ""}` }, /* @__PURE__ */ y("p", { class: "site-info__protection" }, /* @__PURE__ */ y("span", { role: "textbox", dangerouslySetInnerHTML: { __html: toggleState.text } })), /* @__PURE__ */ y("div", { class: "site-info__toggle-container" }, toggleState.toggled && /* @__PURE__ */ y("img", { src: "../img/spinner.svg", className: "toggle-spinner", alt: altText }), !toggleState.toggled && /* @__PURE__ */ y(ToggleButton, { toggleState, onToggle: toggle })));
  }
  function useToggleState(model) {
    const [state, setState] = h2(() => {
      const toggleState = {
        text: ns.site("protectionsEnabled.title"),
        active: true,
        disabled: false,
        label: "",
        toggled: false,
        sideEffects: false
      };
      if (!model.protectionsEnabled) {
        toggleState.text = ns.site("protectionsDisabled.title");
        toggleState.active = false;
      }
      if (model.isBroken) {
        if (!isBrowser()) {
          toggleState.active = false;
          toggleState.disabled = true;
        }
      }
      const labelEnabled = ns.site("enableProtectionsSwitch.title");
      const labelDisabled = ns.site("disableProtectionsSwitch.title");
      toggleState.label = toggleState.active ? labelDisabled : labelEnabled;
      return toggleState;
    });
    p2(() => {
      if (!state.sideEffects)
        return;
      const isReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches === true;
      const timeout = isReducedMotion ? 0 : 300;
      const int = setTimeout(() => {
        model.toggleAllowlist();
        if (model.platformFeatures.spinnerFollowingProtectionsToggle) {
          setState((prev) => {
            return { ...prev, toggled: true };
          });
        }
      }, timeout);
      return () => {
        clearTimeout(int);
      };
    }, [state.active, state.sideEffects]);
    function toggle() {
      setState((prev) => {
        return { ...prev, active: !prev.active, sideEffects: true };
      });
    }
    return [state, toggle];
  }
  function ToggleButton(props) {
    const { toggleState } = props;
    const labelEnabled = ns.site("enableProtectionsSwitch.title");
    const labelDisabled = ns.site("disableProtectionsSwitch.title");
    const label = toggleState.active ? labelDisabled : labelEnabled;
    return isAndroid() ? /* @__PURE__ */ y(AndroidToggle, { toggleState, onToggle: props.onToggle, label }) : /* @__PURE__ */ y(DefaultToggleButton, { toggleState, label, onToggle: props.onToggle });
  }
  function AndroidToggle(props) {
    const ref = _23(null);
    const className = `mdc-switch mdc-switch--${props.toggleState.active ? "selected" : "unselected"}`;
    y2(() => {
      if (!ref.current)
        return;
      const elem = (
        /** @type {HTMLButtonElement} */
        ref.current
      );
      if (!(elem instanceof HTMLButtonElement))
        return;
      const switchInstance = new MDCSwitch(ref.current);
      switchInstance.listen("click", () => {
        const pressed = elem.getAttribute("aria-checked");
        const next = pressed === "true" ? "false" : "true";
        elem.setAttribute("aria-checked", next);
        props.onToggle();
        switchInstance.destroy();
      });
      return () => {
        switchInstance.destroy();
      };
    }, []);
    return /* @__PURE__ */ y(
      "button",
      {
        ref,
        id: "basic-switch",
        class: className,
        type: "button",
        role: "switch",
        "aria-checked": "false",
        "aria-label": props.label,
        disabled: props.toggleState.disabled
      },
      /* @__PURE__ */ y("div", { class: "mdc-switch__track" }),
      /* @__PURE__ */ y("div", { class: "mdc-switch__handle-track" }, /* @__PURE__ */ y("div", { class: "mdc-switch__handle" }, /* @__PURE__ */ y("div", { class: "mdc-switch__shadow" }, /* @__PURE__ */ y("div", { class: "mdc-elevation-overlay" })), /* @__PURE__ */ y("div", { class: "mdc-switch__ripple" }))),
      /* @__PURE__ */ y("span", { class: "mdc-switch__focus-ring-wrapper" }, /* @__PURE__ */ y("div", { class: "mdc-switch__focus-ring" }))
    );
  }
  function DefaultToggleButton(props) {
    const { toggleState, label } = props;
    return /* @__PURE__ */ y(
      "button",
      {
        class: "toggle-button",
        type: "button",
        role: "switch",
        "aria-checked": toggleState.active,
        "aria-label": label,
        disabled: toggleState.disabled,
        onClick: props.onToggle
      },
      /* @__PURE__ */ y("div", { class: "toggle-button__track" }),
      /* @__PURE__ */ y("div", { class: "toggle-button__handle" })
    );
  }
  var init_toggle = __esm({
    "shared/js/ui/components/toggle.jsx"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_switch();
      init_localize();
      init_environment_check();
    }
  });

  // shared/js/ui/templates/protection-header.js
  function protectionHeader(model) {
    const root = import_nanohtml12.default`<div data-testid="protectionHeader"></div>`;
    const migrationModel = {
      protectionsEnabled: model.protectionsEnabled,
      isAllowlisted: model.isAllowlisted,
      isDenylisted: model.isDenylisted,
      platformFeatures: model.features,
      isBroken: model.isBroken,
      toggleAllowlist: () => model.toggleAllowlist({ screen: "primaryScreen" })
    };
    B(
      /* @__PURE__ */ y(ProtectionHeader, { model: migrationModel }, /* @__PURE__ */ y(ProtectionHeaderText, null)),
      root
    );
    return root;
  }
  function ProtectionHeader(props) {
    let initial;
    if (props.initialState) {
      initial = props.initialState;
    } else {
      if (props.model.isBroken || props.model.isAllowlisted) {
        initial = "form-trigger";
      } else {
        initial = "help-trigger";
      }
    }
    const [state, setState] = h2(
      /** @type {UIState} */
      initial
    );
    return /* @__PURE__ */ y(k, null, /* @__PURE__ */ y("div", { class: "card-list--bordered" }, props.model.isBroken && /* @__PURE__ */ y(HeaderDisabled, { model: props.model, state }), !props.model.isBroken && /* @__PURE__ */ y(HeaderDefault, { model: props.model, state })), /* @__PURE__ */ y(
      ProtectionContext.Provider,
      {
        value: {
          state,
          setState,
          model: props.model
        }
      },
      props.children
    ));
  }
  function ProtectionHeaderText() {
    let buttonText = ns.site("websiteNotWorkingPrompt.title");
    function onClickTextLink(e3) {
      e3.preventDefault();
      window.dispatchEvent(new CustomEvent("open-feedback"));
    }
    return /* @__PURE__ */ y("div", { className: "text--center" }, /* @__PURE__ */ y(TextLink, { onClick: onClickTextLink, rounded: true }, buttonText));
  }
  function HeaderDefault(props) {
    const text = ns.site("websiteNotWorkingAdvice.title");
    const showHelp = props.state === "site-not-working" && !props.model.isAllowlisted;
    return /* @__PURE__ */ y("div", { className: "protection-toggle" }, /* @__PURE__ */ y("div", { className: "protection-toggle__row" }, /* @__PURE__ */ y(ProtectionToggle, { model: props.model })), showHelp && /* @__PURE__ */ y("div", { className: "protection-toggle__row protection-toggle__row--alt" }, text));
  }
  function HeaderDisabled(props) {
    let text = i18n.t("site:protectionsDisabledRemote.title");
    if (props.model.isDenylisted) {
      text = i18n.t("site:protectionsDisabledRemoteOverride.title");
    }
    return /* @__PURE__ */ y(k, null, /* @__PURE__ */ y("div", { className: "padding-x padding-y--reduced" }, /* @__PURE__ */ y(ProtectionToggle, { model: props.model })), /* @__PURE__ */ y("div", { className: "note note--nested" }, text));
  }
  var import_nanohtml12, ProtectionContext;
  var init_protection_header = __esm({
    "shared/js/ui/templates/protection-header.js"() {
      "use strict";
      import_nanohtml12 = __toESM(require_browser());
      init_preact_module();
      init_hooks_module();
      init_localize();
      init_text_link();
      init_toggle();
      ProtectionContext = G(
        /** @type {{state: UIState, setState: (st: UIState) => void; model: MigrationModel}} */
        {}
      );
    }
  });

  // shared/js/ui/templates/breakage-form.js
  function breakage_form_default2() {
    const categories = [
      { category: ns.report("blocked.title"), value: "blocked" },
      { category: ns.report("layout.title"), value: "layout" },
      { category: ns.report("emptySpaces.title"), value: "empty-spaces" },
      { category: ns.report("paywall.title"), value: "paywall" },
      { category: ns.report("videos.title"), value: "videos" },
      { category: ns.report("comments.title"), value: "comments" },
      { category: ns.report("login.title"), value: "login" },
      { category: ns.report("shopping.title"), value: "shopping" },
      { category: ns.report("other.title"), value: "other" }
    ];
    const icon = largeHeroIcon({
      status: "breakage-form"
    });
    let bullet = "\n \u2022 ";
    let placeholder = ns.report("tellUsMoreDesc.title", { bullet });
    return import_nanohtml13.default`<section class="sliding-subview">
        <div class="breakage-form">
            ${topNav({ view: "secondary" })}
            <div class="breakage-form__inner js-breakage-form-element" data-state="idle">
                <div class="header header--breakage">${wrap(this.mainModel, this)}</div>
                <div class="key-insight key-insight--breakage padding-x-double">
                    ${icon}
                    <div class="breakage-form__advise">
                        <p class="token-title-3">${i18n.t("report:selectTheOptionDesc.title")}</p>
                    </div>
                    <div class="thanks">
                        <p class="thanks__primary">${i18n.t("report:thankYou.title")}</p>
                        <p class="thanks__secondary">${i18n.t("report:yourReportWillHelpDesc.title")}</p>
                    </div>
                </div>
                <div class="breakage-form__content padding-x-double">
                    <div class="breakage-form__element">
                        <div class="form__group">
                            <div class="form__select breakage-form__input--dropdown">
                                <select class="js-breakage-form-dropdown">
                                    <option value="">${i18n.t("report:pickYourIssueFromTheList.title")}</option>
                                    ${categories.map(function(item) {
      return import_nanohtml13.default`<option value=${item.value}>${item.category}</option>`;
    })}
                                </select>
                            </div>
                            <textarea
                                class="form__textarea js-breakage-form-description"
                                placeholder="${placeholder}"
                                maxlength="2500"
                            ></textarea>
                            <button class="form__submit token-label-em js-breakage-form-submit" role="button">
                                ${i18n.t("report:sendReport.title")}
                            </button>
                        </div>
                    </div>
                </div>
                <div class="breakage-form__footer padding-x-double token-breakage-form-body">
                    ${i18n.t("report:reportsAreAnonymousDesc.title")}
                </div>
            </div>
        </div>
    </section>`;
  }
  function wrap(model, view) {
    const root = import_nanohtml13.default`<div data-testid="breakage-form-protection-header"></div>`;
    const migrationModel = {
      protectionsEnabled: model.protectionsEnabled,
      isAllowlisted: model.isAllowlisted,
      isDenylisted: model.isDenylisted,
      platformFeatures: model.features,
      isBroken: model.isBroken,
      toggleAllowlist: () => model.toggleAllowlist({ screen: "breakageForm" })
    };
    view.roots.set(root, true);
    B(/* @__PURE__ */ y(ProtectionHeader, { model: migrationModel, initialState: "site-not-working" }), root);
    return root;
  }
  var import_nanohtml13;
  var init_breakage_form3 = __esm({
    "shared/js/ui/templates/breakage-form.js"() {
      "use strict";
      import_nanohtml13 = __toESM(require_browser());
      init_localize();
      init_hero();
      init_top_nav();
      init_preact_module();
      init_protection_header();
    }
  });

  // shared/js/ui/views/email-protection.js
  function EmailProtectionView(ops) {
    this.model = ops.model;
    this.pageView = ops.pageView;
    this.template = ops.template;
    view_default.call(this, ops);
    this._setup();
  }
  var import_jquery12, formatAddress, email_protection_default2;
  var init_email_protection3 = __esm({
    "shared/js/ui/views/email-protection.js"() {
      "use strict";
      import_jquery12 = __toESM(require_jquery());
      init_view();
      formatAddress = (address) => address + "@duck.com";
      EmailProtectionView.prototype = import_jquery12.default.extend({}, view_default.prototype, {
        _setup: function() {
          this.bindEvents([[this.store.subscribe, `change:${this.model.modelName}`, this._rerender]]);
        },
        copyAlias: function() {
          const alias = this.model.emailProtectionUserData.nextAlias;
          navigator.clipboard?.writeText(formatAddress(alias));
          this.model.set("state", "added");
          setTimeout(() => {
            this.model.set("state", "idle");
          }, 2e3);
          this.model.refreshAlias().catch((e3) => console.error(e3));
        }
      });
      email_protection_default2 = EmailProtectionView;
    }
  });

  // shared/js/ui/views/search.js
  function Search2(ops) {
    this.model = ops.model;
    this.pageView = ops.pageView;
    this.template = ops.template;
    view_default.call(this, ops);
    this._cacheElems(".js-search", ["form", "input", "go", "cog-button", "fire-button"]);
    this.bindEvents([
      [this.$input, "input", this._handleInput],
      [this.$input, "blur", this._handleBlur],
      [this.$go, "click", this._handleSubmit],
      [this.$form, "submit", this._handleSubmit],
      [this.$cogbutton, "click", this._handleCogClick],
      [this.$firebutton, "click", this._handleFireClick]
    ]);
  }
  var import_jquery13, FOCUS_CLASS, search_default3;
  var init_search3 = __esm({
    "shared/js/ui/views/search.js"() {
      "use strict";
      import_jquery13 = __toESM(require_jquery());
      init_view();
      FOCUS_CLASS = "go--focused";
      Search2.prototype = import_jquery13.default.extend({}, view_default.prototype, {
        // Hover effect on search button while typing
        _addHoverEffect: function() {
          if (!this.$go.hasClass(FOCUS_CLASS)) {
            this.$go.addClass(FOCUS_CLASS);
          }
        },
        _removeHoverEffect: function() {
          if (this.$go.hasClass(FOCUS_CLASS)) {
            this.$go.removeClass(FOCUS_CLASS);
          }
        },
        _handleBlur: function(_e) {
          this._removeHoverEffect();
        },
        _handleInput: function(_e) {
          const searchText = this.$input.val();
          this.model.set("searchText", searchText);
          if (searchText.length > 0) {
            this._addHoverEffect();
          } else {
            this._removeHoverEffect();
          }
        },
        _handleSubmit: function(e3) {
          e3.preventDefault();
          this.model.doSearch(this.$input.val());
        },
        _handleCogClick: function(e3) {
          e3.preventDefault();
          this.model.openOptionsPage();
        },
        _handleFireClick: function(e3) {
          e3.preventDefault();
          this.pageView.model.send("navigate", { target: "fireButton" });
        }
      });
      search_default3 = Search2;
    }
  });

  // shared/js/ui/views/cta-rotation.js
  function CtaRotationView(ops) {
    this.model = ops.model;
    this.pageView = ops.pageView;
    this.template = ops.template;
    view_default.call(this, ops);
  }
  var import_jquery14, cta_rotation_default2;
  var init_cta_rotation3 = __esm({
    "shared/js/ui/views/cta-rotation.js"() {
      "use strict";
      import_jquery14 = __toESM(require_jquery());
      init_view();
      CtaRotationView.prototype = import_jquery14.default.extend({}, view_default.prototype, {});
      cta_rotation_default2 = CtaRotationView;
    }
  });

  // shared/js/ui/models/site-company-list.js
  function SiteCompanyList(attrs) {
    attrs = attrs || {};
    attrs.tab = null;
    attrs.companyList = [];
    model_default.call(this, attrs);
  }
  var import_jquery15, site_company_list_default;
  var init_site_company_list = __esm({
    "shared/js/ui/models/site-company-list.js"() {
      "use strict";
      import_jquery15 = __toESM(require_jquery());
      init_model();
      init_communication();
      init_normalize_company_name();
      SiteCompanyList.prototype = import_jquery15.default.extend({}, model_default.prototype, normalizeCompanyName, {
        modelName: "siteCompanyList",
        /** @this {any} */
        fetchAsyncData: function() {
          return new Promise((resolve) => {
            communication_default.getBackgroundTabData().then(({ tab }) => {
              if (tab) {
                this.tab = tab;
              }
              resolve(null);
            });
          });
        }
      });
      site_company_list_default = SiteCompanyList;
    }
  });

  // shared/js/ui/models/site.js
  function Site(attrs) {
    attrs = attrs || {};
    this.disabled = true;
    this.tab = null;
    this.permissions = null;
    this.domain = "-";
    this.protectionsEnabled = false;
    this.isBroken = false;
    this.displayBrokenUI = false;
    this.isAllowlisted = false;
    this.isDenylisted = false;
    this.httpsState = "none";
    this.httpsStatusText = "";
    this.trackersCount = 0;
    this.majorTrackerNetworksCount = 0;
    this.totalTrackerNetworksCount = 0;
    this.trackerNetworks = [];
    this.isaMajorTrackingNetwork = false;
    this.emailProtectionUserData = null;
    this.acceptingUpdates = true;
    this.features = createPlatformFeatures(platform);
    model_default.call(this, attrs);
    this.bindEvents([[this.store.subscribe, "action:backgroundMessage", this.handleBackgroundMsg]]);
  }
  var import_jquery16, MAJOR_TRACKER_THRESHOLD_PCT, site_default;
  var init_site = __esm({
    "shared/js/ui/models/site.js"() {
      "use strict";
      import_jquery16 = __toESM(require_jquery());
      init_model();
      init_constants2();
      init_communication();
      init_localize();
      init_platform_features();
      init_common();
      init_schema_parsers();
      MAJOR_TRACKER_THRESHOLD_PCT = 25;
      Site.prototype = import_jquery16.default.extend({}, model_default.prototype, {
        modelName: "site",
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        getBackgroundTabData: function() {
          return new Promise((resolve) => {
            communication_default.getBackgroundTabData().then(({ tab, emailProtectionUserData, fireButton, featureSettings: featureSettings2 }) => {
              if (tab) {
                if (tab.locale) {
                  if (Object.keys(i18n.options.resources).includes(tab.locale)) {
                    i18n.changeLanguage(tab.locale);
                  } else {
                    console.warn(`Unsupported locale ${tab.locale}`);
                  }
                }
                this.set("tab", tab);
                this.domain = tab.domain;
                this.set("isaMajorTrackingNetwork", (tab.parentEntity?.prevalence || 0) >= MAJOR_TRACKER_THRESHOLD_PCT);
              } else {
                this.domain = "new tab";
                console.debug("Site model: no tab");
              }
              this.emailProtectionUserData = emailProtectionUserData;
              this.fireButton = fireButton;
              if (featureSettings2) {
                const parsed = remoteFeatureSettingsSchema.safeParse(featureSettings2);
                if (parsed.success) {
                  this.featureSettings = new FeatureSettings(parsed.data);
                } else {
                  console.error(parsed.error);
                  throw new Error("platform did not provide featureSettings");
                }
              } else {
                this.featureSettings = new FeatureSettings({});
              }
              this.update();
              resolve(null);
            }).catch((e3) => {
              console.log("\u274C [models/site.es6.js] --> ", e3);
            });
          });
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        setSiteProperties: function() {
          if (!this.tab) {
            this.domain = "new tab";
          } else {
            this.initAllowlisted(this.tab.protections.allowlisted, this.tab.protections.denylisted);
            if (this.tab.specialDomainName) {
              this.domain = this.tab.specialDomainName;
            } else {
              this.set({ disabled: false });
            }
          }
          if (this.domain && this.domain === "-")
            this.set("disabled", true);
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        setHttpsMessage: function() {
          if (!this.tab)
            return;
          if (this.tab.upgradedHttps) {
            this.httpsState = "upgraded";
          } else if (/^https/.exec(this.tab.url)) {
            this.httpsState = "secure";
          } else {
            this.httpsState = "none";
          }
          this.httpsStatusText = i18n.t(httpsMessages[this.httpsState]);
        },
        timeout: null,
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        handleBackgroundMsg: function(message) {
          if (!this.tab)
            return;
          if (message.action && message.action === "updateTabData") {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
              communication_default.getBackgroundTabData().then(({ tab, emailProtectionUserData }) => {
                this.tab = tab;
                this.emailProtectionUserData = emailProtectionUserData;
                this.update();
              }).catch((e3) => {
                console.log("\u274C [models/site.es6.js:handleBackgroundMsg()] --> ", e3);
              });
            }, 100);
          }
        },
        /** @this {{ tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any> & {fetch: import("../../browser/common.js").fetcher}} */
        updatePermission: function(id, value) {
          if (!this.permissions)
            return;
          const permissionIndex = this.permissions.findIndex(({ key }) => key === id);
          if (permissionIndex === -1)
            return;
          const updatedPermissions = JSON.parse(JSON.stringify(this.permissions));
          updatedPermissions[permissionIndex].permission = value;
          this.set("permissions", updatedPermissions);
          try {
            this.fetch(new UpdatePermissionMessage({ id, value }));
          } catch (e3) {
            console.error("updatePermission error", e3);
          }
        },
        // calls `this.set()` to trigger view re-rendering
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        update: function() {
          if (!this.acceptingUpdates) {
            console.log("not updating because acceptingUpdates was false");
            return;
          }
          this.setSiteProperties();
          this.setHttpsMessage();
          if (this.tab) {
            this.set("permissions", this.tab.permissions);
            const newTrackersCount = this.getUniqueTrackersCount();
            if (newTrackersCount !== this.trackersCount) {
              this.set("trackersCount", newTrackersCount);
            }
            const newTrackersBlockedCount = this.getUniqueTrackersBlockedCount();
            if (newTrackersBlockedCount !== this.trackersBlockedCount) {
              this.set("trackersBlockedCount", newTrackersBlockedCount);
            }
            const newTrackerNetworks = this.getTrackerNetworksOnPage();
            if (this.trackerNetworks.length === 0 || newTrackerNetworks.length !== this.trackerNetworks.length) {
              this.set("trackerNetworks", newTrackerNetworks);
            }
            const newUnknownTrackersCount = this.getUnknownTrackersCount();
            const newTotalTrackerNetworksCount = newUnknownTrackersCount + newTrackerNetworks.length;
            if (newTotalTrackerNetworksCount !== this.totalTrackerNetworksCount) {
              this.set("totalTrackerNetworksCount", newTotalTrackerNetworksCount);
            }
            const newMajorTrackerNetworksCount = this.getMajorTrackerNetworksCount();
            if (newMajorTrackerNetworksCount !== this.majorTrackerNetworksCount) {
              this.set("majorTrackerNetworksCount", newMajorTrackerNetworksCount);
            }
          }
        },
        /**
         * @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>}
         * @returns {number}
         */
        getUniqueTrackersCount: function() {
          return 0;
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        getUniqueTrackersBlockedCount: function() {
          return 0;
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        getUnknownTrackersCount: function() {
          let count = 0;
          const entities = this.tab.requestDetails.all.entities;
          for (const entity of Object.values(entities)) {
            if (entity.name === "unknown")
              count += Object.keys(entity.urls).length;
          }
          return count;
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        getMajorTrackerNetworksCount: function() {
          let total = 0;
          this.tab.requestDetails.forEachEntity((entity) => {
            const isMajor = entity.prevalence > MAJOR_TRACKER_THRESHOLD_PCT;
            total += isMajor ? 1 : 0;
          });
          return total;
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        getTrackerNetworksOnPage: function() {
          const requests = this.tab.requestDetails;
          const names = [];
          requests.forEachEntity((en) => {
            if (en.name !== "unknown") {
              names.push(en.name);
            }
          });
          return names;
        },
        /** @this {LocalThis} */
        initAllowlisted: function(allowListValue, denyListValue) {
          this.isAllowlisted = allowListValue;
          this.isDenylisted = denyListValue;
          this.isBroken = Boolean(
            this.tab.protections.unprotectedTemporary || !this.tab.protections.enabledFeatures?.includes("contentBlocking")
          );
          this.displayBrokenUI = this.isBroken;
          if (denyListValue) {
            this.displayBrokenUI = false;
            this.protectionsEnabled = true;
          } else {
            this.displayBrokenUI = this.isBroken;
            this.protectionsEnabled = !(this.isAllowlisted || this.isBroken);
          }
          this.set("protectionsEnabled", this.protectionsEnabled);
        },
        /**
         * @param {import('../../../../schema/__generated__/schema.types.js').EventOrigin} eventOrigin
         * @this {LocalThis}
         */
        toggleAllowlist: function(eventOrigin) {
          const lists = [];
          this.set("acceptingUpdates", false);
          if (this.tab && this.tab.domain) {
            if (this.isBroken) {
              lists.push({
                list: "denylisted",
                domain: this.tab.domain,
                value: !this.isDenylisted
              });
            } else {
              lists.push({
                list: "denylisted",
                domain: this.tab.domain,
                value: false
              });
              lists.push({
                list: "allowlisted",
                domain: this.tab.domain,
                value: !this.isAllowlisted
              });
            }
          }
          this.setLists(lists, eventOrigin).catch((e3) => console.error(e3));
        },
        /**
         * @param {SetListsMessage["lists"]} lists
         * @param {import('../../../../schema/__generated__/schema.types.js').EventOrigin} eventOrigin
         * @returns {Promise<boolean>}
         */
        async setLists(lists, eventOrigin) {
          try {
            return this.fetch(new SetListsMessage({ lists, eventOrigin }));
          } catch (e3) {
            console.error("setList error", e3);
            return false;
          }
        },
        /** @this {{tab: import('../../browser/utils/request-details.mjs').TabData} & Record<string, any>} */
        companyNames: function() {
          return [];
        },
        /**
         * @this {LocalThis}
         * @return {Promise<boolean>}
         */
        checkBrokenSiteReportHandled: function() {
          try {
            return this.fetch(new CheckBrokenSiteReportHandledMessage());
          } catch (e3) {
            console.error("checkBrokenSiteReportHandled error", e3);
            return Promise.resolve(false);
          }
        },
        /** @this {LocalThis} */
        close: function() {
          try {
            this.fetch(new CloseMessage());
          } catch (e3) {
            console.error("close error", e3);
          }
        }
      });
      site_default = Site;
    }
  });

  // shared/js/ui/views/tracker-networks.js
  function TrackerNetworks(opts) {
    this.$hero = null;
    this.$details = null;
    this.model = null;
    this.currentModelName = null;
    this.currentSiteModelName = null;
    this.template = opts.template;
    this.heroFn = opts.heroFn;
    this.detailsFn = opts.detailsFn;
    sliding_subview_default.call(this, opts);
    this.renderAsyncContent();
  }
  var import_jquery17, tracker_networks_default;
  var init_tracker_networks = __esm({
    "shared/js/ui/views/tracker-networks.js"() {
      "use strict";
      import_jquery17 = __toESM(require_jquery());
      init_sliding_subview();
      init_site_company_list();
      init_site();
      TrackerNetworks.prototype = import_jquery17.default.extend(
        {},
        // @ts-ignore
        sliding_subview_default.prototype,
        {
          /** @this {any} */
          setup: function() {
            this._cacheElems(".js-tracker-networks", ["hero", "details"]);
            this.bindEvents([[this.store.subscribe, `change:${this.currentSiteModelName}`, this._rerender]]);
          },
          /** @this {any} */
          renderAsyncContent: function() {
            const random = Math.round(Math.random() * 1e5);
            this.currentModelName = "siteCompanyList" + random;
            this.currentSiteModelName = "site" + random;
            this.model = new site_company_list_default({
              modelName: this.currentModelName
            });
            this.model.fetchAsyncData().then(() => {
              this.model.site = new site_default({
                modelName: this.currentSiteModelName
              });
              this.model.site.getBackgroundTabData().then(() => {
                const content = this.template();
                this.$el.append(content);
                this.setup();
                this.setupClose();
              });
            });
          },
          /**
           * @this {TrackerNetworks}
           */
          _renderHeroTemplate: function() {
            if (this.model.site && this.heroFn) {
              const site2 = this.model.site;
              const heroElement = this.heroFn(site2.tab.requestDetails, site2.protectionsEnabled);
              this.$hero?.html(heroElement);
            }
            if (this.model.site && this.detailsFn) {
              const site2 = this.model.site;
              const detailsElement = this.detailsFn(site2);
              this.$details?.html(detailsElement);
            }
          },
          _rerender: function(e3) {
            if (e3 && e3.change) {
              if (e3.change.attribute === "isaMajorTrackingNetwork" || e3.change.attribute === "isAllowlisted" || e3.change.attribute === "totalTrackerNetworksCount") {
                this._renderHeroTemplate();
                this.unbindEvents();
                this.setup();
                this.setupClose();
              }
            }
          }
        }
      );
      tracker_networks_default = TrackerNetworks;
    }
  });

  // shared/js/ui/views/main-nav.js
  function MainNavView(ops) {
    this.model = ops.model;
    this.store = ops.store;
    this.template = template;
    this.features = createPlatformFeatures(platform);
    this.cleanups = [];
    this.nav = {
      connection: () => {
        this.model.send("navigate", { target: "connection" });
      },
      trackers: () => {
        this.model.send("navigate", { target: "trackers" });
      },
      nonTrackers: () => {
        this.model.send("navigate", { target: "nonTrackers" });
      },
      consentManaged: () => {
        this.model.send("navigate", { target: "consentManaged" });
      },
      cookieHidden: () => {
        this.model.send("navigate", { target: "cookieHidden" });
      }
    };
    view_default.call(this, ops);
    this._setup();
  }
  function template() {
    const model = this.model;
    const consentCb = model.tab.cookiePromptManagementStatus?.cosmetic ? this.nav.cookieHidden : this.nav.consentManaged;
    const consentRow = import_nanohtml14.default`<li class="main-nav__row">${renderCookieConsentManaged(model, consentCb)}</li>`;
    return import_nanohtml14.default`
        <ul class="default-list main-nav token-body-em js-site-main-nav">
            <li class="main-nav__row">${renderConnection(model, this.nav.connection)}</li>
            <li class="main-nav__row">${renderTrackerNetworksNew(model, this.nav.trackers)}</li>
            <li class="main-nav__row">${renderThirdPartyNew(model, this.nav.nonTrackers)}</li>
            ${model.tab?.cookiePromptManagementStatus?.consentManaged ? consentRow : null}
        </ul>
    `;
  }
  function renderCookieConsentManaged(model, cb) {
    if (!model.tab?.cookiePromptManagementStatus)
      return null;
    const { consentManaged, cosmetic, optoutFailed, configurable } = model.tab.cookiePromptManagementStatus;
    if (consentManaged && !optoutFailed) {
      const text = cosmetic ? i18n.t("site:cookiesHidden.title") : i18n.t("site:cookiesMinimized.title");
      if (configurable) {
        return import_nanohtml14.default`
                <a
                    href="javascript:void(0)"
                    class="main-nav__item main-nav__item--link link-action link-action--dark"
                    role="button"
                    draggable="false"
                    onclick=${cb}
                >
                    <span class="main-nav__icon ${cosmetic ? "icon-small--info" : "icon-small--secure"}"></span>
                    <span class="main-nav__text">${text}</span>
                    <span class="main-nav__chev"></span>
                </a>
            `;
      } else {
        return import_nanohtml14.default`
                <div class="main-nav__item">
                    <span class="main-nav__icon icon-small--secure"></span>
                    <span class="main-nav__text">${text}</span>
                </div>
            `;
      }
    }
    return import_nanohtml14.default``;
  }
  function renderConnection(model, cb) {
    let icon = "icon-small--insecure";
    if (model.httpsState === "secure") {
      icon = "icon-small--secure";
    }
    if (model.httpsState === "upgraded" && /^https/.exec(model.tab.url) && Array.isArray(model.tab.certificate) && model.tab.certificate.length > 0) {
      icon = "icon-small--secure";
    }
    return import_nanohtml14.default` <a
        href="javascript:void(0)"
        class="main-nav__item main-nav__item--link link-action link-action--dark"
        role="button"
        draggable="false"
        aria-label="View Connection Information"
        onclick=${cb}
    >
        <span class="main-nav__icon ${icon}"></span>
        <span class="main-nav__text">${model.httpsStatusText}</span>
        <span class="main-nav__chev"></span>
    </a>`;
  }
  function renderTrackerNetworksNew(model, cb) {
    const { title, icon } = trackerNetworksText(model.tab.requestDetails, model.protectionsEnabled);
    return import_nanohtml14.default` <a
        href="javascript:void(0)"
        class="main-nav__item main-nav__item--link link-action link-action--dark"
        role="button"
        draggable="false"
        aria-label="View Tracker Companies"
        onclick=${cb}
    >
        <span class="main-nav__icon icon-small--${icon}"></span>
        <span class="main-nav__text">${title}</span>
        <span class="main-nav__chev"></span>
    </a>`;
  }
  function renderThirdPartyNew(model, cb) {
    const { title, icon } = thirdpartyText(model.tab.requestDetails, model.protectionsEnabled);
    return import_nanohtml14.default` <a
        href="javascript:void(0)"
        class="main-nav__item main-nav__item--link link-action link-action--dark"
        role="button"
        draggable="false"
        aria-label="View Non-Tracker Companies"
        onclick=${cb}
    >
        <span class="main-nav__icon icon-small--${icon}"></span>
        <span class="main-nav__text">${title}</span>
        <span class="main-nav__chev"></span>
    </a>`;
  }
  var import_jquery18, import_nanohtml14;
  var init_main_nav = __esm({
    "shared/js/ui/views/main-nav.js"() {
      "use strict";
      import_jquery18 = __toESM(require_jquery());
      import_nanohtml14 = __toESM(require_browser());
      init_view();
      init_tracker_networks_text();
      init_thirdparty_text();
      init_localize();
      init_platform_features();
      init_communication();
      init_environment_check();
      init_utils();
      MainNavView.prototype = import_jquery18.default.extend({}, view_default.prototype, {
        /**
         * @this {MainNavView}
         * @private
         */
        _setup: function() {
          this.bindEvents([
            // @ts-ignore
            [this.store.subscribe, "change:site", this.rerender],
            // @ts-ignore
            [this.$parent, "mouseover", this._mouseover],
            // @ts-ignore
            [this.$parent, "mouseleave", this._mouseleave]
          ]);
          if (isAndroid()) {
            this.cleanups.push(...setupMaterialDesignRipple(this.$parent[0], ".link-action"));
          }
        },
        /**
         * @this {MainNavView}
         * @private
         */
        _mouseover(e3) {
          if (!this.features.supportsHover)
            return;
          const li = e3.target?.closest("li");
          if (li) {
            const links = this.$parent.find("li").index(li);
            this.$parent[0].dataset.hover = links;
          }
        },
        _mouseleave() {
          if (!this.features.supportsHover)
            return;
          try {
            delete this.$parent[0].dataset.hover;
          } catch (e3) {
            console.warn("cannot delete data-hover");
          }
        },
        cleanup() {
          for (const cleanup of this.cleanups) {
            cleanup();
          }
          this.cleanups = [];
        },
        rerender() {
          this.cleanup();
          this._rerender();
          if (isAndroid()) {
            this.cleanups.push(...setupMaterialDesignRipple(this.$parent[0], ".link-action"));
          }
        }
      });
    }
  });

  // shared/js/ui/views/cookie-prompt.js
  function CookiePromptView(ops) {
    this.model = ops.model;
    this.template = template2;
    this.links = {
      disable: (e3) => {
        e3.preventDefault();
        this.model.openSettings("cpm");
      }
    };
    sliding_subview_default.call(this, ops);
  }
  function template2() {
    const summary = this.model.isCosmetic ? ns.site("cookiesHiddenSummary.title") : ns.site("cookiesMinimizedSummary.title");
    const icon = largeHeroIcon({
      status: this.model.isCosmetic ? "cookies-hidden" : "cookies-managed"
    });
    const hero = heroTemplate({
      icon,
      summary,
      suffix: "none"
    });
    return import_nanohtml15.default`<section class="sliding-subview">
        <div class="card" data-page="cookie-prompt">
            ${topNav({ view: "secondary" })}
            <div class="padding-x-double">${hero}</div>
            <div class="padding-x-double">
                <div class="padding-y border--top--inner text--center">${disableInSettingsLink(this.links.disable)}</div>
            </div>
        </div>
    </section> `;
  }
  var import_jquery19, import_nanohtml15;
  var init_cookie_prompt2 = __esm({
    "shared/js/ui/views/cookie-prompt.js"() {
      "use strict";
      import_jquery19 = __toESM(require_jquery());
      import_nanohtml15 = __toESM(require_browser());
      init_top_nav();
      init_hero();
      init_links();
      init_localize();
      init_sliding_subview();
      CookiePromptView.prototype = import_jquery19.default.extend(
        {},
        // @ts-ignore
        sliding_subview_default.prototype
      );
    }
  });

  // shared/js/ui/views/fire-dialog.js
  function FireDialog(ops) {
    this.model = ops.model;
    this.template = template3;
    this.model.fetch(new FetchBurnOptions()).then((resp) => {
      this.model.fireOptions = resp.options;
      view_default.call(this, ops);
      this._setup();
    });
  }
  function template3() {
    const { fireOptions } = this.model;
    if (!fireOptions) {
      return import_nanohtml16.default`<dialog id="fire-button-container"></dialog>`;
    }
    const selectedOptionIndex = fireOptions.findIndex(({ selected }) => selected);
    const selectedOption = fireOptions[selectedOptionIndex >= 0 ? selectedOptionIndex : 0];
    const selectOptions = fireOptions.map(
      ({ name, selected }) => import_nanohtml16.default`<option ${selected ? "selected" : ""}>${i18n.t(`firebutton:option${name}.title`)}</option>`
    );
    const summary = fireSummaryTemplate(selectedOption);
    return import_nanohtml16.default` <dialog id="fire-button-container" open>
        <div id="fire-button-content">
            <span id="fire-button-header">
                <img src="../img/fire-button-header.svg" />
                <h3>
                    ${selectedOption.descriptionStats.openTabs > 0 ? i18n.t("firebutton:fireDialogHeader.title") : i18n.t("firebutton:fireDialogHeaderNoTabs.title")}
                </h3>
            </span>
            <select id="fire-button-opts">
                ${selectOptions}
            </select>
            ${summary}
            <div id="fire-button-row">
                <button id="fire-button-cancel">${i18n.t("firebutton:cancel.title")}</button>
                <button id="fire-button-burn">${i18n.t("firebutton:clearData.title")}</button>
            </div>
        </div>
    </dialog>`;
  }
  function fireSummaryTemplate(selectedOption) {
    const { descriptionStats } = selectedOption;
    let template4 = "firebutton:summary";
    if (descriptionStats.clearHistory && descriptionStats.openTabs) {
      template4 += "ClearTabsHistory";
    } else if (descriptionStats.clearHistory && !descriptionStats.openTabs) {
      template4 += "ClearHistory";
    } else if (!descriptionStats.clearHistory && descriptionStats.openTabs) {
      template4 += "ClearTabs";
    } else {
      template4 += "ClearCookies";
    }
    if (descriptionStats.site) {
      template4 += "Site";
    } else if (descriptionStats.duration === "all") {
      template4 += "All";
    } else {
      template4 += "Duration";
    }
    template4 += ".title";
    return import_nanohtml16.default`<div id="fire-button-summary">
        <p>
            ${(0, import_raw3.default)(
      i18n.t(template4, {
        durationDesc: i18n.t("firebutton:historyDuration.title", { duration: descriptionStats.duration }),
        ...descriptionStats
      })
    )}
        </p>
        ${descriptionStats.site && descriptionStats.clearHistory ? import_nanohtml16.default`<p class="fire-button-disclaimer">${i18n.t("firebutton:historyAndDownloadsNotAffected.title")}</p>` : null}
        ${descriptionStats.openTabs && descriptionStats.pinnedTabs ? import_nanohtml16.default`<p class="fire-button-disclaimer">
                  ${(0, import_raw3.default)(i18n.t("firebutton:summaryPinnedIgnored.title", { tabs: descriptionStats.pinnedTabs }))}
              </p>` : null}
    </div>`;
  }
  var import_jquery20, import_nanohtml16, import_raw3;
  var init_fire_dialog = __esm({
    "shared/js/ui/views/fire-dialog.js"() {
      "use strict";
      import_jquery20 = __toESM(require_jquery());
      import_nanohtml16 = __toESM(require_browser());
      import_raw3 = __toESM(require_raw_browser());
      init_view();
      init_localize();
      init_common();
      FireDialog.prototype = import_jquery20.default.extend({}, view_default.prototype, {
        _setup: function() {
          this._cacheElems("#fire-button", ["burn", "cancel", "opts"]);
          this.bindEvents([
            [this.$burn, "click", this._onBurn],
            [this.$cancel, "click", this._close],
            [this.$opts, "change", this._updateSummary]
          ]);
        },
        _onBurn: function() {
          const selectedOption = this.$opts[0].selectedIndex;
          const opts = this.model.fireOptions[selectedOption].options;
          this.model.fetch(new BurnMessage(opts)).then(() => {
            this._close();
          });
        },
        _close: function() {
          document.getElementById("fire-button-container")?.remove();
        },
        _updateSummary: function() {
          const selectedOption = this.$opts[0].selectedIndex;
          const opts = this.model.fireOptions[selectedOption];
          this.model.fetch(new SetBurnDefaultOption(opts.name));
          const summaryElement = (0, import_jquery20.default)("#fire-button-summary");
          summaryElement.replaceWith(fireSummaryTemplate(opts));
        }
      });
    }
  });

  // shared/js/ui/views/site.js
  function Site2(ops) {
    this.model = ops.model;
    this.pageView = ops.pageView;
    this.template = ops.template;
    this.features = createPlatformFeatures(platform);
    this.$body = (0, import_jquery21.default)("body");
    this.model.getBackgroundTabData().then(() => {
      view_default.call(this, ops);
      this._setup();
    }).catch((e3) => {
      console.log("\u274C [views/site.es6.js] --> ", e3);
    });
  }
  function blur(target) {
    const closest = target?.closest("a");
    if (closest && typeof closest.blur === "function") {
      closest.blur();
    }
  }
  var import_jquery21, site_default2;
  var init_site2 = __esm({
    "shared/js/ui/views/site.js"() {
      "use strict";
      import_jquery21 = __toESM(require_jquery());
      init_email_protection();
      init_email_protection2();
      init_search();
      init_search2();
      init_view();
      init_cta_rotation2();
      init_cta_rotation();
      init_communication();
      init_page_trackers();
      init_page_non_trackers();
      init_hero();
      init_key_insights();
      init_breakage_form();
      init_platform_features();
      init_cookie_prompt();
      init_breakage_form2();
      init_page_connection();
      init_breakage_form3();
      init_email_protection3();
      init_search3();
      init_cta_rotation3();
      init_tracker_networks();
      init_main_nav();
      init_cookie_prompt2();
      init_fire_dialog();
      Site2.prototype = import_jquery21.default.extend({}, view_default.prototype, {
        _changePermission: function(e3) {
          this.model.updatePermission(e3.target.name, e3.target.value);
        },
        // NOTE: after ._setup() is called this view listens for changes to
        // site model and re-renders every time model properties change
        _setup: function() {
          this._cacheElems(".js-site", ["report-broken", "permission", "done"]);
          this.bindEvents([
            [this.$reportbroken, "click", this._onReportBrokenSiteClick],
            [this.$done, "click", this._done],
            [this.$permission, "change", this._changePermission],
            [this.store.subscribe, "action:site", this._handleEvents]
          ]);
          window.addEventListener("open-feedback", (e3) => {
            this._onReportBrokenSiteClick(e3);
          });
          this._setupFeatures();
          setTimeout(() => {
            communication_default.firstRenderComplete?.();
          }, 100);
        },
        _handleEvents(event) {
          if (event.action === "navigate") {
            if (event.data?.target === "connection") {
              this._showPageConnection();
            }
            if (event.data?.target === "trackers") {
              this._showPageTrackers();
            }
            if (event.data?.target === "nonTrackers") {
              this._showPageNonTrackers();
            }
            if (event.data?.target === "consentManaged") {
              this._showPageConsent(false);
            }
            if (event.data?.target === "cookieHidden") {
              this._showPageConsent(true);
            }
            if (event.data?.target === "fireButton") {
              this._showFireModal();
            }
          }
        },
        _onReportBrokenSiteClick: function(e3) {
          e3.preventDefault();
          if (this.model && this.model.disabled) {
            return;
          }
          this.model.checkBrokenSiteReportHandled().then((handled) => {
            if (!handled) {
              this.showBreakageForm("reportBrokenSite");
            }
          }).catch((e4) => {
            console.error("could not check", e4);
          });
        },
        // pass clickSource to specify whether page should reload
        // after submitting breakage form.
        showBreakageForm: function(e3) {
          blur(e3.target);
          this.views.slidingSubview = new breakage_form_default({
            template: breakage_form_default2,
            model: new BreakageFormModel(),
            mainModel: this.model
          });
        },
        _showPageTrackers: function() {
          if (this.$body.hasClass("is-disabled"))
            return;
          this.views.slidingSubview = new tracker_networks_default({
            template: trackerNetworksTemplate,
            heroFn: heroFromTabTrackers,
            detailsFn: sectionsFromSiteTrackers
          });
        },
        _showPageNonTrackers: function() {
          if (this.$body.hasClass("is-disabled"))
            return;
          this.views.slidingSubview = new tracker_networks_default({
            template: nonTrackersTemplate,
            heroFn: heroFromTabNonTrackers,
            detailsFn: sectionsFromSiteNonTracker
          });
        },
        _showPageConnection: function() {
          if (this.$body.hasClass("is-disabled"))
            return;
          this.views.slidingSubview = new tracker_networks_default({
            template: page_connection_default
          });
        },
        /**
         * @param {boolean} isCosmetic
         */
        _showPageConsent: function(isCosmetic) {
          this.views.slidingSubview = new CookiePromptView({
            model: new CookiePromptModel({
              site: this.model,
              isCosmetic
            })
          });
        },
        _showFireModal() {
          this.dialog = new FireDialog({
            model: this.model,
            appendTo: (0, import_jquery21.default)("#site-info-container")
          });
        },
        _done: function() {
          this.model.close();
        },
        _setupFeatures() {
          this.views.mainNav = new MainNavView({
            model: this.model,
            appendTo: (0, import_jquery21.default)("#main-nav"),
            store: this.store
          });
          this.views.keyInsight = new KeyInsightView({
            model: this.model,
            appendTo: (0, import_jquery21.default)("#key-insight"),
            store: this.store
          });
          if (this.model.tab?.search) {
            this.views.search = new search_default3({
              pageView: this,
              model: new search_default({ searchText: "", showFireButton: this.model.fireButton?.enabled }),
              appendTo: (0, import_jquery21.default)("#search-form-container"),
              template: search_default2
            });
          }
          if (this.model.tab?.ctaScreens && !this.views.ctaRotations) {
            this.views.ctaRotations = new cta_rotation_default2({
              pageView: this,
              model: new CtaRotationModel({ emailProtectionUserData: this.model.emailProtectionUserData }),
              appendTo: (0, import_jquery21.default)("#cta-rotation"),
              template: cta_rotation_default
            });
          }
          if (this.model.tab?.emailProtection) {
            this.views.emailProtection = new email_protection_default2({
              model: new email_protection_default({ emailProtectionUserData: this.model.emailProtectionUserData }),
              appendTo: (0, import_jquery21.default)("#email-alias-container"),
              template: emailProtectionTemplate
            });
          }
        }
      });
      site_default2 = Site2;
    }
  });

  // shared/js/ui/models/background-message.js
  function BackgroundMessage(attrs) {
    model_default.call(this, attrs);
    const thisModel = this;
    thisModel.send = new Proxy(thisModel.send, {
      apply(target, thisArg, argArray) {
        return Reflect.apply(target, thisArg, argArray);
      }
    });
    communication_default.backgroundMessage(thisModel);
  }
  var import_jquery22, background_message_default;
  var init_background_message = __esm({
    "shared/js/ui/models/background-message.js"() {
      "use strict";
      import_jquery22 = __toESM(require_jquery());
      init_model();
      init_communication();
      BackgroundMessage.prototype = import_jquery22.default.extend({}, model_default.prototype, {
        modelName: "backgroundMessage"
      });
      background_message_default = BackgroundMessage;
    }
  });

  // shared/js/ui/templates/site.js
  function site_default3() {
    const supportsCtaScreens = Boolean(this.model.tab?.ctaScreens);
    if (this.model.tab.error) {
      const errorText = i18n.t("site:errorMessage.title");
      return import_nanohtml17.default`
            <div class="site-info">
                <div class="page-inner">
                    ${renderSearchWrapper(this.model)}
                    <div class="padding-x">
                        <div class="cta-screen">
                            <p class="note token-title-3 text--center">${errorText}</p>
                        </div>
                    </div>
                    <div class="padding-x"></div>
                </div>
            </div>
        `;
    }
    if (this.model.disabled && supportsCtaScreens) {
      return import_nanohtml17.default`
            <div class="site-info">
                <div class="page-inner">
                    ${renderSearchWrapper(this.model)}
                    <div class="padding-x">
                        <div id="cta-rotation"></div>
                    </div>
                    <div class="padding-x">${renderEmailWrapper(this.model)}</div>
                </div>
            </div>
        `;
    }
    const permissions = localizePermissions(this.model.permissions);
    return import_nanohtml17.default` <div class="site-info page">
        ${renderSearchWrapper(this.model)} ${topNav({ view: "primary" })}
        <div class="page-inner" data-with-permissions=${permissions.length > 0}>
            <header class="header">
                ${protectionHeader(this.model)}
            </header>
            <div class="header-spacer"></div>
            <div class="padding-x-double">
                <div id="key-insight"></div>
            </div>
            <div class="padding-x">
                <nav id="main-nav"></nav>
            </div>
            <footer class="footer">
                <div class="padding-x">
                    ${renderEmailWrapper(this.model)} 
                </div>
            </footer>
        </div>
        ${permissions.length ? outer({ children: renderManagePermissions(this.model) }) : null}
    </div>`;
  }
  function outer(props) {
    return import_nanohtml17.default`<div class="page-outer">${props.children}</div>`;
  }
  function renderSearchWrapper(model) {
    if (model.tab?.search) {
      return import_nanohtml17.default`<section id="search-form-container"></section>`;
    }
  }
  function renderEmailWrapper(model) {
    if (model.tab?.emailProtection) {
      return import_nanohtml17.default`<div id="email-alias-container"></div>`;
    }
  }
  function renderManagePermissions(model) {
    if (!model.permissions || model.permissions.length === 0) {
      return "";
    }
    const localizedPerms = localizePermissions(model.permissions);
    return import_nanohtml17.default` <ul class="default-list">
        <li class="site-info__li--manage-permissions">
            ${localizedPerms.map(({ key: permissionId, title, permission, options }) => {
      if (!model.permissions)
        return "";
      return import_nanohtml17.default`<div class="site-info__page-permission">
                    <label>
                        <div>
                            <div class="site-info__page-permission__icon" data-icon=${permissionId}></div>
                            ${title}
                        </div>
                        <select class="js-site-permission" name="${permissionId}">
                            ${options.map(
        ({ id, title: title2 }) => import_nanohtml17.default`<option value="${id}" ${permission === id ? "selected" : ""}>${title2}</option>`
      )}
                        </select>
                    </label>
                </div>`;
    })}
        </li>
    </ul>`;
  }
  function localizePermissions(permissions) {
    if (!Array.isArray(permissions) || permissions.length === 0) {
      return [];
    }
    const updatedPermissions = JSON.parse(JSON.stringify(permissions));
    return updatedPermissions.map((perm) => {
      const permKey = `permissions:${perm.key}.title`;
      if (i18n.exists(permKey)) {
        perm.title = i18n.t(permKey);
      }
      perm.options = perm.options.map((option) => {
        const optionKey = `permissions:${option.id}.title`;
        if (i18n.exists(optionKey)) {
          option.title = i18n.t(optionKey);
        }
        return option;
      });
      return perm;
    });
  }
  var import_nanohtml17;
  var init_site3 = __esm({
    "shared/js/ui/templates/site.js"() {
      "use strict";
      import_nanohtml17 = __toESM(require_browser());
      init_localize();
      init_top_nav();
      init_protection_header();
    }
  });

  // shared/js/ui/pages/popup.js
  var popup_exports = {};
  __export(popup_exports, {
    initPopup: () => initPopup
  });
  function Trackers(ops) {
    this.message = null;
    this.views = {
      /** @type {SiteView | null} */
      site: null
    };
    this.$parent = (0, import_jquery23.default)("#popup-container");
    page_default.call(this, ops);
  }
  function initPopup() {
    return new Trackers();
  }
  var import_jquery23;
  var init_popup = __esm({
    "shared/js/ui/pages/popup.js"() {
      "use strict";
      import_jquery23 = __toESM(require_jquery());
      init_page();
      init_site2();
      init_site();
      init_background_message();
      init_site3();
      Trackers.prototype = import_jquery23.default.extend({}, page_default.prototype, {
        pageName: "popup",
        /**
         * @this {Trackers}
         */
        ready: function() {
          page_default.prototype.ready.call(this);
          this.message = new background_message_default();
          this.views.site = new site_default2({
            pageView: this,
            model: new site_default(),
            appendTo: (0, import_jquery23.default)("#site-info-container"),
            template: site_default3
          });
        }
      });
    }
  });

  // shared/js/ui/base/loadcss.js
  var loadcss_exports = {};
  __export(loadcss_exports, {
    loadCss: () => loadCss
  });
  function loadCssFile(file) {
    const head = document.getElementsByTagName("head")[0];
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.type = "text/css";
    link.href = "../public/css/" + file + ".css";
    head.appendChild(link);
  }
  function loadCss() {
    setTimeout(() => {
      if (isAndroid()) {
        loadCssFile("android");
      }
      loadCssFile("base");
      loadCssFile("popup");
    }, 5);
  }
  var init_loadcss = __esm({
    "shared/js/ui/base/loadcss.js"() {
      "use strict";
      init_environment_check();
    }
  });

  // shared/js/ui/base/index.js
  window.onunhandledrejection = (event) => {
    console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);
  };
  try {
    const { initPopup: initPopup2 } = (init_popup(), __toCommonJS(popup_exports));
    const { loadCss: loadCss2 } = (init_loadcss(), __toCommonJS(loadcss_exports));
    initPopup2();
    loadCss2();
  } catch (e3) {
    console.error("start up error", e3);
  }
})();
/*! Bundled license information:

jquery/dist/jquery.js:
  (*!
   * jQuery JavaScript Library v3.6.2
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2022-12-13T14:56Z
   *)

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

eventemitter2/lib/eventemitter2.js:
  (*!
   * EventEmitter2
   * https://github.com/hij1nx/EventEmitter2
   *
   * Copyright (c) 2013 hij1nx
   * Licensed under the MIT license.
   *)

@material/ripple/adapter.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dom/events.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dom/ponyfill.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/adapter.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/constants.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/observer.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/observer-foundation.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/foundation.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/component.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/index.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
