!function(){"use strict";const e=chrome.runtime.getManifest().manifest_version,t={enabled:!0,autoAction:"optOut",disabledCmps:[],enablePrehide:!0,detectRetries:20},o={};async function s(t){if(2!==e)return chrome.storage.local.set(t);Object.assign(o,t)}async function c(t){return 2===e?o:chrome.storage.local.get(t)}async function n(){const e=await fetch("./rules.json");s({rules:await e.json()})}function r(e,t){let o="",s="icons/cookie-idle.png";"success"===t?(o="Opt out successful!",s="icons/party.png"):"complete"===t?(o="Opt out complete!",s="icons/tick.png"):"working"===t?(o="Processing...",s="icons/cog.png"):"verified"===t?(o="Verified",s="icons/verified.png"):"idle"===t?(o="Idle",s="icons/cookie-idle.png"):"available"===t&&(o="Click to opt out",s="icons/cookie.png");const c=chrome.action||chrome.pageAction;chrome.pageAction&&chrome.pageAction.show(e),c.setTitle({tabId:e,title:o}),c.setIcon({tabId:e,path:s})}chrome.runtime.onInstalled.addListener((()=>{n()})),2===e&&n(),chrome.runtime.onMessage.addListener((async(n,a)=>{const i=a.tab.id,l=a.frameId,d=(await c("rules")).rules;switch(n.type){case"init":0===l&&r(i,"idle"),chrome.tabs.sendMessage(i,{type:"initResp",rules:d,config:t},{frameId:l});break;case"eval":(async function(t,o,s){return 2===e?new Promise((e=>{chrome.tabs.executeScript(t,{frameId:o,code:`!!window.eval(decodeURIComponent("${encodeURIComponent(s)}"))`},(t=>{e([{result:t,frameId:o}])}))})):chrome.scripting.executeScript({target:{tabId:t,frameIds:[o]},world:"MAIN",args:[s],func:e=>{try{return window.eval(e)}catch(e){return}}})})(i,l,n.code).then((([e])=>{chrome.tabs.sendMessage(i,{id:n.id,type:"evalResp",result:e.result},{frameId:l})}));break;case"popupFound":r(i,"available"),s({[`detected${i}`]:l});break;case"optOutResult":case"optInResult":n.result&&(r(i,"working"),n.scheduleSelfTest&&await s({[`selfTest${i}`]:l}));break;case"selfTestResult":n.result&&r(i,"verified");break;case"autoconsentDone":{r(i,"success");const t=`selfTest${i}`,s=(await chrome.storage.local.get(t))?.[t];"number"==typeof s&&(!async function(t){if(2!==e)return chrome.storage.local.remove(t);delete o[t]}(t),chrome.tabs.sendMessage(i,{type:"selfTest"},{frameId:s}));break}case"autoconsentError":console.error("Error:",n.details)}})),(chrome.action||chrome.pageAction).onClicked.addListener((async e=>{const t=e.id,o=`detected${t}`,s=(await c(o))?.[o];"number"==typeof s&&(chrome.storage.local.remove(o),r(t,"working"),chrome.tabs.sendMessage(t,{type:"optOut"},{frameId:s}))}))}();
