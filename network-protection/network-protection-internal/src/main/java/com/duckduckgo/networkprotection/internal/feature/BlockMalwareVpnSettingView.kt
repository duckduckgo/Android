/*
 * Copyright (c) 2024 DuckDuckGo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.duckduckgo.networkprotection.internal.feature

import android.annotation.SuppressLint
import android.content.Context
import android.util.AttributeSet
import android.view.View
import android.widget.CompoundButton.OnCheckedChangeListener
import android.widget.FrameLayout
import com.duckduckgo.anvil.annotations.InjectWith
import com.duckduckgo.anvil.annotations.PriorityKey
import com.duckduckgo.app.di.AppCoroutineScope
import com.duckduckgo.common.ui.viewbinding.viewBinding
import com.duckduckgo.common.utils.DispatcherProvider
import com.duckduckgo.di.scopes.ActivityScope
import com.duckduckgo.di.scopes.ViewScope
import com.duckduckgo.feature.toggles.api.Toggle
import com.duckduckgo.mobile.android.vpn.VpnFeature
import com.duckduckgo.mobile.android.vpn.VpnFeaturesRegistry
import com.duckduckgo.networkprotection.impl.configuration.WgTunnelConfig
import com.duckduckgo.networkprotection.impl.settings.NetPSettingsLocalConfig
import com.duckduckgo.networkprotection.impl.settings.VpnSettingPlugin
import com.duckduckgo.networkprotection.internal.databinding.VpnViewSettingsBlockMalwareBinding
import com.squareup.anvil.annotations.ContributesMultibinding
import dagger.android.support.AndroidSupportInjection
import javax.inject.Inject
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

@InjectWith(ViewScope::class)
class BlockMalwareVpnSettingView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyle: Int = 0,
) : FrameLayout(context, attrs, defStyle) {

    @Inject
    lateinit var dispatcherProvider: DispatcherProvider

    @Inject
    lateinit var netPSettingsLocalConfig: NetPSettingsLocalConfig

    @Inject
    lateinit var vpnFeaturesRegistry: VpnFeaturesRegistry

    @Inject
    @AppCoroutineScope
    lateinit var appCoroutineScope: CoroutineScope

    @Inject
    lateinit var wgTunnelConfig: WgTunnelConfig

    private var mainCoroutineScope: CoroutineScope? = null

    private val binding: VpnViewSettingsBlockMalwareBinding by viewBinding()

    private var didToggleSetting = false

    private val toggleListener = OnCheckedChangeListener { _, value ->
        mainCoroutineScope?.launch(dispatcherProvider.io()) {
            didToggleSetting = !didToggleSetting
            netPSettingsLocalConfig.blockMalware().setEnabled(Toggle.State(enable = value))
        }
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    override fun onAttachedToWindow() {
        AndroidSupportInjection.inject(this)
        super.onAttachedToWindow()

        @SuppressLint("NoHardcodedCoroutineDispatcher")
        mainCoroutineScope = CoroutineScope(SupervisorJob() + dispatcherProvider.main())

        mainCoroutineScope?.launch(dispatcherProvider.io()) {
            val isEnabled = netPSettingsLocalConfig.blockMalware().isEnabled()
            withContext(dispatcherProvider.main()) {
                binding.blockMalware.quietlySetIsChecked(isEnabled, toggleListener)
            }
        }
    }

    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        if (didToggleSetting) {
            // appCoroutineScope to make sure it's not cancelled
            appCoroutineScope.launch(dispatcherProvider.io()) {
                // wgTunnelConfig.clearWgConfig() // force config re-fetch
                // VpnFeature hardcoded here as eventually we'll move this inside the netp-impl module
                vpnFeaturesRegistry.refreshFeature(VpnFeature { "NETP_VPN" })
            }
        }
        mainCoroutineScope?.cancel()
        mainCoroutineScope = null
    }
}

@ContributesMultibinding(ActivityScope::class)
@PriorityKey(BLOCK_MALWARE_PRIORITY)
class BlockMalwareSettingViewPlugin @Inject constructor() : VpnSettingPlugin {
    override fun getView(context: Context): View? {
        return BlockMalwareVpnSettingView(context)
    }
}
