# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

 # CONSTANTS
    releaseNotesBodyHeader = "What's new in this release?"
    releaseNotesSuffixHeader = "Have feedback?"
    releaseNotesFileBody = "../app/version/release-notes"
    releaseNotesFileHiring = "../app/version/release-notes-hiring"
    releaseNotesFileSuffix = "../app/version/release-notes-suffix"
    releaseNotesLocales= ["en-US", "en-GB", "en-CA"]
    errorMessageCancelled = "Release cancelled ðŸ˜¢"

default_platform(:android)

platform :android do

  desc "Generate release notes for the Play Store"
  private_lane :release_notes_playstore do

    releaseNotesBody = File.read(releaseNotesFileBody)
    releaseNotesSuffix = File.read(releaseNotesFileSuffix)
    releaseNotesHiring = File.read(releaseNotesFileHiring)

    formatted = "#{releaseNotesBodyHeader}\n#{releaseNotesBody}#{releaseNotesHiring}\n\n#{releaseNotesSuffixHeader}\n#{releaseNotesSuffix}"
    UI.message("\n#{formatted}")
    formatted

  end

  desc "Generate release notes for GitHub"
    private_lane :release_notes_github do

      releaseNotesBody = File.read(releaseNotesFileBody)
      releaseNotesSuffix = File.read(releaseNotesFileSuffix)
      releaseNotesHiring = File.read(releaseNotesFileHiring)

      formatted = "\#\# #{releaseNotesBodyHeader}\n#{releaseNotesBody}#{releaseNotesHiring}\n\n\#\# #{releaseNotesSuffixHeader}\n#{releaseNotesSuffix}"
      UI.message("\n#{formatted}")
      formatted

    end


  desc "Upload APK to Play Store"
  lane :deploy_playstore do

    update_fastlane_release_notes()

    props = property_file_read(file: "app/version/version.properties")
    version = props["VERSION"]
    apkPath = "app/build/outputs/apk/play/release/duckduckgo-#{version}-play-release.apk"

    upload_to_play_store(
      apk: apkPath,
      track: 'internal',
      skip_upload_screenshots: true,
      skip_upload_images: true,
      validate_only: false
    )

    cleanup_fastlane_release_notes()

  end

  desc "Upload APK to ad-hoc internal app sharing"
  private_lane :deploy_adhoc do

      props = property_file_read(file: "app/version/version.properties")
      version = props["VERSION"]
      apkPath = "app/build/outputs/apk/play/release/duckduckgo-#{version}-play-release.apk"

      upload_to_play_store_internal_app_sharing(
        apk: apkPath
      )

 end

  desc "Deploy APK to GitHub"
  lane :deploy_github do

    props = property_file_read(file: "app/version/version.properties")
    version = props["VERSION"]
    releaseNotes = release_notes_github()
    apkPath = "app/build/outputs/apk/play/release/duckduckgo-#{version}-play-release.apk"
    token = ENV["GITHUB_UPLOAD_TOKEN"]

    UI.message ("Upload new app version to GitHub\nVersion: #{version}\nRelease Notes:\n=====\n#{releaseNotes}\n=====\n")

    set_github_release(
        repository_name: "DuckDuckGo/Android",
        api_token: token,
        name: version,
        tag_name: version,
        description: releaseNotes,
        upload_assets: [apkPath],
        is_draft: false,
        is_prerelease: false)

    end

    desc "Update local changelist metadata"
    private_lane :update_fastlane_release_notes do

      releaseNotes = release_notes_playstore()

      flversion=gradle(task: '-q fastlaneVersionCode')
      UI.message("App version for fastlane is #{flversion}.\nRelease notes for Play Store:\n\n#{releaseNotes}")

      releaseNotesLocales.each do |locale|
        File.open("../fastlane/metadata/android/#{locale}/changelogs/#{flversion}.txt", 'w') do |file| file.write("#{releaseNotes}") end
      end

    end

    desc "Clean up local changelist metadata"
        private_lane :cleanup_fastlane_release_notes do

          flversion=gradle(task: '-q fastlaneVersionCode')

          releaseNotesLocales.each do |locale|
            sh("rm '../fastlane/metadata/android/#{locale}/changelogs/#{flversion}.txt'")
          end

        end

    # Note, this currently relies on having `git flow` tools installed.
    # This dependency could be removed with a little more time to tidy up this script to do the branching/merging manually.

    desc "Create new release"
      lane :release do

        ensure_git_status_clean
        ensure_git_branch( branch: 'develop' )

        releaseNotes = determine_release_notes()

        newVersion = prompt(text: "\nLast release was: #{last_git_tag}\nEnter New Version Number:")

        if UI.confirm("Are you sure you're happy with this release?\n\nVersion=#{newVersion}\nRelease Notes:\n#{releaseNotes}\n")
          UI.success "Creating release branch for release/#{newVersion}"

          sh "git flow release start #{newVersion}"

          File.open('../app/version/version.properties', 'w') do |file|
            file.write("VERSION=#{newVersion}")
          end

          File.open('../app/version/release-notes', 'w') do |file|
            file.write("""#{releaseNotes}""")
          end

          if UI.confirm(text:"If you have any other changes to make to the release branch, do them now. Enter `y` when ready to create and push tags")

            git_commit(
                message: "Updated release notes and version number for new release - #{newVersion}",
                path: "*",
                allow_nothing_to_commit: true,
                skip_git_hooks: true
            )
            
            sh "git flow release finish -mnFS '#{newVersion}' '#{newVersion}'"
            push_git_tags
            sh "git push origin main"
            sh "git push origin develop"

            UI.header("#{newVersion} tag has been successfully created. ðŸŽ‰")

          else
            UI.error errorMessageCancelled
          end

        else
          UI.error errorMessageCancelled
        end

        end

        private_lane :determine_release_notes do

        commits = changelog_from_git_commits(
            between: [last_git_tag, "HEAD"],
            pretty: "- %s",
            date_format: "short",
            match_lightweight_tag: false,
            merge_commit_filtering: "exclude_merges"
        )

            existingReleaseNotes = File.read(releaseNotesFileBody)
            UI.important("Existing release notes:\n")
            UI.message("#{existingReleaseNotes}\n")
            choice = UI.select "What do you want to do for release notes?", ["KEEP EXISTING", "CUSTOM",
              "Bug fixes and other improvements",
            ]

            rl = case choice
                when "KEEP EXISTING"
                    existingReleaseNotes
                when "CUSTOM"
                    prompt(text: "Release Notes: ", multi_line_end_keyword: "END")
                else
                    choice
            end
        end

end