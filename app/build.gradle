apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../versioning.gradle'

ext {
    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.duckduckgo.mobile.android"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "com.duckduckgo.app.TestRunner"
        archivesBaseName = "duckduckgo-$versionName"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
            androidTest.resources.srcDirs += files("$projectDir/../submodules/".toString())
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            pseudoLocalesEnabled false
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_blue",
                    appIconRound: "@mipmap/ic_launcher_blue_round"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_red",
                    appIconRound: "@mipmap/ic_launcher_red_round"
            ]
        }
    }
    externalNativeBuild {

        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true

        if (USE_ORCHESTRATOR) {
            execution 'ANDROID_TEST_ORCHESTRATOR'
        }
    }

    def staticConfigPath = "${System.getenv('HOME')}/jenkins_static/com.duckduckgo.mobile.android"
    def propertiesPath = "${staticConfigPath}/ddg_android_build.properties"
    def propertiesFile = new File(propertiesPath)
    if (propertiesFile.exists()) {
        println "Signing properties found"
        def props = new Properties()
        props.load(new FileInputStream(propertiesFile))
        android.signingConfigs.release.storeFile = file("${staticConfigPath}/${props['key.store']}")
        android.signingConfigs.release.storePassword = props['key.store.password']
        android.signingConfigs.release.keyAlias = props['key.alias']
        android.signingConfigs.release.keyPassword = props['key.alias.password']
    } else {
        println "Signing properties not found at ${propertiesPath}, releases will NOT succeed"
        android.buildTypes.release.signingConfig = null
    }
}

ext {
    androidX = "1.0.2"
    materialDesign = "1.1.0-alpha05"
    architectureComponents = "1.1.1"
    architectureComponentsExtensions = "1.1.1"
    androidKtx = "1.0.2"
    fragmentKtx = "1.0.0"
    constraintLayout = "2.0.0-beta1"
    lifecycle = "2.1.0-alpha04"
    room = "2.1.0"
    workManager = "2.2.0"
    legacySupport = "1.0.0"
    espressoCore = "3.1.1"
    coreTesting = "2.0.0"
    androidTestRunner = "1.0.2"
    testRunner = "1.1.1"
    coroutines = "1.3.1"

    junit = "4.12"
    dagger = "2.18"
    retrofit = "2.3.0"
    ankoVersion = "0.10.4"
    glide = "4.8.0"
    lottieVersion = "2.6.0-beta19"
    okHttp = "3.10.0"
    rxJava = "2.1.10"
    rxAndroid = "2.0.2"
    timber = "4.7.1"
    rxRelay = "2.0.0"
    leakCanary = "2.0-beta-4"
    mockito = "2.18.3"
    mockitoKotlin = "2.0.0"
    commonsMath = "3.6.1"
    referrerLibrary = "1.0"
}


dependencies {
    implementation "androidx.legacy:legacy-support-v4:$legacySupport"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //noinspection GradleDependency - 1.1 has a bug which causes a crash
    implementation "com.android.installreferrer:installreferrer:$referrerLibrary"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    implementation "androidx.appcompat:appcompat:$androidX"
    implementation "com.google.android.material:material:$materialDesign"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    implementation "com.squareup.okhttp3:okhttp:$okHttp"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation "io.reactivex.rxjava2:rxjava:$rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid"
    implementation "com.jakewharton.timber:timber:$timber"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"

    // RxRelay
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxRelay"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"
    implementation "org.jetbrains.anko:anko-design:$ankoVersion"

    // Android KTX
    implementation "androidx.core:core-ktx:$androidKtx"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtx"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"

    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle"
    testImplementation "androidx.arch.core:core-testing:$coreTesting"
    androidTestImplementation "androidx.arch.core:core-testing:$coreTesting"

    // Room
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-rxjava2:$room"
    implementation "androidx.room:room-ktx:$room"
    kapt "androidx.room:room-compiler:$room"
    testImplementation "androidx.room:room-testing:$room"
    androidTestImplementation "androidx.room:room-testing:$room"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$workManager"

    // Dagger
    kapt "com.google.dagger:dagger-android-processor:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$dagger"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    // Lottie
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Apache commons
    implementation "org.apache.commons:commons-math3:$commonsMath"

    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin"
    testImplementation "junit:junit:$junit"

    androidTestImplementation "androidx.test:runner:$testRunner"
    androidTestImplementation "androidx.test:rules:$testRunner"
    androidTestUtil "androidx.test:orchestrator:$testRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCore"
    androidTestImplementation "org.mockito:mockito-android:$mockito"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okHttp"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    kapt "com.android.tools.build.jetifier:jetifier-core:$jetifier"
    annotationProcessor "com.android.tools.build.jetifier:jetifier-core:$jetifier"
}
