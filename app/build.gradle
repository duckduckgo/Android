apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../versioning.gradle'
apply from: "$rootDir/spotless.gradle"

ext {
    USE_ORCHESTRATOR = project.hasProperty('orchestrator') ? project.property('orchestrator') : false
}

android {
    compileSdkVersion 29
    ndkVersion '21.0.6113669'
    defaultConfig {
        applicationId "com.duckduckgo.mobile.android"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "com.duckduckgo.app.TestRunner"
        archivesBaseName = "duckduckgo-$versionName"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
            androidTest.resources.srcDirs += files("$projectDir/../submodules/".toString())
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            pseudoLocalesEnabled false
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_blue",
                    appIconRound: "@mipmap/ic_launcher_blue_round"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_red",
                    appIconRound: "@mipmap/ic_launcher_red_round"
            ]
        }
    }
    externalNativeBuild {

        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true

        if (USE_ORCHESTRATOR) {
            execution 'ANDROID_TEST_ORCHESTRATOR'
        }
    }

    def staticConfigPath = "${System.getenv('HOME')}/jenkins_static/com.duckduckgo.mobile.android"
    def propertiesPath = "${staticConfigPath}/ddg_android_build.properties"
    def propertiesFile = new File(propertiesPath)
    if (propertiesFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propertiesFile))
        android.signingConfigs.release.storeFile = file("${staticConfigPath}/${props['key.store']}")
        android.signingConfigs.release.storePassword = props['key.store.password']
        android.signingConfigs.release.keyAlias = props['key.alias']
        android.signingConfigs.release.keyPassword = props['key.alias.password']
    } else {
        println "Signing properties not found at ${propertiesPath}, releases will NOT succeed"
        android.buildTypes.release.signingConfig = null
    }
}

ext {
    androidX = "1.2.0"
    materialDesign = "1.2.1"
    swipeRefreshLayout = "1.1.0"
    architectureComponents = "1.1.1"
    architectureComponentsExtensions = "1.1.1"
    androidKtxCore = "1.3.2"
    fragmentKtx = "1.2.5"
    constraintLayout = "2.0.4"
    lifecycle = "2.2.0"
    room = "2.2.5"
    workManager = "2.4.0"
    legacySupport = "1.0.0"
    coreTesting = "2.1.0"
    testRunner = "1.3.0"
    coroutines = "1.3.5"
    retrofitCoroutinesAdapter = "0.9.2"
    webkit = "1.3.0"
    referrerLibrary = "1.1.2"

    junit = "4.12"
    dagger = "2.27"
    retrofit = "2.8.1"
    ankoVersion = "0.10.4"
    glide = "4.11.0"
    lottieVersion = "3.4.0"
    okHttp = "4.9.0"
    rxJava = "2.1.10"
    rxAndroid = "2.0.2"
    timber = "4.7.1"
    rxRelay = "2.0.0"
    leakCanary = "2.5"
    mockito = "3.4.6"
    mockitoKotlin = "2.2.0"
    commonsMath = "3.6.1"
}


dependencies {
    implementation AndroidX.legacy.supportV4
    debugImplementation Square.leakCanary.android

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation Kotlin.stdlib.jdk7
    implementation KotlinX.coroutines.core
    implementation KotlinX.coroutines.android
    androidTestImplementation (KotlinX.coroutines.test) {
        // https://github.com/Kotlin/kotlinx.coroutines/issues/2023
        // conflicts with mockito due to direct inclusion of byte buddy
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    implementation AndroidX.appCompat
    implementation Google.android.material
    implementation AndroidX.constraintLayout
    implementation AndroidX.swipeRefreshLayout
    implementation AndroidX.webkit
    implementation Square.okHttp3.okHttp
    implementation "com.squareup.okhttp3:okhttp-tls:_"
    implementation Square.retrofit2.retrofit
    implementation Square.retrofit2.converter.moshi
    implementation Square.retrofit2.adapter.rxJava2
    implementation Square.retrofit2.converter.scalars
    implementation "io.reactivex.rxjava2:rxjava:_"
    implementation "io.reactivex.rxjava2:rxandroid:_"
    implementation JakeWharton.timber
    implementation Google.dagger.android
    implementation Google.dagger.android.support

    // RxRelay
    implementation "com.jakewharton.rxrelay2:rxrelay:_"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:_"
    implementation "org.jetbrains.anko:anko-design:_"

    // Android KTX
    implementation AndroidX.core.ktx
    implementation AndroidX.fragmentKtx

    // ViewModel and LiveData
    implementation AndroidX.lifecycle.extensions
    implementation AndroidX.lifecycle.viewModelKtx
    implementation AndroidX.lifecycle.liveDataKtx

    implementation  AndroidX.lifecycle.commonJava8
    testImplementation AndroidX.archCore.testing
    androidTestImplementation AndroidX.archCore.testing

    // Room
    implementation AndroidX.room.runtime
    implementation AndroidX.room.rxJava2
    implementation AndroidX.room.ktx
    kapt AndroidX.room.compiler
    testImplementation AndroidX.room.testing
    androidTestImplementation AndroidX.room.testing

    // WorkManager
    implementation AndroidX.work.runtimeKtx
    androidTestImplementation AndroidX.work.testing
    implementation AndroidX.work.rxJava2

    // Dagger
    kapt Google.dagger.android.processor
    kapt Google.dagger.compiler
    kaptAndroidTest "com.google.dagger:dagger-android-processor:_"
    kaptAndroidTest "com.google.dagger:dagger-compiler:_"

    // Glide
    implementation "com.github.bumptech.glide:glide:_"
    implementation "com.github.bumptech.glide:okhttp3-integration:_"
    kapt "com.github.bumptech.glide:compiler:_"

    // Lottie
    implementation "com.airbnb.android:lottie:_"

    // Apache commons
    implementation "org.apache.commons:commons-math3:_"

    // Play Store referrer library
    implementation("com.android.installreferrer:installreferrer:_")

    // Testing dependencies
    androidTestImplementation AndroidX.test.runner
    androidTestImplementation AndroidX.test.rules
    androidTestUtil AndroidX.test.orchestrator
    androidTestImplementation Testing.mockito.android
    androidTestImplementation Testing.mockito.kotlin
    androidTestImplementation Square.okHttp3.mockWebServer
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:_"
}
