/*
 * Copyright (c) 2020 DuckDuckGo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.duckduckgo.app.global

import android.content.Context
import android.util.TypedValue
import android.view.View
import android.view.ViewTreeObserver


class KeyBoardVisibilityNotifier(context: Context) {
    var _200Dp:Float = 0F
    init {
        val metrics = context.resources.displayMetrics
        _200Dp = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 200F, metrics)
    }
    var gl: ViewTreeObserver.OnGlobalLayoutListener? = null
    inline fun register(rootView: View, crossinline listener: (Boolean) -> Unit) {
        with(rootView) {
            gl = object : ViewTreeObserver.OnGlobalLayoutListener {
                override fun onGlobalLayout() {
                    val heightDiff = rootView.rootView.height - rootView.height
                    if(heightDiff >= _200Dp) {
                        listener(true)
                    }else {
                        listener(false)
                    }
                }
            }
            unRegister(rootView)
            viewTreeObserver.addOnGlobalLayoutListener(gl!!)
        }
    }
    fun unRegister(rootView: View) {
        gl?.apply {
            rootView.viewTreeObserver.removeOnGlobalLayoutListener(this)
        }
    }
}
