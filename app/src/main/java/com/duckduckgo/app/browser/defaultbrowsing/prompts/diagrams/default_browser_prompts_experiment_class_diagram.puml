@startuml
allowmixing

component MainProcessLifecycleObserver
note top of MainProcessLifecycleObserver
  The implementation class is the process observer so that it can check
  whether DDG is the default browser app whenever the process resumes.
  This allows us to check the state on app launch,
  but also when app is already running and user changed the default
  either via the system dialog or manually in system settings.
end note

abstract class DefaultBrowserPromptsExperimentCommand as "(sealed class) DefaultBrowserPromptsExperiment.Command"

class OpenMessageDialog as "(data object) OpenMessageDialog"

class OpenSystemDefaultBrowserDialog as "(data class) OpenSystemDefaultBrowserDialog" {
  + intent: Intent
}

class OpenSystemDefaultAppsActivity as "(data class) OpenSystemDefaultAppsActivity" {
  + intent: Intent
}

DefaultBrowserPromptsExperimentCommand <|-- OpenMessageDialog : extends
DefaultBrowserPromptsExperimentCommand <|-- OpenSystemDefaultBrowserDialog : extends
DefaultBrowserPromptsExperimentCommand <|-- OpenSystemDefaultAppsActivity : extends

interface DefaultBrowserPromptsExperiment {
  + val highlightPopupMenu: StateFlow<Boolean>
  + val showSetAsDefaultPopupMenuItem: StateFlow<Boolean>
  + val commands: Flow<DefaultBrowserPromptsExperiment.Command>

  + fun onPopupMenuLaunched()
  + fun onSetAsDefaultPopupMenuItemSelected()

  + fun onMessageDialogShown()
  + fun onMessageDialogDismissed()
  + fun onMessageDialogConfirmationButtonClicked()
  + fun onMessageDialogNotNowButtonClicked()

  + fun onSystemDefaultBrowserDialogShown()
  + fun onSystemDefaultBrowserDialogSuccess()
  + fun onSystemDefaultBrowserDialogCanceled()

  + fun onSystemDefaultAppsActivityOpened()
  + fun onSystemDefaultAppsActivityClosed()
}

DefaultBrowserPromptsExperiment::commands -> DefaultBrowserPromptsExperimentCommand : uses

note left of DefaultBrowserPromptsExperiment::commands
  Backed by a //Conflated Channel// so that the experiment
  can prepare an intent to be launched without being coupled
  with Activity/Fragment's lifecycle.

  The Activity/Fragment will pick up and execute the intent whenever its ready to do so.
end note

enum AdditionalPromptsCohortName {
  + CONTROL("control")
  + VARIANT_1("variant_1")
  + VARIANT_2("variant_2")
  + VARIANT_3("variant_3")
}

interface DefaultBrowserPromptsFeatureToggles {
  + additionalPrompts(): Toggle
}

DefaultBrowserPromptsFeatureToggles -> AdditionalPromptsCohortName : uses

enum ExperimentStage {
  + NOT_ENROLLED
  + ENROLLED
  + STAGE_1
  + STAGE_2
  + STOPPED
  + CONVERTED
}

interface DefaultBrowserPromptsDataStore {
  + val experimentStage: Flow<ExperimentStage>
  + val showSetAsDefaultPopupMenuItem: Flow<Boolean>
  + val highlightPopupMenuIcon: Flow<Boolean>
  + suspend fun storeExperimentStage(stage: ExperimentStage)
  + suspend fun storeShowSetAsDefaultPopupMenuItemState(show: Boolean)
  + suspend fun storeHighlightPopupMenuState(highlight: Boolean)
}

note right of ExperimentStage::CONVERTED
  Notes if the user has already set the DDG browser as default while enrolled.
  Prevents counting users that keep changing the default browser multiple times.
  If a user converts, the experiment permanently stops for them.
end note

DefaultBrowserPromptsDataStore::experimentStage -> ExperimentStage : returns

class DefaultBrowserPromptsDataStoreImpl {
  - val dataStore: DataStore<Preferences>
  - val dispatchers: DispatcherProvider
}

DefaultBrowserPromptsDataStore <|-- DefaultBrowserPromptsDataStoreImpl : implements

class DefaultBrowserPromptsExperimentStageAction as "(data class) DefaultBrowserPromptsExperimentStageAction" {
  + val showMessageDialog: Boolean
  + val showSetAsDefaultPopupMenuItem: Boolean
  + val highlightPopupMenu: Boolean
}

interface DefaultBrowserPromptsExperimentStageEvaluator {
  + val targetCohort: AdditionalPromptsCohortName
  + suspend fun evaluate(newStage: ExperimentStage): DefaultBrowserPromptsExperimentStageAction
}

DefaultBrowserPromptsExperimentStageEvaluator::targetCohort --> AdditionalPromptsCohortName : uses
DefaultBrowserPromptsExperimentStageEvaluator::evaluate --> ExperimentStage : accepts
DefaultBrowserPromptsExperimentStageEvaluator::evaluate --> DefaultBrowserPromptsExperimentStageAction : returns

note top of DefaultBrowserPromptsExperimentStageEvaluator
  For a given target cohort, the evaluator implementation returns actions that the experiment implementation should take next.
  These actions include showing dialogs, adding elements to the menu, etc.
  Evaluation only happens once per stage change, so it's up to the experiment impl to persist the state for actions like menu buttons/highlights,
  for example when a button should be present in the menu for as long as a given stage is active, including across app launches.
end note

class Variant2

DefaultBrowserPromptsExperimentStageEvaluator <|--- Variant2 : implements

note left of Variant2
  Stage 1: show a pop-up dialog.
  Stage 2: add an popup menu button and highlight the menu itself with a blue dot.
end note

class DefaultBrowserPromptsExperimentImpl {
  - val appCoroutineScope: CoroutineScope
  - val dispatchers: DispatcherProvider
  - val applicationContext: Context
  - val defaultBrowserPromptsFeatureToggles: DefaultBrowserPromptsFeatureToggles
  - val defaultBrowserDetector: DefaultBrowserDetector
  - val defaultRoleBrowserDialog: DefaultRoleBrowserDialog
  - val appDaysUsedRepository: AppDaysUsedRepository
  - val defaultBrowserPromptsDataStore: DefaultBrowserPromptsDataStore
  - val experimentStageEvaluatorPluginPoint: PluginPoint<DefaultBrowserPromptsExperimentStageEvaluator>
  - val pixelSender: PixelSender
  - val moshi: Moshi
}

MainProcessLifecycleObserver <|--- DefaultBrowserPromptsExperimentImpl : implements

DefaultBrowserPromptsExperiment <|-- DefaultBrowserPromptsExperimentImpl : implements

DefaultBrowserPromptsExperimentImpl::defaultBrowserPromptsDataStore --> DefaultBrowserPromptsDataStore : uses

DefaultBrowserPromptsExperimentImpl::defaultBrowserPromptsFeatureToggles --> DefaultBrowserPromptsFeatureToggles : uses

DefaultBrowserPromptsExperimentImpl::experimentStageEvaluatorPluginPoint ---> DefaultBrowserPromptsExperimentStageEvaluator : uses

note left of DefaultBrowserPromptsExperimentImpl::applicationContext
  Used to create intents.
end note

note left of DefaultBrowserPromptsExperimentImpl::defaultBrowserPromptsFeatureToggles
  Used to manage cohorts and enrolment.
end note

note left of DefaultBrowserPromptsExperimentImpl::defaultBrowserDetector
  Used to check if the browser is set as default.
end note

note left of DefaultBrowserPromptsExperimentImpl::defaultRoleBrowserDialog
  Used to generate the intent to open the system's
  default browser dialog.
end note

note left of DefaultBrowserPromptsExperimentImpl::appDaysUsedRepository
  Used to monitor the active use days.
end note

note left of DefaultBrowserPromptsExperimentImpl::defaultBrowserPromptsDataStore
  Used to persist the stage of the experiment.
end note

note left of DefaultBrowserPromptsExperimentImpl::experimentStageEvaluatorPluginPoint
  Used to inject the definitions of what each variant should do given the experiment's stage.
end note

note left of DefaultBrowserPromptsExperimentImpl::PixelSender
  Used to send pixels defined in [[https://app.asana.com/0/1208671518894266/1208774988133227/f this Asana task]].
end note

note left of DefaultBrowserPromptsExperimentImpl::moshi
  Used to parse feature settings from remote config.
end note

component BrowserViewModel
BrowserViewModel --> DefaultBrowserPromptsExperiment : uses
note top of BrowserViewModel
  Monitors the experiment to open the message dialog
  that encourages users to set the DDG app as default browser.
end note

component OmnibarLayoutViewModel
OmnibarLayoutViewModel --> DefaultBrowserPromptsExperiment : uses
note top of OmnibarLayoutViewModel
  Monitors the experiment to show
  a blue highlight dot next to popup menu's three-dots.
end note

component BrowserTabViewModel
BrowserTabViewModel --> DefaultBrowserPromptsExperiment : uses
note top of BrowserTabViewModel
  Monitors the experiment to add
  a popup menu item to set browser as default.
end note

@enduml