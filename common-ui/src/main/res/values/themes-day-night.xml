<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (c) 2021 DuckDuckGo
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources xmlns:tools="http://schemas.android.com/tools">

    <!-- We'll eventually migrate to this to rely on the platform day / night / system theming
    The platform theme layer allows us to account for API specific attributes.
    Using resource qualifiers, we can specify a different platform theme for different versions of Android. -->

    <style name="Platform.Theme.DuckDuckGo" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="android:statusBarColor" tools:ignore="NewApi">?attr/colorSurface</item>
        <item name="android:windowLightStatusBar" tools:ignore="NewApi">true</item>
        <item name="android:navigationBarColor" tools:ignore="NewApi">?android:attr/colorBackground</item>
        <item name="android:windowLightNavigationBar" tools:ignore="NewApi">true</item>
        <item name="android:navigationBarDividerColor" tools:ignore="NewApi">?attr/colorControlHighlight</item>
    </style>

    <!--  Our base theme, Base.Theme.DuckDuckGo,
    is where we override or define default styles for views and text appearance attributes. -->
    <style name="Base.Theme.DuckDuckGo" parent="Platform.Theme.DuckDuckGo">
        <!--Material type attributes-->
        <item name="textAppearanceHeadline1">@style/TextAppearance.DuckDuckGo.Headline1</item>
        <item name="textAppearanceHeadline2">@style/TextAppearance.DuckDuckGo.Headline2</item>
        <item name="textAppearanceHeadline3">@style/TextAppearance.DuckDuckGo.Headline3</item>
        <item name="textAppearanceHeadline4">@style/TextAppearance.DuckDuckGo.Headline4</item>
        <item name="textAppearanceHeadline5">@style/TextAppearance.DuckDuckGo.Headline5</item>
        <item name="textAppearanceBody1">@style/TextAppearance.DuckDuckGo.Body1</item>
        <item name="textAppearanceBody2">@style/TextAppearance.DuckDuckGo.Body2</item>
        <item name="textAppearanceButton">@style/TextAppearance.DuckDuckGo.Button1</item>
        <item name="textAppearanceButton1">@style/TextAppearance.DuckDuckGo.Button1</item>
        <item name="textAppearanceButton2">@style/TextAppearance.DuckDuckGo.Button2</item>
        <item name="textAppearanceCaption">@style/TextAppearance.DuckDuckGo.Caption</item>

        <!--Component styles-->
        <item name="bottomSheetDialogTheme">@style/Widget.DuckDuckGo.BottomSheetDialog</item>
        <item name="actionOverflowMenuStyle">@style/PopUpOverflowMenu</item>
        <item name="snackbarButtonStyle">@style/Widget.DuckDuckGo.Snackbar</item>
        <item name="autoCompleteTextViewStyle">@style/Widget.DuckDuckGo.AutoCompleteTextView</item>
        <item name="materialAlertDialogTheme">@style/ThemeOverlay.MaterialComponents.Dialog.Alert</item>
        <item name="toolbarStyle">@style/Widget.MaterialComponents.Toolbar.Surface</item>
    </style>

    <!-- The app theme will mostly contain values for colour attributes -->
    <style name="Theme.DuckDuckGo" parent="Base.Theme.DuckDuckGo">
        <!--Material color attributes (light theme) -->
        <!--colorPrimary colors map to components and elements, such as app bars and buttons. -->
        <!--colorSecondary colors are most often used as accents on components, such as FABs and -->
        <!--selection controls.-->
        <item name="colorPrimary">@color/cornflowerBlue</item>
        <item name="colorPrimaryVariant">@color/cornflowerBlue</item>
        <item name="colorSecondary">@color/cornflowerBlue</item>
        <item name="colorSecondaryVariant">@color/cornflowerBlue</item>
        <!--colorBackground appears behind scrollable content and is used for the default window-->
        <!--background. colorSurface is mapped to the surface of components such as cards, sheets-->
        <!--and menus. colorError is used to indicate an error state for components such as-->
        <!--text fields.-->
        <item name="android:colorBackground">@color/white</item>
        <item name="colorSurface">@color/white</item>
        <item name="colorError">@color/red</item>
        <!--"On" colors define how text, icons and strokes are colored in relation to the surface-->
        <!--on which they appear.-->
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorOnSecondary">@color/brownishGrayTwo</item>
        <item name="colorOnBackground">@color/brownishGrayTwo</item>
        <item name="colorOnSurface">@color/almostBlackDark</item>
        <item name="colorOnError">@color/white</item>
    </style>

</resources>
